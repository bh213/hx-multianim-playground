// Generated by Haxe 4.3.6
(function ($hx_exports, $global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
var h3d_IDrawable = function() { };
$hxClasses["h3d.IDrawable"] = h3d_IDrawable;
h3d_IDrawable.__name__ = "h3d.IDrawable";
h3d_IDrawable.__isInterface__ = true;
var hxd_App = function() {
	var _gthis = this;
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.engine = engine;
		engine.onReady = $bind(this,this.setup);
		haxe_Timer.delay($bind(this,this.setup),0);
	} else {
		hxd_System.start(function() {
			engine = new h3d_Engine();
			_gthis.engine = engine;
			engine.onReady = $bind(_gthis,_gthis.setup);
			engine.init();
		});
	}
};
$hxClasses["hxd.App"] = hxd_App;
hxd_App.__name__ = "hxd.App";
hxd_App.__interfaces__ = [h3d_IDrawable];
hxd_App.staticHandler = function() {
};
hxd_App.prototype = {
	onResize: function() {
	}
	,onContextLost: function() {
		if(this.s3d != null) {
			this.s3d.onContextLost();
		}
	}
	,render: function(e) {
		this.s3d.render(e);
		this.s2d.render(e);
	}
	,mark: function(name) {
		this.s3d.mark(name);
	}
	,setup: function() {
		var _gthis = this;
		var initDone = false;
		this.engine.onReady = hxd_App.staticHandler;
		this.engine.onContextLost = $bind(this,this.onContextLost);
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			if(initDone) {
				_gthis.onResize();
			}
		};
		this.s3d = new h3d_scene_Scene();
		this.s2d = new h2d_Scene();
		this.s2d.mark = $bind(this,this.mark);
		this.sevents = new hxd_SceneEvents();
		this.sevents.addScene(this.s2d);
		this.sevents.addScene(this.s3d);
		this.loadAssets(function() {
			initDone = true;
			_gthis.init();
			hxd_Timer.skip();
			_gthis.mainLoop();
			hxd_System.setLoop($bind(_gthis,_gthis.mainLoop));
			hxd_Key.initialize();
		});
	}
	,loadAssets: function(onLoaded) {
		onLoaded();
	}
	,init: function() {
	}
	,mainLoop: function() {
		hxd_Timer.update();
		this.sevents.checkEvents();
		if(this.isDisposed) {
			return;
		}
		this.update(hxd_Timer.dt);
		if(this.isDisposed) {
			return;
		}
		var dt = hxd_Timer.dt;
		if(this.s2d != null) {
			this.s2d.setElapsedTime(dt);
		}
		if(this.s3d != null) {
			this.s3d.setElapsedTime(dt);
		}
		this.engine.render(this);
	}
	,update: function(dt) {
	}
	,__class__: hxd_App
};
var Main = $hx_exports["PlaygroundMain"] = function() {
	hxd_App.call(this);
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.createJSLoader = function() {
	var loader = new bh_base_CachingResourceLoader();
	var isManimOrAnim = function(filename) {
		if(!StringTools.endsWith(filename,".manim")) {
			return StringTools.endsWith(filename,".anim");
		} else {
			return true;
		}
	};
	loader.loadSheet2Impl = function(sheetName) {
		var resourceName = "" + sheetName + ".atlas2";
		if(isManimOrAnim(resourceName)) {
			try {
				var bytes = FileLoader.load(resourceName);
				var resource = hxd_res_Any.fromBytes(resourceName,haxe_io_Bytes.ofData(bytes));
				return bh_base_Atlas2.toAtlas2(resource);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				if(hxd_Res.get_loader().exists(resourceName)) {
					return bh_base_Atlas2.toAtlas2(hxd_Res.load(resourceName));
				} else {
					throw haxe_Exception.thrown(e);
				}
			}
		} else if(hxd_Res.get_loader().exists(resourceName)) {
			return bh_base_Atlas2.toAtlas2(hxd_Res.load(resourceName));
		} else {
			try {
				var bytes = FileLoader.load(resourceName);
				var resource = hxd_res_Any.fromBytes(resourceName,haxe_io_Bytes.ofData(bytes));
				return bh_base_Atlas2.toAtlas2(resource);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				throw haxe_Exception.thrown(e);
			}
		}
	};
	loader.loadSheetImpl = function(sheetName) {
		var resourceName = "" + sheetName + ".atlas";
		if(isManimOrAnim(resourceName)) {
			try {
				var bytes = FileLoader.load(resourceName);
				var resource = hxd_res_Any.fromBytes(resourceName,haxe_io_Bytes.ofData(bytes));
				return resource.to(hxd_res_Atlas);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				if(hxd_Res.get_loader().exists(resourceName)) {
					return hxd_Res.get_loader().loadCache(resourceName,hxd_res_Atlas);
				} else {
					throw haxe_Exception.thrown(e);
				}
			}
		} else if(hxd_Res.get_loader().exists(resourceName)) {
			return hxd_Res.get_loader().loadCache(resourceName,hxd_res_Atlas);
		} else {
			try {
				var bytes = FileLoader.load(resourceName);
				var resource = hxd_res_Any.fromBytes(resourceName,haxe_io_Bytes.ofData(bytes));
				return resource.to(hxd_res_Atlas);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				throw haxe_Exception.thrown(e);
			}
		}
	};
	loader.loadHXDResourceImpl = function(filename) {
		if(isManimOrAnim(filename)) {
			try {
				var bytes = FileLoader.load(filename);
				return hxd_res_Any.fromBytes(filename,haxe_io_Bytes.ofData(bytes));
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				if(hxd_Res.get_loader().exists(filename)) {
					return hxd_Res.load(filename);
				} else {
					throw haxe_Exception.thrown(e);
				}
			}
		} else if(hxd_Res.get_loader().exists(filename)) {
			return hxd_Res.load(filename);
		} else {
			try {
				var bytes = FileLoader.load(filename);
				return hxd_res_Any.fromBytes(filename,haxe_io_Bytes.ofData(bytes));
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				throw haxe_Exception.thrown(e);
			}
		}
	};
	loader.loadAnimSMImpl = function(filename) {
		if(isManimOrAnim(filename)) {
			try {
				var bytes = FileLoader.load(filename);
				var byteData = haxe_io_Bytes.ofData(bytes);
				return bh_stateanim_AnimParser.parseFile(byteData,loader);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				throw haxe_Exception.thrown("loadAnimSMImpl failed for filename: " + filename + " - " + Std.string(e));
			}
		} else if(hxd_Res.get_loader().exists(filename)) {
			var resource = hxd_Res.load(filename);
			var byteData = resource.entry.getBytes();
			return bh_stateanim_AnimParser.parseFile(byteData,loader);
		} else {
			try {
				var bytes = FileLoader.load(filename);
				var byteData = haxe_io_Bytes.ofData(bytes);
				return bh_stateanim_AnimParser.parseFile(byteData,loader);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				throw haxe_Exception.thrown("loadAnimSMImpl failed for filename: " + filename + " - " + Std.string(e));
			}
		}
	};
	loader.loadFontImpl = function(filename) {
		return bh_base_FontManager.getFontByName(filename);
	};
	loader.loadMultiAnimImpl = function(s) {
		if(isManimOrAnim(s)) {
			try {
				var bytes = FileLoader.load(s);
				var byteData = haxe_io_Bytes.ofData(bytes);
				return bh_multianim_MultiAnimBuilder.load(byteData,loader,s);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				if(hxd_Res.get_loader().exists(s)) {
					var r = hxd_Res.load(s);
					if(r == null) {
						throw haxe_Exception.thrown("failed to load multianim " + s);
					}
					var byteData = r.entry.getBytes();
					return bh_multianim_MultiAnimBuilder.load(byteData,loader,s);
				} else {
					throw haxe_Exception.thrown(e);
				}
			}
		} else if(hxd_Res.get_loader().exists(s)) {
			var r = hxd_Res.load(s);
			if(r == null) {
				throw haxe_Exception.thrown("failed to load multianim " + s);
			}
			var byteData = r.entry.getBytes();
			return bh_multianim_MultiAnimBuilder.load(byteData,loader,s);
		} else {
			try {
				var bytes = FileLoader.load(s);
				var byteData = haxe_io_Bytes.ofData(bytes);
				return bh_multianim_MultiAnimBuilder.load(byteData,loader,s);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				throw haxe_Exception.thrown(e);
			}
		}
	};
	loader.loadTileImpl = function(filename) {
		if(isManimOrAnim(filename)) {
			try {
				var bytes = FileLoader.load(filename);
				var resource = hxd_res_Any.fromBytes(filename,haxe_io_Bytes.ofData(bytes));
				return resource.toTile();
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				if(hxd_Res.get_loader().exists(filename)) {
					return hxd_Res.load(filename).toTile();
				} else {
					throw haxe_Exception.thrown(e);
				}
			}
		} else if(hxd_Res.get_loader().exists(filename)) {
			return hxd_Res.load(filename).toTile();
		} else {
			try {
				var bytes = FileLoader.load(filename);
				var resource = hxd_res_Any.fromBytes(filename,haxe_io_Bytes.ofData(bytes));
				return resource.toTile();
			} catch( _g ) {
				var e = haxe_Exception.caught(_g);
				throw haxe_Exception.thrown(e);
			}
		}
	};
	return loader;
};
Main.main = function() {
	Main.instance = new Main();
};
Main.__super__ = hxd_App;
Main.prototype = $extend(hxd_App.prototype,{
	getFont: function() {
		return hxd_res_DefaultFont.get();
	}
	,error: function(text) {
		var _this = this.errorText;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		this.errorText.set_text(text);
		this.s2d.add(this.errorText,100);
		var _this = this.errorText;
		_this.posChanged = true;
		_this.x = 30;
		_this.posChanged = true;
		_this.y = 30;
	}
	,reload: function(screen) {
		haxe_Log.trace("haxe Reloading with screen: " + screen,{ fileName : "src/Main.hx", lineNumber : 37, className : "Main", methodName : "reload"});
		var res = this.screenManager.reload(null,false);
		if(!res.success) {
			haxe_Log.trace("error loading main: " + res.error,{ fileName : "src/Main.hx", lineNumber : 41, className : "Main", methodName : "reload"});
			this.error("Error loading screen: " + res.error);
			return res;
		}
		var _this = this.errorText;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		var tmp = screen;
		this.screenManager.updateScreenMode(bh_ui_screens__$ScreenManager_ScreenManagerMode.Single(this.screenManager.getScreen(tmp != null ? tmp : "particles")));
		return res;
	}
	,init: function() {
		var _gthis = this;
		hxd_Res.set_loader(new hxd_res_Loader(new hxd_fs_EmbedFileSystem(haxe_Unserializer.run("oy10:button.pngty16:crew-palette.pngty9:ui.atlas2ty9:fx.atlas2ty3:pngoy12:Wall_060.pngty15:WallBase_03.pngty12:Wall_240.pngty13:Panel_240.pngty14:Corner_270.pngty14:Corner_150.pngty14:Corner_090.pngty13:Ground_02.pngty14:Corner_030.pngty13:Panel_000.pngty28:BattleZone_01_Foreground.pngty15:WallBase_02.pngty13:Panel_060.pngty13:Panel_300.pngty13:Panel_120.pngty12:Wall_300.pngty12:Wall_120.pngty14:Corner_330.pngty13:Panel_180.pngty14:Corner_210.pngty24:BattleZone_01_Ground.pngty12:Wall_000.pngty13:Ground_03.pngty12:Wall_180.pngtgy8:fx-0.pngty18:damage-palette.pngty11:crew2-0.pngty16:main-palette.pngty8:ui-0.pngty5:fontsoy13:pixeled-6.fntty8:m5x7.fntty12:kreon_30.fntty15:cnc_inet_12.fntty15:pixeled-6_0.pngty17:exo2_black_30.fntty16:open_sans_30.pngty9:m6x11.pngty18:digitaldisco_0.pngty18:exo2_light_301.pngty18:exo2_light_302.pngty22:code_7x5_regular_6.pngty21:digitaldisco-thin.fntty11:exo2_30.pngty22:code_7x5_regular_6.fntty8:m3x6.pngty17:exo2_light_30.fntty17:exo2_black_30.pngty9:m6x11.fntty17:cnc_inet_12_0.pngty11:exo2_30.fntty21:digitaldisco-thin.pngty23:digitaldisco-thin_0.pngty12:kreon_30.pngty13:pixellari.pngty17:exo2_light_30.pngty16:digitaldisco.pngty8:m3x6.fntty16:open_sans_30.fntty16:digitaldisco.fntty8:m5x7.pngty13:pixellari.fnttgy12:crew2.atlas2tg"))));
		bh_base_FontManager.registerFont("default",hxd_res_DefaultFont.get());
		bh_base_FontManager.registerFont("m3x6",hxd_Res.get_loader().loadCache("fonts/m3x6.fnt",hxd_res_BitmapFont).toFont());
		bh_base_FontManager.registerFont("pixeled6",hxd_Res.get_loader().loadCache("fonts/pixeled-6.fnt",hxd_res_BitmapFont).toFont());
		bh_base_FontManager.registerFont("cnc_inet_12",hxd_Res.get_loader().loadCache("fonts/cnc_inet_12.fnt",hxd_res_BitmapFont).toFont());
		bh_base_FontManager.registerFont("m5x7",hxd_Res.get_loader().loadCache("fonts/m5x7.fnt",hxd_res_BitmapFont).toFont());
		bh_base_FontManager.registerFont("f7x5",hxd_Res.get_loader().loadCache("fonts/code_7x5_regular_6.fnt",hxd_res_BitmapFont).toFont());
		bh_base_FontManager.registerFont("m6x11",hxd_Res.get_loader().loadCache("fonts/m6x11.fnt",hxd_res_BitmapFont).toFont());
		bh_base_FontManager.registerFont("dd_thin",hxd_Res.get_loader().loadCache("fonts/digitaldisco-thin.fnt",hxd_res_BitmapFont).toFont());
		bh_base_FontManager.registerFont("dd",hxd_Res.get_loader().loadCache("fonts/digitaldisco.fnt",hxd_res_BitmapFont).toFont());
		bh_base_FontManager.registerFont("pixellari",hxd_Res.get_loader().loadCache("fonts/pixellari.fnt",hxd_res_BitmapFont).toFont());
		bh_base_FontManager.registerFont("kreon_12",hxd_Res.get_loader().loadCache("fonts/kreon_30.fnt",hxd_res_BitmapFont).toSdfFont(12,3,0.5,0.1));
		bh_base_FontManager.registerFont("kreon_16",hxd_Res.get_loader().loadCache("fonts/kreon_30.fnt",hxd_res_BitmapFont).toSdfFont(16,3,0.5,0.1));
		bh_base_FontManager.registerFont("kreon_24",hxd_Res.get_loader().loadCache("fonts/kreon_30.fnt",hxd_res_BitmapFont).toSdfFont(24,3,0.5,0.1));
		bh_base_FontManager.registerFont("kreon_30",hxd_Res.get_loader().loadCache("fonts/kreon_30.fnt",hxd_res_BitmapFont).toSdfFont(30,3,0.55,0.1));
		bh_base_FontManager.registerFont("exo2_14",hxd_Res.get_loader().loadCache("fonts/exo2_30.fnt",hxd_res_BitmapFont).toSdfFont(14,3,0.5,0.0625));
		bh_base_FontManager.registerFont("exo2_16",hxd_Res.get_loader().loadCache("fonts/exo2_30.fnt",hxd_res_BitmapFont).toSdfFont(16,3,0.5,0.0625));
		bh_base_FontManager.registerFont("exo2_20",hxd_Res.get_loader().loadCache("fonts/exo2_30.fnt",hxd_res_BitmapFont).toSdfFont(20,3,0.5,0.0625));
		bh_base_FontManager.registerFont("exo2_30",hxd_Res.get_loader().loadCache("fonts/exo2_30.fnt",hxd_res_BitmapFont).toSdfFont(30,3,0.5,0.0625));
		bh_base_FontManager.registerFont("exo2_light_12",hxd_Res.get_loader().loadCache("fonts/exo2_light_30.fnt",hxd_res_BitmapFont).toSdfFont(12,3,0.5,0.1));
		bh_base_FontManager.registerFont("exo2_light_14",hxd_Res.get_loader().loadCache("fonts/exo2_light_30.fnt",hxd_res_BitmapFont).toSdfFont(14,3,0.5,0.1));
		bh_base_FontManager.registerFont("exo2_light_20",hxd_Res.get_loader().loadCache("fonts/exo2_light_30.fnt",hxd_res_BitmapFont).toSdfFont(20,3,0.5,0.05));
		bh_base_FontManager.registerFont("exo2_light_30",hxd_Res.get_loader().loadCache("fonts/exo2_light_30.fnt",hxd_res_BitmapFont).toSdfFont(30,3,0.5,0.05));
		bh_base_FontManager.registerFont("exo2_black_12",hxd_Res.get_loader().loadCache("fonts/exo2_black_30.fnt",hxd_res_BitmapFont).toSdfFont(12,3,0.5,0.1));
		bh_base_FontManager.registerFont("exo2_black_16",hxd_Res.get_loader().loadCache("fonts/exo2_black_30.fnt",hxd_res_BitmapFont).toSdfFont(16,3,0.5,0.1));
		bh_base_FontManager.registerFont("exo2_black_20",hxd_Res.get_loader().loadCache("fonts/exo2_black_30.fnt",hxd_res_BitmapFont).toSdfFont(20,3,0.5,0.1));
		bh_base_FontManager.registerFont("exo2_black_30",hxd_Res.get_loader().loadCache("fonts/exo2_black_30.fnt",hxd_res_BitmapFont).toSdfFont(30,3,0.5,0.1));
		bh_base_FontManager.registerFont("open_sans_12",hxd_Res.get_loader().loadCache("fonts/open_sans_30.fnt",hxd_res_BitmapFont).toSdfFont(12,3,0.45,0.1));
		bh_base_FontManager.registerFont("open_sans_16",hxd_Res.get_loader().loadCache("fonts/open_sans_30.fnt",hxd_res_BitmapFont).toSdfFont(16,3,0.45,0.1));
		bh_base_FontManager.registerFont("open_sans_20",hxd_Res.get_loader().loadCache("fonts/open_sans_30.fnt",hxd_res_BitmapFont).toSdfFont(20,3,0.45,0.1));
		bh_base_FontManager.registerFont("open_sans_30",hxd_Res.get_loader().loadCache("fonts/open_sans_30.fnt",hxd_res_BitmapFont).toSdfFont(30,3,0.45,0.1));
		this.errorText = new h2d_Text(this.getFont());
		this.errorText.set_textColor(-32640);
		var _this = this.errorText;
		_this.posChanged = true;
		_this.scaleX = 2;
		_this.posChanged = true;
		_this.scaleY = 2;
		this.errorText.set_maxWidth(640.);
		this.errorText.dropShadow = { dx : 1, dy : 1, alpha : 0.5, color : 0};
		this.screenManager = new bh_ui_screens_ScreenManager(this,Main.createJSLoader());
		this.screenManager.onReload = function(res) {
			if(_gthis.errorText != null) {
				var _this = _gthis.errorText;
				if(_this != null && _this.parent != null) {
					_this.parent.removeChild(_this);
				}
			}
		};
		this.screenManager.addScreen("components",new screens_ComponentsTestScreen(this.screenManager));
		this.screenManager.addScreen("slider",new screens_SliderTestScreen(this.screenManager));
		this.screenManager.addScreen("checkbox",new screens_CheckboxTestScreen(this.screenManager));
		this.screenManager.addScreen("button",new screens_ButtonTestScreen(this.screenManager));
		this.screenManager.addScreen("room1",new screens_Room1Screen(this.screenManager));
		this.screenManager.addScreen("examples1",new screens_Examples1Screen(this.screenManager));
		this.screenManager.addScreen("paths",new screens_PathsScreen(this.screenManager));
		this.screenManager.addScreen("particles",new screens_ParticlesScreen(this.screenManager));
		this.screenManager.addScreen("fonts",new screens_FontsScreen(this.screenManager));
		var $window = hxd_Window.getInstance();
		$window.set_displayMode(hxd_DisplayMode.Windowed);
		this.s2d.set_scaleMode(h2d_ScaleMode.AutoZoom(1280,720,true));
		$window.resize(1280,720);
		$window.addEventTarget(function(event) {
			if(event.kind._hx_index == 8) {
				if(event.keyCode != 81) {
					if(event.keyCode == 82) {
						_gthis.reload();
					}
				}
			}
		});
		this.engine.backgroundColor = 5271632;
		this.reload(Main.defaultScreen);
	}
	,update: function(dt) {
		hxd_App.prototype.update.call(this,dt);
		this.screenManager.update(dt);
	}
	,__class__: Main
});
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c;
	var _g = e.__constructs__[index];
	if(_g == null) {
		c = null;
	} else {
		var ctor = _g;
		c = ctor._hx_name;
	}
	if(c == null) {
		throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var params = enm.__constructs__[a._hx_index].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var params = enm.__constructs__[e._hx_index].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.attributeMap.h);
	}
	,iterator: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_iterators_ArrayIterator(this.children);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var hxd_res_Resource = function(entry) {
	this.entry = entry;
};
$hxClasses["hxd.res.Resource"] = hxd_res_Resource;
hxd_res_Resource.__name__ = "hxd.res.Resource";
hxd_res_Resource.prototype = {
	toString: function() {
		return this.entry.get_path();
	}
	,watch: function(onChanged) {
		if(hxd_res_Resource.LIVE_UPDATE) {
			this.entry.watch(onChanged);
		}
	}
	,__class__: hxd_res_Resource
};
var bh_base_Atlas2 = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["bh.base.Atlas2"] = bh_base_Atlas2;
bh_base_Atlas2.__name__ = "bh.base.Atlas2";
bh_base_Atlas2.toAtlas2 = function(resource) {
	return hxd_Res.get_loader().loadCache(resource.entry.get_path(),bh_base_Atlas2);
};
bh_base_Atlas2.__super__ = hxd_res_Resource;
bh_base_Atlas2.prototype = $extend(hxd_res_Resource.prototype,{
	toAnimationFrame: function(content) {
		return new bh_stateanim_AnimationFrame(content.t,0,content.offsetX,content.offsetY,content.width,content.height);
	}
	,get: function(name) {
		var c = this.getContents().h[name];
		if(c == null) {
			return null;
		}
		var t = c[0];
		if(t == null) {
			return null;
		}
		return this.toAnimationFrame(t);
	}
	,getNinePatch: function(name) {
		var c = this.getContents().h[name];
		if(c == null) {
			return null;
		}
		var t = c[0];
		if(t == null) {
			return null;
		}
		var splitLen = t.split.length;
		if(splitLen > 0) {
			if(splitLen != 4) {
				throw haxe_Exception.thrown("" + name + " has invalid 9-patch: " + Std.string(t.split));
			}
			return new h2d_ScaleGrid(t.t,t.split[0],t.split[2],t.split[1],t.split[3]);
		}
		throw haxe_Exception.thrown("" + name + " is not a 9-patch");
	}
	,getAnim: function(name) {
		if(name == null) {
			var h = this.getContents().h;
			var cont_h = h;
			var cont_keys = Object.keys(h);
			var cont_length = cont_keys.length;
			var cont_current = 0;
			name = cont_keys[cont_current++];
			if(cont_current < cont_length) {
				throw haxe_Exception.thrown("Altas has several items in it " + Std.string(Lambda.array(this.contents)));
			}
		}
		var c = this.getContents().h[name];
		if(c == null) {
			return null;
		}
		var _g = [];
		var _g1 = 0;
		while(_g1 < c.length) {
			var t = c[_g1];
			++_g1;
			if(t == null) {
				_g.push(null);
			} else {
				_g.push(this.toAnimationFrame(t));
			}
		}
		return _g;
	}
	,getContents: function() {
		if(this.contents != null) {
			return this.contents;
		}
		this.contents = new haxe_ds_StringMap();
		var lines = this.entry.getText().split("\n");
		var basePath = this.entry.get_path().split("/");
		basePath.pop();
		var basePath1 = basePath.join("/");
		if(basePath1.length > 0) {
			basePath1 += "/";
		}
		while(lines.length > 0) {
			var line = StringTools.trim(lines.shift());
			if(line == "") {
				continue;
			}
			var tileFilename = basePath1 + line;
			var tileFile = hxd_res_Loader.currentInstance.load(tileFilename).toTile();
			while(lines.length > 0) {
				if(lines[0].indexOf(":") < 0) {
					break;
				}
				var line1 = StringTools.trim(lines.shift()).split(": ");
				if(line1[0] == "size") {
					var wh = line1[1].split(",");
					var parsedWidth = Std.parseInt(wh[0]);
					var parsedHeight = Std.parseInt(wh[1]);
					if(parsedWidth != tileFile.width || parsedHeight != tileFile.height) {
						throw haxe_Exception.thrown("file " + tileFilename + " does not match");
					}
				}
			}
			while(lines.length > 0) {
				var line2 = StringTools.trim(lines.shift());
				if(line2 == "") {
					break;
				}
				var prop = line2.split(": ");
				if(prop.length > 1) {
					continue;
				}
				var key = line2;
				var tileX = 0;
				var tileY = 0;
				var tileW = 0;
				var tileH = 0;
				var origW = 0;
				var origH = 0;
				var index = 0;
				var offsetX = 0;
				var offsetY = 0;
				var split = [];
				while(lines.length > 0) {
					var line3 = StringTools.trim(lines.shift());
					var prop1 = line3.split(": ");
					if(prop1.length == 1) {
						lines.unshift(line3);
						break;
					}
					var v = prop1[1];
					switch(prop1[0]) {
					case "index":
						index = Std.parseInt(v);
						if(index < 0) {
							index = 0;
						}
						break;
					case "offset":
						var vals = v.split(", ");
						offsetX = Std.parseInt(vals[0]);
						offsetY = Std.parseInt(vals[1]);
						break;
					case "orig":
						var vals1 = v.split(", ");
						origW = Std.parseInt(vals1[0]);
						origH = Std.parseInt(vals1[1]);
						break;
					case "rotate":
						if(v == "true") {
							throw haxe_Exception.thrown("Rotation not supported in atlas");
						}
						break;
					case "size":
						var vals2 = v.split(", ");
						tileW = Std.parseInt(vals2[0]);
						tileH = Std.parseInt(vals2[1]);
						break;
					case "split":
						var _this = v.split(", ");
						var result = new Array(_this.length);
						var _g = 0;
						var _g1 = _this.length;
						while(_g < _g1) {
							var i = _g++;
							var x = _this[i];
							var num = Std.parseInt(x);
							if(num == null) {
								throw haxe_Exception.thrown("not a number " + x);
							}
							result[i] = js_Boot.__cast(num , Int);
						}
						split = result;
						break;
					case "xy":
						var vals3 = v.split(", ");
						tileX = Std.parseInt(vals3[0]);
						tileY = Std.parseInt(vals3[1]);
						break;
					default:
						haxe_Log.trace("Unknown prop " + prop1[0],{ fileName : "bh/base/Atlas2.hx", lineNumber : 135, className : "bh.base.Atlas2", methodName : "getContents"});
					}
				}
				var t = tileFile.sub(tileX,tileY,tileW,tileH,0,0);
				var tl = this.contents.h[key];
				if(tl == null) {
					tl = [];
					this.contents.h[key] = tl;
				}
				tl[index] = { t : t, width : origW, height : origH, offsetX : offsetX, offsetY : offsetY, split : split};
			}
		}
		var h = this.contents.h;
		var tl_h = h;
		var tl_keys = Object.keys(h);
		var tl_length = tl_keys.length;
		var tl_current = 0;
		while(tl_current < tl_length) {
			var tl = tl_h[tl_keys[tl_current++]];
			if(tl.length > 1 && tl[0] == null) {
				tl.shift();
			}
		}
		return this.contents;
	}
	,__class__: bh_base_Atlas2
});
var bh_base_FPoint = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["bh.base.FPoint"] = bh_base_FPoint;
bh_base_FPoint.__name__ = "bh.base.FPoint";
bh_base_FPoint.prototype = {
	toPoint: function() {
		return new bh_base_Point(Math.round(this.x),Math.round(this.y));
	}
	,toString: function() {
		return "" + this.x + ", " + this.y;
	}
	,__class__: bh_base_FPoint
};
var bh_base_FontManager = function() { };
$hxClasses["bh.base.FontManager"] = bh_base_FontManager;
bh_base_FontManager.__name__ = "bh.base.FontManager";
bh_base_FontManager.registerFont = function(name,font) {
	var lowerName = name.toLowerCase();
	if(Object.prototype.hasOwnProperty.call(bh_base_FontManager.fontRegistry.h,lowerName)) {
		throw haxe_Exception.thrown("Font \"" + name + "\" is already registered. Use a different name or unregister the existing font first.");
	}
	bh_base_FontManager.fontRegistry.h[lowerName] = font;
};
bh_base_FontManager.getFontByName = function(name) {
	var font = bh_base_FontManager.fontRegistry.h[name.toLowerCase()];
	if(font == null) {
		throw haxe_Exception.thrown("Font not found: " + name + ". Make sure to register the font first using registerFont().");
	}
	return font;
};
bh_base_FontManager.getRegisteredFontNames = function() {
	var _g = [];
	var h = bh_base_FontManager.fontRegistry.h;
	var k_h = h;
	var k_keys = Object.keys(h);
	var k_length = k_keys.length;
	var k_current = 0;
	while(k_current < k_length) {
		var k = k_keys[k_current++];
		_g.push(k);
	}
	var keys = _g;
	keys.sort(function(a,b) {
		if(a < b) {
			return -1;
		} else {
			return 1;
		}
	});
	return keys;
};
var bh_base_Hex = function(q,r,s) {
	this.q = q;
	this.r = r;
	this.s = s;
	if(q + r + s != 0) {
		throw haxe_Exception.thrown("q + r + s must be 0");
	}
};
$hxClasses["bh.base.Hex"] = bh_base_Hex;
bh_base_Hex.__name__ = "bh.base.Hex";
bh_base_Hex.prototype = {
	__class__: bh_base_Hex
};
var bh_base_HexOrientation = $hxEnums["bh.base.HexOrientation"] = { __ename__:true,__constructs__:null
	,POINTY: {_hx_name:"POINTY",_hx_index:0,__enum__:"bh.base.HexOrientation",toString:$estr}
	,FLAT: {_hx_name:"FLAT",_hx_index:1,__enum__:"bh.base.HexOrientation",toString:$estr}
};
bh_base_HexOrientation.__constructs__ = [bh_base_HexOrientation.POINTY,bh_base_HexOrientation.FLAT];
bh_base_HexOrientation.__empty_constructs__ = [bh_base_HexOrientation.POINTY,bh_base_HexOrientation.FLAT];
var bh_base_HexOrientationData = function(f0,f1,f2,f3,b0,b1,b2,b3,start_angle) {
	this.f0 = f0;
	this.f1 = f1;
	this.f2 = f2;
	this.f3 = f3;
	this.b0 = b0;
	this.b1 = b1;
	this.b2 = b2;
	this.b3 = b3;
	this.start_angle = start_angle;
};
$hxClasses["bh.base.HexOrientationData"] = bh_base_HexOrientationData;
bh_base_HexOrientationData.__name__ = "bh.base.HexOrientationData";
bh_base_HexOrientationData.prototype = {
	__class__: bh_base_HexOrientationData
};
var bh_base_HexLayout = function(orientation,size,origin) {
	this.orientation = orientation;
	switch(this.orientation._hx_index) {
	case 0:
		this.orientationData = bh_base_HexLayout.pointy;
		break;
	case 1:
		this.orientationData = bh_base_HexLayout.flat;
		break;
	}
	this.size = size;
	this.origin = origin;
};
$hxClasses["bh.base.HexLayout"] = bh_base_HexLayout;
bh_base_HexLayout.__name__ = "bh.base.HexLayout";
bh_base_HexLayout.prototype = {
	hexToPixel: function(h) {
		var x = (this.orientationData.f0 * h.q + this.orientationData.f1 * h.r) * this.size.x;
		var y = (this.orientationData.f2 * h.q + this.orientationData.f3 * h.r) * this.size.y;
		var x1 = x + this.origin.x;
		var y1 = y + this.origin.y;
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		return new h2d_col_PointImpl(x1,y1);
	}
	,hexCornerOffset: function(corner,towardsCenter) {
		if(towardsCenter == null) {
			towardsCenter = 1.0;
		}
		var angle = 2.0 * Math.PI * (this.orientationData.start_angle - corner) / 6.0;
		var x = this.size.x * Math.cos(angle) * towardsCenter;
		var y = this.size.y * Math.sin(angle) * towardsCenter;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,polygonCorner: function(h,corner,towardCenter) {
		if(towardCenter == null) {
			towardCenter = 1.0;
		}
		var center = this.hexToPixel(h);
		var offset = this.hexCornerOffset(corner);
		var x = center.x + towardCenter * offset.x;
		var y = center.y + towardCenter * offset.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,polygonEdge: function(h,corner,towardCenter) {
		if(towardCenter == null) {
			towardCenter = 1.0;
		}
		var center = this.hexToPixel(h);
		var o1 = this.hexCornerOffset(corner);
		var o2 = this.hexCornerOffset(corner + 1);
		var x = (o1.x + o2.x) / 2;
		var y = (o1.y + o2.y) / 2;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var edge_x = x1;
		var edge_y = y1;
		edge_x *= towardCenter;
		edge_y *= towardCenter;
		var x = center.x + edge_x;
		var y = center.y + edge_y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h2d_col_PointImpl(x,y);
	}
	,__class__: bh_base_HexLayout
};
var bh_base_MultiAnimObjectData = $hxEnums["bh.base.MultiAnimObjectData"] = { __ename__:true,__constructs__:null
	,MAInteractive: ($_=function(width,height,identifier) { return {_hx_index:0,width:width,height:height,identifier:identifier,__enum__:"bh.base.MultiAnimObjectData",toString:$estr}; },$_._hx_name="MAInteractive",$_.__params__ = ["width","height","identifier"],$_)
};
bh_base_MultiAnimObjectData.__constructs__ = [bh_base_MultiAnimObjectData.MAInteractive];
bh_base_MultiAnimObjectData.__empty_constructs__ = [];
var h2d_col_PointImpl = function(x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["h2d.col.PointImpl"] = h2d_col_PointImpl;
h2d_col_PointImpl.__name__ = "h2d.col.PointImpl";
h2d_col_PointImpl.prototype = {
	__class__: h2d_col_PointImpl
};
var h2d_Object = function(parent) {
	this.blendMode = h2d_BlendMode.Alpha;
	this.alpha = 1.;
	this.visible = true;
	this.rotation = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	this.matA = 1;
	this.matB = 0;
	this.matC = 0;
	this.matD = 1;
	this.absX = 0;
	this.absY = 0;
	this.posChanged = parent != null;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h2d.Object"] = h2d_Object;
h2d_Object.__name__ = "h2d.Object";
h2d_Object.prototype = {
	getBounds: function(relativeTo,out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		if(relativeTo != null) {
			relativeTo.syncPos();
		}
		if(relativeTo != this) {
			this.syncPos();
		}
		this.getBoundsRec(relativeTo,out,false);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(relativeTo,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		return out;
	}
	,set_filter: function(f) {
		if(this.filter != null && this.allocated) {
			this.filter.unbind(this);
		}
		this.filter = f;
		if(f != null && this.allocated) {
			f.bind(this);
		}
		return f;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		var n = this.children.length;
		if(n == 0) {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
			return;
		}
		if(n == 1) {
			var c = this.children[0];
			if(c.visible) {
				c.getBoundsRec(relativeTo,out,forSize);
			} else {
				out.xMin = 1e20;
				out.yMin = 1e20;
				out.xMax = -1e20;
				out.yMax = -1e20;
			}
			return;
		}
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(!c.visible) {
				continue;
			}
			c.getBoundsRec(relativeTo,out,forSize);
			if(out.xMin < xmin) {
				xmin = out.xMin;
			}
			if(out.yMin < ymin) {
				ymin = out.yMin;
			}
			if(out.xMax > xmax) {
				xmax = out.xMax;
			}
			if(out.yMax > ymax) {
				ymax = out.yMax;
			}
		}
		out.xMin = xmin;
		out.yMin = ymin;
		out.xMax = xmax;
		out.yMax = ymax;
	}
	,addBounds: function(relativeTo,out,dx,dy,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		if(relativeTo == null) {
			var x = dx * this.matA + dy * this.matC + this.absX;
			var y = dx * this.matB + dy * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = (dx + width) * this.matA + dy * this.matC + this.absX;
			var y = (dx + width) * this.matB + dy * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = dx * this.matA + (dy + height) * this.matC + this.absX;
			var y = dx * this.matB + (dy + height) * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = (dx + width) * this.matA + (dy + height) * this.matC + this.absX;
			var y = (dx + width) * this.matB + (dy + height) * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			return;
		}
		if(relativeTo == this) {
			if(out.xMin > dx) {
				out.xMin = dx;
			}
			if(out.yMin > dy) {
				out.yMin = dy;
			}
			if(out.xMax < dx + width) {
				out.xMax = dx + width;
			}
			if(out.yMax < dy + height) {
				out.yMax = dy + height;
			}
			return;
		}
		var r = relativeTo.matA * relativeTo.matD - relativeTo.matB * relativeTo.matC;
		if(r == 0) {
			return;
		}
		var det = 1 / r;
		var rA = relativeTo.matD * det;
		var rB = -relativeTo.matB * det;
		var rC = -relativeTo.matC * det;
		var rD = relativeTo.matA * det;
		var rX = this.absX - relativeTo.absX;
		var rY = this.absY - relativeTo.absY;
		var x = dx * this.matA + dy * this.matC + rX;
		var y = dx * this.matB + dy * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = (dx + width) * this.matA + dy * this.matC + rX;
		y = (dx + width) * this.matB + dy * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = dx * this.matA + (dy + height) * this.matC + rX;
		y = dx * this.matB + (dy + height) * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = (dx + width) * this.matA + (dy + height) * this.matC + rX;
		y = (dx + width) * this.matB + (dy + height) * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h2d_col_PointImpl(0.,0.);
		}
		var px = pt.x * this.matA + pt.y * this.matC + this.absX;
		var py = pt.x * this.matB + pt.y * this.matD + this.absY;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,globalToLocal: function(pt) {
		this.syncPos();
		pt.x -= this.absX;
		pt.y -= this.absY;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var px = (pt.x * this.matD - pt.y * this.matC) * invDet;
		var py = (-pt.x * this.matB + pt.y * this.matA) * invDet;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h2d_Scene)) {
			return p;
		} else {
			return null;
		}
	}
	,set_visible: function(b) {
		if(this.visible == b) {
			return b;
		}
		this.visible = b;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return b;
	}
	,addChild: function(s) {
		this.addChildAt(s,this.children.length);
	}
	,addChildAt: function(s,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == s) {
				throw haxe_Exception.thrown("Recursive addChild");
			}
			p = p.parent;
		}
		if(s.parent != null) {
			var old = s.allocated;
			s.allocated = false;
			s.parent.removeChild(s);
			s.allocated = old;
		}
		this.children.splice(pos,0,s);
		if(!this.allocated && s.allocated) {
			s.onRemove();
		}
		s.parent = this;
		s.parentContainer = this.parentContainer;
		s.posChanged = true;
		if(this.allocated) {
			if(!s.allocated) {
				s.onAdd();
			} else {
				s.onHierarchyMoved(true);
			}
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onHierarchyMoved(parentChanged);
		}
	}
	,onAdd: function() {
		this.allocated = true;
		if(this.filter != null) {
			this.filter.bind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		this.allocated = false;
		if(this.filter != null) {
			this.filter.unbind(this);
		}
		var i = this.children.length - 1;
		while(i >= 0) {
			var c = this.children[i--];
			if(c != null) {
				c.onRemove();
			}
		}
	}
	,removeChild: function(s) {
		if(HxOverrides.remove(this.children,s)) {
			if(s.allocated) {
				s.onRemove();
			}
			s.parent = null;
			if(s.parentContainer != null) {
				s.setParentContainer(null);
			}
			s.posChanged = true;
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.setParentContainer(c);
		}
	}
	,removeChildren: function() {
		while(this.children.length > 0) this.removeChild(this.getChildAt(0));
	}
	,draw: function(ctx) {
	}
	,sync: function(ctx) {
		var changed = this.posChanged;
		if(changed) {
			this.calcAbsPos();
			this.posChanged = false;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					c.posChanged = true;
				}
				c.sync(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
	}
	,calcAbsPos: function() {
		if(this.parent == null) {
			var cr;
			var sr;
			if(this.rotation == 0) {
				cr = 1.;
				sr = 0.;
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				cr = Math.cos(this.rotation);
				sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = this.x;
			this.absY = this.y;
		} else {
			if(this.rotation == 0) {
				this.matA = this.scaleX * this.parent.matA;
				this.matB = this.scaleX * this.parent.matB;
				this.matC = this.scaleY * this.parent.matC;
				this.matD = this.scaleY * this.parent.matD;
			} else {
				var cr = Math.cos(this.rotation);
				var sr = Math.sin(this.rotation);
				var tmpA = this.scaleX * cr;
				var tmpB = this.scaleX * sr;
				var tmpC = this.scaleY * -sr;
				var tmpD = this.scaleY * cr;
				this.matA = tmpA * this.parent.matA + tmpB * this.parent.matC;
				this.matB = tmpA * this.parent.matB + tmpB * this.parent.matD;
				this.matC = tmpC * this.parent.matA + tmpD * this.parent.matC;
				this.matD = tmpC * this.parent.matB + tmpD * this.parent.matD;
			}
			this.absX = this.x * this.parent.matA + this.y * this.parent.matC + this.parent.absX;
			this.absY = this.x * this.parent.matB + this.y * this.parent.matD + this.parent.absY;
		}
	}
	,emitTile: function(ctx,tile) {
		if(h2d_Object.nullDrawable == null) {
			h2d_Object.nullDrawable = new h2d_Drawable(null);
		}
		h2d_Object.nullDrawable.smooth = this.filter != null && this.filter.smooth ? true : null;
		h2d_Object.nullDrawable.absX = this.absX;
		h2d_Object.nullDrawable.absY = this.absY;
		h2d_Object.nullDrawable.matA = this.matA;
		h2d_Object.nullDrawable.matB = this.matB;
		h2d_Object.nullDrawable.matC = this.matC;
		h2d_Object.nullDrawable.matD = this.matD;
		ctx.drawTile(h2d_Object.nullDrawable,tile);
	}
	,clipBounds: function(ctx,bounds,scaleX,scaleY) {
		if(scaleY == null) {
			scaleY = 1.;
		}
		if(scaleX == null) {
			scaleX = 1.;
		}
		var view = ctx.tmpBounds;
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(ctx.inFilter != null) {
			var f1 = ctx.baseShader.filterMatrixA__;
			var f2 = ctx.baseShader.filterMatrixB__;
			var tmpA = this.matA * f1.x + this.matB * f1.y;
			var tmpB = this.matA * f2.x + this.matB * f2.y;
			var tmpC = this.matC * f1.x + this.matD * f1.y;
			var tmpD = this.matC * f2.x + this.matD * f2.y;
			var tmpX = this.absX * f1.x + this.absY * f1.y + f1.z;
			var tmpY = this.absX * f2.x + this.absY * f2.y + f2.z;
			matA = (tmpA * ctx.viewA + tmpB * ctx.viewC) / scaleX;
			matB = (tmpA * ctx.viewB + tmpB * ctx.viewD) / scaleY;
			matC = (tmpC * ctx.viewA + tmpD * ctx.viewC) / scaleX;
			matD = (tmpC * ctx.viewB + tmpD * ctx.viewD) / scaleY;
			absX = tmpX * ctx.viewA + tmpY * ctx.viewC + ctx.viewX;
			absY = tmpX * ctx.viewB + tmpY * ctx.viewD + ctx.viewY;
		} else {
			matA = (this.matA * ctx.viewA + this.matB * ctx.viewC) / scaleX;
			matB = (this.matA * ctx.viewB + this.matB * ctx.viewD) / scaleY;
			matC = (this.matC * ctx.viewA + this.matD * ctx.viewC) / scaleX;
			matD = (this.matC * ctx.viewB + this.matD * ctx.viewD) / scaleY;
			absX = this.absX * ctx.viewA + this.absY * ctx.viewC + ctx.viewX;
			absY = this.absX * ctx.viewB + this.absY * ctx.viewD + ctx.viewY;
		}
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = bounds.xMin;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMax;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMin;
		var y = bounds.yMax;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMax;
		var y = bounds.yMax;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		if(view.xMin < -1) {
			view.xMin = -1;
		}
		if(view.yMin < -1) {
			view.yMin = -1;
		}
		if(view.xMax > 1) {
			view.xMax = 1;
		}
		if(view.yMax > 1) {
			view.yMax = 1;
		}
		var invDet = 1 / (matA * matD - matB * matC);
		var sxMin = view.xMin;
		var syMin = view.yMin;
		var sxMax = view.xMax;
		var syMax = view.yMax;
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = sxMin;
		var y = syMin;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMax;
		var y = syMin;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMin;
		var y = syMax;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMax;
		var y = syMax;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var a = bounds.xMin;
		var b = view.xMin;
		bounds.xMin = a < b ? b : a;
		var a = bounds.yMin;
		var b = view.yMin;
		bounds.yMin = a < b ? b : a;
		var a = bounds.xMax;
		var b = view.xMax;
		bounds.xMax = a > b ? b : a;
		var a = bounds.yMax;
		var b = view.yMax;
		bounds.yMax = a > b ? b : a;
	}
	,drawFilters: function(ctx) {
		if(!ctx.pushFilter(this)) {
			return;
		}
		var bounds = ctx.tmpBounds;
		var total = new h2d_col_Bounds();
		this.filter.sync(ctx,this);
		var scaleX;
		var scaleY;
		if(this.filter.useScreenResolution) {
			var s = ctx.scene;
			scaleX = s.viewportScaleX * this.filter.resolutionScale;
			scaleY = s.viewportScaleY * this.filter.resolutionScale;
		} else {
			scaleX = this.filter.resolutionScale;
			scaleY = this.filter.resolutionScale;
		}
		if(this.filter.autoBounds) {
			var maxExtent = this.filter.boundsExtend;
			if(maxExtent >= 0) {
				this.getBounds(this,bounds);
				bounds.xMin = bounds.xMin * scaleX - maxExtent;
				bounds.yMin = bounds.yMin * scaleY - maxExtent;
				bounds.xMax = bounds.xMax * scaleX + maxExtent;
				bounds.yMax = bounds.yMax * scaleY + maxExtent;
				if(bounds.xMin < total.xMin) {
					total.xMin = bounds.xMin;
				}
				if(bounds.xMax > total.xMax) {
					total.xMax = bounds.xMax;
				}
				if(bounds.yMin < total.yMin) {
					total.yMin = bounds.yMin;
				}
				if(bounds.yMax > total.yMax) {
					total.yMax = bounds.yMax;
				}
			}
		} else {
			var scale = h2d_Object.tmpPoint;
			var _this = scale;
			var x = scaleX;
			var y = scaleY;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			this.filter.getBounds(this,bounds,scale);
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
			scaleX = scale.x;
			scaleY = scale.y;
		}
		ctx.setFilterScale(scaleX,scaleY);
		this.clipBounds(ctx,total,scaleX,scaleY);
		var xMin = Math.floor(total.xMin + 1e-10);
		var yMin = Math.floor(total.yMin + 1e-10);
		var width = Math.ceil(total.xMax - xMin - 1e-10);
		var height = Math.ceil(total.yMax - yMin - 1e-10);
		if(width <= 0 || height <= 0 || total.xMax < total.xMin) {
			ctx.popFilter();
			return;
		}
		var t = ctx.textures.allocTarget("filterTemp",width,height,false);
		ctx.pushTarget(t,xMin,yMin,width,height);
		ctx.engine.clear(0);
		var oldAlpha = ctx.globalAlpha;
		var shader = ctx.baseShader;
		var _this = shader.filterMatrixA__;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var oldA_x = x1;
		var oldA_y = y1;
		var oldA_z = z1;
		var _this = shader.filterMatrixB__;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var oldB_x = x1;
		var oldB_y = y1;
		var oldB_z = z1;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var invA = this.matD * invDet * scaleX;
		var invB = -this.matB * invDet * scaleY;
		var invC = -this.matC * invDet * scaleX;
		var invD = this.matA * invDet * scaleY;
		var invX = -(this.absX * invA + this.absY * invC);
		var invY = -(this.absX * invB + this.absY * invD);
		var _this = shader.filterMatrixA__;
		var x = invA;
		var y = invC;
		var z = invX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = shader.filterMatrixB__;
		var x = invB;
		var y = invD;
		var z = invY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		ctx.globalAlpha = 1;
		this.drawContent(ctx);
		var finalTile = h2d_Tile.fromTexture(t);
		finalTile.dx = xMin / scaleX;
		finalTile.dy = yMin / scaleY;
		var prev = finalTile;
		finalTile = this.filter.draw(ctx,finalTile);
		if(finalTile != null) {
			if(finalTile != prev) {
				finalTile.dx = (finalTile.dx + xMin) / scaleX;
				finalTile.dy = (finalTile.dy + yMin) / scaleY;
			}
			finalTile.width /= scaleX;
			finalTile.height /= scaleY;
		}
		var _this = shader.filterMatrixA__;
		_this.x = oldA_x;
		_this.y = oldA_y;
		_this.z = oldA_z;
		var _this = shader.filterMatrixB__;
		_this.x = oldB_x;
		_this.y = oldB_y;
		_this.z = oldB_z;
		ctx.popTarget();
		ctx.popFilter();
		ctx.globalAlpha = oldAlpha;
		if(finalTile == null) {
			return;
		}
		this.drawFiltered(ctx,finalTile);
	}
	,drawFiltered: function(ctx,tile) {
		var oldAlpha = ctx.globalAlpha;
		ctx.currentBlend = null;
		ctx.inFilterBlend = this.blendMode;
		ctx.globalAlpha *= this.alpha;
		this.emitTile(ctx,tile);
		ctx.globalAlpha = oldAlpha;
		ctx.inFilterBlend = null;
		ctx.currentBlend = null;
	}
	,drawRec: function(ctx) {
		if(!this.visible) {
			return;
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		if(this.filter != null && this.filter.get_enable()) {
			this.drawFilters(ctx);
		} else {
			var old = ctx.globalAlpha;
			ctx.globalAlpha *= this.alpha;
			this.drawContent(ctx);
			ctx.globalAlpha = old;
		}
	}
	,drawContent: function(ctx) {
		if(ctx.front2back) {
			var i = this.children.length;
			while(i-- > 0) this.children[i].drawRec(ctx);
			this.draw(ctx);
		} else {
			this.draw(ctx);
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.drawRec(ctx);
			}
		}
	}
	,getChildAt: function(n) {
		return this.children[n];
	}
	,getChildIndex: function(o) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == o) {
				return i;
			}
		}
		return -1;
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var c1 = c.__name__;
		if(this.name == null) {
			return c1;
		} else {
			return this.name + "(" + c1 + ")";
		}
	}
	,contentChanged: function(s) {
	}
	,constraintSize: function(maxWidth,maxHeight) {
	}
	,__class__: h2d_Object
};
var bh_base_MAObject = function(maType,debug,parent) {
	h2d_Object.call(this,parent);
	this.multiAnimType = maType;
	var width = maType.width;
	var height = maType.height;
	var identifier = maType.identifier;
	if(debug) {
		var bitmap = new h2d_Bitmap(h2d_Tile.fromColor(-32768,width,height,0.5),this);
		var text = new h2d_Text(bh_base_FontManager.getFontByName("default"),bitmap);
		text.set_text("" + identifier);
		text.set_textAlign(h2d_Align.Center);
		var v = height / 2 - text.get_textHeight() / 2;
		text.posChanged = true;
		text.y = v;
		text.set_maxWidth(width);
	}
};
$hxClasses["bh.base.MAObject"] = bh_base_MAObject;
bh_base_MAObject.__name__ = "bh.base.MAObject";
bh_base_MAObject.__super__ = h2d_Object;
bh_base_MAObject.prototype = $extend(h2d_Object.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		var _g = this.multiAnimType;
		var width = _g.width;
		var height = _g.height;
		var identifier = _g.identifier;
		this.addBounds(relativeTo,out,0,0,width,height);
	}
	,__class__: bh_base_MAObject
});
var bh_base_MapTools = function() { };
$hxClasses["bh.base.MapTools"] = bh_base_MapTools;
bh_base_MapTools.__name__ = "bh.base.MapTools";
bh_base_MapTools.count = function(m) {
	return Lambda.count(m);
};
var bh_base_Palette = function(colors,width) {
	this.colors = colors;
	this.width = width;
	if(width != null) {
		if(colors.length % width != 0) {
			throw haxe_Exception.thrown("invalid width for palette2d: " + colors.length + " % " + width + " != 0");
		}
	}
};
$hxClasses["bh.base.Palette"] = bh_base_Palette;
bh_base_Palette.__name__ = "bh.base.Palette";
bh_base_Palette.prototype = {
	getColorByIndex: function(index) {
		if(index < 0 || index >= this.colors.length) {
			throw haxe_Exception.thrown("color index " + index + " out of range [0, " + this.colors.length + "]");
		}
		return this.colors[index];
	}
	,getColor2D: function(x,y) {
		if(this.width == null) {
			throw haxe_Exception.thrown("palette is not 2d");
		}
		if(x < 0 || x >= this.width) {
			throw haxe_Exception.thrown("color index x =" + x + " out of range [0, " + this.width + "]");
		}
		if(y * this.width >= this.colors.length) {
			throw haxe_Exception.thrown("color index y = " + y + " out of range [0, " + this.colors.length / this.width + "]");
		}
		return this.colors[x + y * this.width];
	}
	,getRow: function(y) {
		if(this.width == null) {
			throw haxe_Exception.thrown("palette is not 2d");
		}
		return this.colors.slice(y * this.width,(y + 1) * this.width);
	}
	,__class__: bh_base_Palette
};
var bh_base_PartEmitMode = $hxEnums["bh.base.PartEmitMode"] = { __ename__:true,__constructs__:null
	,Point: ($_=function(emitDistance,emitDistanceRandom) { return {_hx_index:0,emitDistance:emitDistance,emitDistanceRandom:emitDistanceRandom,__enum__:"bh.base.PartEmitMode",toString:$estr}; },$_._hx_name="Point",$_.__params__ = ["emitDistance","emitDistanceRandom"],$_)
	,Cone: ($_=function(emitDistance,emitDistanceRandom,emitConeAngle,emitConeAngleRandom) { return {_hx_index:1,emitDistance:emitDistance,emitDistanceRandom:emitDistanceRandom,emitConeAngle:emitConeAngle,emitConeAngleRandom:emitConeAngleRandom,__enum__:"bh.base.PartEmitMode",toString:$estr}; },$_._hx_name="Cone",$_.__params__ = ["emitDistance","emitDistanceRandom","emitConeAngle","emitConeAngleRandom"],$_)
	,Box: ($_=function(width,height,emitConeAngle,emitConeAngleRandom) { return {_hx_index:2,width:width,height:height,emitConeAngle:emitConeAngle,emitConeAngleRandom:emitConeAngleRandom,__enum__:"bh.base.PartEmitMode",toString:$estr}; },$_._hx_name="Box",$_.__params__ = ["width","height","emitConeAngle","emitConeAngleRandom"],$_)
};
bh_base_PartEmitMode.__constructs__ = [bh_base_PartEmitMode.Point,bh_base_PartEmitMode.Cone,bh_base_PartEmitMode.Box];
bh_base_PartEmitMode.__empty_constructs__ = [];
var h2d_BatchElement = function(t) {
	this.visible = true;
	this.a = 1;
	this.b = 1;
	this.g = 1;
	this.r = 1;
	this.rotation = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	this.t = t;
};
$hxClasses["h2d.BatchElement"] = h2d_BatchElement;
h2d_BatchElement.__name__ = "h2d.BatchElement";
h2d_BatchElement.prototype = {
	update: function(et) {
		return true;
	}
	,remove: function() {
		if(this.batch != null) {
			this.batch.delete(this);
		}
	}
	,__class__: h2d_BatchElement
};
var bh_base__$Particles_Particle = function(group) {
	h2d_BatchElement.call(this,null);
	this.group = group;
};
$hxClasses["bh.base._Particles.Particle"] = bh_base__$Particles_Particle;
bh_base__$Particles_Particle.__name__ = "bh.base._Particles.Particle";
bh_base__$Particles_Particle.__super__ = h2d_BatchElement;
bh_base__$Particles_Particle.prototype = $extend(h2d_BatchElement.prototype,{
	update: function(dt) {
		if(this.delay > 0) {
			this.delay -= dt;
			if(this.delay <= 0) {
				this.group.init(this);
				this.visible = true;
			} else {
				this.visible = false;
				return true;
			}
		}
		var dv = Math.pow(1 + this.group.speedIncr,dt);
		this.vx *= dv;
		this.vy *= dv;
		this.vx += this.group.gravity * dt * this.group.sinGravityAngle;
		this.vy += this.group.gravity * dt * this.group.cosGravityAngle;
		this.x += this.vx * dt;
		this.y += this.vy * dt;
		this.life += dt;
		if(this.group.rotAuto) {
			this.rotation = Math.atan2(this.vy,this.vx) + this.life * this.vr + this.group.rotInit * Math.PI;
		} else {
			this.rotation += this.vr * dt;
		}
		if(this.group.incrX) {
			this.scaleX *= Math.pow(1 + this.vSize,dt);
		}
		if(this.group.incrY) {
			this.scaleY *= Math.pow(1 + this.vSize,dt);
		}
		var timeNormalized = this.life / this.maxLife;
		if(timeNormalized < this.group.fadeIn) {
			this.a = Math.pow(timeNormalized / this.group.fadeIn,this.group.fadePower);
		} else if(timeNormalized > this.group.fadeOut) {
			this.a = Math.pow((1 - timeNormalized) / (1 - this.group.fadeOut),this.group.fadePower);
		} else {
			this.a = 1;
		}
		if(timeNormalized > 1) {
			if(this.group.emitLoop) {
				this.group.init(this);
				this.delay = 0;
			} else {
				return false;
			}
		}
		return true;
	}
	,__class__: bh_base__$Particles_Particle
});
var bh_base_ParticleGroup = function(id,p,tiles) {
	this.isRelative = true;
	this.fadePower = 1;
	this.fadeOut = 0.8;
	this.fadeIn = 0.2;
	this.rotAuto = false;
	this.rotSpeedRand = 0;
	this.rotSpeed = 0;
	this.rotInit = 0;
	this.gravityAngle = 0;
	this.gravity = 0;
	this.speedIncr = 0;
	this.speedRand = 0;
	this.speed = 50.;
	this.lifeRand = 0;
	this.life = 1;
	this.sizeRand = 0;
	this.incrY = true;
	this.incrX = true;
	this.sizeIncr = 0;
	this.size = 1;
	this.emitDelay = 0;
	this.emitSync = 0;
	this.emitDirectionAsAngle = false;
	this.emitMode = bh_base_PartEmitMode.Point(0.,50.);
	this.emitLoop = true;
	this.dy = 0;
	this.dx = 0;
	this.nparts = 100;
	this.blendMode = h2d_BlendMode.Alpha;
	this.enabled = true;
	this.started = false;
	this.id = id;
	this.parts = p;
	this.tiles = tiles;
	this.batch = new h2d_SpriteBatch(null,p);
	this.batch.set_visible(false);
	this.batch.hasRotationScale = true;
	this.batch.hasUpdate = true;
};
$hxClasses["bh.base.ParticleGroup"] = bh_base_ParticleGroup;
bh_base_ParticleGroup.__name__ = "bh.base.ParticleGroup";
bh_base_ParticleGroup.prototype = {
	start: function() {
		this.batch.clear();
		this.started = true;
		var _g = 0;
		var _g1 = this.nparts;
		while(_g < _g1) {
			var i = _g++;
			var p = new bh_base__$Particles_Particle(this);
			p.delay = Math.random() * this.life * (1 - this.emitSync) + this.emitDelay;
			this.batch.add(p);
		}
	}
	,init: function(p) {
		var g = this;
		var size = g.size * (1 + hxd_Math.srand() * g.sizeRand);
		var rot = hxd_Math.srand() * Math.PI * g.rotInit;
		var vrot = g.rotSpeed * (1 + Math.random() * g.rotSpeedRand) * (hxd_Math.srand() < 0 ? -1 : 1);
		var life = g.life * (1 + hxd_Math.srand() * g.lifeRand);
		var speed = g.speed * (1 + hxd_Math.srand() * g.speedRand);
		if(g.life == 0) {
			life = 1e10;
		}
		p.x = this.dx;
		p.y = this.dy;
		var _g = g.emitMode;
		switch(_g._hx_index) {
		case 0:
			var emitDistance = _g.emitDistance;
			var emitdistanceRandom = _g.emitDistanceRandom;
			p.vx = hxd_Math.srand();
			p.vy = hxd_Math.srand();
			speed *= 1 / Math.sqrt(p.vx * p.vx + p.vy * p.vy);
			var r = emitDistance + emitdistanceRandom * Math.random();
			p.x += p.vx * r;
			p.y += p.vy * r;
			break;
		case 1:
			var emitDistance = _g.emitDistance;
			var emitDistanceRandom = _g.emitDistanceRandom;
			var emitConeAngle = _g.emitConeAngle;
			var emitConeAngleRandom = _g.emitConeAngleRandom;
			var da = emitConeAngle + emitConeAngleRandom * hxd_Math.srand();
			da %= 6.2831853071795862;
			if(da > 3.14159265358979323) {
				da -= 6.2831853071795862;
			} else if(da <= -3.1415926535897931) {
				da += 6.2831853071795862;
			}
			var phi = da;
			p.vx = Math.cos(phi);
			p.vy = Math.sin(phi);
			var r = emitDistance + emitDistanceRandom * Math.random();
			p.x += p.vx * r;
			p.y += p.vy * r;
			break;
		case 2:
			var width = _g.width;
			var height = _g.height;
			var emitConeAngle = _g.emitConeAngle;
			var emitConeAngleRandom = _g.emitConeAngleRandom;
			p.x += width * Math.random();
			p.y += height * Math.random();
			var da = emitConeAngle + emitConeAngleRandom * hxd_Math.srand();
			da %= 6.2831853071795862;
			if(da > 3.14159265358979323) {
				da -= 6.2831853071795862;
			} else if(da <= -3.1415926535897931) {
				da += 6.2831853071795862;
			}
			var phi = da;
			p.vx = Math.cos(phi);
			p.vy = Math.sin(phi);
			break;
		}
		p.scaleX = p.scaleY = size;
		p.rotation = rot;
		p.vSize = g.sizeIncr;
		p.vr = vrot;
		p.t = this.tiles[Std.random(this.tiles.length)];
		p.vx *= speed;
		p.vy *= speed;
		p.life = 0;
		p.maxLife = life;
		var rot = this.emitDirectionAsAngle ? Math.atan2(p.vy,p.vx) : hxd_Math.srand() * Math.PI * g.rotInit;
		p.rotation = rot;
		if(!this.isRelative) {
			var parts = this.parts;
			var px = p.x;
			p.x = px * parts.matA + p.y * parts.matC + parts.absX;
			p.y = px * parts.matB + p.y * parts.matD + parts.absY;
			p.scaleX = Math.sqrt(parts.matA * parts.matA + parts.matC * parts.matC) * size;
			p.scaleY = Math.sqrt(parts.matB * parts.matB + parts.matD * parts.matD) * size;
			var rot = Math.atan2(parts.matB / p.scaleY,parts.matA / p.scaleX);
			p.rotation += rot;
			var cos = Math.cos(rot);
			var sin = Math.sin(rot);
			px = p.vx;
			p.vx = px * cos - p.vy * sin;
			p.vy = px * sin + p.vy * cos;
		}
	}
	,__class__: bh_base_ParticleGroup
};
var h2d_Drawable = function(parent) {
	h2d_Object.call(this,parent);
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.color = new h3d_Vector4Impl(x,y,z,w);
};
$hxClasses["h2d.Drawable"] = h2d_Drawable;
h2d_Drawable.__name__ = "h2d.Drawable";
h2d_Drawable.__super__ = h2d_Object;
h2d_Drawable.prototype = $extend(h2d_Object.prototype,{
	drawFiltered: function(ctx,tile) {
		var old = this.shaders;
		this.shaders = null;
		h2d_Object.prototype.drawFiltered.call(this,ctx,tile);
		this.shaders = old;
	}
	,addShader: function(s) {
		if(s == null) {
			throw haxe_Exception.thrown("Can't add null shader");
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var prev = null;
		var cur = this.shaders;
		while(cur != null) {
			if(cur.s == s) {
				if(prev == null) {
					this.shaders = cur.next;
				} else {
					prev.next = cur.next;
				}
				return true;
			}
			prev = cur;
			cur = cur.next;
		}
		return false;
	}
	,emitTile: function(ctx,tile) {
		if(tile == null) {
			tile = new h2d_Tile(null,0,0,5,5);
		}
		if(!ctx.drawTile(this,tile)) {
			return;
		}
	}
	,__class__: h2d_Drawable
});
var bh_base_Particles = function(parent) {
	h2d_Drawable.call(this,parent);
	this.groups = new haxe_ds_StringMap();
};
$hxClasses["bh.base.Particles"] = bh_base_Particles;
bh_base_Particles.__name__ = "bh.base.Particles";
bh_base_Particles.__super__ = h2d_Drawable;
bh_base_Particles.prototype = $extend(h2d_Drawable.prototype,{
	addGroup: function(g,index) {
		if(Object.prototype.hasOwnProperty.call(this.groups.h,g.id)) {
			throw haxe_Exception.thrown("group " + g.id + " already exists");
		}
		this.groups.h[g.id] = g;
		return g;
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		var isDone = true;
		var h = this.groups.h;
		var g_h = h;
		var g_keys = Object.keys(h);
		var g_length = g_keys.length;
		var g_current = 0;
		while(g_current < g_length) {
			var g = g_h[g_keys[g_current++]];
			if(!g.started && g.enabled) {
				g.start();
			}
			if(g.batch.first != null) {
				isDone = false;
			}
		}
		if(isDone) {
			this.onEnd();
		}
	}
	,onEnd: function() {
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,draw: function(ctx) {
		var old = this.blendMode;
		var realX = this.absX;
		var realY = this.absY;
		var realA = this.matA;
		var realB = this.matB;
		var realC = this.matC;
		var realD = this.matD;
		var h = this.groups.h;
		var g_h = h;
		var g_keys = Object.keys(h);
		var g_length = g_keys.length;
		var g_current = 0;
		while(g_current < g_length) {
			var g = g_h[g_keys[g_current++]];
			if(g.enabled) {
				this.blendMode = g.batch.blendMode;
				if(g.isRelative) {
					g.batch.drawWith(ctx,this);
				} else {
					this.matA = 1;
					this.matB = 0;
					this.matC = 0;
					this.matD = 1;
					this.absX = 0;
					this.absY = 0;
					g.batch.drawWith(ctx,this);
					this.matA = realA;
					this.matB = realB;
					this.matC = realC;
					this.matD = realD;
					this.absX = realX;
					this.absY = realY;
				}
			}
		}
		this.blendMode = old;
	}
	,__class__: bh_base_Particles
});
var h2d_Bitmap = function(tile,parent) {
	h2d_Drawable.call(this,parent);
	this.set_tile(tile);
};
$hxClasses["h2d.Bitmap"] = h2d_Bitmap;
h2d_Bitmap.__name__ = "h2d.Bitmap";
h2d_Bitmap.__super__ = h2d_Drawable;
h2d_Bitmap.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			if(this.width == null && this.height == null) {
				this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.tile.width,this.tile.height);
			} else {
				this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.width != null ? this.width : this.tile.width * this.height / this.tile.height,this.height != null ? this.height : this.tile.height * this.width / this.tile.width);
			}
		}
	}
	,set_width: function(w) {
		if(this.width == w) {
			return w;
		}
		this.width = w;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return w;
	}
	,set_height: function(h) {
		if(this.height == h) {
			return h;
		}
		this.height = h;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return h;
	}
	,set_tile: function(t) {
		if(this.tile == t) {
			return t;
		}
		this.tile = t;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return t;
	}
	,draw: function(ctx) {
		if(this.width == null && this.height == null) {
			this.emitTile(ctx,this.tile);
			return;
		}
		if(this.tile == null) {
			this.set_tile(h2d_Tile.fromColor(16711935));
		}
		var ow = this.tile.width;
		var oh = this.tile.height;
		this.tile.width = this.width != null ? this.width : ow * this.height / oh;
		this.tile.height = this.height != null ? this.height : oh * this.width / ow;
		this.emitTile(ctx,this.tile);
		this.tile.width = ow;
		this.tile.height = oh;
	}
	,__class__: h2d_Bitmap
});
var bh_base_PixelLines = function(width,height,parent) {
	h2d_Bitmap.call(this,null,parent);
	this.data = new hxd_BitmapData(width,height);
	this.set_width(width);
	this.set_height(height);
	this.updateBitmap();
};
$hxClasses["bh.base.PixelLines"] = bh_base_PixelLines;
bh_base_PixelLines.__name__ = "bh.base.PixelLines";
bh_base_PixelLines.__super__ = h2d_Bitmap;
bh_base_PixelLines.prototype = $extend(h2d_Bitmap.prototype,{
	line: function(x0,y0,x1,y1,colorARGB) {
		this.data.lock();
		this.data.line(x0,y0,x1,y1,colorARGB);
	}
	,rect: function(x,y,width,height,colorARGB) {
		this.data.lock();
		this.data.line(x,y,x + width,y,colorARGB);
		this.data.line(x,y,x,y + height,colorARGB);
		this.data.line(x + width,y,x + width,y + height,colorARGB);
		this.data.line(x,y + height,x + width,y + height,colorARGB);
	}
	,filledRect: function(x,y,width,height,colorARGB) {
		this.data.lock();
		this.data.fill(x,y,width,height,colorARGB);
	}
	,updateBitmap: function() {
		this.data.unlock();
		var pixels = this.data.getPixels();
		var tile = h2d_Tile.fromPixels(pixels);
		var px = this.centerX;
		var py = this.centerY;
		if(py == null) {
			py = 0.5;
		}
		if(px == null) {
			px = 0.5;
		}
		tile.dx = -(px * tile.width);
		tile.dy = -(py * tile.height);
		this.set_tile(tile);
	}
	,__class__: bh_base_PixelLines
});
var bh_base_Point = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["bh.base.Point"] = bh_base_Point;
bh_base_Point.__name__ = "bh.base.Point";
bh_base_Point.prototype = {
	add: function(x,y) {
		this.x += x;
		this.y += y;
		return this;
	}
	,clone: function() {
		return new bh_base_Point(this.x,this.y);
	}
	,__class__: bh_base_Point
};
var bh_base_PositionLinkObject = function(destination) {
	this.linkRemoval = false;
	this.linkVisibility = false;
	h2d_Object.call(this,this.parent);
	this.destination = destination;
};
$hxClasses["bh.base.PositionLinkObject"] = bh_base_PositionLinkObject;
bh_base_PositionLinkObject.__name__ = "bh.base.PositionLinkObject";
bh_base_PositionLinkObject.__super__ = h2d_Object;
bh_base_PositionLinkObject.prototype = $extend(h2d_Object.prototype,{
	onRemove: function() {
		h2d_Object.prototype.onRemove.call(this);
		if(this.linkRemoval) {
			var _this = this.destination;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
	}
	,followObject: function() {
		var x = this.absX;
		var y = this.absY;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var newPos = this.destination.parent.globalToLocal(new h2d_col_PointImpl(x,y));
		if(this.destination.x != newPos.x || this.destination.y != newPos.y) {
			var _this = this.destination;
			_this.posChanged = true;
			_this.x = newPos.x;
			_this.posChanged = true;
			_this.y = newPos.y;
		}
		if(this.linkVisibility) {
			var object = this.parent;
			while(object != null) {
				this.set_visible(this.visible && object.visible);
				object = object.parent;
			}
		}
	}
	,calcAbsPos: function() {
		h2d_Object.prototype.calcAbsPos.call(this);
		if(this.parent != null && this.destination.parent != null) {
			this.followObject();
		}
	}
	,__class__: bh_base_PositionLinkObject
});
var bh_base_ResolvedGeneratedTileType = $hxEnums["bh.base.ResolvedGeneratedTileType"] = { __ename__:true,__constructs__:null
	,Cross: ($_=function(width,height,color) { return {_hx_index:0,width:width,height:height,color:color,__enum__:"bh.base.ResolvedGeneratedTileType",toString:$estr}; },$_._hx_name="Cross",$_.__params__ = ["width","height","color"],$_)
	,SolidColor: ($_=function(width,height,color) { return {_hx_index:1,width:width,height:height,color:color,__enum__:"bh.base.ResolvedGeneratedTileType",toString:$estr}; },$_._hx_name="SolidColor",$_.__params__ = ["width","height","color"],$_)
};
bh_base_ResolvedGeneratedTileType.__constructs__ = [bh_base_ResolvedGeneratedTileType.Cross,bh_base_ResolvedGeneratedTileType.SolidColor];
bh_base_ResolvedGeneratedTileType.__empty_constructs__ = [];
var bh_base_ResourceLoader = function() { };
$hxClasses["bh.base.ResourceLoader"] = bh_base_ResourceLoader;
bh_base_ResourceLoader.__name__ = "bh.base.ResourceLoader";
bh_base_ResourceLoader.__isInterface__ = true;
bh_base_ResourceLoader.prototype = {
	__class__: bh_base_ResourceLoader
};
var bh_base_CachingResourceLoader = function() {
	this.multiAnimCycleDetection = [];
	this.fontCache = new haxe_ds_StringMap();
	this.atlasCache = new haxe_ds_StringMap();
	this.atlas2Cache = new haxe_ds_StringMap();
	this.placeholderCache = new haxe_ds_EnumValueMap();
	this.tileCache = new haxe_ds_StringMap();
	this.multiAnimCache = new haxe_ds_StringMap();
	this.animSMCache = new haxe_ds_StringMap();
};
$hxClasses["bh.base.CachingResourceLoader"] = bh_base_CachingResourceLoader;
bh_base_CachingResourceLoader.__name__ = "bh.base.CachingResourceLoader";
bh_base_CachingResourceLoader.__interfaces__ = [bh_base_ResourceLoader];
bh_base_CachingResourceLoader.prototype = {
	loadSheet2Impl: function(sheetName) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "bh/base/ResourceLoader.hx", lineNumber : 47, className : "bh.base.CachingResourceLoader", methodName : "loadSheet2Impl"});
	}
	,loadSheetImpl: function(sheetName) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "bh/base/ResourceLoader.hx", lineNumber : 51, className : "bh.base.CachingResourceLoader", methodName : "loadSheetImpl"});
	}
	,loadTileImpl: function(filename) {
		var res = this.loadHXDResourceImpl(filename);
		if(res == null) {
			throw haxe_Exception.thrown("could not load resource \"" + filename);
		}
		return res.toTile();
	}
	,loadMultiAnimImpl: function(name) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "bh/base/ResourceLoader.hx", lineNumber : 61, className : "bh.base.CachingResourceLoader", methodName : "loadMultiAnimImpl"});
	}
	,loadHXDResourceImpl: function(filename) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "bh/base/ResourceLoader.hx", lineNumber : 65, className : "bh.base.CachingResourceLoader", methodName : "loadHXDResourceImpl"});
	}
	,loadFontImpl: function(font) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "bh/base/ResourceLoader.hx", lineNumber : 69, className : "bh.base.CachingResourceLoader", methodName : "loadFontImpl"});
	}
	,loadAnimSMImpl: function(filename) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "bh/base/ResourceLoader.hx", lineNumber : 73, className : "bh.base.CachingResourceLoader", methodName : "loadAnimSMImpl"});
	}
	,cachedGet: function(cache,cacheKey,get) {
		var value = cache.get(cacheKey);
		if(value == null) {
			value = get(cacheKey);
			cache.set(cacheKey,value);
		}
		return value;
	}
	,loadSheet2: function(sheetName) {
		var _gthis = this;
		return this.cachedGet(this.atlas2Cache,sheetName,function(sheetName) {
			return _gthis.loadSheet2Impl(sheetName);
		});
	}
	,loadTile: function(filename) {
		var _gthis = this;
		var tile = this.cachedGet(this.tileCache,filename,function(filename) {
			return _gthis.loadTileImpl(filename);
		});
		return tile.clone();
	}
	,loadFont: function(fontName) {
		var _gthis = this;
		return this.cachedGet(this.fontCache,fontName,function(fontname) {
			return _gthis.loadFontImpl(fontname);
		});
	}
	,loadAnimParser: function(filename) {
		var _gthis = this;
		return this.cachedGet(this.animSMCache,filename,function(filename) {
			return _gthis.loadAnimSMImpl(filename);
		});
	}
	,createAnimSM: function(filename,selector) {
		try {
			var parser = this.loadAnimParser(filename);
			return parser.createAnimSM(selector);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g);
			throw haxe_Exception.thrown("could not load animSM \"" + filename + "\": " + Std.string(e));
		}
	}
	,clearCache: function() {
		this.animSMCache.h = Object.create(null);
		this.tileCache.h = Object.create(null);
		this.atlasCache.h = Object.create(null);
		this.atlas2Cache.h = Object.create(null);
		this.fontCache.h = Object.create(null);
		this.placeholderCache.clear();
		this.multiAnimCache.h = Object.create(null);
		this.multiAnimCycleDetection = [];
	}
	,getOrCreatePlaceholder: function(key,builderFunction) {
		return this.cachedGet(this.placeholderCache,key,builderFunction);
	}
	,loadHXDResource: function(filename) {
		return this.loadHXDResourceImpl(filename);
	}
	,loadMultiAnim: function(resourceFilename) {
		var _gthis = this;
		var key = resourceFilename;
		if(this.multiAnimCycleDetection.indexOf(key) != -1) {
			throw haxe_Exception.thrown("cyclic dependency in multiAnim " + key + ": path " + Std.string(this.multiAnimCycleDetection));
		}
		this.multiAnimCycleDetection.push(key);
		var retVal = this.cachedGet(this.multiAnimCache,key,function(k) {
			return _gthis.loadMultiAnimImpl(k);
		});
		HxOverrides.remove(this.multiAnimCycleDetection,key);
		return retVal;
	}
	,__class__: bh_base_CachingResourceLoader
};
var bh_base_filters_PixelOutlineFilterMode = $hxEnums["bh.base.filters.PixelOutlineFilterMode"] = { __ename__:true,__constructs__:null
	,Knockout: ($_=function(color,knockout) { return {_hx_index:0,color:color,knockout:knockout,__enum__:"bh.base.filters.PixelOutlineFilterMode",toString:$estr}; },$_._hx_name="Knockout",$_.__params__ = ["color","knockout"],$_)
	,InlineColor: ($_=function(color,inlineColor) { return {_hx_index:1,color:color,inlineColor:inlineColor,__enum__:"bh.base.filters.PixelOutlineFilterMode",toString:$estr}; },$_._hx_name="InlineColor",$_.__params__ = ["color","inlineColor"],$_)
};
bh_base_filters_PixelOutlineFilterMode.__constructs__ = [bh_base_filters_PixelOutlineFilterMode.Knockout,bh_base_filters_PixelOutlineFilterMode.InlineColor];
bh_base_filters_PixelOutlineFilterMode.__empty_constructs__ = [];
var h2d_filter_Filter = function() {
	this.useScreenResolution = h2d_filter_Filter.defaultUseScreenResolution;
	this.resolutionScale = 1;
	this.enable = true;
	this.smooth = false;
	this.boundsExtend = 0.;
	this.autoBounds = true;
};
$hxClasses["h2d.filter.Filter"] = h2d_filter_Filter;
h2d_filter_Filter.__name__ = "h2d.filter.Filter";
h2d_filter_Filter.prototype = {
	get_enable: function() {
		return this.enable;
	}
	,sync: function(ctx,s) {
	}
	,bind: function(s) {
	}
	,unbind: function(s) {
	}
	,getBounds: function(s,bounds,scale) {
		s.getBounds(s,bounds);
		bounds.xMin = bounds.xMin * scale.x - this.boundsExtend;
		bounds.xMax = bounds.xMax * scale.x + this.boundsExtend;
		bounds.yMin = bounds.yMin * scale.y - this.boundsExtend;
		bounds.yMax = bounds.yMax * scale.y + this.boundsExtend;
	}
	,draw: function(ctx,input) {
		return input;
	}
	,__class__: h2d_filter_Filter
};
var bh_base_filters_PixelOutline = function(mode,smooth) {
	h2d_filter_Filter.call(this);
	this.pass = new bh_base_filters__$PixelOutline_PixelOutlinePass();
	this.smooth = smooth;
	this.mode = mode;
	var _g = this.mode;
	switch(_g._hx_index) {
	case 0:
		var color = _g.color;
		var knockout = _g.knockout;
		this.pass.set_color(color);
		this.pass.set_inlineColor(0);
		this.pass.set_knockOut(knockout);
		break;
	case 1:
		var color = _g.color;
		var inlineColor = _g.inlineColor;
		this.pass.set_color(color);
		this.pass.set_inlineColor(inlineColor);
		this.pass.set_knockOut(0.);
		break;
	}
};
$hxClasses["bh.base.filters.PixelOutline"] = bh_base_filters_PixelOutline;
bh_base_filters_PixelOutline.__name__ = "bh.base.filters.PixelOutline";
bh_base_filters_PixelOutline.__super__ = h2d_filter_Filter;
bh_base_filters_PixelOutline.prototype = $extend(h2d_filter_Filter.prototype,{
	sync: function(ctx,s) {
		this.boundsExtend = 1;
	}
	,draw: function(ctx,t) {
		var out = ctx.textures.allocTileTarget("pixelOutline",t);
		this.pass.apply(t.innerTex,out);
		return h2d_Tile.fromTexture(out);
	}
	,__class__: bh_base_filters_PixelOutline
});
var h3d_pass_ScreenFx = function(shader,output) {
	this.shader = shader;
	this.output = new h3d_pass_OutputShader(output);
	this.pass = new h3d_mat_Pass("screenfx",new hxsl_ShaderList(shader));
	this.pass.set_culling(h3d_mat_Face.None);
	this.pass.depth(false,h3d_mat_Compare.Always);
};
$hxClasses["h3d.pass.ScreenFx"] = h3d_pass_ScreenFx;
h3d_pass_ScreenFx.__name__ = "h3d.pass.ScreenFx";
h3d_pass_ScreenFx.prototype = {
	get_engine: function() {
		if(this._engine == null) {
			this._engine = h3d_Engine.CURRENT;
		}
		return this._engine;
	}
	,render: function() {
		if(this.primitive == null) {
			this.primitive = h3d_prim_Plane2D.get();
		}
		this.shader.flipY__ = this.get_engine().driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.get_engine().getCurrentTarget() != null ? -1 : 1;
		var shaders = this.pass.shaders;
		var ctx = h3d_impl_RenderContext.get();
		var isNewCtx = false;
		if(ctx == null) {
			isNewCtx = true;
			ctx = new h3d_impl_RenderContext();
			ctx.setCurrent();
		}
		var rts = this.output.compileShaders(ctx.globals,shaders);
		this.get_engine().selectMaterial(this.pass);
		this.get_engine().selectShader(rts);
		var buffers = ctx.shaderBuffers;
		buffers.vertex.grow(rts.vertex);
		if(rts.fragment != null) {
			buffers.fragment.grow(rts.fragment);
		}
		ctx.fillGlobals(buffers,rts);
		ctx.fillParams(buffers,rts,shaders);
		this.get_engine().uploadShaderBuffers(buffers,0);
		this.get_engine().uploadShaderBuffers(buffers,1);
		this.get_engine().uploadShaderBuffers(buffers,2);
		this.get_engine().uploadShaderBuffers(buffers,3);
		this.primitive.render(this.get_engine());
		if(isNewCtx) {
			ctx.clearCurrent();
		}
	}
	,dispose: function() {
	}
	,__class__: h3d_pass_ScreenFx
};
var bh_base_filters__$PixelOutline_PixelOutlinePass = function() {
	h3d_pass_ScreenFx.call(this,new bh_base_filters__$PixelOutline_PixelOutlineShader());
};
$hxClasses["bh.base.filters._PixelOutline.PixelOutlinePass"] = bh_base_filters__$PixelOutline_PixelOutlinePass;
bh_base_filters__$PixelOutline_PixelOutlinePass.__name__ = "bh.base.filters._PixelOutline.PixelOutlinePass";
bh_base_filters__$PixelOutline_PixelOutlinePass.__super__ = h3d_pass_ScreenFx;
bh_base_filters__$PixelOutline_PixelOutlinePass.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	set_color: function(c) {
		if(this.color == c) {
			return c;
		}
		return this.color = c;
	}
	,set_inlineColor: function(c) {
		if(this.inlineColor == c) {
			return c;
		}
		return this.inlineColor = c;
	}
	,set_knockOut: function(v) {
		if(this.knockOut == v) {
			return v;
		}
		return this.knockOut = v;
	}
	,apply: function(src,out) {
		this.get_engine().pushTarget(out);
		this.shader.texture__ = src;
		var _this = this.shader.outlineColor__;
		var c = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		var _this = this.shader.inlineColor__;
		var c = this.inlineColor;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		var _this = this.shader.pixelSize__;
		var x = 1 / src.width;
		var y = 1 / src.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		this.shader.knockOutMul__ = this.knockOut;
		this.render();
		this.get_engine().popTarget();
	}
	,__class__: bh_base_filters__$PixelOutline_PixelOutlinePass
});
var hxsl_Shader = function() {
	this.priority = 0;
	this.initialize();
};
$hxClasses["hxsl.Shader"] = hxsl_Shader;
hxsl_Shader.__name__ = "hxsl.Shader";
hxsl_Shader.prototype = {
	initialize: function() {
		this.constModified = true;
		if(this.shader != null) {
			return;
		}
		var cl = js_Boot.getClass(this);
		this.shader = cl._SHADER;
		if(this.shader == null) {
			var curClass = cl;
			while(curClass != null && curClass.SRC == null) curClass = curClass.__super__;
			if(curClass == null) {
				throw haxe_Exception.thrown(cl.__name__ + " has no shader source");
			}
			this.shader = curClass._SHADER;
			if(this.shader == null) {
				this.shader = new hxsl_SharedShader(curClass.SRC,curClass._MODULE);
				curClass._SHADER = this.shader;
			}
		}
	}
	,setPriority: function(v) {
		this.priority = v;
	}
	,getParamValue: function(index) {
		throw haxe_Exception.thrown("assert");
	}
	,getParamFloatValue: function(index) {
		throw haxe_Exception.thrown("assert");
	}
	,updateConstants: function(globals) {
		throw haxe_Exception.thrown("assert");
	}
	,updateConstantsFinal: function(globals) {
		var c = this.shader.consts;
		while(c != null) {
			if(c.globalId == 0) {
				c = c.next;
				continue;
			}
			var v = globals.map.h[c.globalId];
			var _g = c.v.type;
			switch(_g._hx_index) {
			case 1:
				var v1 = v;
				if(v1 >>> c.bits != 0) {
					throw haxe_Exception.thrown("Constant " + c.v.name + " is outside range (" + v1 + " > " + ((1 << c.bits) - 1) + ")");
				}
				this.constBits |= v1 << c.pos;
				break;
			case 2:
				var v2 = v;
				if(v2) {
					this.constBits |= 1 << c.pos;
				}
				break;
			case 17:
				var count = _g.size;
				if(v == null) {
					c = c.next;
					continue;
				}
				var v3 = v;
				var sel = v3.channel;
				if(v3.texture == null) {
					sel = hxsl_Channel.Unknown;
				} else if(sel == null || sel == hxsl_Channel.Unknown) {
					switch(count) {
					case 1:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedFloat;
						} else {
							throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					case 3:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedNormal;
						} else {
							throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					default:
						throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
					}
				}
				this.constBits |= (globals.allocChannelID(v3.texture) << 3 | sel._hx_index) << c.pos;
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			c = c.next;
		}
		var _this = this.shader;
		var constBits = this.constBits;
		var i = _this.instanceCache.h[constBits];
		this.instance = i == null ? _this.makeInstance(constBits) : i;
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,__class__: hxsl_Shader
};
var h3d_shader_ScreenShader = function() {
	this.flipY__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.ScreenShader"] = h3d_shader_ScreenShader;
h3d_shader_ScreenShader.__name__ = "h3d.shader.ScreenShader";
h3d_shader_ScreenShader.__super__ = hxsl_Shader;
h3d_shader_ScreenShader.prototype = $extend(hxsl_Shader.prototype,{
	get_flipY: function() {
		return this.flipY__;
	}
	,set_flipY: function(_v) {
		return this.flipY__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_ScreenShader
});
var bh_base_filters__$PixelOutline_PixelOutlineShader = function() {
	this.knockOutMul__ = 0;
	this.inlineColor__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.outlineColor__ = new h3d_VectorImpl(0.,0.,0.);
	this.pixelSize__ = new h3d_VectorImpl(0.,0.,0.);
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["bh.base.filters._PixelOutline.PixelOutlineShader"] = bh_base_filters__$PixelOutline_PixelOutlineShader;
bh_base_filters__$PixelOutline_PixelOutlineShader.__name__ = "bh.base.filters._PixelOutline.PixelOutlineShader";
bh_base_filters__$PixelOutline_PixelOutlineShader.__super__ = h3d_shader_ScreenShader;
bh_base_filters__$PixelOutline_PixelOutlineShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_pixelSize: function() {
		return this.pixelSize__;
	}
	,set_pixelSize: function(_v) {
		return this.pixelSize__ = _v;
	}
	,get_outlineColor: function() {
		return this.outlineColor__;
	}
	,set_outlineColor: function(_v) {
		return this.outlineColor__ = _v;
	}
	,get_inlineColor: function() {
		return this.inlineColor__;
	}
	,set_inlineColor: function(_v) {
		return this.inlineColor__ = _v;
	}
	,get_knockOutMul: function() {
		return this.knockOutMul__;
	}
	,set_knockOutMul: function(_v) {
		return this.knockOutMul__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.pixelSize__;
		case 3:
			return this.outlineColor__;
		case 4:
			return this.inlineColor__;
		case 5:
			return this.knockOutMul__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 5:
			return this.knockOutMul__;
		default:
		}
		return 0.;
	}
	,__class__: bh_base_filters__$PixelOutline_PixelOutlineShader
});
var bh_base_filters_ReplacePaletteShader = function(source,replacement) {
	this.DST_COL__ = [];
	this.SRC_COL__ = [];
	this.TEST_ALPHA__ = false;
	this.TEST_APPROX__ = false;
	this.PALETTE_SIZE__ = 0;
	h3d_shader_ScreenShader.call(this);
	if(source.length != replacement.length) {
		throw haxe_Exception.thrown("source and destination palette sizes don't match " + source.length + " != " + replacement.length);
	}
	this.constModified = true;
	this.PALETTE_SIZE__ = source.length;
	var _g = 0;
	var _g1 = this.PALETTE_SIZE__;
	while(_g < _g1) {
		var i = _g++;
		this.SRC_COL__[i] = new h3d_Vector4Impl(0.,0.,0.,1.);
		var _this = this.SRC_COL__[i];
		var color = source[i];
		if(color >>> 24 == 0) {
			color |= -16777216;
		}
		var c = color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.DST_COL__[i] = new h3d_Vector4Impl(0.,0.,0.,1.);
		var _this1 = this.DST_COL__[i];
		var color1 = replacement[i];
		if(color1 >>> 24 == 0) {
			color1 |= -16777216;
		}
		var c1 = color1;
		_this1.x = (c1 >> 16 & 255) / 255;
		_this1.y = (c1 >> 8 & 255) / 255;
		_this1.z = (c1 & 255) / 255;
		_this1.w = (c1 >>> 24) / 255;
	}
};
$hxClasses["bh.base.filters.ReplacePaletteShader"] = bh_base_filters_ReplacePaletteShader;
bh_base_filters_ReplacePaletteShader.__name__ = "bh.base.filters.ReplacePaletteShader";
bh_base_filters_ReplacePaletteShader.createAsPaletteFilter = function(palette,sourceRow,replacementRow) {
	return new h2d_filter_Shader(new bh_base_filters_ReplacePaletteShader(palette.getRow(sourceRow),palette.getRow(replacementRow)));
};
bh_base_filters_ReplacePaletteShader.createAsColorsFilter = function(sourceColors,replacementColors) {
	return new h2d_filter_Shader(new bh_base_filters_ReplacePaletteShader(sourceColors,replacementColors));
};
bh_base_filters_ReplacePaletteShader.__super__ = h3d_shader_ScreenShader;
bh_base_filters_ReplacePaletteShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_PALETTE_SIZE: function() {
		return this.PALETTE_SIZE__;
	}
	,set_PALETTE_SIZE: function(_v) {
		this.constModified = true;
		return this.PALETTE_SIZE__ = _v;
	}
	,get_TEST_APPROX: function() {
		return this.TEST_APPROX__;
	}
	,set_TEST_APPROX: function(_v) {
		this.constModified = true;
		return this.TEST_APPROX__ = _v;
	}
	,get_TEST_ALPHA: function() {
		return this.TEST_ALPHA__;
	}
	,set_TEST_ALPHA: function(_v) {
		this.constModified = true;
		return this.TEST_ALPHA__ = _v;
	}
	,get_SRC_COL: function() {
		return this.SRC_COL__;
	}
	,set_SRC_COL: function(_v) {
		return this.SRC_COL__ = _v;
	}
	,get_DST_COL: function() {
		return this.DST_COL__;
	}
	,set_DST_COL: function(_v) {
		return this.DST_COL__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.PALETTE_SIZE__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("PALETTE_SIZE" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v;
		if(this.TEST_APPROX__) {
			this.constBits |= 256;
		}
		if(this.TEST_ALPHA__) {
			this.constBits |= 512;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.PALETTE_SIZE__;
		case 2:
			return this.TEST_APPROX__;
		case 3:
			return this.TEST_ALPHA__;
		case 4:
			return this.SRC_COL__;
		case 5:
			return this.DST_COL__;
		case 6:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.PALETTE_SIZE__;
		default:
		}
		return 0.;
	}
	,__class__: bh_base_filters_ReplacePaletteShader
});
var bh_multianim_Coordinates = $hxEnums["bh.multianim.Coordinates"] = { __ename__:true,__constructs__:null
	,ZERO: {_hx_name:"ZERO",_hx_index:0,__enum__:"bh.multianim.Coordinates",toString:$estr}
	,OFFSET: ($_=function(x,y) { return {_hx_index:1,x:x,y:y,__enum__:"bh.multianim.Coordinates",toString:$estr}; },$_._hx_name="OFFSET",$_.__params__ = ["x","y"],$_)
	,LAYOUT: ($_=function(layoutName,index) { return {_hx_index:2,layoutName:layoutName,index:index,__enum__:"bh.multianim.Coordinates",toString:$estr}; },$_._hx_name="LAYOUT",$_.__params__ = ["layoutName","index"],$_)
	,SELECTED_HEX_POSITION: ($_=function(hex) { return {_hx_index:3,hex:hex,__enum__:"bh.multianim.Coordinates",toString:$estr}; },$_._hx_name="SELECTED_HEX_POSITION",$_.__params__ = ["hex"],$_)
	,SELECTED_GRID_POSITION: ($_=function(gridX,gridY) { return {_hx_index:4,gridX:gridX,gridY:gridY,__enum__:"bh.multianim.Coordinates",toString:$estr}; },$_._hx_name="SELECTED_GRID_POSITION",$_.__params__ = ["gridX","gridY"],$_)
	,SELECTED_HEX_EDGE: ($_=function(direction,factor) { return {_hx_index:5,direction:direction,factor:factor,__enum__:"bh.multianim.Coordinates",toString:$estr}; },$_._hx_name="SELECTED_HEX_EDGE",$_.__params__ = ["direction","factor"],$_)
	,SELECTED_HEX_CORNER: ($_=function(count,factor) { return {_hx_index:6,count:count,factor:factor,__enum__:"bh.multianim.Coordinates",toString:$estr}; },$_._hx_name="SELECTED_HEX_CORNER",$_.__params__ = ["count","factor"],$_)
};
bh_multianim_Coordinates.__constructs__ = [bh_multianim_Coordinates.ZERO,bh_multianim_Coordinates.OFFSET,bh_multianim_Coordinates.LAYOUT,bh_multianim_Coordinates.SELECTED_HEX_POSITION,bh_multianim_Coordinates.SELECTED_GRID_POSITION,bh_multianim_Coordinates.SELECTED_HEX_EDGE,bh_multianim_Coordinates.SELECTED_HEX_CORNER];
bh_multianim_Coordinates.__empty_constructs__ = [bh_multianim_Coordinates.ZERO];
var bh_multianim_HexCoordinateSystemHelper = function() { };
$hxClasses["bh.multianim.HexCoordinateSystemHelper"] = bh_multianim_HexCoordinateSystemHelper;
bh_multianim_HexCoordinateSystemHelper.__name__ = "bh.multianim.HexCoordinateSystemHelper";
bh_multianim_HexCoordinateSystemHelper.resolveAsHexEdge = function(system,direction,factor) {
	var pos = system.hexLayout.polygonEdge(new bh_base_Hex(0,0,0),direction,factor);
	return new bh_base_FPoint(pos.x,pos.y);
};
bh_multianim_HexCoordinateSystemHelper.resolveAsHexPosition = function(system,hex) {
	var pos = system.hexLayout.hexToPixel(hex);
	return new bh_base_FPoint(pos.x,pos.y);
};
bh_multianim_HexCoordinateSystemHelper.resolveAsHexCorner = function(system,count,factor) {
	var pos = system.hexLayout.polygonCorner(new bh_base_Hex(0,0,0),count,factor);
	return new bh_base_FPoint(pos.x,pos.y);
};
function bh_multianim_CoordinateSystems_resolveAsGrid(system,gridX,gridY) {
	return new bh_base_FPoint(system.spacingX * gridX,system.spacingY * gridY);
}
var bh_multianim_Updatable = function(updatables) {
	this.lastObject = null;
	if(updatables == null || updatables.length == 0) {
		throw haxe_Exception.thrown("empty updatable");
	}
	this.updatables = updatables;
};
$hxClasses["bh.multianim.Updatable"] = bh_multianim_Updatable;
bh_multianim_Updatable.__name__ = "bh.multianim.Updatable";
bh_multianim_Updatable.prototype = {
	updateText: function(newText,throwIfAnyFails) {
		if(throwIfAnyFails == null) {
			throwIfAnyFails = true;
		}
		var _g = 0;
		var _g1 = this.updatables;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var _g2 = v.object;
			if(_g2._hx_index == 4) {
				var t = _g2.b;
				t.set_text(newText);
			} else if(throwIfAnyFails) {
				throw haxe_Exception.thrown("invalid updateText " + Std.string(v.object));
			}
		}
	}
	,updateTile: function(newTile,throwIfAnyFails) {
		if(throwIfAnyFails == null) {
			throwIfAnyFails = true;
		}
		var _g = 0;
		var _g1 = this.updatables;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var _g2 = v.object;
			if(_g2._hx_index == 3) {
				var b = _g2.b;
				b.set_tile(newTile);
			} else if(throwIfAnyFails) {
				throw haxe_Exception.thrown("invalid updateTile " + Std.string(v.object));
			}
		}
	}
	,setObject: function(newObject,throwIfFails) {
		if(throwIfFails == null) {
			throwIfFails = true;
		}
		if(this.updatables.length != 1) {
			throw haxe_Exception.thrown("setObject needs exactly one updatable");
		}
		if(this.lastObject == newObject) {
			return;
		}
		var _g = 0;
		var _g1 = this.updatables;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			if(this.lastObject != null) {
				var _this = this.lastObject;
				if(_this != null && _this.parent != null) {
					_this.parent.removeChild(_this);
				}
			}
			var parent = bh_multianim_MultiAnimParser_toh2dObject(v.object);
			parent.addChild(newObject);
		}
	}
	,__class__: bh_multianim_Updatable
};
var bh_multianim_BuilderResolvedSettings = function(settings) {
	this.settings = settings;
};
$hxClasses["bh.multianim.BuilderResolvedSettings"] = bh_multianim_BuilderResolvedSettings;
bh_multianim_BuilderResolvedSettings.__name__ = "bh.multianim.BuilderResolvedSettings";
bh_multianim_BuilderResolvedSettings.prototype = {
	getFloatOrException: function(settingName) {
		if(this.settings == null) {
			throw haxe_Exception.thrown("settings not found, was looking for " + settingName);
		}
		var r = this.settings.h[settingName];
		if(r == null) {
			throw haxe_Exception.thrown("expected float setting " + settingName + " to present but was not");
		}
		var f = parseFloat(r);
		if(f != NaN) {
			return f;
		}
		throw haxe_Exception.thrown("expected float setting " + settingName + " to valid float number but was " + r);
	}
	,getFloatOrDefault: function(settingName,defaultValue) {
		if(this.settings == null) {
			throw haxe_Exception.thrown("settings not found, was looking for " + settingName);
		}
		var r = this.settings.h[settingName];
		if(r == null) {
			return defaultValue;
		}
		var f = parseFloat(r);
		if(f != NaN) {
			return f;
		}
		throw haxe_Exception.thrown("expected float setting " + settingName + " to valid float number but was " + r);
	}
	,__class__: bh_multianim_BuilderResolvedSettings
};
var bh_multianim_BuilderResult = function(object,name,names,interactives,layouts,palettes,rootSettings,offset,gridCoordinateSystem,hexCoordinateSystem) {
	this.object = object;
	this.name = name;
	this.names = names;
	this.interactives = interactives;
	this.layouts = layouts;
	this.palettes = palettes;
	this.rootSettings = rootSettings;
	this.offset = offset;
	this.gridCoordinateSystem = gridCoordinateSystem;
	this.hexCoordinateSystem = hexCoordinateSystem;
};
$hxClasses["bh.multianim.BuilderResult"] = bh_multianim_BuilderResult;
bh_multianim_BuilderResult.__name__ = "bh.multianim.BuilderResult";
bh_multianim_BuilderResult.prototype = {
	getSingleItemByName: function(name) {
		var items = this.names.h[name];
		if(items == null) {
			throw haxe_Exception.thrown("builder result name " + name + " not found");
		}
		if(items.length != 1) {
			throw haxe_Exception.thrown("builder result name " + name + " expected single item but got " + items.length);
		}
		return items[0];
	}
	,getUpdatable: function(name) {
		var namesArray = this.names.h[name];
		if(namesArray == null) {
			throw haxe_Exception.thrown("Name " + name + " not found in BuilderResult");
		}
		return new bh_multianim_Updatable(namesArray);
	}
	,__class__: bh_multianim_BuilderResult
};
var bh_multianim_CallbackRequest = $hxEnums["bh.multianim.CallbackRequest"] = { __ename__:true,__constructs__:null
	,Name: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"bh.multianim.CallbackRequest",toString:$estr}; },$_._hx_name="Name",$_.__params__ = ["name"],$_)
	,NameWithIndex: ($_=function(name,index) { return {_hx_index:1,name:name,index:index,__enum__:"bh.multianim.CallbackRequest",toString:$estr}; },$_._hx_name="NameWithIndex",$_.__params__ = ["name","index"],$_)
	,Placeholder: ($_=function(name) { return {_hx_index:2,name:name,__enum__:"bh.multianim.CallbackRequest",toString:$estr}; },$_._hx_name="Placeholder",$_.__params__ = ["name"],$_)
	,PlaceholderWithIndex: ($_=function(name,index) { return {_hx_index:3,name:name,index:index,__enum__:"bh.multianim.CallbackRequest",toString:$estr}; },$_._hx_name="PlaceholderWithIndex",$_.__params__ = ["name","index"],$_)
};
bh_multianim_CallbackRequest.__constructs__ = [bh_multianim_CallbackRequest.Name,bh_multianim_CallbackRequest.NameWithIndex,bh_multianim_CallbackRequest.Placeholder,bh_multianim_CallbackRequest.PlaceholderWithIndex];
bh_multianim_CallbackRequest.__empty_constructs__ = [];
var bh_multianim_CallbackResult = $hxEnums["bh.multianim.CallbackResult"] = { __ename__:true,__constructs__:null
	,CBRInteger: ($_=function(val) { return {_hx_index:0,val:val,__enum__:"bh.multianim.CallbackResult",toString:$estr}; },$_._hx_name="CBRInteger",$_.__params__ = ["val"],$_)
	,CBRFloat: ($_=function(val) { return {_hx_index:1,val:val,__enum__:"bh.multianim.CallbackResult",toString:$estr}; },$_._hx_name="CBRFloat",$_.__params__ = ["val"],$_)
	,CBRString: ($_=function(val) { return {_hx_index:2,val:val,__enum__:"bh.multianim.CallbackResult",toString:$estr}; },$_._hx_name="CBRString",$_.__params__ = ["val"],$_)
	,CBRObject: ($_=function(val) { return {_hx_index:3,val:val,__enum__:"bh.multianim.CallbackResult",toString:$estr}; },$_._hx_name="CBRObject",$_.__params__ = ["val"],$_)
	,CBRNoResult: {_hx_name:"CBRNoResult",_hx_index:4,__enum__:"bh.multianim.CallbackResult",toString:$estr}
};
bh_multianim_CallbackResult.__constructs__ = [bh_multianim_CallbackResult.CBRInteger,bh_multianim_CallbackResult.CBRFloat,bh_multianim_CallbackResult.CBRString,bh_multianim_CallbackResult.CBRObject,bh_multianim_CallbackResult.CBRNoResult];
bh_multianim_CallbackResult.__empty_constructs__ = [bh_multianim_CallbackResult.CBRNoResult];
var bh_multianim_PlaceholderValues = $hxEnums["bh.multianim.PlaceholderValues"] = { __ename__:true,__constructs__:null
	,PVObject: ($_=function(obj) { return {_hx_index:0,obj:obj,__enum__:"bh.multianim.PlaceholderValues",toString:$estr}; },$_._hx_name="PVObject",$_.__params__ = ["obj"],$_)
	,PVFactory: ($_=function(factoryMethod) { return {_hx_index:1,factoryMethod:factoryMethod,__enum__:"bh.multianim.PlaceholderValues",toString:$estr}; },$_._hx_name="PVFactory",$_.__params__ = ["factoryMethod"],$_)
};
bh_multianim_PlaceholderValues.__constructs__ = [bh_multianim_PlaceholderValues.PVObject,bh_multianim_PlaceholderValues.PVFactory];
bh_multianim_PlaceholderValues.__empty_constructs__ = [];
var bh_multianim__$MultiAnimBuilder_InternalBuildMode = $hxEnums["bh.multianim._MultiAnimBuilder.InternalBuildMode"] = { __ename__:true,__constructs__:null
	,RootMode: {_hx_name:"RootMode",_hx_index:0,__enum__:"bh.multianim._MultiAnimBuilder.InternalBuildMode",toString:$estr}
	,ObjectMode: ($_=function(current) { return {_hx_index:1,current:current,__enum__:"bh.multianim._MultiAnimBuilder.InternalBuildMode",toString:$estr}; },$_._hx_name="ObjectMode",$_.__params__ = ["current"],$_)
	,LayersMode: ($_=function(current) { return {_hx_index:2,current:current,__enum__:"bh.multianim._MultiAnimBuilder.InternalBuildMode",toString:$estr}; },$_._hx_name="LayersMode",$_.__params__ = ["current"],$_)
	,TileGroupMode: ($_=function(tg) { return {_hx_index:3,tg:tg,__enum__:"bh.multianim._MultiAnimBuilder.InternalBuildMode",toString:$estr}; },$_._hx_name="TileGroupMode",$_.__params__ = ["tg"],$_)
};
bh_multianim__$MultiAnimBuilder_InternalBuildMode.__constructs__ = [bh_multianim__$MultiAnimBuilder_InternalBuildMode.RootMode,bh_multianim__$MultiAnimBuilder_InternalBuildMode.ObjectMode,bh_multianim__$MultiAnimBuilder_InternalBuildMode.LayersMode,bh_multianim__$MultiAnimBuilder_InternalBuildMode.TileGroupMode];
bh_multianim__$MultiAnimBuilder_InternalBuildMode.__empty_constructs__ = [bh_multianim__$MultiAnimBuilder_InternalBuildMode.RootMode];
var bh_multianim_MultiAnimBuilder = function(data,resourceLoader) {
	this.stateStack = [];
	this.currentNode = null;
	this.builderParams = { };
	this.indexedParams = new haxe_ds_StringMap();
	this.multiParserResult = data;
	this.resourceLoader = resourceLoader;
};
$hxClasses["bh.multianim.MultiAnimBuilder"] = bh_multianim_MultiAnimBuilder;
bh_multianim_MultiAnimBuilder.__name__ = "bh.multianim.MultiAnimBuilder";
bh_multianim_MultiAnimBuilder.load = function(byteData,resourceLoader,sourceName) {
	var parsed = bh_multianim_MultiAnimParser.parseFile(byteData,sourceName,resourceLoader);
	return new bh_multianim_MultiAnimBuilder(parsed,resourceLoader);
};
bh_multianim_MultiAnimBuilder.prototype = {
	popBuilderState: function() {
		var state = this.stateStack.pop();
		if(state == null) {
			throw haxe_Exception.thrown("builder state stack is empty");
		}
		this.indexedParams = state.indexedParams;
		this.builderParams = state.builderParams;
		this.currentNode = state.currentNode;
	}
	,pushBuilderState: function() {
		this.stateStack.push({ indexedParams : this.indexedParams, builderParams : this.builderParams, currentNode : this.currentNode});
		this.indexedParams = new haxe_ds_StringMap();
		this.builderParams = { };
		this.currentNode = null;
	}
	,resolveAsArrayElement: function(v) {
		if(v._hx_index == 0) {
			var arrayRef = v.arrayRef;
			var indexRef = v.index;
			var arrayVal = this.indexedParams.h[arrayRef];
			if(arrayVal == null) {
				throw haxe_Exception.thrown("array reference " + arrayRef + "[" + Std.string(indexRef) + "] does not exist");
			} else if(arrayVal._hx_index == 5) {
				var arrayVal1 = arrayVal.strArray;
				var index = this.resolveAsInteger(indexRef);
				if(index < 0 || index >= arrayVal1.length) {
					throw haxe_Exception.thrown("index out of bounds " + index + " for array " + arrayVal1.toString());
				}
				return arrayVal1[index];
			} else {
				throw haxe_Exception.thrown("element of array reference " + arrayRef + "[" + Std.string(indexRef) + "] is not an array but " + arrayRef);
			}
		} else {
			throw haxe_Exception.thrown("expected array element but got " + Std.string(v));
		}
	}
	,resolveAsArray: function(v) {
		switch(v._hx_index) {
		case 3:
			var array = v.refArr;
			var _g = [];
			var _g1 = 0;
			while(_g1 < array.length) {
				var v1 = array[_g1];
				++_g1;
				_g.push(this.resolveAsString(v1));
			}
			return _g;
		case 4:
			var refArr = v.refArr;
			var arrayVal = this.indexedParams.h[refArr];
			haxe_Log.trace(this.indexedParams == null ? "null" : haxe_ds_StringMap.stringify(this.indexedParams.h),{ fileName : "bh/multianim/MultiAnimBuilder.hx", lineNumber : 301, className : "bh.multianim.MultiAnimBuilder", methodName : "resolveAsArray"});
			if(arrayVal == null) {
				throw haxe_Exception.thrown("array reference " + refArr + " is not an array but " + Std.string(arrayVal));
			} else if(arrayVal._hx_index == 5) {
				var strArray = arrayVal.strArray;
				return strArray;
			} else {
				throw haxe_Exception.thrown("array reference " + refArr + " is not an array but " + Std.string(arrayVal));
			}
			break;
		default:
			throw haxe_Exception.thrown("expected array but got " + Std.string(v));
		}
	}
	,resolveAsColorInteger: function(v) {
		var _gthis = this;
		var getBuilderWithExternal = function(externalReference) {
			if(externalReference == null) {
				return _gthis;
			}
			var tmp = _gthis.multiParserResult;
			var tmp1 = tmp != null ? tmp.imports : null;
			var builder = tmp1 != null ? tmp1.h[externalReference] : null;
			if(builder == null) {
				throw haxe_Exception.thrown("could not find builder for external reference " + externalReference);
			}
			return builder;
		};
		switch(v._hx_index) {
		case 2:
			var i = v.i;
			return i;
		case 6:
			var _g = v.ref;
			return this.resolveAsInteger(v);
		case 11:
			var externalReference = v.externalReference;
			var name = v.palette;
			var x = v.x;
			var y = v.y;
			var builder = getBuilderWithExternal(externalReference);
			var palette = builder.getPalette(name);
			return palette.getColor2D(this.resolveAsInteger(x),this.resolveAsInteger(y));
		case 12:
			var externalReference = v.externalReference;
			var name = v.palette;
			var index = v.index;
			var builder = getBuilderWithExternal(externalReference);
			var palette = builder.getPalette(name);
			return palette.getColorByIndex(this.resolveAsInteger(index));
		default:
			throw haxe_Exception.thrown("expected color to resolve, got " + Std.string(v));
		}
	}
	,resolveRVFunction: function(functionType) {
		var gridCoordinateSystem = bh_multianim_MultiAnimParser.getGridCoordinateSystem(this.currentNode);
		if(gridCoordinateSystem == null) {
			throw haxe_Exception.thrown("cannot resolve " + Std.string(functionType) + " as there is no grid defined");
		}
		switch(functionType._hx_index) {
		case 0:
			return gridCoordinateSystem.spacingX;
		case 1:
			return gridCoordinateSystem.spacingY;
		}
	}
	,resolveAsInteger: function(v) {
		var _gthis = this;
		var handleCallback = function(result,input,defaultValue) {
			switch(result._hx_index) {
			case 0:
				var val = result.val;
				return val;
			case 4:
				if(defaultValue != null) {
					return _gthis.resolveAsInteger(defaultValue);
				} else {
					throw haxe_Exception.thrown("no default value for " + Std.string(input));
				}
				break;
			default:
				throw haxe_Exception.thrown("callback should return int but was " + Std.string(result) + " for " + Std.string(input));
			}
		};
		switch(v._hx_index) {
		case 0:
			var array = v.arrayRef;
			var index = v.index;
			return this.resolveAsArrayElement(v);
		case 1:
			var _g = v.s;
			throw haxe_Exception.thrown("should be an integer");
		case 2:
			var i = v.i;
			return i;
		case 3:
			var refArray = v.refArr;
			throw haxe_Exception.thrown("RVArray not supported");
		case 4:
			var refArray = v.refArr;
			throw haxe_Exception.thrown("RVArrayReference not supported");
		case 5:
			var _g = v.f;
			throw haxe_Exception.thrown("should be an integer");
		case 6:
			var ref = v.ref;
			if(!Object.prototype.hasOwnProperty.call(this.indexedParams.h,ref)) {
				throw haxe_Exception.thrown("reference " + ref + " does not exist");
			}
			var val = this.indexedParams.h[ref];
			if(val == null) {
				throw haxe_Exception.thrown("reference " + ref + " is null");
			} else {
				switch(val._hx_index) {
				case 1:
					var val1 = val.val;
					return val1;
				case 4:
					var s = val.s;
					return this.stringToInt(s);
				default:
					throw haxe_Exception.thrown("reference " + ref + " is not a value but " + Std.string(val));
				}
			}
			break;
		case 7:
			var functionType = v.functionType;
			return this.resolveRVFunction(functionType);
		case 8:
			var e = v.e;
			return this.resolveAsInteger(e);
		case 9:
			var name = v.name;
			var idx = v.index;
			var defaultValue = v.defaultValue;
			var input = bh_multianim_CallbackRequest.NameWithIndex(this.resolveAsString(name),this.resolveAsInteger(idx));
			var result = this.builderParams.callback(input);
			return handleCallback(result,input,defaultValue);
		case 10:
			var name = v.name;
			var defaultValue = v.defaultValue;
			var input = bh_multianim_CallbackRequest.Name(this.resolveAsString(name));
			var result = this.builderParams.callback(input);
			return handleCallback(result,input,defaultValue);
		case 11:
			var _g = v.externalReference;
			var _g = v.palette;
			var _g = v.x;
			var _g = v.y;
			return this.resolveAsColorInteger(v);
		case 12:
			var _g = v.externalReference;
			var _g = v.palette;
			var _g = v.index;
			return this.resolveAsColorInteger(v);
		case 13:
			var op = v.op;
			var e1 = v.e1;
			var e2 = v.e2;
			switch(op._hx_index) {
			case 0:
				return this.resolveAsInteger(e1) + this.resolveAsInteger(e2);
			case 1:
				return this.resolveAsInteger(e1) * this.resolveAsInteger(e2);
			case 2:
				return this.resolveAsInteger(e1) - this.resolveAsInteger(e2);
			case 3:
				return this.resolveAsInteger(e1) / this.resolveAsInteger(e2) | 0;
			case 4:
				return this.resolveAsInteger(e1) / this.resolveAsInteger(e2) | 0;
			case 5:
				return this.resolveAsInteger(e1) % this.resolveAsInteger(e2) | 0;
			}
			break;
		}
	}
	,resolveAsNumber: function(v) {
		switch(v._hx_index) {
		case 0:
			var array = v.arrayRef;
			var index = v.index;
			return this.resolveAsArrayElement(v);
		case 1:
			var _g = v.s;
			throw haxe_Exception.thrown("should be an integer or float");
		case 2:
			var i = v.i;
			return i;
		case 3:
			var refArray = v.refArr;
			throw haxe_Exception.thrown("RVArray not supported");
		case 4:
			var refArray = v.refArr;
			throw haxe_Exception.thrown("RVArrayReference not supported");
		case 5:
			var f = v.f;
			return f;
		case 6:
			var ref = v.ref;
			if(!Object.prototype.hasOwnProperty.call(this.indexedParams.h,ref)) {
				throw haxe_Exception.thrown("reference " + ref + " does not exist");
			}
			var val = this.indexedParams.h[ref];
			if(val == null) {
				throw haxe_Exception.thrown("reference " + ref + " is null");
			} else {
				switch(val._hx_index) {
				case 1:
					var val1 = val.val;
					return val1;
				case 2:
					var val1 = val.val;
					return val1;
				default:
					throw haxe_Exception.thrown("reference " + ref + " is not a value but " + Std.string(val));
				}
			}
			break;
		case 7:
			var functionType = v.functionType;
			return this.resolveRVFunction(functionType);
		case 8:
			var e = v.e;
			return this.resolveAsNumber(e);
		case 9:
			var name = v.name;
			var idx = v.index;
			var defaultValue = v.defaultValue;
			var input = bh_multianim_CallbackRequest.NameWithIndex(this.resolveAsString(name),this.resolveAsInteger(idx));
			var result = this.builderParams.callback(input);
			if(result == null) {
				throw haxe_Exception.thrown("callback should return number but was null");
			} else {
				switch(result._hx_index) {
				case 0:
					var val = result.val;
					return js_Boot.__cast(val , Float);
				case 1:
					var val = result.val;
					return val;
				case 2:
					var val = result.val;
					throw haxe_Exception.thrown("callback should return number but was " + Std.string(result) + " for " + Std.string(input));
				case 3:
					var _g = result.val;
					throw haxe_Exception.thrown("callback should return number but was CBRObject " + Std.string(result) + " for " + Std.string(input));
				case 4:
					return this.resolveAsNumber(defaultValue);
				}
			}
			break;
		case 10:
			var name = v.name;
			var defaultValue = v.defaultValue;
			var input = bh_multianim_CallbackRequest.Name(this.resolveAsString(name));
			var result = this.builderParams.callback(input);
			if(result == null) {
				throw haxe_Exception.thrown("callback should return number but was null for " + Std.string(input));
			} else {
				switch(result._hx_index) {
				case 0:
					var val = result.val;
					return js_Boot.__cast(val , Float);
				case 1:
					var val = result.val;
					return val;
				case 2:
					var val = result.val;
					throw haxe_Exception.thrown("callback should return number but was " + val);
				case 3:
					var _g = result.val;
					throw haxe_Exception.thrown("callback should return number but was CBRObject for " + Std.string(input));
				case 4:
					return this.resolveAsNumber(defaultValue);
				}
			}
			break;
		case 11:
			var _g = v.externalReference;
			var _g = v.palette;
			var _g = v.x;
			var _g = v.y;
			throw haxe_Exception.thrown("reference is a color but needs to be float");
		case 12:
			var _g = v.externalReference;
			var _g = v.palette;
			var _g = v.index;
			throw haxe_Exception.thrown("reference is a color but needs to be float");
		case 13:
			var op = v.op;
			var e1 = v.e1;
			var e2 = v.e2;
			switch(op._hx_index) {
			case 0:
				return this.resolveAsNumber(e1) + this.resolveAsNumber(e2);
			case 1:
				return this.resolveAsNumber(e1) * this.resolveAsNumber(e2);
			case 2:
				return this.resolveAsNumber(e1) - this.resolveAsNumber(e2);
			case 3:
				return this.resolveAsNumber(e1) / this.resolveAsNumber(e2);
			case 4:
				return this.resolveAsInteger(e1) / this.resolveAsInteger(e2) | 0;
			case 5:
				return this.resolveAsNumber(e1) % this.resolveAsNumber(e2);
			}
			break;
		}
	}
	,resolveAsString: function(v) {
		var _gthis = this;
		var handleCallback = function(result,input,defaultValue) {
			if(result == null) {
				throw haxe_Exception.thrown("callback should return string but was null for " + Std.string(input));
			} else {
				switch(result._hx_index) {
				case 0:
					var val = result.val;
					return "" + val;
				case 1:
					var val = result.val;
					return "" + val;
				case 2:
					var val = result.val;
					return val;
				case 3:
					var _g = result.val;
					throw haxe_Exception.thrown("callback should return string but was CBRObject for " + Std.string(input));
				case 4:
					if(defaultValue != null) {
						return _gthis.resolveAsString(defaultValue);
					} else {
						throw haxe_Exception.thrown("no default value for " + Std.string(input));
					}
					break;
				}
			}
		};
		switch(v._hx_index) {
		case 0:
			var array = v.arrayRef;
			var index = v.index;
			return this.resolveAsArrayElement(v);
		case 1:
			var s = v.s;
			return s;
		case 2:
			var i = v.i;
			return "" + i;
		case 3:
			var refArray = v.refArr;
			throw haxe_Exception.thrown("RVArray not supported");
		case 4:
			var refArray = v.refArr;
			throw haxe_Exception.thrown("RVArrayReference not supported");
		case 5:
			var f = v.f;
			return "" + f;
		case 6:
			var ref = v.ref;
			if(!Object.prototype.hasOwnProperty.call(this.indexedParams.h,ref)) {
				throw haxe_Exception.thrown("reference " + ref + " does not exist");
			}
			var val = this.indexedParams.h[ref];
			switch(val._hx_index) {
			case 0:
				var _g = val.idx;
				var value = val.value;
				return value;
			case 1:
				var val1 = val.val;
				return "" + val1;
			case 4:
				var s = val.s;
				return s;
			default:
				throw haxe_Exception.thrown("invalid reference value " + ref + ", expected string got " + Std.string(val));
			}
			break;
		case 7:
			var functionType = v.functionType;
			return "" + this.resolveAsInteger(v);
		case 8:
			var e = v.e;
			throw haxe_Exception.thrown("not supported " + Std.string(v));
		case 9:
			var name = v.name;
			var idx = v.index;
			var defaultValue = v.defaultValue;
			var input = bh_multianim_CallbackRequest.NameWithIndex(this.resolveAsString(name),this.resolveAsInteger(idx));
			var result = this.builderParams.callback(input);
			return handleCallback(result,input,defaultValue);
		case 10:
			var name = v.name;
			var defaultValue = v.defaultValue;
			var input = bh_multianim_CallbackRequest.Name(this.resolveAsString(name));
			var result = this.builderParams.callback(input);
			return handleCallback(result,input,defaultValue);
		case 11:
			var _g = v.externalReference;
			var _g = v.palette;
			var _g = v.x;
			var _g = v.y;
			var color = this.resolveAsColorInteger(v);
			return "" + color;
		case 12:
			var _g = v.externalReference;
			var _g = v.palette;
			var _g = v.index;
			var color = this.resolveAsColorInteger(v);
			return "" + color;
		case 13:
			var op = v.op;
			var e1 = v.e1;
			var e2 = v.e2;
			if(op._hx_index == 0) {
				return this.resolveAsString(e1) + this.resolveAsString(e2);
			} else {
				throw haxe_Exception.thrown("op " + Std.string(op) + " not supported on strings");
			}
			break;
		}
	}
	,generatePlaceholderBitmap: function(type) {
		switch(type._hx_index) {
		case 0:
			var w = type.width;
			var h = type.height;
			var color = type.color;
			var pl = new bh_base_PixelLines(w,h);
			pl.filledRect(0,0,w - 1,h - 1,-8355712);
			pl.rect(0,0,w - 1,h - 1,color);
			pl.line(0,0,w - 1,h - 1,color);
			pl.line(0,h - 1,w,-1,color);
			pl.updateBitmap();
			return pl.tile;
		case 1:
			var w = type.width;
			var h = type.height;
			var color = type.color;
			var color1 = color;
			if(color1 >>> 24 == 0) {
				color1 |= -16777216;
			}
			return h2d_Tile.fromColor(color1,w,h);
		}
	}
	,loadTileSource: function(tileSource) {
		var _gthis = this;
		var tile;
		switch(tileSource._hx_index) {
		case 0:
			var filename = tileSource.filename;
			tile = this.resourceLoader.loadTile(this.resolveAsString(filename));
			break;
		case 1:
			var sheet = tileSource.sheet;
			var name = tileSource.name;
			tile = this.loadTileImpl(sheet,this.resolveAsString(name)).tile;
			break;
		case 2:
			var sheet = tileSource.sheet;
			var name = tileSource.name;
			var index = tileSource.index;
			tile = this.loadTileImpl(sheet,this.resolveAsString(name),this.resolveAsInteger(index)).tile;
			break;
		case 3:
			var type = tileSource.type;
			var resolvedType;
			switch(type._hx_index) {
			case 0:
				var width = type.width;
				var height = type.height;
				var color = type.color;
				resolvedType = bh_base_ResolvedGeneratedTileType.Cross(this.resolveAsInteger(width),this.resolveAsInteger(height),this.resolveAsColorInteger(color));
				break;
			case 1:
				var width = type.width;
				var height = type.height;
				var color = type.color;
				resolvedType = bh_base_ResolvedGeneratedTileType.SolidColor(this.resolveAsInteger(width),this.resolveAsInteger(height),this.resolveAsColorInteger(color));
				break;
			}
			tile = this.resourceLoader.getOrCreatePlaceholder(resolvedType,function(resolvedType) {
				return _gthis.generatePlaceholderBitmap(resolvedType);
			});
			break;
		}
		if(tile == null) {
			throw haxe_Exception.thrown("could not load tile " + Std.string(tileSource));
		}
		return tile;
	}
	,createHtmlText: function(font) {
		var _gthis = this;
		var t = new h2d_HtmlText(font);
		t.loadFont = function(name) {
			return _gthis.resourceLoader.loadFont(name);
		};
		return t;
	}
	,isMatch: function(node,indexedParams) {
		var match = null;
		match = function(condValue,currentValue) {
			switch(condValue._hx_index) {
			case 0:
				var a = condValue.a;
				switch(currentValue._hx_index) {
				case 0:
					var idx = currentValue.idx;
					var v = currentValue.value;
					if(a.indexOf(v) == -1) {
						return false;
					}
					break;
				case 1:
					var val = currentValue.val;
					if(a.indexOf(val == null ? "null" : "" + val) == -1) {
						return false;
					}
					break;
				case 4:
					var s = currentValue.s;
					if(a.indexOf(s) == -1) {
						return false;
					}
					break;
				default:
					throw haxe_Exception.thrown("invalid param types " + Std.string(currentValue) + ", " + Std.string(condValue));
				}
				break;
			case 1:
				var fromInclusive = condValue.fromInclusive;
				var toInclusive = condValue.toInclusive;
				switch(currentValue._hx_index) {
				case 1:
					var val = currentValue.val;
					if(fromInclusive != null && val < fromInclusive || toInclusive != null && val > toInclusive) {
						return false;
					}
					break;
				case 2:
					var val = currentValue.val;
					if(fromInclusive != null && val < fromInclusive || toInclusive != null && val > toInclusive) {
						return false;
					}
					break;
				default:
					throw haxe_Exception.thrown("invalid param types " + Std.string(currentValue) + ", " + Std.string(condValue));
				}
				break;
			case 2:
				var idx = condValue.idx;
				var value = condValue.value;
				switch(currentValue._hx_index) {
				case 0:
					var i = currentValue.idx;
					var value1 = currentValue.value;
					if(idx != i) {
						return false;
					}
					break;
				case 4:
					var s = currentValue.s;
					if(s != value) {
						return false;
					}
					break;
				default:
					throw haxe_Exception.thrown("invalid param types " + Std.string(currentValue) + ", " + Std.string(condValue));
				}
				break;
			case 3:
				var val = condValue.val;
				if(currentValue._hx_index == 1) {
					var iVal = currentValue.val;
					if(val != iVal) {
						return false;
					}
				} else {
					throw haxe_Exception.thrown("invalid param types " + Std.string(currentValue) + ", " + Std.string(condValue));
				}
				break;
			case 4:
				var f = condValue.f;
				if(currentValue._hx_index == 3) {
					var i = currentValue.f;
					if((f & i) != f) {
						return false;
					}
				} else {
					throw haxe_Exception.thrown("invalid param types " + Std.string(currentValue) + ", " + Std.string(condValue));
				}
				break;
			case 5:
				break;
			case 6:
				var s = condValue.s;
				switch(currentValue._hx_index) {
				case 0:
					var idx = currentValue.idx;
					var value = currentValue.value;
					if(value != s) {
						return false;
					}
					break;
				case 4:
					var sv = currentValue.s;
					if(s != sv) {
						return false;
					}
					break;
				default:
					throw haxe_Exception.thrown("invalid param types " + Std.string(currentValue) + ", " + Std.string(condValue));
				}
				break;
			case 7:
				var condValue1 = condValue.value;
				return !match(condValue1,currentValue);
			}
			return true;
		};
		var _g = node.conditionals;
		switch(_g._hx_index) {
		case 0:
			var conditions = _g.values;
			var strict = _g.strict;
			var h = conditions.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var key1 = _g_key;
				var value = _g_value;
				if(indexedParams.h[key1] == null) {
					return false;
				}
			}
			var h = indexedParams.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var currentName = _g_key;
				var currentValue = _g_value;
				var condValue = conditions.h[currentName];
				if(condValue == null) {
					if(strict) {
						return false;
					} else {
						continue;
					}
				}
				if(!match(condValue,currentValue)) {
					return false;
				}
			}
			return true;
		case 1:
			return true;
		}
	}
	,addPosition: function(obj,x,y) {
		obj.posChanged = true;
		obj.x += x;
		obj.posChanged = true;
		obj.y += y;
	}
	,calculatePosition: function(position,gridCoordinateSystem,hexCoordinateSystem) {
		if(this.builderParams == null) {
			this.builderParams = { callback : $bind(this,this.defaultCallback)};
		} else if(this.builderParams.callback == null) {
			this.builderParams.callback = $bind(this,this.defaultCallback);
		}
		var pos;
		switch(position._hx_index) {
		case 0:
			pos = new bh_base_FPoint(0,0);
			break;
		case 1:
			var x = position.x;
			var y = position.y;
			pos = new bh_base_FPoint(this.resolveAsNumber(x),this.resolveAsNumber(y));
			break;
		case 2:
			var layoutName = position.layoutName;
			var index = position.index;
			var idx = 0;
			if(index != null) {
				idx = this.resolveAsInteger(index);
			}
			var pt = this.getLayouts(this.builderParams).getPoint(layoutName,idx);
			pos = new bh_base_FPoint(pt.x,pt.y);
			break;
		case 3:
			var hex = position.hex;
			if(hexCoordinateSystem == null) {
				throw haxe_Exception.thrown("hexCoordinateSystem is null");
			}
			pos = bh_multianim_HexCoordinateSystemHelper.resolveAsHexPosition(hexCoordinateSystem,hex);
			break;
		case 4:
			var gridX = position.gridX;
			var gridY = position.gridY;
			if(gridCoordinateSystem == null) {
				throw haxe_Exception.thrown("gridCoordinateSystem is null");
			}
			pos = bh_multianim_CoordinateSystems_resolveAsGrid(gridCoordinateSystem,this.resolveAsInteger(gridX),this.resolveAsInteger(gridY));
			break;
		case 5:
			var direction = position.direction;
			var factor = position.factor;
			if(hexCoordinateSystem == null) {
				throw haxe_Exception.thrown("hexCoordinateSystem is null");
			}
			pos = bh_multianim_HexCoordinateSystemHelper.resolveAsHexEdge(hexCoordinateSystem,this.resolveAsInteger(direction),this.resolveAsNumber(factor));
			break;
		case 6:
			var count = position.count;
			var factor = position.factor;
			if(hexCoordinateSystem == null) {
				throw haxe_Exception.thrown("hexCoordinateSystem is null");
			}
			pos = bh_multianim_HexCoordinateSystemHelper.resolveAsHexCorner(hexCoordinateSystem,this.resolveAsInteger(count),this.resolveAsNumber(factor));
			break;
		}
		return pos;
	}
	,drawPixles: function(shapes,gridCoordinateSystem,hexCoordinateSystem) {
		var bounds_xMin = 1e20;
		var bounds_yMin = 1e20;
		var bounds_xMax = -1e20;
		var bounds_yMax = -1e20;
		var _g = 0;
		while(_g < shapes.length) {
			var s = shapes[_g];
			++_g;
			switch(s._hx_index) {
			case 0:
				var line = s.line;
				var startPos = this.calculatePosition(line.start,gridCoordinateSystem,hexCoordinateSystem);
				var x = startPos.x;
				var y = startPos.y;
				if(x < bounds_xMin) {
					bounds_xMin = x;
				}
				if(x > bounds_xMax) {
					bounds_xMax = x;
				}
				if(y < bounds_yMin) {
					bounds_yMin = y;
				}
				if(y > bounds_yMax) {
					bounds_yMax = y;
				}
				var endPos = this.calculatePosition(line.end,gridCoordinateSystem,hexCoordinateSystem);
				var x1 = endPos.x;
				var y1 = endPos.y;
				if(x1 < bounds_xMin) {
					bounds_xMin = x1;
				}
				if(x1 > bounds_xMax) {
					bounds_xMax = x1;
				}
				if(y1 < bounds_yMin) {
					bounds_yMin = y1;
				}
				if(y1 > bounds_yMax) {
					bounds_yMax = y1;
				}
				break;
			case 1:
				var rect = s.rect;
				var startPos1 = this.calculatePosition(rect.start,gridCoordinateSystem,hexCoordinateSystem);
				var x2 = startPos1.x;
				var y2 = startPos1.y;
				if(x2 < bounds_xMin) {
					bounds_xMin = x2;
				}
				if(x2 > bounds_xMax) {
					bounds_xMax = x2;
				}
				if(y2 < bounds_yMin) {
					bounds_yMin = y2;
				}
				if(y2 > bounds_yMax) {
					bounds_yMax = y2;
				}
				var x3 = startPos1.x + this.resolveAsInteger(rect.width);
				var y3 = startPos1.y + this.resolveAsInteger(rect.height);
				if(x3 < bounds_xMin) {
					bounds_xMin = x3;
				}
				if(x3 > bounds_xMax) {
					bounds_xMax = x3;
				}
				if(y3 < bounds_yMin) {
					bounds_yMin = y3;
				}
				if(y3 > bounds_yMax) {
					bounds_yMax = y3;
				}
				break;
			case 2:
				var rect1 = s.rect;
				var startPos2 = this.calculatePosition(rect1.start,gridCoordinateSystem,hexCoordinateSystem);
				var x4 = startPos2.x;
				var y4 = startPos2.y;
				if(x4 < bounds_xMin) {
					bounds_xMin = x4;
				}
				if(x4 > bounds_xMax) {
					bounds_xMax = x4;
				}
				if(y4 < bounds_yMin) {
					bounds_yMin = y4;
				}
				if(y4 > bounds_yMax) {
					bounds_yMax = y4;
				}
				var x5 = startPos2.x + this.resolveAsInteger(rect1.width);
				var y5 = startPos2.y + this.resolveAsInteger(rect1.height);
				if(x5 < bounds_xMin) {
					bounds_xMin = x5;
				}
				if(x5 > bounds_xMax) {
					bounds_xMax = x5;
				}
				if(y5 < bounds_yMin) {
					bounds_yMin = y5;
				}
				if(y5 > bounds_yMax) {
					bounds_yMax = y5;
				}
				break;
			}
		}
		var pl = new bh_base_PixelLines((Math.max(Math.ceil(bounds_xMax - bounds_xMin),1) | 0) + 1,Math.max(Math.ceil(bounds_yMax - bounds_yMin),1) + 1 | 0);
		var minX = bounds_xMin | 0;
		var minY = bounds_yMin | 0;
		var _g = 0;
		while(_g < shapes.length) {
			var s = shapes[_g];
			++_g;
			switch(s._hx_index) {
			case 0:
				var line = s.line;
				var startPos = this.calculatePosition(line.start,gridCoordinateSystem,hexCoordinateSystem);
				var endPos = this.calculatePosition(line.end,gridCoordinateSystem,hexCoordinateSystem);
				var tmp = startPos.x - minX | 0;
				var tmp1 = startPos.y - minY | 0;
				var tmp2 = endPos.x - minX | 0;
				var tmp3 = endPos.y - minY | 0;
				var color = this.resolveAsColorInteger(line.color);
				if(color >>> 24 == 0) {
					color |= -16777216;
				}
				pl.line(tmp,tmp1,tmp2,tmp3,color);
				break;
			case 1:
				var rect = s.rect;
				var start = this.calculatePosition(rect.start,gridCoordinateSystem,hexCoordinateSystem);
				var tmp4 = start.x - minX | 0;
				var tmp5 = start.y - minY | 0;
				var tmp6 = this.resolveAsInteger(rect.width);
				var tmp7 = this.resolveAsInteger(rect.height);
				var color1 = this.resolveAsColorInteger(rect.color);
				if(color1 >>> 24 == 0) {
					color1 |= -16777216;
				}
				pl.rect(tmp4,tmp5,tmp6,tmp7,color1);
				break;
			case 2:
				var rect1 = s.rect;
				var start1 = this.calculatePosition(rect1.start,gridCoordinateSystem,hexCoordinateSystem);
				var tmp8 = start1.x - minX | 0;
				var tmp9 = start1.y - minY | 0;
				var tmp10 = this.resolveAsInteger(rect1.width);
				var tmp11 = this.resolveAsInteger(rect1.height);
				var color2 = this.resolveAsColorInteger(rect1.color);
				if(color2 >>> 24 == 0) {
					color2 |= -16777216;
				}
				pl.filledRect(tmp8,tmp9,tmp10,tmp11,color2);
				break;
			}
		}
		pl.updateBitmap();
		return { pixelLines : pl, minX : minX, minY : minY};
	}
	,buildTileGroup: function(node,tileGroup,currentPos,gridCoordinateSystem,hexCoordinateSystem,builderParams) {
		if(this.isMatch(node,this.indexedParams) == false) {
			return;
		}
		this.currentNode = node;
		var pos = this.calculatePosition(node.pos,gridCoordinateSystem,hexCoordinateSystem).toPoint();
		currentPos.add(pos.x,pos.y);
		var skipChildren = false;
		var tileGroupTile;
		var _g = node.type;
		switch(_g._hx_index) {
		case 1:
			var tileSource = _g.tileSource;
			var hAlign = _g.hAlign;
			var vAligh = _g.vAligh;
			var tile = this.loadTileSource(tileSource);
			var height = tile.height;
			var width = tile.width;
			var dh;
			switch(vAligh._hx_index) {
			case 0:
				dh = 0.;
				break;
			case 1:
				dh = -(height * .5);
				break;
			case 2:
				dh = -height;
				break;
			}
			var wh;
			switch(hAlign._hx_index) {
			case 0:
				wh = 0.;
				break;
			case 1:
				wh = -width;
				break;
			case 2:
				wh = -(width * .5);
				break;
			}
			tile = tile.sub(0,0,width,height,wh,dh);
			tileGroupTile = tile;
			break;
		case 2:
			tileGroupTile = null;
			break;
		case 5:
			var shapes = _g.shapes;
			var pixelsResult = this.drawPixles(shapes,gridCoordinateSystem,hexCoordinateSystem);
			currentPos.add(pixelsResult.minX,pixelsResult.minY);
			tileGroupTile = pixelsResult.pixelLines.tile;
			break;
		case 15:
			var varName = _g.varName;
			var repeatType = _g.repeatType;
			var dx = 0;
			var dy = 0;
			var repeatCount = 0;
			var iterator = null;
			var arrayIterator = [];
			switch(repeatType._hx_index) {
			case 0:
				var dirX = repeatType.dx;
				var dirY = repeatType.dy;
				var repeats = repeatType.repeatCount;
				repeatCount = this.resolveAsInteger(repeats);
				dx = dirX == null ? 0 : this.resolveAsInteger(dirX);
				dy = dirY == null ? 0 : this.resolveAsInteger(dirY);
				break;
			case 1:
				var layoutName = repeatType.layoutName;
				var l = this.getLayouts();
				repeatCount = l.getLayoutSequenceLengthByLayoutName(layoutName);
				iterator = l.getIterator(layoutName);
				break;
			case 2:
				var variableName = repeatType.valueVariableName;
				var arrayName = repeatType.arrayName;
				arrayIterator = this.resolveAsArray(bh_multianim_ReferencableValue.RVArrayReference(arrayName));
				repeatCount = arrayIterator.length;
				break;
			}
			var this1 = this.indexedParams;
			var key = bh_multianim_MultiAnimParser_getNameString(node.updatableName);
			if(Object.prototype.hasOwnProperty.call(this1.h,key)) {
				throw haxe_Exception.thrown("cannot use repeatable index param \"" + varName + "\" as it is already defined");
			}
			var _g = 0;
			var _g1 = repeatCount;
			while(_g < _g1) {
				var count = _g++;
				var gridCoordinateSystem = bh_multianim_MultiAnimParser.getGridCoordinateSystem(node);
				var hexCoordinateSystem = bh_multianim_MultiAnimParser.getHexCoordinateSystem(node);
				var _g2 = 0;
				var _g3 = node.children;
				while(_g2 < _g3.length) {
					var childNode = _g3[_g2];
					++_g2;
					this.indexedParams.h[varName] = bh_multianim_ResolvedIndexParameters.Value(count);
					var iterPos = currentPos.clone();
					switch(repeatType._hx_index) {
					case 0:
						var _g4 = repeatType.dx;
						var _g5 = repeatType.dy;
						var _g6 = repeatType.repeatCount;
						iterPos.add(dx * count,dy * count);
						break;
					case 1:
						var _g7 = repeatType.layoutName;
						var pt = iterator.next();
						iterPos.add(pt.x,pt.y);
						break;
					case 2:
						var valueVariableName = repeatType.valueVariableName;
						var array = repeatType.arrayName;
						this.indexedParams.h[valueVariableName] = bh_multianim_ResolvedIndexParameters.StringValue(arrayIterator[count]);
						haxe_Log.trace("" + count + " = arrayIterator[count] " + arrayIterator[count],{ fileName : "bh/multianim/MultiAnimBuilder.hx", lineNumber : 800, className : "bh.multianim.MultiAnimBuilder", methodName : "buildTileGroup"});
						break;
					}
					this.buildTileGroup(childNode,tileGroup,iterPos,gridCoordinateSystem,hexCoordinateSystem,builderParams);
				}
			}
			var _this = this.indexedParams;
			if(Object.prototype.hasOwnProperty.call(_this.h,varName)) {
				delete(_this.h[varName]);
			}
			skipChildren = true;
			tileGroupTile = null;
			break;
		default:
			throw haxe_Exception.thrown("unsupported node " + node.uniqueNodeName + " " + Std.string(node.type) + " in tileGroup mode");
		}
		this.addToTileGroup(node,currentPos,tileGroupTile,tileGroup);
		if(!skipChildren) {
			var _g = 0;
			var _g1 = node.children;
			while(_g < _g1.length) {
				var childNode = _g1[_g];
				++_g;
				this.buildTileGroup(childNode,tileGroup,currentPos.clone(),bh_multianim_MultiAnimParser.getGridCoordinateSystem(childNode),bh_multianim_MultiAnimParser.getHexCoordinateSystem(childNode),builderParams);
			}
		}
	}
	,addToTileGroup: function(node,currentPos,tileGroupTile,tileGroup) {
		if(tileGroupTile != null) {
			var scale = node.scale == null ? 1.0 : this.resolveAsNumber(node.scale);
			tileGroup.setDefaultColor(16777215,node.alpha != null ? this.resolveAsNumber(node.alpha) : 1.0);
			if(node.filter != null && node.filter != bh_multianim_FilterType.FilterNone) {
				throw haxe_Exception.thrown("groupTile does not support filters for " + Std.string(node.type));
			}
			if(node.blendMode != null && node.blendMode != h2d_BlendMode.Alpha) {
				throw haxe_Exception.thrown("groupTile does not support blendMode other than Alpha for " + Std.string(node.type));
			}
			tileGroup.content.addTransform(currentPos.x,currentPos.y,scale,scale,0,tileGroup.curColor,tileGroupTile);
		}
	}
	,build: function(node,buildMode,gridCoordinateSystem,hexCoordinateSystem,internalResults,builderParams) {
		if(this.isMatch(node,this.indexedParams) == false) {
			return null;
		}
		this.currentNode = node;
		var skipChildren = false;
		var layersParent = null;
		var selectedBuildMode = null;
		var current;
		switch(buildMode._hx_index) {
		case 0:
			current = null;
			break;
		case 1:
			var current1 = buildMode.current;
			current = current1;
			break;
		case 2:
			var current1 = buildMode.current;
			layersParent = current1;
			current = current1;
			break;
		case 3:
			var tg = buildMode.tg;
			this.buildTileGroup(node,tg,new bh_base_Point(0,0),gridCoordinateSystem,hexCoordinateSystem,builderParams);
			return null;
		}
		var addChild = function(toAdd) {
			if(node.layer != -1) {
				if(layersParent != null) {
					layersParent.add(toAdd,node.layer);
				} else {
					throw haxe_Exception.thrown("No layers parent for " + node.uniqueNodeName + "-" + Std.string(node.type));
				}
			} else if(current != null) {
				current.addChild(toAdd);
			}
		};
		var builtObject;
		var _g = node.type;
		switch(_g._hx_index) {
		case 0:
			var maxWidth = _g.maxWidth;
			var maxHeight = _g.maxHeight;
			var minWidth = _g.minWidth;
			var minHeight = _g.minHeight;
			var lineHeight = _g.lineHeight;
			var colWidth = _g.colWidth;
			var layout = _g.layout;
			var paddingTop = _g.paddingTop;
			var paddingBottom = _g.paddingBottom;
			var paddingLeft = _g.paddingLeft;
			var paddingRight = _g.paddingRight;
			var horizontalSpacing = _g.horizontalSpacing;
			var verticalSpacing = _g.verticalSpacing;
			var debug = _g.debug;
			var f = new h2d_Flow();
			if(maxWidth != null) {
				f.set_maxWidth(this.resolveAsInteger(maxWidth));
			}
			if(maxHeight != null) {
				f.set_maxHeight(this.resolveAsInteger(maxHeight));
			}
			if(minWidth != null) {
				f.set_minWidth(this.resolveAsInteger(minWidth));
			}
			if(minHeight != null) {
				f.set_minHeight(this.resolveAsInteger(minHeight));
			}
			if(lineHeight != null) {
				f.set_lineHeight(this.resolveAsInteger(lineHeight));
			}
			if(colWidth != null) {
				f.set_colWidth(this.resolveAsInteger(colWidth));
			}
			if(layout != null) {
				f.set_layout(layout);
			}
			if(paddingTop != null) {
				f.set_paddingTop(this.resolveAsInteger(paddingTop));
			}
			if(paddingBottom != null) {
				f.set_paddingBottom(this.resolveAsInteger(paddingBottom));
			}
			if(paddingLeft != null) {
				f.set_paddingLeft(this.resolveAsInteger(paddingLeft));
			}
			if(paddingRight != null) {
				f.set_paddingRight(this.resolveAsInteger(paddingRight));
			}
			if(horizontalSpacing != null) {
				f.set_horizontalSpacing(this.resolveAsInteger(horizontalSpacing));
			}
			if(verticalSpacing != null) {
				f.set_verticalSpacing(this.resolveAsInteger(verticalSpacing));
			}
			f.set_debug(debug);
			f.set_overflow(h2d_FlowOverflow.Limit);
			builtObject = bh_multianim_BuiltHeapsComponent.HeapsFlow(f);
			break;
		case 1:
			var tileSource = _g.tileSource;
			var hAlign = _g.hAlign;
			var vAligh = _g.vAligh;
			var tile = this.loadTileSource(tileSource);
			var height = tile.height;
			var width = tile.width;
			var dh;
			switch(vAligh._hx_index) {
			case 0:
				dh = 0.;
				break;
			case 1:
				dh = -(height * .5);
				break;
			case 2:
				dh = -height;
				break;
			}
			var wh;
			switch(hAlign._hx_index) {
			case 0:
				wh = 0.;
				break;
			case 1:
				wh = -width;
				break;
			case 2:
				wh = -(width * .5);
				break;
			}
			tile = tile.sub(0,0,width,height,wh,dh);
			var b = new h2d_Bitmap(tile);
			builtObject = bh_multianim_BuiltHeapsComponent.HeapsBitmap(b);
			break;
		case 2:
			builtObject = bh_multianim_BuiltHeapsComponent.HeapsObject(new h2d_Object());
			break;
		case 3:
			var filename = _g.filename;
			var initialState = _g.initialState;
			var selectorReferences = _g.selector;
			var _g1 = new haxe_ds_StringMap();
			var h = selectorReferences.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var k = _g_key;
				var v = _g_value;
				var value = this.resolveAsString(v);
				_g1.h[k] = value;
			}
			var selector = _g1;
			var animSM = this.resourceLoader.createAnimSM(filename,selector);
			animSM.addCommand(bh_stateanim_AnimationCommand.SwitchState(this.resolveAsString(initialState)),bh_stateanim_CommandTrigger.ExecuteNow);
			builtObject = bh_multianim_BuiltHeapsComponent.StateAnim(animSM);
			break;
		case 4:
			var initialState = _g.initialState;
			var construct = _g.construct;
			var animSM = new bh_stateanim_AnimationSM(new haxe_ds_StringMap());
			var h = construct.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var key1 = _g_key;
				var value = _g_value;
				var sheet = value.sheet;
				var animName = value.name;
				var fps = value.fps;
				var loop = value.loop;
				var center = value.center;
				var loadedSheet = this.resourceLoader.loadSheet2(sheet);
				var anim = loadedSheet.getAnim(this.resolveAsString(animName));
				if(center) {
					var _g1 = 0;
					var _g2 = anim.length;
					while(_g1 < _g2) {
						var i = _g1++;
						var builtObject1 = anim[i].tile.center();
						anim[i] = anim[i].cloneWithNewTile(builtObject1);
					}
				}
				var _g3 = [];
				var _g4 = 0;
				while(_g4 < anim.length) {
					var a = anim[_g4];
					++_g4;
					_g3.push(bh_stateanim_AnimationFrameState.AF_FRAME(a.cloneWithDuration(1.0 / this.resolveAsNumber(fps))));
				}
				var astates = _g3;
				if(loop) {
					astates.push(bh_stateanim_AnimationFrameState.AF_LOOP(0,bh_stateanim_AnimationFrameCondition.FOREVER));
				}
				animSM.addAnimationState(key1,astates,new haxe_ds_StringMap());
			}
			var initialStateResolved = this.resolveAsString(initialState);
			if(Object.prototype.hasOwnProperty.call(animSM.animationStates.h,initialStateResolved) == false) {
				throw haxe_Exception.thrown("initialState " + initialStateResolved + " does not exist in constructed stateanim");
			}
			animSM.addCommand(bh_stateanim_AnimationCommand.SwitchState(initialStateResolved),bh_stateanim_CommandTrigger.ExecuteNow);
			builtObject = bh_multianim_BuiltHeapsComponent.StateAnim(animSM);
			break;
		case 5:
			var shapes = _g.shapes;
			var pixelsResult = this.drawPixles(shapes,gridCoordinateSystem,hexCoordinateSystem);
			var _this = pixelsResult.pixelLines;
			_this.posChanged = true;
			_this.x = pixelsResult.minX;
			_this.posChanged = true;
			_this.y = pixelsResult.minY;
			builtObject = bh_multianim_BuiltHeapsComponent.Pixels(pixelsResult.pixelLines);
			break;
		case 6:
			var textDef = _g.textDef;
			var font = this.resourceLoader.loadFont(this.resolveAsString(textDef.fontName));
			var t = textDef.isHtml ? this.createHtmlText(font) : new h2d_Text(font);
			var _g1 = textDef.halign;
			var builtObject1;
			if(_g1 == null) {
				builtObject1 = h2d_Align.Left;
			} else {
				switch(_g1._hx_index) {
				case 0:
					builtObject1 = h2d_Align.Left;
					break;
				case 1:
					builtObject1 = h2d_Align.Right;
					break;
				case 2:
					builtObject1 = h2d_Align.Center;
					break;
				}
			}
			t.set_textAlign(builtObject1);
			if(textDef.textAlignWidth != null) {
				t.set_maxWidth(textDef.textAlignWidth);
			} else if(gridCoordinateSystem != null) {
				t.set_maxWidth(gridCoordinateSystem.spacingX);
			}
			t.set_letterSpacing(textDef.letterSpacing);
			t.set_lineSpacing(textDef.lineSpacing);
			t.set_lineBreak(textDef.lineBreak);
			if(textDef.dropShadowXY != null) {
				t.dropShadow = { dx : textDef.dropShadowXY.x, dy : textDef.dropShadowXY.y, color : textDef.dropShadowColor, alpha : textDef.dropShadowAlpha};
			}
			t.set_textColor(this.resolveAsColorInteger(textDef.color));
			t.set_text(this.resolveAsString(textDef.text));
			builtObject = bh_multianim_BuiltHeapsComponent.HeapsText(t);
			break;
		case 7:
			var _g1 = _g.isTileGroup;
			var _g1 = _g.parameters;
			throw haxe_Exception.thrown("invalid state, programmable should not be build");
		case 8:
			var tg = new h2d_TileGroup();
			selectedBuildMode = bh_multianim__$MultiAnimBuilder_InternalBuildMode.TileGroupMode(tg);
			builtObject = bh_multianim_BuiltHeapsComponent.HeapsObject(tg);
			break;
		case 9:
			var _g1 = _g.layoutsDef;
			throw haxe_Exception.thrown("layouts not allowed as non-root node");
		case 10:
			var _g1 = _g.paths;
			throw haxe_Exception.thrown("paths not allowed as non-root node");
		case 11:
			var _g1 = _g.animatedPathDef;
			throw haxe_Exception.thrown("animatedPath not allowed as non-root node");
		case 12:
			var particlesDef = _g.particles;
			builtObject = bh_multianim_BuiltHeapsComponent.Particles(this.createParticleImpl(particlesDef,node.uniqueNodeName));
			break;
		case 13:
			if(current == null) {
				throw haxe_Exception.thrown("apply not allowed as root node");
			}
			var pos = this.calculatePosition(node.pos,bh_multianim_MultiAnimParser.getGridCoordinateSystem(node),bh_multianim_MultiAnimParser.getHexCoordinateSystem(node));
			this.addPosition(current,pos.x,pos.y);
			this.applyExtendedFormProperties(current,node);
			return null;
		case 14:
			var l = new h2d_Layers(current);
			selectedBuildMode = bh_multianim__$MultiAnimBuilder_InternalBuildMode.LayersMode(l);
			builtObject = bh_multianim_BuiltHeapsComponent.HeapsLayers(l);
			break;
		case 15:
			var varName = _g.varName;
			var repeatType = _g.repeatType;
			var object = new h2d_Object();
			var dx = 0;
			var dy = 0;
			var repeatCount = 0;
			var iterator = null;
			var arrayIterator = [];
			switch(repeatType._hx_index) {
			case 0:
				var dirX = repeatType.dx;
				var dirY = repeatType.dy;
				var repeats = repeatType.repeatCount;
				repeatCount = this.resolveAsInteger(repeats);
				dx = dirX == null ? 0 : this.resolveAsInteger(dirX);
				dy = dirY == null ? 0 : this.resolveAsInteger(dirY);
				break;
			case 1:
				var layoutName = repeatType.layoutName;
				var l = this.getLayouts();
				repeatCount = l.getLayoutSequenceLengthByLayoutName(layoutName);
				iterator = l.getIterator(layoutName);
				break;
			case 2:
				var variableName = repeatType.valueVariableName;
				var arrayName = repeatType.arrayName;
				arrayIterator = this.resolveAsArray(bh_multianim_ReferencableValue.RVArrayReference(arrayName));
				repeatCount = arrayIterator.length;
				break;
			}
			var this1 = this.indexedParams;
			var key = bh_multianim_MultiAnimParser_getNameString(node.updatableName);
			if(Object.prototype.hasOwnProperty.call(this1.h,key)) {
				throw haxe_Exception.thrown("cannot use repeatable index param \"" + varName + "\" as it is already defined");
			}
			var _g1 = 0;
			var _g2 = repeatCount;
			while(_g1 < _g2) {
				var count = _g1++;
				var gridCoordinateSystem = bh_multianim_MultiAnimParser.getGridCoordinateSystem(node);
				var hexCoordinateSystem = bh_multianim_MultiAnimParser.getHexCoordinateSystem(node);
				var _g3 = 0;
				var _g4 = node.children;
				while(_g3 < _g4.length) {
					var childNode = _g4[_g3];
					++_g3;
					this.indexedParams.h[varName] = bh_multianim_ResolvedIndexParameters.Value(count);
					if(repeatType._hx_index == 2) {
						var valueVariableName = repeatType.valueVariableName;
						var arrayName = repeatType.arrayName;
						this.indexedParams.h[valueVariableName] = bh_multianim_ResolvedIndexParameters.StringValue(arrayIterator[count]);
					}
					var obj = this.build(childNode,bh_multianim__$MultiAnimBuilder_InternalBuildMode.ObjectMode(object),gridCoordinateSystem,hexCoordinateSystem,internalResults,builderParams);
					if(obj == null) {
						continue;
					}
					switch(repeatType._hx_index) {
					case 0:
						var _g5 = repeatType.dx;
						var _g6 = repeatType.dy;
						var _g7 = repeatType.repeatCount;
						this.addPosition(obj,dx * count,dy * count);
						break;
					case 1:
						var _g8 = repeatType.layoutName;
						var pt = iterator.next();
						this.addPosition(obj,pt.x,pt.y);
						break;
					case 2:
						var valueVariableName1 = repeatType.valueVariableName;
						var array = repeatType.arrayName;
						break;
					}
				}
			}
			var _this = this.indexedParams;
			if(Object.prototype.hasOwnProperty.call(_this.h,varName)) {
				delete(_this.h[varName]);
			}
			skipChildren = true;
			builtObject = bh_multianim_BuiltHeapsComponent.HeapsObject(object);
			break;
		case 16:
			var externalReference = _g.externalReference;
			var reference = _g.programmableReference;
			var parameters = _g.parameters;
			var builder;
			if(externalReference != null) {
				var tmp = this.multiParserResult;
				var tmp1 = tmp != null ? tmp.imports : null;
				var builder1 = tmp1 != null ? tmp1.h[externalReference] : null;
				if(builder1 == null) {
					throw haxe_Exception.thrown("could not find builder for external reference " + externalReference);
				}
				builder = builder1;
			} else {
				builder = this;
			}
			haxe_Log.trace("build reference " + reference + " with parameters " + (parameters == null ? "null" : haxe_ds_StringMap.stringify(parameters.h)) + " and builderParams " + Std.string(builderParams) + " and indexedParams " + (this.indexedParams == null ? "null" : haxe_ds_StringMap.stringify(this.indexedParams.h)),{ fileName : "bh/multianim/MultiAnimBuilder.hx", lineNumber : 1054, className : "bh.multianim.MultiAnimBuilder", methodName : "build"});
			var result = builder.buildWithParameters(reference,parameters,builderParams,this.indexedParams);
			var object = result != null ? result.object : null;
			if(object == null) {
				throw haxe_Exception.thrown("could not build placeholder reference " + reference);
			}
			object.posChanged = true;
			object.x = result.offset.x;
			object.posChanged = true;
			object.y = result.offset.y;
			builtObject = bh_multianim_BuiltHeapsComponent.HeapsObject(object);
			break;
		case 17:
			var type = _g.type;
			var source = _g.replacementSource;
			var settings = this.resolveSettings(node);
			var getH2dObj = function(result) {
				if(result == null) {
					return null;
				} else {
					switch(result._hx_index) {
					case 3:
						var val = result.val;
						return val;
					case 4:
						return null;
					default:
						throw haxe_Exception.thrown("expected h2d.object but got " + Std.string(result));
					}
				}
			};
			var callbackResultH2dObject;
			switch(source._hx_index) {
			case 0:
				var callbackName = source.name;
				var getH2dObj1 = getH2dObj;
				var callbackResultH2dObject1 = bh_multianim_CallbackRequest.Placeholder(this.resolveAsString(callbackName));
				callbackResultH2dObject = getH2dObj1(builderParams.callback(callbackResultH2dObject1));
				break;
			case 1:
				var callbackName = source.name;
				var index = source.index;
				var getH2dObj1 = getH2dObj;
				var callbackResultH2dObject1 = bh_multianim_CallbackRequest.PlaceholderWithIndex(this.resolveAsString(callbackName),this.resolveAsInteger(index));
				callbackResultH2dObject = getH2dObj1(builderParams.callback(callbackResultH2dObject1));
				break;
			case 2:
				var callbackName = source.name;
				if(builderParams.placeholderObjects == null) {
					callbackResultH2dObject = null;
				} else {
					var this1 = builderParams.placeholderObjects;
					var key = this.resolveAsString(callbackName);
					var param = this1.h[key];
					if(param == null) {
						callbackResultH2dObject = null;
					} else {
						switch(param._hx_index) {
						case 0:
							var obj = param.obj;
							callbackResultH2dObject = obj;
							break;
						case 1:
							var factoryMethod = param.factoryMethod;
							var res = factoryMethod(settings);
							callbackResultH2dObject = res;
							break;
						}
					}
				}
				break;
			}
			if(callbackResultH2dObject == null) {
				switch(type._hx_index) {
				case 0:
					var source1 = type.source;
					var tile = this.loadTileSource(source1);
					builtObject = bh_multianim_BuiltHeapsComponent.HeapsBitmap(new h2d_Bitmap(tile));
					break;
				case 1:
					throw haxe_Exception.thrown("placeholder " + Std.string(node.updatableName) + ", type " + Std.string(node.type) + " configured in error mode, no input from " + Std.string(source));
				case 2:
					builtObject = bh_multianim_BuiltHeapsComponent.HeapsObject(new h2d_Object());
					break;
				}
			} else {
				builtObject = bh_multianim_BuiltHeapsComponent.HeapsObject(callbackResultH2dObject);
			}
			break;
		case 18:
			var sheet = _g.sheet;
			var tilename = _g.tilename;
			var width = _g.width;
			var height = _g.height;
			var sg = this.load9Pathch(sheet,tilename);
			sg.set_width(this.resolveAsNumber(width));
			sg.set_height(this.resolveAsNumber(height));
			sg.set_tileCenter(true);
			sg.set_tileBorders(true);
			sg.set_ignoreScale(false);
			builtObject = bh_multianim_BuiltHeapsComponent.NinePatch(sg);
			break;
		case 19:
			var width = _g.width;
			var height = _g.height;
			var id = _g.id;
			var debug = _g.debug;
			var obj = new bh_base_MAObject(bh_base_MultiAnimObjectData.MAInteractive(this.resolveAsInteger(width),this.resolveAsInteger(height),this.resolveAsString(id)),debug);
			internalResults.interactives.push(obj);
			builtObject = bh_multianim_BuiltHeapsComponent.HeapsObject(obj);
			break;
		case 20:
			var _g1 = _g.paletteType;
			throw haxe_Exception.thrown("palette not allowed as non-root node");
		}
		var updatableName = node.updatableName;
		var object = bh_multianim_MultiAnimParser_toh2dObject(builtObject);
		addChild(object);
		object.name = node.uniqueNodeName;
		var n = bh_multianim_MultiAnimParser_getNameString(updatableName);
		if(n != null) {
			var names = internalResults.names;
			if(Object.prototype.hasOwnProperty.call(names.h,n)) {
				names.h[n].push(this.toNamedResult(updatableName,builtObject,node));
			} else {
				var v = [this.toNamedResult(updatableName,builtObject,node)];
				names.h[n] = v;
			}
		}
		var pos = this.calculatePosition(node.pos,bh_multianim_MultiAnimParser.getGridCoordinateSystem(node),bh_multianim_MultiAnimParser.getHexCoordinateSystem(node));
		this.addPosition(object,pos.x,pos.y);
		this.applyExtendedFormProperties(object,node);
		if(selectedBuildMode == null) {
			selectedBuildMode = bh_multianim__$MultiAnimBuilder_InternalBuildMode.ObjectMode(object);
		}
		if(!skipChildren) {
			var _g = 0;
			var _g1 = node.children;
			while(_g < _g1.length) {
				var childNode = _g1[_g];
				++_g;
				this.build(childNode,selectedBuildMode,bh_multianim_MultiAnimParser.getGridCoordinateSystem(childNode),bh_multianim_MultiAnimParser.getHexCoordinateSystem(childNode),internalResults,builderParams);
			}
		}
		return object;
	}
	,resolveSettings: function(node) {
		var currentSettings = null;
		var current = node;
		while(current != null) {
			if(current.settings != null) {
				if(currentSettings == null) {
					currentSettings = current.settings;
				} else {
					var h = current.settings.h;
					var _g_h = h;
					var _g_keys = Object.keys(h);
					var _g_length = _g_keys.length;
					var _g_current = 0;
					while(_g_current < _g_length) {
						var key = _g_keys[_g_current++];
						var _g_key = key;
						var _g_value = _g_h[key];
						var key1 = _g_key;
						var value = _g_value;
						if(!Object.prototype.hasOwnProperty.call(currentSettings.h,key1)) {
							currentSettings.h[key1] = value;
						}
					}
				}
			}
			current = current.parent;
		}
		if(currentSettings != null) {
			var retSettings = new haxe_ds_StringMap();
			var h = currentSettings.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var key1 = _g_key;
				var value = _g_value;
				var v = this.resolveAsString(value);
				retSettings.h[key1] = v;
			}
			return retSettings;
		} else {
			return null;
		}
	}
	,toNamedResult: function(updatableNameType,obj,node) {
		return { type : updatableNameType, object : obj, settings : this.resolveSettings(node), hexCoordinateSystem : bh_multianim_MultiAnimParser.getHexCoordinateSystem(node), gridCoordinateSystem : bh_multianim_MultiAnimParser.getGridCoordinateSystem(node)};
	}
	,applyExtendedFormProperties: function(object,node) {
		if(node.scale != null) {
			var v = this.resolveAsNumber(node.scale);
			object.posChanged = true;
			object.scaleX = v;
			object.posChanged = true;
			object.scaleY = v;
		}
		if(node.alpha != null) {
			object.alpha = this.resolveAsNumber(node.alpha);
		}
		if(node.blendMode != null) {
			object.blendMode = node.blendMode;
		}
		if(node.filter != null) {
			object.set_filter(this.buildFilter(node.filter));
		}
	}
	,resolveColorList: function(colors) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < colors.length) {
			var value = colors[_g1];
			++_g1;
			_g.push(this.resolveAsColorInteger(value));
		}
		return _g;
	}
	,buildFilter: function(type) {
		switch(type._hx_index) {
		case 0:
			return null;
		case 1:
			var filters = type.filters;
			var ret = new h2d_filter_Group();
			var _g = 0;
			while(_g < filters.length) {
				var f = filters[_g];
				++_g;
				ret.add(this.buildFilter(f));
			}
			return ret;
		case 2:
			var size = type.s;
			var color = type.color;
			return new h2d_filter_Outline(size,color);
		case 3:
			var v = type.v;
			var m = new h3d_MatrixImpl();
			m.identity();
			m.colorSaturate(v);
			return new h2d_filter_ColorMatrix(m);
		case 4:
			var v = type.v;
			var m = new h3d_MatrixImpl();
			m.identity();
			m.colorLightness(v);
			return new h2d_filter_ColorMatrix(m);
		case 5:
			var color = type.color;
			var alpha = type.alpha;
			var radius = type.radius;
			var gain = type.gain;
			var quality = type.quality;
			var smoothColor = type.smoothColor;
			var knockout = type.knockout;
			var f = new h2d_filter_Glow(color,alpha,radius,gain,quality,smoothColor);
			f.knockout = knockout;
			return f;
		case 6:
			var radius = type.radius;
			var gain = type.gain;
			var quality = type.quality;
			var linear = type.linear;
			return new h2d_filter_Blur(radius,gain,quality,linear);
		case 7:
			var distance = type.distance;
			var angle = type.angle;
			var color = type.color;
			var alpha = type.alpha;
			var radius = type.radius;
			var gain = type.gain;
			var quality = type.quality;
			var smoothColor = type.smoothColor;
			return new h2d_filter_DropShadow(distance,angle,color,alpha,radius,gain,quality,smoothColor);
		case 8:
			var mode = type.mode;
			var smoothColor = type.smoothColor;
			return new bh_base_filters_PixelOutline(mode,smoothColor);
		case 9:
			var paletteName = type.paletteName;
			var sourceRow = type.sourceRow;
			var replacementRow = type.replacementRow;
			var palette = this.getPalette(paletteName);
			var srcRow = this.resolveAsInteger(sourceRow);
			var dstRow = this.resolveAsInteger(replacementRow);
			return bh_base_filters_ReplacePaletteShader.createAsPaletteFilter(palette,srcRow,dstRow);
		case 10:
			var sourceColors = type.sourceColors;
			var replacementColors = type.replacementColors;
			return bh_base_filters_ReplacePaletteShader.createAsColorsFilter(this.resolveColorList(sourceColors),this.resolveColorList(replacementColors));
		}
	}
	,stringToInt: function(n) {
		var i = Std.parseInt(n);
		if(i != null) {
			return i;
		}
		throw haxe_Exception.thrown("expected integer, got " + n);
	}
	,defaultCallback: function(input) {
		return bh_multianim_CallbackResult.CBRNoResult;
	}
	,getProgrammableParameterDefinitions: function(node,throwIfNotProgrammable) {
		if(throwIfNotProgrammable == null) {
			throwIfNotProgrammable = false;
		}
		var _g = node.type;
		if(_g._hx_index == 7) {
			var _g1 = _g.isTileGroup;
			var d = _g.parameters;
			return d;
		} else if(throwIfNotProgrammable) {
			throw haxe_Exception.thrown("buildWithParameters require programmable node, was " + Std.string(node.type));
		} else {
			return new haxe_ds_StringMap();
		}
	}
	,startBuild: function(name,rootNode,gridCoordinateSystem,hexCoordinateSystem,builderParams) {
		var isProgrammable = false;
		var isTileGroup = false;
		var _g = rootNode.type;
		if(_g._hx_index == 7) {
			var _g1 = _g.parameters;
			var isTG = _g.isTileGroup;
			isProgrammable = true;
			isTileGroup = isTG;
		}
		var retRoot;
		var internalResults = { names : new haxe_ds_StringMap(), interactives : []};
		if(isTileGroup) {
			var root = new h2d_TileGroup();
			retRoot = root;
			this.currentNode = rootNode;
			root.posChanged = true;
			root.x = 0;
			root.posChanged = true;
			root.y = 0;
			this.applyExtendedFormProperties(root,rootNode);
			var pos = this.calculatePosition(rootNode.pos,gridCoordinateSystem,hexCoordinateSystem);
			this.addPosition(root,pos.x,pos.y);
			var _g = 0;
			var _g1 = rootNode.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				this.buildTileGroup(child,root,new bh_base_Point(0,0),gridCoordinateSystem,hexCoordinateSystem,builderParams);
			}
		} else if(isProgrammable) {
			var root = new h2d_Layers();
			retRoot = root;
			this.currentNode = rootNode;
			root.posChanged = true;
			root.x = 0;
			root.posChanged = true;
			root.y = 0;
			this.applyExtendedFormProperties(root,rootNode);
			var pos = this.calculatePosition(rootNode.pos,gridCoordinateSystem,hexCoordinateSystem);
			this.addPosition(root,pos.x,pos.y);
			var _g = 0;
			var _g1 = rootNode.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				this.build(child,bh_multianim__$MultiAnimBuilder_InternalBuildMode.LayersMode(root),gridCoordinateSystem,hexCoordinateSystem,internalResults,builderParams);
			}
		} else {
			var root = this.build(rootNode,bh_multianim__$MultiAnimBuilder_InternalBuildMode.RootMode,gridCoordinateSystem,hexCoordinateSystem,internalResults,builderParams);
			retRoot = root;
			this.currentNode = rootNode;
			root.posChanged = true;
			root.x = 0;
			root.posChanged = true;
			root.y = 0;
			this.applyExtendedFormProperties(root,rootNode);
			var pos = this.calculatePosition(rootNode.pos,gridCoordinateSystem,hexCoordinateSystem);
			this.addPosition(root,pos.x,pos.y);
			var _g = 0;
			var _g1 = rootNode.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				this.build(child,bh_multianim__$MultiAnimBuilder_InternalBuildMode.ObjectMode(root),gridCoordinateSystem,hexCoordinateSystem,internalResults,builderParams);
			}
		}
		return new bh_multianim_BuilderResult(retRoot,name,internalResults.names,internalResults.interactives,new haxe_ds_StringMap(),new haxe_ds_StringMap(),new bh_multianim_BuilderResolvedSettings(this.resolveSettings(rootNode)),new bh_base_FPoint(retRoot.x,retRoot.y),gridCoordinateSystem,hexCoordinateSystem);
	}
	,getPalette: function(name) {
		return this.buildPalettes(name);
	}
	,buildPalettes: function(name) {
		var tmp = this.multiParserResult;
		var node = tmp != null ? tmp.nodes.h[name] : null;
		if(node == null) {
			throw haxe_Exception.thrown("could not get palette node #" + name);
		}
		var _g = node.type;
		if(_g._hx_index == 20) {
			var paletteType = _g.paletteType;
			switch(paletteType._hx_index) {
			case 0:
				var colors = paletteType.colors;
				return new bh_base_Palette(this.resolveColorList(colors));
			case 1:
				var colors = paletteType.colors;
				var width = paletteType.width;
				return new bh_base_Palette(this.resolveColorList(colors));
			case 2:
				var filename = paletteType.filename;
				var filenameResolved = this.resolveAsString(filename);
				var res = this.resourceLoader.loadHXDResource(filenameResolved);
				if(res == null) {
					throw haxe_Exception.thrown("could not load palette image " + Std.string(filename));
				}
				var pixels = res.toImage().getPixels();
				var pixelArray = pixels.toVector().slice(0);
				return new bh_base_Palette(pixelArray,pixels.width);
			}
		} else {
			throw haxe_Exception.thrown("" + name + " has to be palette");
		}
	}
	,createParticleImpl: function(particlesDef,name) {
		var _gthis = this;
		var particles = new bh_base_Particles();
		var _g = [];
		var x = $getIterator(particlesDef.tiles);
		while(x.hasNext()) {
			var x1 = x.next();
			_g.push(_gthis.loadTileSource(x1));
		}
		var tiles = _g;
		var group = new bh_base_ParticleGroup(name,particles,tiles);
		if(particlesDef.count != null) {
			group.nparts = this.resolveAsInteger(particlesDef.count);
		}
		if(particlesDef.emitDelay != null) {
			group.emitDelay = this.resolveAsNumber(particlesDef.emitDelay);
		}
		if(particlesDef.emitSync != null) {
			group.emitSync = this.resolveAsNumber(particlesDef.emitSync);
		}
		if(particlesDef.maxLife != null) {
			group.life = this.resolveAsNumber(particlesDef.maxLife);
		}
		if(particlesDef.lifeRandom != null) {
			group.lifeRand = this.resolveAsNumber(particlesDef.lifeRandom);
		}
		if(particlesDef.size != null) {
			group.size = this.resolveAsNumber(particlesDef.size);
		}
		if(particlesDef.sizeRandom != null) {
			group.sizeRand = this.resolveAsNumber(particlesDef.sizeRandom);
		}
		if(particlesDef.speed != null) {
			group.speed = this.resolveAsNumber(particlesDef.speed);
		}
		if(particlesDef.speedRandom != null) {
			group.speedRand = this.resolveAsNumber(particlesDef.speedRandom);
		}
		if(particlesDef.speedIncrease != null) {
			group.speedIncr = this.resolveAsNumber(particlesDef.speedIncrease);
		}
		if(particlesDef.gravity != null) {
			group.gravity = this.resolveAsNumber(particlesDef.gravity);
		}
		if(particlesDef.gravityAngle != null) {
			var v = this.resolveAsNumber(particlesDef.gravityAngle) * 3.14159265358979323 / 180.0;
			group.cosGravityAngle = Math.cos(v);
			group.sinGravityAngle = Math.sin(v);
			group.gravityAngle = v;
		}
		if(particlesDef.fadeIn != null) {
			var f = this.resolveAsNumber(particlesDef.fadeIn);
			if(f < 0 || f > 1.0) {
				throw haxe_Exception.thrown("fadeIn must be between 0 and 1");
			}
			group.fadeIn = f;
		}
		if(particlesDef.fadeOut != null) {
			var f = this.resolveAsNumber(particlesDef.fadeOut);
			if(f < 0 || f > 1.0) {
				throw haxe_Exception.thrown("fadeOut must be between 0 and 1");
			}
			group.fadeOut = this.resolveAsNumber(particlesDef.fadeOut);
		}
		if(particlesDef.fadePower != null) {
			group.fadePower = this.resolveAsNumber(particlesDef.fadePower);
		}
		if(particlesDef.blendMode != null) {
			var v = particlesDef.blendMode;
			group.batch.blendMode = v;
			group.blendMode = v;
		}
		if(particlesDef.loop != null) {
			group.emitLoop = particlesDef.loop;
		}
		if(particlesDef.relative != null) {
			group.isRelative = particlesDef.relative;
		}
		if(particlesDef.rotationInitial != null) {
			group.rotInit = this.resolveAsNumber(particlesDef.rotationInitial) * 3.14159265358979323 / 180.0;
		}
		if(particlesDef.rotationSpeed != null) {
			group.rotSpeed = this.resolveAsNumber(particlesDef.rotationSpeed) * 3.14159265358979323 / 180.0;
		}
		if(particlesDef.rotationSpeedRandom != null) {
			group.rotSpeedRand = this.resolveAsNumber(particlesDef.rotationSpeedRandom) * 3.14159265358979323 / 180.0;
		}
		if(particlesDef.rotateAuto != null) {
			group.rotAuto = particlesDef.rotateAuto;
		}
		var _g = particlesDef.emit;
		switch(_g._hx_index) {
		case 0:
			var emitDistance = _g.emitDistance;
			var emitDistanceRandom = _g.emitDistanceRandom;
			group.emitMode = bh_base_PartEmitMode.Point(this.resolveAsNumber(emitDistance),this.resolveAsNumber(emitDistanceRandom));
			break;
		case 1:
			var emitDistance = _g.emitDistance;
			var emitDistanceRandom = _g.emitDistanceRandom;
			var emitConeAngle = _g.emitConeAngle;
			var emitConeAngleRandom = _g.emitConeAngleRandom;
			group.emitMode = bh_base_PartEmitMode.Cone(this.resolveAsNumber(emitDistance),this.resolveAsNumber(emitDistanceRandom),this.resolveAsNumber(emitConeAngle) * 3.14159265358979323 / 180.0,this.resolveAsNumber(emitConeAngleRandom) * 3.14159265358979323 / 180.0);
			break;
		case 2:
			var width = _g.width;
			var height = _g.height;
			var emitConeAngle = _g.emitConeAngle;
			var emitConeAngleRandom = _g.emitConeAngleRandom;
			group.emitMode = bh_base_PartEmitMode.Box(this.resolveAsNumber(width),this.resolveAsNumber(height),this.resolveAsNumber(emitConeAngle) * 3.14159265358979323 / 180.0,this.resolveAsNumber(emitConeAngleRandom) * 3.14159265358979323 / 180.0);
			break;
		}
		particles.addGroup(group);
		return particles;
	}
	,createParticles: function(name,builderParams) {
		var tmp = this.multiParserResult;
		var node = tmp != null ? tmp.nodes.h[name] : null;
		if(node == null) {
			throw haxe_Exception.thrown("could not get particles node #" + name);
		}
		var _g = node.type;
		if(_g._hx_index == 12) {
			var particlesDef = _g.particles;
			return this.createParticleImpl(particlesDef,node.uniqueNodeName);
		} else {
			throw haxe_Exception.thrown("" + name + " has to be particles");
		}
	}
	,createAnimatedPath: function(name,path,initialSpeed,positionMode,object) {
		var tmp = this.multiParserResult;
		var node = tmp != null ? tmp.nodes.h[name] : null;
		if(node == null) {
			throw haxe_Exception.thrown("could not get animatedPath node #" + name);
		}
		var _g = node.type;
		if(_g._hx_index == 11) {
			var pathDef = _g.animatedPathDef;
			var retVal = new bh_paths_AnimatedPath(path,initialSpeed,object,positionMode,this);
			var _g = 0;
			while(_g < pathDef.length) {
				var action = pathDef[_g];
				++_g;
				var atRate;
				var _g1 = action.at;
				switch(_g1._hx_index) {
				case 0:
					var r = _g1.float;
					atRate = this.resolveAsNumber(r);
					break;
				case 1:
					var name1 = _g1.checkpointName;
					var retVal1 = path.checkpoints.h[name1];
					if(retVal1 == null) {
						throw haxe_Exception.thrown("checkpoint not found: " + name1);
					}
					atRate = retVal1;
					break;
				}
				var resolvedAction;
				var _g2 = action.action;
				switch(_g2._hx_index) {
				case 0:
					var speed = _g2.speed;
					resolvedAction = bh_paths_AnimatePathCommands.ChangeSpeed(this.resolveAsNumber(speed));
					break;
				case 1:
					var eventName = _g2.eventName;
					resolvedAction = bh_paths_AnimatePathCommands.Event(bh_paths_AnimatePathEvents.Event(eventName));
					break;
				case 2:
					var particlesName = _g2.particlesName;
					var particlesTemplate = _g2.particlesTemplate;
					var particlesDef = _g2.particlesDef;
					resolvedAction = bh_paths_AnimatePathCommands.AttachParticles(particlesName,particlesDef);
					break;
				case 3:
					var particlesName1 = _g2.particlesName;
					resolvedAction = bh_paths_AnimatePathCommands.RemoveParticles(particlesName1);
					break;
				case 4:
					var state = _g2.state;
					resolvedAction = bh_paths_AnimatePathCommands.ChangeAnimSMState(state);
					break;
				}
				retVal.addAction(new bh_paths__$AnimatedPath_TimedAction(atRate,resolvedAction));
			}
			return retVal;
		} else {
			throw haxe_Exception.thrown("" + name + " has to be animatedPath");
		}
	}
	,getLayouts: function(builderParams) {
		var tmp = this.multiParserResult;
		var node = tmp != null ? tmp.nodes.h[bh_multianim_MultiAnimParser.defaultLayoutNodeName] : null;
		if(node == null) {
			throw haxe_Exception.thrown("relativeLayouts does not exist");
		}
		var _g = node.type;
		if(_g._hx_index == 9) {
			var layoutsDef = _g.layoutsDef;
			return new bh_multianim_layouts_MultiAnimLayouts(layoutsDef,this);
		} else {
			throw haxe_Exception.thrown("relativeLayouts is of unexpected type " + Std.string(node.type));
		}
	}
	,getPaths: function(builderParams) {
		var tmp = this.multiParserResult;
		var node = tmp != null ? tmp.nodes.h[bh_multianim_MultiAnimParser.defaultPathNodeName] : null;
		if(node == null) {
			throw haxe_Exception.thrown("paths does not exist");
		}
		var _g = node.type;
		if(_g._hx_index == 10) {
			var pathsDef = _g.paths;
			return new bh_paths_MultiAnimPaths(pathsDef,this);
		} else {
			throw haxe_Exception.thrown("paths is of unexpected type " + Std.string(node.type));
		}
	}
	,updateIndexedParamsFromDynamicMap: function(input,definitions,extraInput) {
		var _gthis = this;
		var resolveReferencableValue = function(ref,type) {
			if(type == null) {
				throw haxe_Exception.thrown("type is null");
			} else {
				switch(type._hx_index) {
				case 0:
					return _gthis.resolveAsInteger(ref);
				case 1:
					return _gthis.resolveAsInteger(ref);
				case 2:
					var _g = type.bits;
					return _gthis.resolveAsInteger(ref);
				case 3:
					var _g = type.values;
					return _gthis.resolveAsString(ref);
				case 4:
					var _g = type.from;
					var _g = type.to;
					return _gthis.resolveAsInteger(ref);
				case 5:
					return _gthis.resolveAsInteger(ref);
				case 6:
					return _gthis.resolveAsNumber(ref);
				case 7:
					return _gthis.resolveAsInteger(ref);
				case 8:
					return _gthis.resolveAsInteger(ref);
				case 9:
					return _gthis.resolveAsString(ref);
				case 10:
					return _gthis.resolveAsColorInteger(ref);
				case 11:
					return _gthis.resolveAsArray(ref);
				}
			}
		};
		var retVal = new haxe_ds_StringMap();
		if(input == null && extraInput == null) {
			this.indexedParams = retVal;
		}
		if(extraInput != null) {
			var h = extraInput.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var k = _g_key;
				var v = _g_value;
				if(!Object.prototype.hasOwnProperty.call(this.indexedParams.h,k)) {
					this.indexedParams.h[k] = v;
				}
			}
		}
		if(input != null) {
			var h = input.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var key1 = _g_key;
				var value = _g_value;
				if(js_Boot.__instanceof(value,bh_multianim_ResolvedIndexParameters)) {
					retVal.h[key1] = value;
				} else if(js_Boot.__instanceof(value,bh_multianim_ReferencableValue)) {
					var ref = value;
					var tmp = definitions.h[key1];
					var type = tmp != null ? tmp.type : null;
					if(type == null) {
						throw haxe_Exception.thrown("" + key1 + "=>" + Std.string(value) + " does not have matching ParametersDefinitions " + haxe_ds_StringMap.stringify(definitions.h) + " (or type is null)");
					}
					var type1 = type;
					var resolved = resolveReferencableValue(ref,type1);
					var value1 = bh_multianim_MultiAnimParser.dynamicValueToIndex(key1,type1,resolved,function(s) {
						throw haxe_Exception.thrown(s);
					});
					retVal.h[key1] = value1;
				} else {
					var tmp1 = definitions.h[key1];
					var type2 = tmp1 != null ? tmp1.type : null;
					if(type2 == null) {
						throw haxe_Exception.thrown("" + key1 + "=>" + Std.string(value) + " does not have matching ParametersDefinitions " + haxe_ds_StringMap.stringify(definitions.h) + " (or type is null)");
					}
					var type3 = type2;
					var value2 = bh_multianim_MultiAnimParser.dynamicValueToIndex(key1,type3,value,function(s) {
						throw haxe_Exception.thrown(s);
					});
					retVal.h[key1] = value2;
				}
			}
		}
		if(extraInput != null) {
			var h = extraInput.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var key1 = _g_key;
				var value = _g_value;
				if(Object.prototype.hasOwnProperty.call(retVal.h,key1)) {
					throw haxe_Exception.thrown("extra input \"" + key1 + "=>" + Std.string(value) + "\" already exists in input");
				}
				if(js_Boot.__instanceof(value,bh_multianim_ResolvedIndexParameters)) {
					retVal.h[key1] = value;
				} else if(js_Boot.__instanceof(value,bh_multianim_ReferencableValue)) {
					var ref = value;
					var tmp = definitions.h[key1];
					var type = tmp != null ? tmp.type : null;
					if(type == null) {
						throw haxe_Exception.thrown("" + key1 + "=>" + Std.string(value) + " does not have matching ParametersDefinitions " + haxe_ds_StringMap.stringify(definitions.h) + " (or type is null)");
					}
					var type1 = type;
					var resolved = resolveReferencableValue(ref,type1);
					var value1 = bh_multianim_MultiAnimParser.dynamicValueToIndex(key1,type1,resolved,function(s) {
						throw haxe_Exception.thrown(s);
					});
					retVal.h[key1] = value1;
				} else {
					var tmp1 = definitions.h[key1];
					var type2 = tmp1 != null ? tmp1.type : null;
					if(type2 == null) {
						throw haxe_Exception.thrown("" + key1 + "=>" + Std.string(value) + " does not have matching ParametersDefinitions " + haxe_ds_StringMap.stringify(definitions.h) + " (or type is null)");
					}
					var type3 = type2;
					var value2 = bh_multianim_MultiAnimParser.dynamicValueToIndex(key1,type3,value,function(s) {
						throw haxe_Exception.thrown(s);
					});
					retVal.h[key1] = value2;
				}
			}
		}
		var h = definitions.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g_key = key;
			var _g_value = _g_h[key];
			var key1 = _g_key;
			var value = _g_value;
			if(!Object.prototype.hasOwnProperty.call(retVal.h,key1) && value.defaultValue != null) {
				var v = value.defaultValue;
				retVal.h[key1] = v;
			}
		}
		this.indexedParams = retVal;
	}
	,buildWithParameters: function(name,inputParameters,builderParams,inheritedParameters) {
		this.pushBuilderState();
		if(builderParams == null) {
			builderParams = { callback : $bind(this,this.defaultCallback)};
		} else if(builderParams.callback == null) {
			builderParams.callback = $bind(this,this.defaultCallback);
		}
		var tmp = this.multiParserResult;
		var node = tmp != null ? tmp.nodes.h[name] : null;
		if(node == null) {
			var error = "buildWithParameters " + (inputParameters == null ? "null" : haxe_ds_StringMap.stringify(inputParameters.h)) + ": could find element \"" + name + "\" to build";
			haxe_Log.trace(error,{ fileName : "bh/multianim/MultiAnimBuilder.hx", lineNumber : 1644, className : "bh.multianim.MultiAnimBuilder", methodName : "buildWithParameters"});
			this.popBuilderState();
			throw haxe_Exception.thrown(error);
		}
		var hasParams = inputParameters != null && bh_base_MapTools.count(inputParameters) > 0;
		var definitions = this.getProgrammableParameterDefinitions(node,hasParams);
		this.updateIndexedParamsFromDynamicMap(inputParameters,definitions,inheritedParameters);
		this.builderParams = builderParams;
		var retVal = this.startBuild(name,node,bh_multianim_MultiAnimParser.getGridCoordinateSystem(node),bh_multianim_MultiAnimParser.getHexCoordinateSystem(node),builderParams);
		this.popBuilderState();
		return retVal;
	}
	,buildWithComboParameters: function(name,inputParameters,allCombos,builderParams) {
		this.pushBuilderState();
		try {
			if(builderParams == null) {
				builderParams = { callback : $bind(this,this.defaultCallback)};
			} else if(builderParams.callback == null) {
				builderParams.callback = $bind(this,this.defaultCallback);
			}
			var tmp = this.multiParserResult;
			var tmp1 = tmp != null ? tmp.nodes : null;
			var node = tmp1 != null ? tmp1.h[name] : null;
			if(node == null) {
				throw haxe_Exception.thrown("buildWithComboParameters " + Std.string(allCombos) + ": could not build " + name + " with parameters " + (inputParameters == null ? "null" : haxe_ds_StringMap.stringify(inputParameters.h)) + " and builderParameters " + Std.string(builderParams));
			}
			if(bh_base_MapTools.count(inputParameters) + allCombos.length == 0) {
				throw haxe_Exception.thrown("parameters are required");
			}
			var definitions = this.getProgrammableParameterDefinitions(node,true);
			var allOptions_h = Object.create(null);
			var totalStates = 1;
			var comboCounts = [];
			var comboNames = [];
			var _g = 0;
			while(_g < allCombos.length) {
				var prop = allCombos[_g];
				++_g;
				if(!Object.prototype.hasOwnProperty.call(definitions.h,prop)) {
					throw haxe_Exception.thrown("definition for \"" + prop + "\" does not exist");
				}
				if(Object.prototype.hasOwnProperty.call(inputParameters.h,prop)) {
					throw haxe_Exception.thrown("Prop \"" + prop + "\" set both as parameter and combo");
				}
				if(Object.prototype.hasOwnProperty.call(allOptions_h,prop)) {
					throw haxe_Exception.thrown("Duplicate combo \"" + prop + "\"");
				}
				var def = definitions.h[prop];
				var allValues;
				var _g1 = def.type;
				switch(_g1._hx_index) {
				case 0:
					var _g2 = [];
					_g2.push("" + 0 + "}");
					_g2.push("" + 1 + "}");
					_g2.push("" + 2 + "}");
					_g2.push("" + 3 + "}");
					_g2.push("" + 4 + "}");
					_g2.push("" + 5 + "}");
					allValues = _g2;
					break;
				case 1:
					var _g3 = [];
					_g3.push("" + 0 + "}");
					_g3.push("" + 1 + "}");
					_g3.push("" + 2 + "}");
					_g3.push("" + 3 + "}");
					_g3.push("" + 4 + "}");
					_g3.push("" + 5 + "}");
					_g3.push("" + 6 + "}");
					_g3.push("" + 7 + "}");
					allValues = _g3;
					break;
				case 2:
					var bits = _g1.bits;
					var _g4 = [];
					var _g5 = 0;
					var _g6 = bits;
					while(_g5 < _g6) {
						var i = _g5++;
						_g4.push("" + i + "}");
					}
					allValues = _g4;
					break;
				case 3:
					var values = _g1.values;
					allValues = values;
					break;
				case 4:
					var from = _g1.from;
					var to = _g1.to;
					var _g7 = [];
					var _g8 = from;
					var _g9 = to;
					while(_g8 < _g9) {
						var i1 = _g8++;
						_g7.push("" + i1 + "}");
					}
					allValues = _g7;
					break;
				case 5:
					throw haxe_Exception.thrown("Prop \"" + prop + "\" is int and cannot be used as combo");
				case 6:
					throw haxe_Exception.thrown("Prop \"" + prop + "\" is float and cannot be used as combo");
				case 7:
					allValues = ["0","1"];
					break;
				case 8:
					throw haxe_Exception.thrown("Prop \"" + prop + "\" is uint and cannot be used as combo");
				case 9:
					throw haxe_Exception.thrown("Prop \"" + prop + "\" is string and cannot be used as combo");
				case 10:
					throw haxe_Exception.thrown("Prop \"" + prop + "\" is color and cannot be used as combo");
				case 11:
					throw haxe_Exception.thrown("Prop \"" + prop + "\" is array and cannot be used as combo");
				}
				allOptions_h[prop] = allValues;
				totalStates *= allValues.length;
				comboNames.push(prop);
				comboCounts.push(allValues.length);
				if(totalStates > 32) {
					haxe_Log.trace("more than 100 combination for build all",{ fileName : "bh/multianim/MultiAnimBuilder.hx", lineNumber : 1715, className : "bh.multianim.MultiAnimBuilder", methodName : "buildWithComboParameters"});
				} else if(totalStates > 1000) {
					throw haxe_Exception.thrown("more than 1000 combinations for buildAll");
				}
			}
			var gridCoordinateSystem = bh_multianim_MultiAnimParser.getGridCoordinateSystem(node);
			var hexCoordinateSystem = bh_multianim_MultiAnimParser.getHexCoordinateSystem(node);
			var result = new bh_multianim_MultiAnimMultiResult(name,allCombos);
			var _g = 0;
			var _g1 = totalStates;
			while(_g < _g1) {
				var i = _g++;
				var comboParams = new haxe_ds_StringMap();
				var ci = i;
				var _g2 = 0;
				var _g3 = comboNames.length;
				while(_g2 < _g3) {
					var ki = _g2++;
					var vi = ci % comboCounts[ki];
					ci = ci / comboCounts[ki] | 0;
					var key = comboNames[ki];
					comboParams.h[key] = bh_multianim_ResolvedIndexParameters.StringValue(allOptions_h[key][vi]);
				}
				this.updateIndexedParamsFromDynamicMap(inputParameters,definitions,comboParams);
				this.builderParams = builderParams;
				var c = this.startBuild(name,node,gridCoordinateSystem,hexCoordinateSystem,builderParams);
				var _g4 = [];
				var _g5 = 0;
				while(_g5 < allCombos.length) {
					var combo = allCombos[_g5];
					++_g5;
					var _g6 = comboParams.h[combo];
					var tmp;
					if(_g6 == null) {
						throw haxe_Exception.thrown("comboParams [" + combo + "] is not string");
					} else if(_g6._hx_index == 4) {
						var s = _g6.s;
						tmp = s;
					} else {
						throw haxe_Exception.thrown("comboParams [" + combo + "] is not string");
					}
					_g4.push(tmp);
				}
				result.addResult(c,_g4);
			}
			this.popBuilderState();
			return result;
		} catch( _g ) {
			var e = haxe_Exception.caught(_g);
			this.popBuilderState();
			throw haxe_Exception.thrown(e);
		}
	}
	,loadTileImpl: function(sheet,tilename,index) {
		var sheet1 = this.resourceLoader.loadSheet2(sheet);
		if(sheet1 == null) {
			throw haxe_Exception.thrown("sheet " + Std.string(sheet1) + " could not be loaded");
		}
		var tile;
		if(index != null) {
			var arr = sheet1.getAnim(tilename);
			if(arr == null) {
				throw haxe_Exception.thrown("tile " + tilename + ", index " + index + " sheet " + Std.string(sheet1) + " could not be loaded");
			}
			if(index < 0 || index >= arr.length) {
				throw haxe_Exception.thrown("tile " + tilename + " from sheet " + Std.string(sheet1) + " does not have tile index " + index + ", should be [0, " + (arr.length - 1) + "]");
			}
			tile = arr[index];
		} else {
			var t = sheet1.get(tilename);
			if(t == null) {
				throw haxe_Exception.thrown("tile " + tilename + " in sheet " + Std.string(sheet1) + " could not be loaded");
			}
			tile = t;
		}
		return tile;
	}
	,load9Pathch: function(sheet,tilename) {
		var sheet1 = this.resourceLoader.loadSheet2(sheet);
		if(sheet1 == null) {
			throw haxe_Exception.thrown("sheet " + Std.string(sheet1) + " could not be loaded");
		}
		var ninePatch = sheet1.getNinePatch(tilename);
		if(ninePatch == null) {
			throw haxe_Exception.thrown("tile " + tilename + " in sheet " + Std.string(sheet1) + " could not be loaded");
		}
		return ninePatch;
	}
	,__class__: bh_multianim_MultiAnimBuilder
};
var bh_multianim_MultiAnimMultiResult = function(name,allCombos) {
	this.results = new haxe_ds_StringMap();
	this.name = name;
	this.allCombos = allCombos;
};
$hxClasses["bh.multianim.MultiAnimMultiResult"] = bh_multianim_MultiAnimMultiResult;
bh_multianim_MultiAnimMultiResult.__name__ = "bh.multianim.MultiAnimMultiResult";
bh_multianim_MultiAnimMultiResult.prototype = {
	addResult: function(result,param) {
		var this1 = this.results;
		var key = this.toMultiKey(param);
		this1.h[key] = result;
	}
	,keyToString: function(value) {
		if(typeof(value) == "string") {
			return value;
		} else if(typeof(value) == "number" && ((value | 0) === value) || typeof(value) == "number" || typeof(value) == "boolean") {
			if(value == null) {
				return "null";
			} else {
				return Std.string(value);
			}
		} else {
			throw haxe_Exception.thrown("unknown parameter type " + (value == null ? "null" : Std.string(value)));
		}
	}
	,toMultiKey: function(values) {
		var f = $bind(this,this.keyToString);
		var result = new Array(values.length);
		var _g = 0;
		var _g1 = values.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = f(values[i]);
		}
		return result.join("||");
	}
	,updateAllText: function(name,newText) {
		var h = this.results.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g_key = key;
			var _g_value = _g_h[key];
			var key1 = _g_key;
			var value = _g_value;
			value.getUpdatable(name).updateText(newText);
		}
	}
	,findResultByCombo: function() {
		var $l=arguments.length;
		var values = new Array($l>0?$l-0:0);
		for(var $i=0;$i<$l;++$i){values[$i-0]=arguments[$i];}
		if(values.length != this.allCombos.length) {
			throw haxe_Exception.thrown("invalid number of params, expected " + this.allCombos.length + " got " + values.length);
		}
		var multiKey = this.toMultiKey(values.slice());
		var retVal = this.results.h[multiKey];
		if(retVal == null) {
			throw haxe_Exception.thrown("could not find result for name " + this.name + " with combo " + (values == null ? "null" : "[" + values.toString() + "]") + ", all combos: " + Std.string(this.allCombos));
		} else {
			return retVal;
		}
	}
	,__class__: bh_multianim_MultiAnimMultiResult
};
var bh_multianim_OptionalParametersParsing = $hxEnums["bh.multianim.OptionalParametersParsing"] = { __ename__:true,__constructs__:null
	,ParseInteger: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"bh.multianim.OptionalParametersParsing",toString:$estr}; },$_._hx_name="ParseInteger",$_.__params__ = ["name"],$_)
	,ParseIntegerOrReference: ($_=function(name) { return {_hx_index:1,name:name,__enum__:"bh.multianim.OptionalParametersParsing",toString:$estr}; },$_._hx_name="ParseIntegerOrReference",$_.__params__ = ["name"],$_)
	,ParseFloat: ($_=function(name) { return {_hx_index:2,name:name,__enum__:"bh.multianim.OptionalParametersParsing",toString:$estr}; },$_._hx_name="ParseFloat",$_.__params__ = ["name"],$_)
	,ParseFloatOrReference: ($_=function(name) { return {_hx_index:3,name:name,__enum__:"bh.multianim.OptionalParametersParsing",toString:$estr}; },$_._hx_name="ParseFloatOrReference",$_.__params__ = ["name"],$_)
	,ParseBool: ($_=function(name) { return {_hx_index:4,name:name,__enum__:"bh.multianim.OptionalParametersParsing",toString:$estr}; },$_._hx_name="ParseBool",$_.__params__ = ["name"],$_)
	,ParseCustom: ($_=function(name,parse) { return {_hx_index:5,name:name,parse:parse,__enum__:"bh.multianim.OptionalParametersParsing",toString:$estr}; },$_._hx_name="ParseCustom",$_.__params__ = ["name","parse"],$_)
	,ParseColor: ($_=function(name) { return {_hx_index:6,name:name,__enum__:"bh.multianim.OptionalParametersParsing",toString:$estr}; },$_._hx_name="ParseColor",$_.__params__ = ["name"],$_)
};
bh_multianim_OptionalParametersParsing.__constructs__ = [bh_multianim_OptionalParametersParsing.ParseInteger,bh_multianim_OptionalParametersParsing.ParseIntegerOrReference,bh_multianim_OptionalParametersParsing.ParseFloat,bh_multianim_OptionalParametersParsing.ParseFloatOrReference,bh_multianim_OptionalParametersParsing.ParseBool,bh_multianim_OptionalParametersParsing.ParseCustom,bh_multianim_OptionalParametersParsing.ParseColor];
bh_multianim_OptionalParametersParsing.__empty_constructs__ = [];
var bh_multianim_IdentifierType = $hxEnums["bh.multianim.IdentifierType"] = { __ename__:true,__constructs__:null
	,ITString: {_hx_name:"ITString",_hx_index:0,__enum__:"bh.multianim.IdentifierType",toString:$estr}
	,ITReference: {_hx_name:"ITReference",_hx_index:1,__enum__:"bh.multianim.IdentifierType",toString:$estr}
	,ITName: {_hx_name:"ITName",_hx_index:2,__enum__:"bh.multianim.IdentifierType",toString:$estr}
	,ITQuotedString: {_hx_name:"ITQuotedString",_hx_index:3,__enum__:"bh.multianim.IdentifierType",toString:$estr}
};
bh_multianim_IdentifierType.__constructs__ = [bh_multianim_IdentifierType.ITString,bh_multianim_IdentifierType.ITReference,bh_multianim_IdentifierType.ITName,bh_multianim_IdentifierType.ITQuotedString];
bh_multianim_IdentifierType.__empty_constructs__ = [bh_multianim_IdentifierType.ITString,bh_multianim_IdentifierType.ITReference,bh_multianim_IdentifierType.ITName,bh_multianim_IdentifierType.ITQuotedString];
var bh_multianim_MPInterpolationEnum = $hxEnums["bh.multianim.MPInterpolationEnum"] = { __ename__:true,__constructs__:null
	,MPIStart: {_hx_name:"MPIStart",_hx_index:0,__enum__:"bh.multianim.MPInterpolationEnum",toString:$estr}
	,MPIEnd: ($_=function(stringValue) { return {_hx_index:1,stringValue:stringValue,__enum__:"bh.multianim.MPInterpolationEnum",toString:$estr}; },$_._hx_name="MPIEnd",$_.__params__ = ["stringValue"],$_)
	,MPICode: ($_=function(prefix) { return {_hx_index:2,prefix:prefix,__enum__:"bh.multianim.MPInterpolationEnum",toString:$estr}; },$_._hx_name="MPICode",$_.__params__ = ["prefix"],$_)
};
bh_multianim_MPInterpolationEnum.__constructs__ = [bh_multianim_MPInterpolationEnum.MPIStart,bh_multianim_MPInterpolationEnum.MPIEnd,bh_multianim_MPInterpolationEnum.MPICode];
bh_multianim_MPInterpolationEnum.__empty_constructs__ = [bh_multianim_MPInterpolationEnum.MPIStart];
var bh_multianim_NumberType = $hxEnums["bh.multianim.NumberType"] = { __ename__:true,__constructs__:null
	,NTInteger: {_hx_name:"NTInteger",_hx_index:0,__enum__:"bh.multianim.NumberType",toString:$estr}
	,NTFloat: {_hx_name:"NTFloat",_hx_index:1,__enum__:"bh.multianim.NumberType",toString:$estr}
	,NTHexInteger: {_hx_name:"NTHexInteger",_hx_index:2,__enum__:"bh.multianim.NumberType",toString:$estr}
};
bh_multianim_NumberType.__constructs__ = [bh_multianim_NumberType.NTInteger,bh_multianim_NumberType.NTFloat,bh_multianim_NumberType.NTHexInteger];
bh_multianim_NumberType.__empty_constructs__ = [bh_multianim_NumberType.NTInteger,bh_multianim_NumberType.NTFloat,bh_multianim_NumberType.NTHexInteger];
var bh_multianim_ValueType = $hxEnums["bh.multianim.ValueType"] = { __ename__:true,__constructs__:null
	,VTInt: {_hx_name:"VTInt",_hx_index:0,__enum__:"bh.multianim.ValueType",toString:$estr}
	,VTFloat: {_hx_name:"VTFloat",_hx_index:1,__enum__:"bh.multianim.ValueType",toString:$estr}
	,VTString: {_hx_name:"VTString",_hx_index:2,__enum__:"bh.multianim.ValueType",toString:$estr}
};
bh_multianim_ValueType.__constructs__ = [bh_multianim_ValueType.VTInt,bh_multianim_ValueType.VTFloat,bh_multianim_ValueType.VTString];
bh_multianim_ValueType.__empty_constructs__ = [bh_multianim_ValueType.VTInt,bh_multianim_ValueType.VTFloat,bh_multianim_ValueType.VTString];
var bh_multianim_MPToken = $hxEnums["bh.multianim.MPToken"] = { __ename__:true,__constructs__:null
	,MPEof: {_hx_name:"MPEof",_hx_index:0,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPOpen: {_hx_name:"MPOpen",_hx_index:1,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPClosed: {_hx_name:"MPClosed",_hx_index:2,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPBracketOpen: {_hx_name:"MPBracketOpen",_hx_index:3,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPBracketClosed: {_hx_name:"MPBracketClosed",_hx_index:4,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPCurlyOpen: {_hx_name:"MPCurlyOpen",_hx_index:5,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPCurlyClosed: {_hx_name:"MPCurlyClosed",_hx_index:6,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPComma: {_hx_name:"MPComma",_hx_index:7,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPAt: {_hx_name:"MPAt",_hx_index:8,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPExclamation: {_hx_name:"MPExclamation",_hx_index:9,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPColon: {_hx_name:"MPColon",_hx_index:10,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPDoubleDot: {_hx_name:"MPDoubleDot",_hx_index:11,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPSemiColon: {_hx_name:"MPSemiColon",_hx_index:12,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPNumber: ($_=function(s,numberType) { return {_hx_index:13,s:s,numberType:numberType,__enum__:"bh.multianim.MPToken",toString:$estr}; },$_._hx_name="MPNumber",$_.__params__ = ["s","numberType"],$_)
	,MPIdentifier: ($_=function(s,keyword,identType) { return {_hx_index:14,s:s,keyword:keyword,identType:identType,__enum__:"bh.multianim.MPToken",toString:$estr}; },$_._hx_name="MPIdentifier",$_.__params__ = ["s","keyword","identType"],$_)
	,MPWhitespace: {_hx_name:"MPWhitespace",_hx_index:15,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPNewLine: {_hx_name:"MPNewLine",_hx_index:16,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPArrow: {_hx_name:"MPArrow",_hx_index:17,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPStar: {_hx_name:"MPStar",_hx_index:18,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPPercent: {_hx_name:"MPPercent",_hx_index:19,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPPlus: {_hx_name:"MPPlus",_hx_index:20,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPSlash: {_hx_name:"MPSlash",_hx_index:21,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPMinus: {_hx_name:"MPMinus",_hx_index:22,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPEquals: {_hx_name:"MPEquals",_hx_index:23,__enum__:"bh.multianim.MPToken",toString:$estr}
	,MPInterpolation: ($_=function(type) { return {_hx_index:24,type:type,__enum__:"bh.multianim.MPToken",toString:$estr}; },$_._hx_name="MPInterpolation",$_.__params__ = ["type"],$_)
};
bh_multianim_MPToken.__constructs__ = [bh_multianim_MPToken.MPEof,bh_multianim_MPToken.MPOpen,bh_multianim_MPToken.MPClosed,bh_multianim_MPToken.MPBracketOpen,bh_multianim_MPToken.MPBracketClosed,bh_multianim_MPToken.MPCurlyOpen,bh_multianim_MPToken.MPCurlyClosed,bh_multianim_MPToken.MPComma,bh_multianim_MPToken.MPAt,bh_multianim_MPToken.MPExclamation,bh_multianim_MPToken.MPColon,bh_multianim_MPToken.MPDoubleDot,bh_multianim_MPToken.MPSemiColon,bh_multianim_MPToken.MPNumber,bh_multianim_MPToken.MPIdentifier,bh_multianim_MPToken.MPWhitespace,bh_multianim_MPToken.MPNewLine,bh_multianim_MPToken.MPArrow,bh_multianim_MPToken.MPStar,bh_multianim_MPToken.MPPercent,bh_multianim_MPToken.MPPlus,bh_multianim_MPToken.MPSlash,bh_multianim_MPToken.MPMinus,bh_multianim_MPToken.MPEquals,bh_multianim_MPToken.MPInterpolation];
bh_multianim_MPToken.__empty_constructs__ = [bh_multianim_MPToken.MPEof,bh_multianim_MPToken.MPOpen,bh_multianim_MPToken.MPClosed,bh_multianim_MPToken.MPBracketOpen,bh_multianim_MPToken.MPBracketClosed,bh_multianim_MPToken.MPCurlyOpen,bh_multianim_MPToken.MPCurlyClosed,bh_multianim_MPToken.MPComma,bh_multianim_MPToken.MPAt,bh_multianim_MPToken.MPExclamation,bh_multianim_MPToken.MPColon,bh_multianim_MPToken.MPDoubleDot,bh_multianim_MPToken.MPSemiColon,bh_multianim_MPToken.MPWhitespace,bh_multianim_MPToken.MPNewLine,bh_multianim_MPToken.MPArrow,bh_multianim_MPToken.MPStar,bh_multianim_MPToken.MPPercent,bh_multianim_MPToken.MPPlus,bh_multianim_MPToken.MPSlash,bh_multianim_MPToken.MPMinus,bh_multianim_MPToken.MPEquals];
var bh_multianim_MPKeywords = $hxEnums["bh.multianim.MPKeywords"] = { __ename__:true,__constructs__:null
	,MPTile: {_hx_name:"MPTile",_hx_index:0,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPBit: {_hx_name:"MPBit",_hx_index:1,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPCallback: {_hx_name:"MPCallback",_hx_index:2,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPFunction: {_hx_name:"MPFunction",_hx_index:3,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPBuilderParameter: {_hx_name:"MPBuilderParameter",_hx_index:4,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPNinePatch: {_hx_name:"MPNinePatch",_hx_index:5,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPApply: {_hx_name:"MPApply",_hx_index:6,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPCenter: {_hx_name:"MPCenter",_hx_index:7,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPLeft: {_hx_name:"MPLeft",_hx_index:8,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPRight: {_hx_name:"MPRight",_hx_index:9,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPTop: {_hx_name:"MPTop",_hx_index:10,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPBottom: {_hx_name:"MPBottom",_hx_index:11,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPBitmap: {_hx_name:"MPBitmap",_hx_index:12,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPHexDirection: {_hx_name:"MPHexDirection",_hx_index:13,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPGridDirection: {_hx_name:"MPGridDirection",_hx_index:14,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPRepeatable: {_hx_name:"MPRepeatable",_hx_index:15,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPHexGrid: {_hx_name:"MPHexGrid",_hx_index:16,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPOffset: {_hx_name:"MPOffset",_hx_index:17,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPGrid: {_hx_name:"MPGrid",_hx_index:18,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPHex: {_hx_name:"MPHex",_hx_index:19,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPPoint: {_hx_name:"MPPoint",_hx_index:20,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPFlow: {_hx_name:"MPFlow",_hx_index:21,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPStateanim: {_hx_name:"MPStateanim",_hx_index:22,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPConstruct: {_hx_name:"MPConstruct",_hx_index:23,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPPixels: {_hx_name:"MPPixels",_hx_index:24,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPTileGroup: {_hx_name:"MPTileGroup",_hx_index:25,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPProgrammable: {_hx_name:"MPProgrammable",_hx_index:26,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPRelativeLayouts: {_hx_name:"MPRelativeLayouts",_hx_index:27,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPLayout: {_hx_name:"MPLayout",_hx_index:28,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPLayers: {_hx_name:"MPLayers",_hx_index:29,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPPalette: {_hx_name:"MPPalette",_hx_index:30,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPLayer: {_hx_name:"MPLayer",_hx_index:31,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPSettings: {_hx_name:"MPSettings",_hx_index:32,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPPosition: {_hx_name:"MPPosition",_hx_index:33,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPImport: {_hx_name:"MPImport",_hx_index:34,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPScale: {_hx_name:"MPScale",_hx_index:35,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPFilter: {_hx_name:"MPFilter",_hx_index:36,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPFile: {_hx_name:"MPFile",_hx_index:37,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPSheet: {_hx_name:"MPSheet",_hx_index:38,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPLoop: {_hx_name:"MPLoop",_hx_index:39,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPGenerated: {_hx_name:"MPGenerated",_hx_index:40,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPAlpha: {_hx_name:"MPAlpha",_hx_index:41,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPPos: {_hx_name:"MPPos",_hx_index:42,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPFlat: {_hx_name:"MPFlat",_hx_index:43,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPPointy: {_hx_name:"MPPointy",_hx_index:44,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPHexEdge: {_hx_name:"MPHexEdge",_hx_index:45,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPHexCorner: {_hx_name:"MPHexCorner",_hx_index:46,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPLine: {_hx_name:"MPLine",_hx_index:47,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPForward: {_hx_name:"MPForward",_hx_index:48,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPTurn: {_hx_name:"MPTurn",_hx_index:49,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPBezier: {_hx_name:"MPBezier",_hx_index:50,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPCheckpoint: {_hx_name:"MPCheckpoint",_hx_index:51,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPList: {_hx_name:"MPList",_hx_index:52,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPSequence: {_hx_name:"MPSequence",_hx_index:53,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPRect: {_hx_name:"MPRect",_hx_index:54,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPFilledRect: {_hx_name:"MPFilledRect",_hx_index:55,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPFlags: {_hx_name:"MPFlags",_hx_index:56,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPError: {_hx_name:"MPError",_hx_index:57,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPNothing: {_hx_name:"MPNothing",_hx_index:58,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPText: {_hx_name:"MPText",_hx_index:59,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPVersion: {_hx_name:"MPVersion",_hx_index:60,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPPlaceholder: {_hx_name:"MPPlaceholder",_hx_index:61,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPDebug: {_hx_name:"MPDebug",_hx_index:62,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPReference: {_hx_name:"MPReference",_hx_index:63,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPIf: {_hx_name:"MPIf",_hx_index:64,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPIfStrict: {_hx_name:"MPIfStrict",_hx_index:65,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPInteractive: {_hx_name:"MPInteractive",_hx_index:66,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPInt: {_hx_name:"MPInt",_hx_index:67,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPFloat: {_hx_name:"MPFloat",_hx_index:68,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPColor: {_hx_name:"MPColor",_hx_index:69,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPUInt: {_hx_name:"MPUInt",_hx_index:70,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPBool: {_hx_name:"MPBool",_hx_index:71,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPBlendMode: {_hx_name:"MPBlendMode",_hx_index:72,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPUpdatable: {_hx_name:"MPUpdatable",_hx_index:73,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPPaths: {_hx_name:"MPPaths",_hx_index:74,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPPath: {_hx_name:"MPPath",_hx_index:75,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPParticles: {_hx_name:"MPParticles",_hx_index:76,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPAnimatedPath: {_hx_name:"MPAnimatedPath",_hx_index:77,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPDiv: {_hx_name:"MPDiv",_hx_index:78,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPExternal: {_hx_name:"MPExternal",_hx_index:79,__enum__:"bh.multianim.MPKeywords",toString:$estr}
	,MPArray: {_hx_name:"MPArray",_hx_index:80,__enum__:"bh.multianim.MPKeywords",toString:$estr}
};
bh_multianim_MPKeywords.__constructs__ = [bh_multianim_MPKeywords.MPTile,bh_multianim_MPKeywords.MPBit,bh_multianim_MPKeywords.MPCallback,bh_multianim_MPKeywords.MPFunction,bh_multianim_MPKeywords.MPBuilderParameter,bh_multianim_MPKeywords.MPNinePatch,bh_multianim_MPKeywords.MPApply,bh_multianim_MPKeywords.MPCenter,bh_multianim_MPKeywords.MPLeft,bh_multianim_MPKeywords.MPRight,bh_multianim_MPKeywords.MPTop,bh_multianim_MPKeywords.MPBottom,bh_multianim_MPKeywords.MPBitmap,bh_multianim_MPKeywords.MPHexDirection,bh_multianim_MPKeywords.MPGridDirection,bh_multianim_MPKeywords.MPRepeatable,bh_multianim_MPKeywords.MPHexGrid,bh_multianim_MPKeywords.MPOffset,bh_multianim_MPKeywords.MPGrid,bh_multianim_MPKeywords.MPHex,bh_multianim_MPKeywords.MPPoint,bh_multianim_MPKeywords.MPFlow,bh_multianim_MPKeywords.MPStateanim,bh_multianim_MPKeywords.MPConstruct,bh_multianim_MPKeywords.MPPixels,bh_multianim_MPKeywords.MPTileGroup,bh_multianim_MPKeywords.MPProgrammable,bh_multianim_MPKeywords.MPRelativeLayouts,bh_multianim_MPKeywords.MPLayout,bh_multianim_MPKeywords.MPLayers,bh_multianim_MPKeywords.MPPalette,bh_multianim_MPKeywords.MPLayer,bh_multianim_MPKeywords.MPSettings,bh_multianim_MPKeywords.MPPosition,bh_multianim_MPKeywords.MPImport,bh_multianim_MPKeywords.MPScale,bh_multianim_MPKeywords.MPFilter,bh_multianim_MPKeywords.MPFile,bh_multianim_MPKeywords.MPSheet,bh_multianim_MPKeywords.MPLoop,bh_multianim_MPKeywords.MPGenerated,bh_multianim_MPKeywords.MPAlpha,bh_multianim_MPKeywords.MPPos,bh_multianim_MPKeywords.MPFlat,bh_multianim_MPKeywords.MPPointy,bh_multianim_MPKeywords.MPHexEdge,bh_multianim_MPKeywords.MPHexCorner,bh_multianim_MPKeywords.MPLine,bh_multianim_MPKeywords.MPForward,bh_multianim_MPKeywords.MPTurn,bh_multianim_MPKeywords.MPBezier,bh_multianim_MPKeywords.MPCheckpoint,bh_multianim_MPKeywords.MPList,bh_multianim_MPKeywords.MPSequence,bh_multianim_MPKeywords.MPRect,bh_multianim_MPKeywords.MPFilledRect,bh_multianim_MPKeywords.MPFlags,bh_multianim_MPKeywords.MPError,bh_multianim_MPKeywords.MPNothing,bh_multianim_MPKeywords.MPText,bh_multianim_MPKeywords.MPVersion,bh_multianim_MPKeywords.MPPlaceholder,bh_multianim_MPKeywords.MPDebug,bh_multianim_MPKeywords.MPReference,bh_multianim_MPKeywords.MPIf,bh_multianim_MPKeywords.MPIfStrict,bh_multianim_MPKeywords.MPInteractive,bh_multianim_MPKeywords.MPInt,bh_multianim_MPKeywords.MPFloat,bh_multianim_MPKeywords.MPColor,bh_multianim_MPKeywords.MPUInt,bh_multianim_MPKeywords.MPBool,bh_multianim_MPKeywords.MPBlendMode,bh_multianim_MPKeywords.MPUpdatable,bh_multianim_MPKeywords.MPPaths,bh_multianim_MPKeywords.MPPath,bh_multianim_MPKeywords.MPParticles,bh_multianim_MPKeywords.MPAnimatedPath,bh_multianim_MPKeywords.MPDiv,bh_multianim_MPKeywords.MPExternal,bh_multianim_MPKeywords.MPArray];
bh_multianim_MPKeywords.__empty_constructs__ = [bh_multianim_MPKeywords.MPTile,bh_multianim_MPKeywords.MPBit,bh_multianim_MPKeywords.MPCallback,bh_multianim_MPKeywords.MPFunction,bh_multianim_MPKeywords.MPBuilderParameter,bh_multianim_MPKeywords.MPNinePatch,bh_multianim_MPKeywords.MPApply,bh_multianim_MPKeywords.MPCenter,bh_multianim_MPKeywords.MPLeft,bh_multianim_MPKeywords.MPRight,bh_multianim_MPKeywords.MPTop,bh_multianim_MPKeywords.MPBottom,bh_multianim_MPKeywords.MPBitmap,bh_multianim_MPKeywords.MPHexDirection,bh_multianim_MPKeywords.MPGridDirection,bh_multianim_MPKeywords.MPRepeatable,bh_multianim_MPKeywords.MPHexGrid,bh_multianim_MPKeywords.MPOffset,bh_multianim_MPKeywords.MPGrid,bh_multianim_MPKeywords.MPHex,bh_multianim_MPKeywords.MPPoint,bh_multianim_MPKeywords.MPFlow,bh_multianim_MPKeywords.MPStateanim,bh_multianim_MPKeywords.MPConstruct,bh_multianim_MPKeywords.MPPixels,bh_multianim_MPKeywords.MPTileGroup,bh_multianim_MPKeywords.MPProgrammable,bh_multianim_MPKeywords.MPRelativeLayouts,bh_multianim_MPKeywords.MPLayout,bh_multianim_MPKeywords.MPLayers,bh_multianim_MPKeywords.MPPalette,bh_multianim_MPKeywords.MPLayer,bh_multianim_MPKeywords.MPSettings,bh_multianim_MPKeywords.MPPosition,bh_multianim_MPKeywords.MPImport,bh_multianim_MPKeywords.MPScale,bh_multianim_MPKeywords.MPFilter,bh_multianim_MPKeywords.MPFile,bh_multianim_MPKeywords.MPSheet,bh_multianim_MPKeywords.MPLoop,bh_multianim_MPKeywords.MPGenerated,bh_multianim_MPKeywords.MPAlpha,bh_multianim_MPKeywords.MPPos,bh_multianim_MPKeywords.MPFlat,bh_multianim_MPKeywords.MPPointy,bh_multianim_MPKeywords.MPHexEdge,bh_multianim_MPKeywords.MPHexCorner,bh_multianim_MPKeywords.MPLine,bh_multianim_MPKeywords.MPForward,bh_multianim_MPKeywords.MPTurn,bh_multianim_MPKeywords.MPBezier,bh_multianim_MPKeywords.MPCheckpoint,bh_multianim_MPKeywords.MPList,bh_multianim_MPKeywords.MPSequence,bh_multianim_MPKeywords.MPRect,bh_multianim_MPKeywords.MPFilledRect,bh_multianim_MPKeywords.MPFlags,bh_multianim_MPKeywords.MPError,bh_multianim_MPKeywords.MPNothing,bh_multianim_MPKeywords.MPText,bh_multianim_MPKeywords.MPVersion,bh_multianim_MPKeywords.MPPlaceholder,bh_multianim_MPKeywords.MPDebug,bh_multianim_MPKeywords.MPReference,bh_multianim_MPKeywords.MPIf,bh_multianim_MPKeywords.MPIfStrict,bh_multianim_MPKeywords.MPInteractive,bh_multianim_MPKeywords.MPInt,bh_multianim_MPKeywords.MPFloat,bh_multianim_MPKeywords.MPColor,bh_multianim_MPKeywords.MPUInt,bh_multianim_MPKeywords.MPBool,bh_multianim_MPKeywords.MPBlendMode,bh_multianim_MPKeywords.MPUpdatable,bh_multianim_MPKeywords.MPPaths,bh_multianim_MPKeywords.MPPath,bh_multianim_MPKeywords.MPParticles,bh_multianim_MPKeywords.MPAnimatedPath,bh_multianim_MPKeywords.MPDiv,bh_multianim_MPKeywords.MPExternal,bh_multianim_MPKeywords.MPArray];
var bh_multianim_PlaceholderTypes = $hxEnums["bh.multianim.PlaceholderTypes"] = { __ename__:true,__constructs__:null
	,PHTileSource: ($_=function(source) { return {_hx_index:0,source:source,__enum__:"bh.multianim.PlaceholderTypes",toString:$estr}; },$_._hx_name="PHTileSource",$_.__params__ = ["source"],$_)
	,PHError: {_hx_name:"PHError",_hx_index:1,__enum__:"bh.multianim.PlaceholderTypes",toString:$estr}
	,PHNothing: {_hx_name:"PHNothing",_hx_index:2,__enum__:"bh.multianim.PlaceholderTypes",toString:$estr}
};
bh_multianim_PlaceholderTypes.__constructs__ = [bh_multianim_PlaceholderTypes.PHTileSource,bh_multianim_PlaceholderTypes.PHError,bh_multianim_PlaceholderTypes.PHNothing];
bh_multianim_PlaceholderTypes.__empty_constructs__ = [bh_multianim_PlaceholderTypes.PHError,bh_multianim_PlaceholderTypes.PHNothing];
var bh_multianim_PlaceholderReplacementSource = $hxEnums["bh.multianim.PlaceholderReplacementSource"] = { __ename__:true,__constructs__:null
	,PRSCallback: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"bh.multianim.PlaceholderReplacementSource",toString:$estr}; },$_._hx_name="PRSCallback",$_.__params__ = ["name"],$_)
	,PRSCallbackWithIndex: ($_=function(name,index) { return {_hx_index:1,name:name,index:index,__enum__:"bh.multianim.PlaceholderReplacementSource",toString:$estr}; },$_._hx_name="PRSCallbackWithIndex",$_.__params__ = ["name","index"],$_)
	,PRSBuilderParameterSource: ($_=function(name) { return {_hx_index:2,name:name,__enum__:"bh.multianim.PlaceholderReplacementSource",toString:$estr}; },$_._hx_name="PRSBuilderParameterSource",$_.__params__ = ["name"],$_)
};
bh_multianim_PlaceholderReplacementSource.__constructs__ = [bh_multianim_PlaceholderReplacementSource.PRSCallback,bh_multianim_PlaceholderReplacementSource.PRSCallbackWithIndex,bh_multianim_PlaceholderReplacementSource.PRSBuilderParameterSource];
bh_multianim_PlaceholderReplacementSource.__empty_constructs__ = [];
var bh_multianim_UpdatableNameType = $hxEnums["bh.multianim.UpdatableNameType"] = { __ename__:true,__constructs__:null
	,UNTObject: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"bh.multianim.UpdatableNameType",toString:$estr}; },$_._hx_name="UNTObject",$_.__params__ = ["name"],$_)
	,UNTUpdatable: ($_=function(name) { return {_hx_index:1,name:name,__enum__:"bh.multianim.UpdatableNameType",toString:$estr}; },$_._hx_name="UNTUpdatable",$_.__params__ = ["name"],$_)
};
bh_multianim_UpdatableNameType.__constructs__ = [bh_multianim_UpdatableNameType.UNTObject,bh_multianim_UpdatableNameType.UNTUpdatable];
bh_multianim_UpdatableNameType.__empty_constructs__ = [];
var bh_multianim_BuiltHeapsComponent = $hxEnums["bh.multianim.BuiltHeapsComponent"] = { __ename__:true,__constructs__:null
	,HeapsObject: ($_=function(obj) { return {_hx_index:0,obj:obj,__enum__:"bh.multianim.BuiltHeapsComponent",toString:$estr}; },$_._hx_name="HeapsObject",$_.__params__ = ["obj"],$_)
	,Pixels: ($_=function(t) { return {_hx_index:1,t:t,__enum__:"bh.multianim.BuiltHeapsComponent",toString:$estr}; },$_._hx_name="Pixels",$_.__params__ = ["t"],$_)
	,StateAnim: ($_=function(a) { return {_hx_index:2,a:a,__enum__:"bh.multianim.BuiltHeapsComponent",toString:$estr}; },$_._hx_name="StateAnim",$_.__params__ = ["a"],$_)
	,HeapsBitmap: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"bh.multianim.BuiltHeapsComponent",toString:$estr}; },$_._hx_name="HeapsBitmap",$_.__params__ = ["b"],$_)
	,HeapsText: ($_=function(b) { return {_hx_index:4,b:b,__enum__:"bh.multianim.BuiltHeapsComponent",toString:$estr}; },$_._hx_name="HeapsText",$_.__params__ = ["b"],$_)
	,NinePatch: ($_=function(s) { return {_hx_index:5,s:s,__enum__:"bh.multianim.BuiltHeapsComponent",toString:$estr}; },$_._hx_name="NinePatch",$_.__params__ = ["s"],$_)
	,HeapsFlow: ($_=function(f) { return {_hx_index:6,f:f,__enum__:"bh.multianim.BuiltHeapsComponent",toString:$estr}; },$_._hx_name="HeapsFlow",$_.__params__ = ["f"],$_)
	,HeapsLayers: ($_=function(f) { return {_hx_index:7,f:f,__enum__:"bh.multianim.BuiltHeapsComponent",toString:$estr}; },$_._hx_name="HeapsLayers",$_.__params__ = ["f"],$_)
	,Particles: ($_=function(p) { return {_hx_index:8,p:p,__enum__:"bh.multianim.BuiltHeapsComponent",toString:$estr}; },$_._hx_name="Particles",$_.__params__ = ["p"],$_)
};
bh_multianim_BuiltHeapsComponent.__constructs__ = [bh_multianim_BuiltHeapsComponent.HeapsObject,bh_multianim_BuiltHeapsComponent.Pixels,bh_multianim_BuiltHeapsComponent.StateAnim,bh_multianim_BuiltHeapsComponent.HeapsBitmap,bh_multianim_BuiltHeapsComponent.HeapsText,bh_multianim_BuiltHeapsComponent.NinePatch,bh_multianim_BuiltHeapsComponent.HeapsFlow,bh_multianim_BuiltHeapsComponent.HeapsLayers,bh_multianim_BuiltHeapsComponent.Particles];
bh_multianim_BuiltHeapsComponent.__empty_constructs__ = [];
var hxparse_ParserError = function(pos) {
	this.pos = pos;
};
$hxClasses["hxparse.ParserError"] = hxparse_ParserError;
hxparse_ParserError.__name__ = "hxparse.ParserError";
hxparse_ParserError.prototype = {
	toString: function() {
		return "Parser error";
	}
	,__class__: hxparse_ParserError
};
var hxparse_Unexpected = function(token,pos) {
	hxparse_ParserError.call(this,pos);
	this.token = token;
};
$hxClasses["hxparse.Unexpected"] = hxparse_Unexpected;
hxparse_Unexpected.__name__ = "hxparse.Unexpected";
hxparse_Unexpected.__super__ = hxparse_ParserError;
hxparse_Unexpected.prototype = $extend(hxparse_ParserError.prototype,{
	toString: function() {
		return "Unexpected " + Std.string(this.token);
	}
	,__class__: hxparse_Unexpected
});
var bh_multianim_MultiAnimUnexpected = function(token,pos,message,input) {
	hxparse_Unexpected.call(this,token,pos);
	this.token = token;
	this.message = message;
	this.input = input;
};
$hxClasses["bh.multianim.MultiAnimUnexpected"] = bh_multianim_MultiAnimUnexpected;
bh_multianim_MultiAnimUnexpected.__name__ = "bh.multianim.MultiAnimUnexpected";
bh_multianim_MultiAnimUnexpected.__super__ = hxparse_Unexpected;
bh_multianim_MultiAnimUnexpected.prototype = $extend(hxparse_Unexpected.prototype,{
	toString: function() {
		return "" + this.message + ": unexpected " + Std.string(this.token) + " at " + this.pos.format(this.input);
	}
	,__class__: bh_multianim_MultiAnimUnexpected
});
var hxparse_Lexer = function(input,sourceName) {
	if(sourceName == null) {
		sourceName = "<null>";
	}
	this.current = "";
	this.input = input;
	this.source = sourceName;
	this.pos = 0;
};
$hxClasses["hxparse.Lexer"] = hxparse_Lexer;
hxparse_Lexer.__name__ = "hxparse.Lexer";
hxparse_Lexer.buildRuleset = function(rules,name) {
	if(name == null) {
		name = "";
	}
	var cases = [];
	var functions = [];
	var eofFunction = null;
	var _g = 0;
	while(_g < rules.length) {
		var rule = rules[_g];
		++_g;
		if(rule.rule == "") {
			eofFunction = rule.func;
		} else {
			cases.push(hxparse_LexEngine.parse(rule.rule));
			functions.push(rule.func);
		}
	}
	return new hxparse_Ruleset(new hxparse_LexEngine(cases).firstState(),functions,eofFunction,name);
};
hxparse_Lexer.prototype = {
	token: function(ruleset) {
		if(this.pos == this.input.length) {
			if(ruleset.eofFunction != null) {
				return ruleset.eofFunction(this);
			} else {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			}
		}
		var state = ruleset.state;
		var lastMatch = null;
		var lastMatchPos = this.pos;
		var start = this.pos;
		do {
			if(state.finalId > -1) {
				lastMatch = state;
				lastMatchPos = this.pos;
			}
			if(this.pos == this.input.length) {
				break;
			}
			var i = this.input.b[this.pos];
			++this.pos;
			state = state.trans[i];
		} while(state != null);
		this.pos = lastMatchPos;
		this.current = this.input.getString(start,this.pos - start);
		if(lastMatch == null || lastMatch.finalId == -1) {
			var code = this.input.b[this.pos];
			throw haxe_Exception.thrown(new hxparse_UnexpectedChar(String.fromCodePoint(code),new hxparse_Position(this.source,this.pos - this.current.length,this.pos)));
		}
		return ruleset.functions[lastMatch.finalId](this);
	}
	,__class__: hxparse_Lexer
};
var hxparse_RuleBuilder = function() { };
$hxClasses["hxparse.RuleBuilder"] = hxparse_RuleBuilder;
hxparse_RuleBuilder.__name__ = "hxparse.RuleBuilder";
hxparse_RuleBuilder.__isInterface__ = true;
var hxparse__$LexEngine_CharRange = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["hxparse._LexEngine.CharRange"] = hxparse__$LexEngine_CharRange;
hxparse__$LexEngine_CharRange.__name__ = "hxparse._LexEngine.CharRange";
hxparse__$LexEngine_CharRange.prototype = {
	__class__: hxparse__$LexEngine_CharRange
};
var hxparse_LexEngine = function(patterns) {
	this.nodes = [];
	this.finals = [];
	this.states = [];
	this.hstates = new haxe_ds_StringMap();
	this.uid = 0;
	var pid = 0;
	var _g = 0;
	while(_g < patterns.length) {
		var p = patterns[_g];
		++_g;
		var id = pid++;
		var f = new hxparse__$LexEngine_Node(this.uid++,id);
		var n = this.initNode(p,f,id);
		this.nodes.push(n);
		this.finals.push(f);
	}
	this.makeState(this.addNodes([],this.nodes));
};
$hxClasses["hxparse.LexEngine"] = hxparse_LexEngine;
hxparse_LexEngine.__name__ = "hxparse.LexEngine";
hxparse_LexEngine.parse = function(pattern) {
	var p = hxparse_LexEngine.parseInner(haxe_io_Bytes.ofString(pattern));
	if(p == null) {
		throw haxe_Exception.thrown("Invalid pattern '" + pattern + "'");
	}
	return p.pattern;
};
hxparse_LexEngine.next = function(a,b) {
	if(a == hxparse__$LexEngine_Pattern.Empty) {
		return b;
	} else {
		return hxparse__$LexEngine_Pattern.Next(a,b);
	}
};
hxparse_LexEngine.plus = function(r) {
	if(r._hx_index == 4) {
		var r1 = r.p1;
		var r2 = r.p2;
		return hxparse__$LexEngine_Pattern.Next(r1,hxparse_LexEngine.plus(r2));
	} else {
		return hxparse__$LexEngine_Pattern.Plus(r);
	}
};
hxparse_LexEngine.star = function(r) {
	if(r._hx_index == 4) {
		var r1 = r.p1;
		var r2 = r.p2;
		return hxparse__$LexEngine_Pattern.Next(r1,hxparse_LexEngine.star(r2));
	} else {
		return hxparse__$LexEngine_Pattern.Star(r);
	}
};
hxparse_LexEngine.opt = function(r) {
	if(r._hx_index == 4) {
		var r1 = r.p1;
		var r2 = r.p2;
		return hxparse__$LexEngine_Pattern.Next(r1,hxparse_LexEngine.opt(r2));
	} else {
		return hxparse__$LexEngine_Pattern.Choice(r,hxparse__$LexEngine_Pattern.Empty);
	}
};
hxparse_LexEngine.cinter = function(c1,c2) {
	return hxparse_LexEngine.ccomplement(hxparse_LexEngine.cunion(hxparse_LexEngine.ccomplement(c1),hxparse_LexEngine.ccomplement(c2)));
};
hxparse_LexEngine.cdiff = function(c1,c2) {
	return hxparse_LexEngine.ccomplement(hxparse_LexEngine.cunion(hxparse_LexEngine.ccomplement(c1),c2));
};
hxparse_LexEngine.ccomplement = function(c) {
	var first = c[0];
	var start = first != null && first.min == -1 ? c.shift().max + 1 : -1;
	var out = [];
	var _g = 0;
	while(_g < c.length) {
		var k = c[_g];
		++_g;
		out.push(new hxparse__$LexEngine_CharRange(start,k.min - 1));
		start = k.max + 1;
	}
	if(start <= 255) {
		out.push(new hxparse__$LexEngine_CharRange(start,255));
	}
	return out;
};
hxparse_LexEngine.cunion = function(ca,cb) {
	var i = 0;
	var j = 0;
	var out = [];
	var a = ca[i++];
	var b = cb[j++];
	while(true) {
		if(a == null) {
			out.push(b);
			while(j < cb.length) out.push(cb[j++]);
			break;
		}
		if(b == null) {
			out.push(a);
			while(i < ca.length) out.push(ca[i++]);
			break;
		}
		if(a.min <= b.min) {
			if(a.max + 1 < b.min) {
				out.push(a);
				a = ca[i++];
			} else if(a.max < b.max) {
				b = new hxparse__$LexEngine_CharRange(a.min,b.max);
				a = ca[i++];
			} else {
				b = cb[j++];
			}
		} else {
			var tmp = ca;
			ca = cb;
			cb = tmp;
			var tmp1 = j;
			j = i;
			i = tmp1;
			var tmp2 = a;
			a = b;
			b = tmp2;
		}
	}
	return out;
};
hxparse_LexEngine.parseInner = function(pattern,i,pDepth) {
	if(pDepth == null) {
		pDepth = 0;
	}
	if(i == null) {
		i = 0;
	}
	var readChar = function() {
		i += 1;
		var c = pattern.b[i - 1];
		if(c != c) {
			c = 92;
		} else if(c == 120) {
			c = Std.parseInt("0x" + pattern.getString(i,2));
			i += 2;
		} else if(c >= 48 && c <= 57) {
			var v = c - 48;
			while(true) {
				var cNext = pattern.b[i];
				if(cNext >= 48 && cNext <= 57) {
					v = v * 10 + (cNext - 48);
					i += 1;
				} else {
					break;
				}
			}
			c = v;
		}
		return c;
	};
	var r = hxparse__$LexEngine_Pattern.Empty;
	var l = pattern.length;
	while(i < l) {
		i += 1;
		var c = pattern.b[i - 1];
		if(c > 255) {
			throw haxe_Exception.thrown(c);
		}
		switch(c) {
		case 40:
			var r2 = hxparse_LexEngine.parseInner(pattern,i,pDepth + 1);
			i = r2.pos;
			r = hxparse_LexEngine.next(r,r2.pattern);
			break;
		case 41:
			if(r == hxparse__$LexEngine_Pattern.Empty) {
				throw haxe_Exception.thrown("Empty group");
			}
			return { pattern : hxparse__$LexEngine_Pattern.Group(r), pos : i};
		case 42:
			if(r != hxparse__$LexEngine_Pattern.Empty) {
				r = hxparse_LexEngine.star(r);
			} else {
				r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([new hxparse__$LexEngine_CharRange(c,c)]));
			}
			break;
		case 43:
			if(r != hxparse__$LexEngine_Pattern.Empty) {
				r = hxparse_LexEngine.plus(r);
			} else {
				r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([new hxparse__$LexEngine_CharRange(c,c)]));
			}
			break;
		case 46:
			r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match(hxparse_LexEngine.ALL_CHARS));
			break;
		case 63:
			if(r != hxparse__$LexEngine_Pattern.Empty) {
				r = hxparse_LexEngine.opt(r);
			} else {
				r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([new hxparse__$LexEngine_CharRange(c,c)]));
			}
			break;
		case 91:
			if(pattern.length > 1) {
				var range = 0;
				var acc = [];
				var not = pattern.b[i] == 94;
				if(not) {
					i += 1;
				}
				while(true) {
					i += 1;
					var c1 = pattern.b[i - 1];
					if(c1 == 93) {
						if(range != 0) {
							return null;
						}
						break;
					} else if(c1 == 45) {
						if(range != 0) {
							return null;
						}
						var last = acc.pop();
						if(last == null) {
							acc.push(new hxparse__$LexEngine_CharRange(c1,c1));
						} else {
							if(last.min != last.max) {
								return null;
							}
							range = last.min;
						}
					} else {
						if(c1 == 92) {
							c1 = readChar();
						}
						if(range == 0) {
							acc.push(new hxparse__$LexEngine_CharRange(c1,c1));
						} else {
							acc.push(new hxparse__$LexEngine_CharRange(range,c1));
							range = 0;
						}
					}
				}
				var g = [];
				var _g = 0;
				while(_g < acc.length) {
					var k = acc[_g];
					++_g;
					g = hxparse_LexEngine.cunion(g,[k]);
				}
				if(not) {
					g = hxparse_LexEngine.cdiff(hxparse_LexEngine.ALL_CHARS,g);
				}
				r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match(g));
			} else {
				r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([new hxparse__$LexEngine_CharRange(c,c)]));
			}
			break;
		case 92:
			c = readChar();
			r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([new hxparse__$LexEngine_CharRange(c,c)]));
			break;
		case 124:
			if(r != hxparse__$LexEngine_Pattern.Empty) {
				var r21 = hxparse_LexEngine.parseInner(pattern,i);
				return { pattern : hxparse__$LexEngine_Pattern.Choice(r,r21.pattern), pos : r21.pos};
			} else {
				r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([new hxparse__$LexEngine_CharRange(c,c)]));
			}
			break;
		default:
			r = hxparse_LexEngine.next(r,hxparse__$LexEngine_Pattern.Match([new hxparse__$LexEngine_CharRange(c,c)]));
		}
	}
	if(pDepth != 0) {
		throw haxe_Exception.thrown("Found unclosed parenthesis while parsing \"" + Std.string(pattern) + "\"");
	}
	return { pattern : r, pos : i};
};
hxparse_LexEngine.prototype = {
	firstState: function() {
		return this.states[0];
	}
	,makeState: function(nodes) {
		var _gthis = this;
		var buf_b = "";
		var _g = 0;
		while(_g < nodes.length) {
			var n = nodes[_g];
			++_g;
			buf_b += Std.string(n.id);
			buf_b += String.fromCodePoint(45);
		}
		var key = buf_b;
		var s = this.hstates.h[key];
		if(s != null) {
			return s;
		}
		s = new hxparse_State();
		this.states.push(s);
		this.hstates.h[key] = s;
		var trans = this.getTransitions(nodes);
		var _g = 0;
		while(_g < trans.length) {
			var t = trans[_g];
			++_g;
			var target = this.makeState(t.n);
			var _g1 = 0;
			var _g2 = t.chars;
			while(_g1 < _g2.length) {
				var chr = _g2[_g1];
				++_g1;
				var _g3 = chr.min;
				var _g4 = chr.max + 1;
				while(_g3 < _g4) {
					var i = _g3++;
					s.trans[i] = target;
				}
			}
		}
		var setFinal = function() {
			var _g = 0;
			var _g1 = _gthis.finals;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				var _g2 = 0;
				while(_g2 < nodes.length) {
					var n = nodes[_g2];
					++_g2;
					if(n == f) {
						s.finalId = n.pid;
						return;
					}
				}
			}
		};
		if(s.finalId == -1) {
			setFinal();
		}
		return s;
	}
	,getTransitions: function(nodes) {
		var tl = [];
		var _g = 0;
		while(_g < nodes.length) {
			var n = nodes[_g];
			++_g;
			var _g1 = 0;
			var _g2 = n.trans;
			while(_g1 < _g2.length) {
				var t = _g2[_g1];
				++_g1;
				tl.push(t);
			}
		}
		tl.sort(function(t1,t2) {
			return t1.n.id - t2.n.id;
		});
		var t0 = tl[0];
		var _g = 1;
		var _g1 = tl.length;
		while(_g < _g1) {
			var i = _g++;
			var t1 = tl[i];
			if(t0.n == t1.n) {
				tl[i - 1] = null;
				t1 = { chars : hxparse_LexEngine.cunion(t0.chars,t1.chars), n : t1.n};
				tl[i] = t1;
			}
			t0 = t1;
		}
		while(HxOverrides.remove(tl,null)) {
		}
		var allChars = hxparse_LexEngine.EMPTY;
		var allStates = new haxe_ds_List();
		var _g = 0;
		while(_g < tl.length) {
			var t = tl[_g];
			++_g;
			var states = new haxe_ds_List();
			states.push({ chars : hxparse_LexEngine.cdiff(t.chars,allChars), n : [t.n]});
			var _g_head = allStates.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var s = val;
				var nodes = s.n.slice();
				nodes.push(t.n);
				states.push({ chars : hxparse_LexEngine.cinter(s.chars,t.chars), n : nodes});
				states.push({ chars : hxparse_LexEngine.cdiff(s.chars,t.chars), n : s.n});
			}
			var _g_head1 = states.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var s1 = val1;
				if(s1.chars.length == 0) {
					states.remove(s1);
				}
			}
			allChars = hxparse_LexEngine.cunion(allChars,t.chars);
			allStates = states;
		}
		var states = [];
		var _g_head = allStates.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var s = val;
			states.push({ chars : s.chars, n : this.addNodes([],s.n)});
		}
		states.sort(function(s1,s2) {
			var a = s1.chars.length;
			var b = s2.chars.length;
			var _g = 0;
			var _g1 = a < b ? a : b;
			while(_g < _g1) {
				var i = _g++;
				var a1 = s1.chars[i];
				var b1 = s2.chars[i];
				if(a1.min != b1.min) {
					return b1.min - a1.min;
				}
				if(a1.max != b1.max) {
					return b1.max - a1.max;
				}
			}
			if(a < b) {
				return b - a;
			}
			return 0;
		});
		return states;
	}
	,addNode: function(nodes,n) {
		var _g = 0;
		while(_g < nodes.length) {
			var n2 = nodes[_g];
			++_g;
			if(n == n2) {
				return;
			}
		}
		nodes.push(n);
		this.addNodes(nodes,n.epsilon);
	}
	,addNodes: function(nodes,add) {
		var _g = 0;
		while(_g < add.length) {
			var n = add[_g];
			++_g;
			this.addNode(nodes,n);
		}
		return nodes;
	}
	,initNode: function(p,finalId,pid) {
		switch(p._hx_index) {
		case 0:
			return finalId;
		case 1:
			var c = p.c;
			var n = new hxparse__$LexEngine_Node(this.uid++,pid);
			n.trans.push({ chars : c, n : finalId});
			return n;
		case 2:
			var p1 = p.p;
			var n = new hxparse__$LexEngine_Node(this.uid++,pid);
			var an = this.initNode(p1,n,pid);
			n.epsilon.push(an);
			n.epsilon.push(finalId);
			return n;
		case 3:
			var p1 = p.p;
			var n = new hxparse__$LexEngine_Node(this.uid++,pid);
			var an = this.initNode(p1,n,pid);
			n.epsilon.push(an);
			n.epsilon.push(finalId);
			return an;
		case 4:
			var a = p.p1;
			var b = p.p2;
			return this.initNode(a,this.initNode(b,finalId,pid),pid);
		case 5:
			var a = p.p1;
			var b = p.p2;
			var n = new hxparse__$LexEngine_Node(this.uid++,pid);
			n.epsilon.push(this.initNode(a,finalId,pid));
			n.epsilon.push(this.initNode(b,finalId,pid));
			return n;
		case 6:
			var p1 = p.p;
			return this.initNode(p1,finalId,pid);
		}
	}
	,__class__: hxparse_LexEngine
};
var hxparse__$LexEngine_Pattern = $hxEnums["hxparse._LexEngine.Pattern"] = { __ename__:true,__constructs__:null
	,Empty: {_hx_name:"Empty",_hx_index:0,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}
	,Match: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_._hx_name="Match",$_.__params__ = ["c"],$_)
	,Star: ($_=function(p) { return {_hx_index:2,p:p,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_._hx_name="Star",$_.__params__ = ["p"],$_)
	,Plus: ($_=function(p) { return {_hx_index:3,p:p,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_._hx_name="Plus",$_.__params__ = ["p"],$_)
	,Next: ($_=function(p1,p2) { return {_hx_index:4,p1:p1,p2:p2,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_._hx_name="Next",$_.__params__ = ["p1","p2"],$_)
	,Choice: ($_=function(p1,p2) { return {_hx_index:5,p1:p1,p2:p2,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_._hx_name="Choice",$_.__params__ = ["p1","p2"],$_)
	,Group: ($_=function(p) { return {_hx_index:6,p:p,__enum__:"hxparse._LexEngine.Pattern",toString:$estr}; },$_._hx_name="Group",$_.__params__ = ["p"],$_)
};
hxparse__$LexEngine_Pattern.__constructs__ = [hxparse__$LexEngine_Pattern.Empty,hxparse__$LexEngine_Pattern.Match,hxparse__$LexEngine_Pattern.Star,hxparse__$LexEngine_Pattern.Plus,hxparse__$LexEngine_Pattern.Next,hxparse__$LexEngine_Pattern.Choice,hxparse__$LexEngine_Pattern.Group];
hxparse__$LexEngine_Pattern.__empty_constructs__ = [hxparse__$LexEngine_Pattern.Empty];
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) {
			var i = _g++;
			var c = this.b[i];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var hxparse__$LexEngine_Node = function(id,pid) {
	this.id = id;
	this.pid = pid;
	this.trans = [];
	this.epsilon = [];
};
$hxClasses["hxparse._LexEngine.Node"] = hxparse__$LexEngine_Node;
hxparse__$LexEngine_Node.__name__ = "hxparse._LexEngine.Node";
hxparse__$LexEngine_Node.prototype = {
	__class__: hxparse__$LexEngine_Node
};
var hxparse_Ruleset = function(state,functions,eofFunction,name) {
	if(name == null) {
		name = "";
	}
	this.state = state;
	this.functions = functions;
	this.eofFunction = eofFunction;
	this.name = name;
};
$hxClasses["hxparse.Ruleset"] = hxparse_Ruleset;
hxparse_Ruleset.__name__ = "hxparse.Ruleset";
hxparse_Ruleset.prototype = {
	__class__: hxparse_Ruleset
};
var hxparse_Position = function(source,min,max) {
	this.psource = source;
	this.pmin = min;
	this.pmax = max;
};
$hxClasses["hxparse.Position"] = hxparse_Position;
hxparse_Position.__name__ = "hxparse.Position";
hxparse_Position.prototype = {
	toString: function() {
		return "" + this.psource + ":characters " + this.pmin + "-" + this.pmax;
	}
	,getLinePosition: function(input) {
		var lineMin = 1;
		var lineMax = 1;
		var posMin = 0;
		var posMax = 0;
		var cur = 0;
		while(cur < this.pmin) {
			if(input.b[cur] == 10) {
				++lineMin;
				posMin = cur + 1;
			}
			++cur;
		}
		lineMax = lineMin;
		posMax = posMin;
		posMin = cur - posMin;
		while(cur < this.pmax) {
			if(input.b[cur] == 10) {
				++lineMax;
				posMax = cur + 1;
			}
			++cur;
		}
		posMax = cur - posMax;
		return { lineMin : lineMin, lineMax : lineMax, posMin : posMin, posMax : posMax};
	}
	,format: function(input) {
		var linePos = this.getLinePosition(input);
		if(linePos.lineMin != linePos.lineMax) {
			return "" + this.psource + ":lines " + linePos.lineMin + "-" + linePos.lineMax;
		} else {
			return "" + this.psource + ":" + linePos.lineMin + ": characters " + linePos.posMin + "-" + linePos.posMax;
		}
	}
	,__class__: hxparse_Position
};
var bh_multianim_MultiAnimLexer = function(input,sourceName) {
	hxparse_Lexer.call(this,input,sourceName);
};
$hxClasses["bh.multianim.MultiAnimLexer"] = bh_multianim_MultiAnimLexer;
bh_multianim_MultiAnimLexer.__name__ = "bh.multianim.MultiAnimLexer";
bh_multianim_MultiAnimLexer.__interfaces__ = [hxparse_RuleBuilder];
bh_multianim_MultiAnimLexer.__super__ = hxparse_Lexer;
bh_multianim_MultiAnimLexer.prototype = $extend(hxparse_Lexer.prototype,{
	__class__: bh_multianim_MultiAnimLexer
});
var bh_multianim_InvalidSyntax = function(error,pos,input) {
	hxparse_ParserError.call(this,pos);
	this.error = bh_multianim_InvalidSyntax.toStringWithInput(error,pos,input);
};
$hxClasses["bh.multianim.InvalidSyntax"] = bh_multianim_InvalidSyntax;
bh_multianim_InvalidSyntax.__name__ = "bh.multianim.InvalidSyntax";
bh_multianim_InvalidSyntax.toStringWithInput = function(err,pos,input) {
	return "Error " + err + ", " + pos.format(input);
};
bh_multianim_InvalidSyntax.__super__ = hxparse_ParserError;
bh_multianim_InvalidSyntax.prototype = $extend(hxparse_ParserError.prototype,{
	toString: function() {
		return this.error;
	}
	,__class__: bh_multianim_InvalidSyntax
});
var bh_multianim_PixelShapes = $hxEnums["bh.multianim.PixelShapes"] = { __ename__:true,__constructs__:null
	,LINE: ($_=function(line) { return {_hx_index:0,line:line,__enum__:"bh.multianim.PixelShapes",toString:$estr}; },$_._hx_name="LINE",$_.__params__ = ["line"],$_)
	,RECT: ($_=function(rect) { return {_hx_index:1,rect:rect,__enum__:"bh.multianim.PixelShapes",toString:$estr}; },$_._hx_name="RECT",$_.__params__ = ["rect"],$_)
	,FILLED_RECT: ($_=function(rect) { return {_hx_index:2,rect:rect,__enum__:"bh.multianim.PixelShapes",toString:$estr}; },$_._hx_name="FILLED_RECT",$_.__params__ = ["rect"],$_)
};
bh_multianim_PixelShapes.__constructs__ = [bh_multianim_PixelShapes.LINE,bh_multianim_PixelShapes.RECT,bh_multianim_PixelShapes.FILLED_RECT];
bh_multianim_PixelShapes.__empty_constructs__ = [];
var bh_multianim_DefinitionType = $hxEnums["bh.multianim.DefinitionType"] = { __ename__:true,__constructs__:null
	,PPTHexDirecton: {_hx_name:"PPTHexDirecton",_hx_index:0,__enum__:"bh.multianim.DefinitionType",toString:$estr}
	,PPTGridDirection: {_hx_name:"PPTGridDirection",_hx_index:1,__enum__:"bh.multianim.DefinitionType",toString:$estr}
	,PPTFlags: ($_=function(bits) { return {_hx_index:2,bits:bits,__enum__:"bh.multianim.DefinitionType",toString:$estr}; },$_._hx_name="PPTFlags",$_.__params__ = ["bits"],$_)
	,PPTEnum: ($_=function(values) { return {_hx_index:3,values:values,__enum__:"bh.multianim.DefinitionType",toString:$estr}; },$_._hx_name="PPTEnum",$_.__params__ = ["values"],$_)
	,PPTRange: ($_=function(from,to) { return {_hx_index:4,from:from,to:to,__enum__:"bh.multianim.DefinitionType",toString:$estr}; },$_._hx_name="PPTRange",$_.__params__ = ["from","to"],$_)
	,PPTInt: {_hx_name:"PPTInt",_hx_index:5,__enum__:"bh.multianim.DefinitionType",toString:$estr}
	,PPTFloat: {_hx_name:"PPTFloat",_hx_index:6,__enum__:"bh.multianim.DefinitionType",toString:$estr}
	,PPTBool: {_hx_name:"PPTBool",_hx_index:7,__enum__:"bh.multianim.DefinitionType",toString:$estr}
	,PPTUnsignedInt: {_hx_name:"PPTUnsignedInt",_hx_index:8,__enum__:"bh.multianim.DefinitionType",toString:$estr}
	,PPTString: {_hx_name:"PPTString",_hx_index:9,__enum__:"bh.multianim.DefinitionType",toString:$estr}
	,PPTColor: {_hx_name:"PPTColor",_hx_index:10,__enum__:"bh.multianim.DefinitionType",toString:$estr}
	,PPTArray: {_hx_name:"PPTArray",_hx_index:11,__enum__:"bh.multianim.DefinitionType",toString:$estr}
};
bh_multianim_DefinitionType.__constructs__ = [bh_multianim_DefinitionType.PPTHexDirecton,bh_multianim_DefinitionType.PPTGridDirection,bh_multianim_DefinitionType.PPTFlags,bh_multianim_DefinitionType.PPTEnum,bh_multianim_DefinitionType.PPTRange,bh_multianim_DefinitionType.PPTInt,bh_multianim_DefinitionType.PPTFloat,bh_multianim_DefinitionType.PPTBool,bh_multianim_DefinitionType.PPTUnsignedInt,bh_multianim_DefinitionType.PPTString,bh_multianim_DefinitionType.PPTColor,bh_multianim_DefinitionType.PPTArray];
bh_multianim_DefinitionType.__empty_constructs__ = [bh_multianim_DefinitionType.PPTHexDirecton,bh_multianim_DefinitionType.PPTGridDirection,bh_multianim_DefinitionType.PPTInt,bh_multianim_DefinitionType.PPTFloat,bh_multianim_DefinitionType.PPTBool,bh_multianim_DefinitionType.PPTUnsignedInt,bh_multianim_DefinitionType.PPTString,bh_multianim_DefinitionType.PPTColor,bh_multianim_DefinitionType.PPTArray];
var bh_multianim_RvOp = $hxEnums["bh.multianim.RvOp"] = { __ename__:true,__constructs__:null
	,OpAdd: {_hx_name:"OpAdd",_hx_index:0,__enum__:"bh.multianim.RvOp",toString:$estr}
	,OpMul: {_hx_name:"OpMul",_hx_index:1,__enum__:"bh.multianim.RvOp",toString:$estr}
	,OpSub: {_hx_name:"OpSub",_hx_index:2,__enum__:"bh.multianim.RvOp",toString:$estr}
	,OpDiv: {_hx_name:"OpDiv",_hx_index:3,__enum__:"bh.multianim.RvOp",toString:$estr}
	,OpIntegerDiv: {_hx_name:"OpIntegerDiv",_hx_index:4,__enum__:"bh.multianim.RvOp",toString:$estr}
	,OpMod: {_hx_name:"OpMod",_hx_index:5,__enum__:"bh.multianim.RvOp",toString:$estr}
};
bh_multianim_RvOp.__constructs__ = [bh_multianim_RvOp.OpAdd,bh_multianim_RvOp.OpMul,bh_multianim_RvOp.OpSub,bh_multianim_RvOp.OpDiv,bh_multianim_RvOp.OpIntegerDiv,bh_multianim_RvOp.OpMod];
bh_multianim_RvOp.__empty_constructs__ = [bh_multianim_RvOp.OpAdd,bh_multianim_RvOp.OpMul,bh_multianim_RvOp.OpSub,bh_multianim_RvOp.OpDiv,bh_multianim_RvOp.OpIntegerDiv,bh_multianim_RvOp.OpMod];
var bh_multianim_ReferencableValueFunction = $hxEnums["bh.multianim.ReferencableValueFunction"] = { __ename__:true,__constructs__:null
	,RVFGridWidth: {_hx_name:"RVFGridWidth",_hx_index:0,__enum__:"bh.multianim.ReferencableValueFunction",toString:$estr}
	,RVFGridHeight: {_hx_name:"RVFGridHeight",_hx_index:1,__enum__:"bh.multianim.ReferencableValueFunction",toString:$estr}
};
bh_multianim_ReferencableValueFunction.__constructs__ = [bh_multianim_ReferencableValueFunction.RVFGridWidth,bh_multianim_ReferencableValueFunction.RVFGridHeight];
bh_multianim_ReferencableValueFunction.__empty_constructs__ = [bh_multianim_ReferencableValueFunction.RVFGridWidth,bh_multianim_ReferencableValueFunction.RVFGridHeight];
var bh_multianim_ResolvedIndexParameters = $hxEnums["bh.multianim.ResolvedIndexParameters"] = { __ename__:true,__constructs__:null
	,Index: ($_=function(idx,value) { return {_hx_index:0,idx:idx,value:value,__enum__:"bh.multianim.ResolvedIndexParameters",toString:$estr}; },$_._hx_name="Index",$_.__params__ = ["idx","value"],$_)
	,Value: ($_=function(val) { return {_hx_index:1,val:val,__enum__:"bh.multianim.ResolvedIndexParameters",toString:$estr}; },$_._hx_name="Value",$_.__params__ = ["val"],$_)
	,ValueF: ($_=function(val) { return {_hx_index:2,val:val,__enum__:"bh.multianim.ResolvedIndexParameters",toString:$estr}; },$_._hx_name="ValueF",$_.__params__ = ["val"],$_)
	,Flag: ($_=function(f) { return {_hx_index:3,f:f,__enum__:"bh.multianim.ResolvedIndexParameters",toString:$estr}; },$_._hx_name="Flag",$_.__params__ = ["f"],$_)
	,StringValue: ($_=function(s) { return {_hx_index:4,s:s,__enum__:"bh.multianim.ResolvedIndexParameters",toString:$estr}; },$_._hx_name="StringValue",$_.__params__ = ["s"],$_)
	,ArrayString: ($_=function(strArray) { return {_hx_index:5,strArray:strArray,__enum__:"bh.multianim.ResolvedIndexParameters",toString:$estr}; },$_._hx_name="ArrayString",$_.__params__ = ["strArray"],$_)
};
bh_multianim_ResolvedIndexParameters.__constructs__ = [bh_multianim_ResolvedIndexParameters.Index,bh_multianim_ResolvedIndexParameters.Value,bh_multianim_ResolvedIndexParameters.ValueF,bh_multianim_ResolvedIndexParameters.Flag,bh_multianim_ResolvedIndexParameters.StringValue,bh_multianim_ResolvedIndexParameters.ArrayString];
bh_multianim_ResolvedIndexParameters.__empty_constructs__ = [];
var bh_multianim_ConditionalValues = $hxEnums["bh.multianim.ConditionalValues"] = { __ename__:true,__constructs__:null
	,CoEnums: ($_=function(a) { return {_hx_index:0,a:a,__enum__:"bh.multianim.ConditionalValues",toString:$estr}; },$_._hx_name="CoEnums",$_.__params__ = ["a"],$_)
	,CoRange: ($_=function(fromInclusive,toInclusive) { return {_hx_index:1,fromInclusive:fromInclusive,toInclusive:toInclusive,__enum__:"bh.multianim.ConditionalValues",toString:$estr}; },$_._hx_name="CoRange",$_.__params__ = ["fromInclusive","toInclusive"],$_)
	,CoIndex: ($_=function(idx,value) { return {_hx_index:2,idx:idx,value:value,__enum__:"bh.multianim.ConditionalValues",toString:$estr}; },$_._hx_name="CoIndex",$_.__params__ = ["idx","value"],$_)
	,CoValue: ($_=function(val) { return {_hx_index:3,val:val,__enum__:"bh.multianim.ConditionalValues",toString:$estr}; },$_._hx_name="CoValue",$_.__params__ = ["val"],$_)
	,CoFlag: ($_=function(f) { return {_hx_index:4,f:f,__enum__:"bh.multianim.ConditionalValues",toString:$estr}; },$_._hx_name="CoFlag",$_.__params__ = ["f"],$_)
	,CoAny: {_hx_name:"CoAny",_hx_index:5,__enum__:"bh.multianim.ConditionalValues",toString:$estr}
	,CoStringValue: ($_=function(s) { return {_hx_index:6,s:s,__enum__:"bh.multianim.ConditionalValues",toString:$estr}; },$_._hx_name="CoStringValue",$_.__params__ = ["s"],$_)
	,CoNot: ($_=function(value) { return {_hx_index:7,value:value,__enum__:"bh.multianim.ConditionalValues",toString:$estr}; },$_._hx_name="CoNot",$_.__params__ = ["value"],$_)
};
bh_multianim_ConditionalValues.__constructs__ = [bh_multianim_ConditionalValues.CoEnums,bh_multianim_ConditionalValues.CoRange,bh_multianim_ConditionalValues.CoIndex,bh_multianim_ConditionalValues.CoValue,bh_multianim_ConditionalValues.CoFlag,bh_multianim_ConditionalValues.CoAny,bh_multianim_ConditionalValues.CoStringValue,bh_multianim_ConditionalValues.CoNot];
bh_multianim_ConditionalValues.__empty_constructs__ = [bh_multianim_ConditionalValues.CoAny];
var bh_multianim_ReferencableValue = $hxEnums["bh.multianim.ReferencableValue"] = { __ename__:true,__constructs__:null
	,RVElementOfArray: ($_=function(arrayRef,index) { return {_hx_index:0,arrayRef:arrayRef,index:index,__enum__:"bh.multianim.ReferencableValue",toString:$estr}; },$_._hx_name="RVElementOfArray",$_.__params__ = ["arrayRef","index"],$_)
	,RVString: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"bh.multianim.ReferencableValue",toString:$estr}; },$_._hx_name="RVString",$_.__params__ = ["s"],$_)
	,RVInteger: ($_=function(i) { return {_hx_index:2,i:i,__enum__:"bh.multianim.ReferencableValue",toString:$estr}; },$_._hx_name="RVInteger",$_.__params__ = ["i"],$_)
	,RVArray: ($_=function(refArr) { return {_hx_index:3,refArr:refArr,__enum__:"bh.multianim.ReferencableValue",toString:$estr}; },$_._hx_name="RVArray",$_.__params__ = ["refArr"],$_)
	,RVArrayReference: ($_=function(refArr) { return {_hx_index:4,refArr:refArr,__enum__:"bh.multianim.ReferencableValue",toString:$estr}; },$_._hx_name="RVArrayReference",$_.__params__ = ["refArr"],$_)
	,RVFloat: ($_=function(f) { return {_hx_index:5,f:f,__enum__:"bh.multianim.ReferencableValue",toString:$estr}; },$_._hx_name="RVFloat",$_.__params__ = ["f"],$_)
	,RVReference: ($_=function(ref) { return {_hx_index:6,ref:ref,__enum__:"bh.multianim.ReferencableValue",toString:$estr}; },$_._hx_name="RVReference",$_.__params__ = ["ref"],$_)
	,RVFunction: ($_=function(functionType) { return {_hx_index:7,functionType:functionType,__enum__:"bh.multianim.ReferencableValue",toString:$estr}; },$_._hx_name="RVFunction",$_.__params__ = ["functionType"],$_)
	,RVParenthesis: ($_=function(e) { return {_hx_index:8,e:e,__enum__:"bh.multianim.ReferencableValue",toString:$estr}; },$_._hx_name="RVParenthesis",$_.__params__ = ["e"],$_)
	,RVCallbacksWithIndex: ($_=function(name,index,defaultValue) { return {_hx_index:9,name:name,index:index,defaultValue:defaultValue,__enum__:"bh.multianim.ReferencableValue",toString:$estr}; },$_._hx_name="RVCallbacksWithIndex",$_.__params__ = ["name","index","defaultValue"],$_)
	,RVCallbacks: ($_=function(name,defaultValue) { return {_hx_index:10,name:name,defaultValue:defaultValue,__enum__:"bh.multianim.ReferencableValue",toString:$estr}; },$_._hx_name="RVCallbacks",$_.__params__ = ["name","defaultValue"],$_)
	,RVColorXY: ($_=function(externalReference,palette,x,y) { return {_hx_index:11,externalReference:externalReference,palette:palette,x:x,y:y,__enum__:"bh.multianim.ReferencableValue",toString:$estr}; },$_._hx_name="RVColorXY",$_.__params__ = ["externalReference","palette","x","y"],$_)
	,RVColor: ($_=function(externalReference,palette,index) { return {_hx_index:12,externalReference:externalReference,palette:palette,index:index,__enum__:"bh.multianim.ReferencableValue",toString:$estr}; },$_._hx_name="RVColor",$_.__params__ = ["externalReference","palette","index"],$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:13,op:op,e1:e1,e2:e2,__enum__:"bh.multianim.ReferencableValue",toString:$estr}; },$_._hx_name="EBinop",$_.__params__ = ["op","e1","e2"],$_)
};
bh_multianim_ReferencableValue.__constructs__ = [bh_multianim_ReferencableValue.RVElementOfArray,bh_multianim_ReferencableValue.RVString,bh_multianim_ReferencableValue.RVInteger,bh_multianim_ReferencableValue.RVArray,bh_multianim_ReferencableValue.RVArrayReference,bh_multianim_ReferencableValue.RVFloat,bh_multianim_ReferencableValue.RVReference,bh_multianim_ReferencableValue.RVFunction,bh_multianim_ReferencableValue.RVParenthesis,bh_multianim_ReferencableValue.RVCallbacksWithIndex,bh_multianim_ReferencableValue.RVCallbacks,bh_multianim_ReferencableValue.RVColorXY,bh_multianim_ReferencableValue.RVColor,bh_multianim_ReferencableValue.EBinop];
bh_multianim_ReferencableValue.__empty_constructs__ = [];
var bh_multianim_HorizontalAlign = $hxEnums["bh.multianim.HorizontalAlign"] = { __ename__:true,__constructs__:null
	,Left: {_hx_name:"Left",_hx_index:0,__enum__:"bh.multianim.HorizontalAlign",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:1,__enum__:"bh.multianim.HorizontalAlign",toString:$estr}
	,Center: {_hx_name:"Center",_hx_index:2,__enum__:"bh.multianim.HorizontalAlign",toString:$estr}
};
bh_multianim_HorizontalAlign.__constructs__ = [bh_multianim_HorizontalAlign.Left,bh_multianim_HorizontalAlign.Right,bh_multianim_HorizontalAlign.Center];
bh_multianim_HorizontalAlign.__empty_constructs__ = [bh_multianim_HorizontalAlign.Left,bh_multianim_HorizontalAlign.Right,bh_multianim_HorizontalAlign.Center];
var bh_multianim_VerticalAlign = $hxEnums["bh.multianim.VerticalAlign"] = { __ename__:true,__constructs__:null
	,Top: {_hx_name:"Top",_hx_index:0,__enum__:"bh.multianim.VerticalAlign",toString:$estr}
	,Center: {_hx_name:"Center",_hx_index:1,__enum__:"bh.multianim.VerticalAlign",toString:$estr}
	,Bottom: {_hx_name:"Bottom",_hx_index:2,__enum__:"bh.multianim.VerticalAlign",toString:$estr}
};
bh_multianim_VerticalAlign.__constructs__ = [bh_multianim_VerticalAlign.Top,bh_multianim_VerticalAlign.Center,bh_multianim_VerticalAlign.Bottom];
bh_multianim_VerticalAlign.__empty_constructs__ = [bh_multianim_VerticalAlign.Top,bh_multianim_VerticalAlign.Center,bh_multianim_VerticalAlign.Bottom];
var bh_multianim__$MultiAnimParser_LayoutsParsingState = $hxEnums["bh.multianim._MultiAnimParser.LayoutsParsingState"] = { __ename__:true,__constructs__:null
	,LPSGrid: {_hx_name:"LPSGrid",_hx_index:0,__enum__:"bh.multianim._MultiAnimParser.LayoutsParsingState",toString:$estr}
	,LPSHex: {_hx_name:"LPSHex",_hx_index:1,__enum__:"bh.multianim._MultiAnimParser.LayoutsParsingState",toString:$estr}
	,LPSOffset: {_hx_name:"LPSOffset",_hx_index:2,__enum__:"bh.multianim._MultiAnimParser.LayoutsParsingState",toString:$estr}
	,LPSEnd: {_hx_name:"LPSEnd",_hx_index:3,__enum__:"bh.multianim._MultiAnimParser.LayoutsParsingState",toString:$estr}
};
bh_multianim__$MultiAnimParser_LayoutsParsingState.__constructs__ = [bh_multianim__$MultiAnimParser_LayoutsParsingState.LPSGrid,bh_multianim__$MultiAnimParser_LayoutsParsingState.LPSHex,bh_multianim__$MultiAnimParser_LayoutsParsingState.LPSOffset,bh_multianim__$MultiAnimParser_LayoutsParsingState.LPSEnd];
bh_multianim__$MultiAnimParser_LayoutsParsingState.__empty_constructs__ = [bh_multianim__$MultiAnimParser_LayoutsParsingState.LPSGrid,bh_multianim__$MultiAnimParser_LayoutsParsingState.LPSHex,bh_multianim__$MultiAnimParser_LayoutsParsingState.LPSOffset,bh_multianim__$MultiAnimParser_LayoutsParsingState.LPSEnd];
var bh_multianim_AnimatedPathTime = $hxEnums["bh.multianim.AnimatedPathTime"] = { __ename__:true,__constructs__:null
	,Rate: ($_=function(float) { return {_hx_index:0,float:float,__enum__:"bh.multianim.AnimatedPathTime",toString:$estr}; },$_._hx_name="Rate",$_.__params__ = ["float"],$_)
	,Checkpoint: ($_=function(checkpointName) { return {_hx_index:1,checkpointName:checkpointName,__enum__:"bh.multianim.AnimatedPathTime",toString:$estr}; },$_._hx_name="Checkpoint",$_.__params__ = ["checkpointName"],$_)
};
bh_multianim_AnimatedPathTime.__constructs__ = [bh_multianim_AnimatedPathTime.Rate,bh_multianim_AnimatedPathTime.Checkpoint];
bh_multianim_AnimatedPathTime.__empty_constructs__ = [];
var bh_multianim_AnimatedPathTimedAction = function(at,action) {
	this.at = at;
	this.action = action;
};
$hxClasses["bh.multianim.AnimatedPathTimedAction"] = bh_multianim_AnimatedPathTimedAction;
bh_multianim_AnimatedPathTimedAction.__name__ = "bh.multianim.AnimatedPathTimedAction";
bh_multianim_AnimatedPathTimedAction.prototype = {
	__class__: bh_multianim_AnimatedPathTimedAction
};
var bh_multianim_AnimatedPathsAction = $hxEnums["bh.multianim.AnimatedPathsAction"] = { __ename__:true,__constructs__:null
	,ChangeSpeed: ($_=function(speed) { return {_hx_index:0,speed:speed,__enum__:"bh.multianim.AnimatedPathsAction",toString:$estr}; },$_._hx_name="ChangeSpeed",$_.__params__ = ["speed"],$_)
	,Event: ($_=function(eventName) { return {_hx_index:1,eventName:eventName,__enum__:"bh.multianim.AnimatedPathsAction",toString:$estr}; },$_._hx_name="Event",$_.__params__ = ["eventName"],$_)
	,AttachParticles: ($_=function(particlesName,particlesTemplate,particlesDef) { return {_hx_index:2,particlesName:particlesName,particlesTemplate:particlesTemplate,particlesDef:particlesDef,__enum__:"bh.multianim.AnimatedPathsAction",toString:$estr}; },$_._hx_name="AttachParticles",$_.__params__ = ["particlesName","particlesTemplate","particlesDef"],$_)
	,RemoveParticles: ($_=function(particlesName) { return {_hx_index:3,particlesName:particlesName,__enum__:"bh.multianim.AnimatedPathsAction",toString:$estr}; },$_._hx_name="RemoveParticles",$_.__params__ = ["particlesName"],$_)
	,ChangeAnimSMState: ($_=function(state) { return {_hx_index:4,state:state,__enum__:"bh.multianim.AnimatedPathsAction",toString:$estr}; },$_._hx_name="ChangeAnimSMState",$_.__params__ = ["state"],$_)
};
bh_multianim_AnimatedPathsAction.__constructs__ = [bh_multianim_AnimatedPathsAction.ChangeSpeed,bh_multianim_AnimatedPathsAction.Event,bh_multianim_AnimatedPathsAction.AttachParticles,bh_multianim_AnimatedPathsAction.RemoveParticles,bh_multianim_AnimatedPathsAction.ChangeAnimSMState];
bh_multianim_AnimatedPathsAction.__empty_constructs__ = [];
var bh_multianim_ParsedPaths = $hxEnums["bh.multianim.ParsedPaths"] = { __ename__:true,__constructs__:null
	,LineTo: ($_=function(end) { return {_hx_index:0,end:end,__enum__:"bh.multianim.ParsedPaths",toString:$estr}; },$_._hx_name="LineTo",$_.__params__ = ["end"],$_)
	,Forward: ($_=function(distance) { return {_hx_index:1,distance:distance,__enum__:"bh.multianim.ParsedPaths",toString:$estr}; },$_._hx_name="Forward",$_.__params__ = ["distance"],$_)
	,TurnDegrees: ($_=function(angleDelta) { return {_hx_index:2,angleDelta:angleDelta,__enum__:"bh.multianim.ParsedPaths",toString:$estr}; },$_._hx_name="TurnDegrees",$_.__params__ = ["angleDelta"],$_)
	,Checkpoint: ($_=function(checkpointName) { return {_hx_index:3,checkpointName:checkpointName,__enum__:"bh.multianim.ParsedPaths",toString:$estr}; },$_._hx_name="Checkpoint",$_.__params__ = ["checkpointName"],$_)
	,Bezier2To: ($_=function(end,control) { return {_hx_index:4,end:end,control:control,__enum__:"bh.multianim.ParsedPaths",toString:$estr}; },$_._hx_name="Bezier2To",$_.__params__ = ["end","control"],$_)
	,Bezier3To: ($_=function(end,control1,control2) { return {_hx_index:5,end:end,control1:control1,control2:control2,__enum__:"bh.multianim.ParsedPaths",toString:$estr}; },$_._hx_name="Bezier3To",$_.__params__ = ["end","control1","control2"],$_)
};
bh_multianim_ParsedPaths.__constructs__ = [bh_multianim_ParsedPaths.LineTo,bh_multianim_ParsedPaths.Forward,bh_multianim_ParsedPaths.TurnDegrees,bh_multianim_ParsedPaths.Checkpoint,bh_multianim_ParsedPaths.Bezier2To,bh_multianim_ParsedPaths.Bezier3To];
bh_multianim_ParsedPaths.__empty_constructs__ = [];
var bh_multianim_ParticlesEmitMode = $hxEnums["bh.multianim.ParticlesEmitMode"] = { __ename__:true,__constructs__:null
	,Point: ($_=function(emitDistance,emitDistanceRandom) { return {_hx_index:0,emitDistance:emitDistance,emitDistanceRandom:emitDistanceRandom,__enum__:"bh.multianim.ParticlesEmitMode",toString:$estr}; },$_._hx_name="Point",$_.__params__ = ["emitDistance","emitDistanceRandom"],$_)
	,Cone: ($_=function(emitDistance,emitDistanceRandom,emitConeAngle,emitConeAngleRandom) { return {_hx_index:1,emitDistance:emitDistance,emitDistanceRandom:emitDistanceRandom,emitConeAngle:emitConeAngle,emitConeAngleRandom:emitConeAngleRandom,__enum__:"bh.multianim.ParticlesEmitMode",toString:$estr}; },$_._hx_name="Cone",$_.__params__ = ["emitDistance","emitDistanceRandom","emitConeAngle","emitConeAngleRandom"],$_)
	,Box: ($_=function(width,height,emitConeAngle,emitConeAngleRandom) { return {_hx_index:2,width:width,height:height,emitConeAngle:emitConeAngle,emitConeAngleRandom:emitConeAngleRandom,__enum__:"bh.multianim.ParticlesEmitMode",toString:$estr}; },$_._hx_name="Box",$_.__params__ = ["width","height","emitConeAngle","emitConeAngleRandom"],$_)
};
bh_multianim_ParticlesEmitMode.__constructs__ = [bh_multianim_ParticlesEmitMode.Point,bh_multianim_ParticlesEmitMode.Cone,bh_multianim_ParticlesEmitMode.Box];
bh_multianim_ParticlesEmitMode.__empty_constructs__ = [];
var bh_multianim_RepeatType = $hxEnums["bh.multianim.RepeatType"] = { __ename__:true,__constructs__:null
	,GridIterator: ($_=function(dx,dy,repeatCount) { return {_hx_index:0,dx:dx,dy:dy,repeatCount:repeatCount,__enum__:"bh.multianim.RepeatType",toString:$estr}; },$_._hx_name="GridIterator",$_.__params__ = ["dx","dy","repeatCount"],$_)
	,LayoutIterator: ($_=function(layoutName) { return {_hx_index:1,layoutName:layoutName,__enum__:"bh.multianim.RepeatType",toString:$estr}; },$_._hx_name="LayoutIterator",$_.__params__ = ["layoutName"],$_)
	,ArrayIterator: ($_=function(valueVariableName,arrayName) { return {_hx_index:2,valueVariableName:valueVariableName,arrayName:arrayName,__enum__:"bh.multianim.RepeatType",toString:$estr}; },$_._hx_name="ArrayIterator",$_.__params__ = ["valueVariableName","arrayName"],$_)
};
bh_multianim_RepeatType.__constructs__ = [bh_multianim_RepeatType.GridIterator,bh_multianim_RepeatType.LayoutIterator,bh_multianim_RepeatType.ArrayIterator];
bh_multianim_RepeatType.__empty_constructs__ = [];
var bh_multianim_GeneratedTileType = $hxEnums["bh.multianim.GeneratedTileType"] = { __ename__:true,__constructs__:null
	,Cross: ($_=function(width,height,color) { return {_hx_index:0,width:width,height:height,color:color,__enum__:"bh.multianim.GeneratedTileType",toString:$estr}; },$_._hx_name="Cross",$_.__params__ = ["width","height","color"],$_)
	,SolidColor: ($_=function(width,height,color) { return {_hx_index:1,width:width,height:height,color:color,__enum__:"bh.multianim.GeneratedTileType",toString:$estr}; },$_._hx_name="SolidColor",$_.__params__ = ["width","height","color"],$_)
};
bh_multianim_GeneratedTileType.__constructs__ = [bh_multianim_GeneratedTileType.Cross,bh_multianim_GeneratedTileType.SolidColor];
bh_multianim_GeneratedTileType.__empty_constructs__ = [];
var bh_multianim_TileSource = $hxEnums["bh.multianim.TileSource"] = { __ename__:true,__constructs__:null
	,TSFile: ($_=function(filename) { return {_hx_index:0,filename:filename,__enum__:"bh.multianim.TileSource",toString:$estr}; },$_._hx_name="TSFile",$_.__params__ = ["filename"],$_)
	,TSSheet: ($_=function(sheet,name) { return {_hx_index:1,sheet:sheet,name:name,__enum__:"bh.multianim.TileSource",toString:$estr}; },$_._hx_name="TSSheet",$_.__params__ = ["sheet","name"],$_)
	,TSSheetWithIndex: ($_=function(sheet,name,index) { return {_hx_index:2,sheet:sheet,name:name,index:index,__enum__:"bh.multianim.TileSource",toString:$estr}; },$_._hx_name="TSSheetWithIndex",$_.__params__ = ["sheet","name","index"],$_)
	,TSGenerated: ($_=function(type) { return {_hx_index:3,type:type,__enum__:"bh.multianim.TileSource",toString:$estr}; },$_._hx_name="TSGenerated",$_.__params__ = ["type"],$_)
};
bh_multianim_TileSource.__constructs__ = [bh_multianim_TileSource.TSFile,bh_multianim_TileSource.TSSheet,bh_multianim_TileSource.TSSheetWithIndex,bh_multianim_TileSource.TSGenerated];
bh_multianim_TileSource.__empty_constructs__ = [];
var bh_multianim_PaletteType = $hxEnums["bh.multianim.PaletteType"] = { __ename__:true,__constructs__:null
	,PaletteColors: ($_=function(colors) { return {_hx_index:0,colors:colors,__enum__:"bh.multianim.PaletteType",toString:$estr}; },$_._hx_name="PaletteColors",$_.__params__ = ["colors"],$_)
	,PaletteColors2D: ($_=function(colors,width) { return {_hx_index:1,colors:colors,width:width,__enum__:"bh.multianim.PaletteType",toString:$estr}; },$_._hx_name="PaletteColors2D",$_.__params__ = ["colors","width"],$_)
	,PaletteImageFile: ($_=function(filename) { return {_hx_index:2,filename:filename,__enum__:"bh.multianim.PaletteType",toString:$estr}; },$_._hx_name="PaletteImageFile",$_.__params__ = ["filename"],$_)
};
bh_multianim_PaletteType.__constructs__ = [bh_multianim_PaletteType.PaletteColors,bh_multianim_PaletteType.PaletteColors2D,bh_multianim_PaletteType.PaletteImageFile];
bh_multianim_PaletteType.__empty_constructs__ = [];
var bh_multianim_StateAnimConstruct = $hxEnums["bh.multianim.StateAnimConstruct"] = { __ename__:true,__constructs__:null
	,IndexedSheet: ($_=function(sheet,name,fps,loop,center) { return {_hx_index:0,sheet:sheet,name:name,fps:fps,loop:loop,center:center,__enum__:"bh.multianim.StateAnimConstruct",toString:$estr}; },$_._hx_name="IndexedSheet",$_.__params__ = ["sheet","name","fps","loop","center"],$_)
};
bh_multianim_StateAnimConstruct.__constructs__ = [bh_multianim_StateAnimConstruct.IndexedSheet];
bh_multianim_StateAnimConstruct.__empty_constructs__ = [];
var bh_multianim_NodeType = $hxEnums["bh.multianim.NodeType"] = { __ename__:true,__constructs__:null
	,FLOW: ($_=function(maxWidth,maxHeight,minWidth,minHeight,lineHeight,colWidth,layout,paddingTop,paddingBottom,paddingLeft,paddingRight,horizontalSpacing,verticalSpacing,debug) { return {_hx_index:0,maxWidth:maxWidth,maxHeight:maxHeight,minWidth:minWidth,minHeight:minHeight,lineHeight:lineHeight,colWidth:colWidth,layout:layout,paddingTop:paddingTop,paddingBottom:paddingBottom,paddingLeft:paddingLeft,paddingRight:paddingRight,horizontalSpacing:horizontalSpacing,verticalSpacing:verticalSpacing,debug:debug,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="FLOW",$_.__params__ = ["maxWidth","maxHeight","minWidth","minHeight","lineHeight","colWidth","layout","paddingTop","paddingBottom","paddingLeft","paddingRight","horizontalSpacing","verticalSpacing","debug"],$_)
	,BITMAP: ($_=function(tileSource,hAlign,vAligh) { return {_hx_index:1,tileSource:tileSource,hAlign:hAlign,vAligh:vAligh,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="BITMAP",$_.__params__ = ["tileSource","hAlign","vAligh"],$_)
	,POINT: {_hx_name:"POINT",_hx_index:2,__enum__:"bh.multianim.NodeType",toString:$estr}
	,STATEANIM: ($_=function(filename,initialState,selector) { return {_hx_index:3,filename:filename,initialState:initialState,selector:selector,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="STATEANIM",$_.__params__ = ["filename","initialState","selector"],$_)
	,STATEANIM_CONSTRUCT: ($_=function(initialState,construct) { return {_hx_index:4,initialState:initialState,construct:construct,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="STATEANIM_CONSTRUCT",$_.__params__ = ["initialState","construct"],$_)
	,PIXELS: ($_=function(shapes) { return {_hx_index:5,shapes:shapes,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="PIXELS",$_.__params__ = ["shapes"],$_)
	,TEXT: ($_=function(textDef) { return {_hx_index:6,textDef:textDef,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="TEXT",$_.__params__ = ["textDef"],$_)
	,PROGRAMMABLE: ($_=function(isTileGroup,parameters) { return {_hx_index:7,isTileGroup:isTileGroup,parameters:parameters,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="PROGRAMMABLE",$_.__params__ = ["isTileGroup","parameters"],$_)
	,TILEGROUP: {_hx_name:"TILEGROUP",_hx_index:8,__enum__:"bh.multianim.NodeType",toString:$estr}
	,RELATIVE_LAYOUTS: ($_=function(layoutsDef) { return {_hx_index:9,layoutsDef:layoutsDef,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="RELATIVE_LAYOUTS",$_.__params__ = ["layoutsDef"],$_)
	,PATHS: ($_=function(paths) { return {_hx_index:10,paths:paths,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="PATHS",$_.__params__ = ["paths"],$_)
	,ANIMATED_PATH: ($_=function(animatedPathDef) { return {_hx_index:11,animatedPathDef:animatedPathDef,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="ANIMATED_PATH",$_.__params__ = ["animatedPathDef"],$_)
	,PARTICLES: ($_=function(particles) { return {_hx_index:12,particles:particles,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="PARTICLES",$_.__params__ = ["particles"],$_)
	,APPLY: {_hx_name:"APPLY",_hx_index:13,__enum__:"bh.multianim.NodeType",toString:$estr}
	,LAYERS: {_hx_name:"LAYERS",_hx_index:14,__enum__:"bh.multianim.NodeType",toString:$estr}
	,REPEAT: ($_=function(varName,repeatType) { return {_hx_index:15,varName:varName,repeatType:repeatType,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="REPEAT",$_.__params__ = ["varName","repeatType"],$_)
	,REFERENCE: ($_=function(externalReference,programmableReference,parameters) { return {_hx_index:16,externalReference:externalReference,programmableReference:programmableReference,parameters:parameters,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="REFERENCE",$_.__params__ = ["externalReference","programmableReference","parameters"],$_)
	,PLACEHOLDER: ($_=function(type,replacementSource) { return {_hx_index:17,type:type,replacementSource:replacementSource,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="PLACEHOLDER",$_.__params__ = ["type","replacementSource"],$_)
	,NINEPATCH: ($_=function(sheet,tilename,width,height) { return {_hx_index:18,sheet:sheet,tilename:tilename,width:width,height:height,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="NINEPATCH",$_.__params__ = ["sheet","tilename","width","height"],$_)
	,INTERACTIVE: ($_=function(width,height,id,debug) { return {_hx_index:19,width:width,height:height,id:id,debug:debug,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="INTERACTIVE",$_.__params__ = ["width","height","id","debug"],$_)
	,PALETTE: ($_=function(paletteType) { return {_hx_index:20,paletteType:paletteType,__enum__:"bh.multianim.NodeType",toString:$estr}; },$_._hx_name="PALETTE",$_.__params__ = ["paletteType"],$_)
};
bh_multianim_NodeType.__constructs__ = [bh_multianim_NodeType.FLOW,bh_multianim_NodeType.BITMAP,bh_multianim_NodeType.POINT,bh_multianim_NodeType.STATEANIM,bh_multianim_NodeType.STATEANIM_CONSTRUCT,bh_multianim_NodeType.PIXELS,bh_multianim_NodeType.TEXT,bh_multianim_NodeType.PROGRAMMABLE,bh_multianim_NodeType.TILEGROUP,bh_multianim_NodeType.RELATIVE_LAYOUTS,bh_multianim_NodeType.PATHS,bh_multianim_NodeType.ANIMATED_PATH,bh_multianim_NodeType.PARTICLES,bh_multianim_NodeType.APPLY,bh_multianim_NodeType.LAYERS,bh_multianim_NodeType.REPEAT,bh_multianim_NodeType.REFERENCE,bh_multianim_NodeType.PLACEHOLDER,bh_multianim_NodeType.NINEPATCH,bh_multianim_NodeType.INTERACTIVE,bh_multianim_NodeType.PALETTE];
bh_multianim_NodeType.__empty_constructs__ = [bh_multianim_NodeType.POINT,bh_multianim_NodeType.TILEGROUP,bh_multianim_NodeType.APPLY,bh_multianim_NodeType.LAYERS];
var bh_multianim_NodeConditionalValues = $hxEnums["bh.multianim.NodeConditionalValues"] = { __ename__:true,__constructs__:null
	,Conditional: ($_=function(values,strict) { return {_hx_index:0,values:values,strict:strict,__enum__:"bh.multianim.NodeConditionalValues",toString:$estr}; },$_._hx_name="Conditional",$_.__params__ = ["values","strict"],$_)
	,NoConditional: {_hx_name:"NoConditional",_hx_index:1,__enum__:"bh.multianim.NodeConditionalValues",toString:$estr}
};
bh_multianim_NodeConditionalValues.__constructs__ = [bh_multianim_NodeConditionalValues.Conditional,bh_multianim_NodeConditionalValues.NoConditional];
bh_multianim_NodeConditionalValues.__empty_constructs__ = [bh_multianim_NodeConditionalValues.NoConditional];
var bh_multianim_FilterType = $hxEnums["bh.multianim.FilterType"] = { __ename__:true,__constructs__:null
	,FilterNone: {_hx_name:"FilterNone",_hx_index:0,__enum__:"bh.multianim.FilterType",toString:$estr}
	,FilterGroup: ($_=function(filters) { return {_hx_index:1,filters:filters,__enum__:"bh.multianim.FilterType",toString:$estr}; },$_._hx_name="FilterGroup",$_.__params__ = ["filters"],$_)
	,FilterOutline: ($_=function(s,color) { return {_hx_index:2,s:s,color:color,__enum__:"bh.multianim.FilterType",toString:$estr}; },$_._hx_name="FilterOutline",$_.__params__ = ["s","color"],$_)
	,FilterSaturate: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"bh.multianim.FilterType",toString:$estr}; },$_._hx_name="FilterSaturate",$_.__params__ = ["v"],$_)
	,FilterBrightness: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"bh.multianim.FilterType",toString:$estr}; },$_._hx_name="FilterBrightness",$_.__params__ = ["v"],$_)
	,FilterGlow: ($_=function(color,alpha,radius,gain,quality,smoothColor,knockout) { return {_hx_index:5,color:color,alpha:alpha,radius:radius,gain:gain,quality:quality,smoothColor:smoothColor,knockout:knockout,__enum__:"bh.multianim.FilterType",toString:$estr}; },$_._hx_name="FilterGlow",$_.__params__ = ["color","alpha","radius","gain","quality","smoothColor","knockout"],$_)
	,FilterBlur: ($_=function(radius,gain,quality,linear) { return {_hx_index:6,radius:radius,gain:gain,quality:quality,linear:linear,__enum__:"bh.multianim.FilterType",toString:$estr}; },$_._hx_name="FilterBlur",$_.__params__ = ["radius","gain","quality","linear"],$_)
	,FilterDropShadow: ($_=function(distance,angle,color,alpha,radius,gain,quality,smoothColor) { return {_hx_index:7,distance:distance,angle:angle,color:color,alpha:alpha,radius:radius,gain:gain,quality:quality,smoothColor:smoothColor,__enum__:"bh.multianim.FilterType",toString:$estr}; },$_._hx_name="FilterDropShadow",$_.__params__ = ["distance","angle","color","alpha","radius","gain","quality","smoothColor"],$_)
	,FilterPixelOutline: ($_=function(mode,smoothColor) { return {_hx_index:8,mode:mode,smoothColor:smoothColor,__enum__:"bh.multianim.FilterType",toString:$estr}; },$_._hx_name="FilterPixelOutline",$_.__params__ = ["mode","smoothColor"],$_)
	,FilterPaletteReplace: ($_=function(paletteName,sourceRow,replacementRow) { return {_hx_index:9,paletteName:paletteName,sourceRow:sourceRow,replacementRow:replacementRow,__enum__:"bh.multianim.FilterType",toString:$estr}; },$_._hx_name="FilterPaletteReplace",$_.__params__ = ["paletteName","sourceRow","replacementRow"],$_)
	,FilterColorListReplace: ($_=function(sourceColors,replacementColors) { return {_hx_index:10,sourceColors:sourceColors,replacementColors:replacementColors,__enum__:"bh.multianim.FilterType",toString:$estr}; },$_._hx_name="FilterColorListReplace",$_.__params__ = ["sourceColors","replacementColors"],$_)
};
bh_multianim_FilterType.__constructs__ = [bh_multianim_FilterType.FilterNone,bh_multianim_FilterType.FilterGroup,bh_multianim_FilterType.FilterOutline,bh_multianim_FilterType.FilterSaturate,bh_multianim_FilterType.FilterBrightness,bh_multianim_FilterType.FilterGlow,bh_multianim_FilterType.FilterBlur,bh_multianim_FilterType.FilterDropShadow,bh_multianim_FilterType.FilterPixelOutline,bh_multianim_FilterType.FilterPaletteReplace,bh_multianim_FilterType.FilterColorListReplace];
bh_multianim_FilterType.__empty_constructs__ = [bh_multianim_FilterType.FilterNone];
var bh_multianim__$MultiAnimParser_PostParsedActions = $hxEnums["bh.multianim._MultiAnimParser.PostParsedActions"] = { __ename__:true,__constructs__:null
	,PPAVerifyRelativeLayout: ($_=function(layoutName,pos) { return {_hx_index:0,layoutName:layoutName,pos:pos,__enum__:"bh.multianim._MultiAnimParser.PostParsedActions",toString:$estr}; },$_._hx_name="PPAVerifyRelativeLayout",$_.__params__ = ["layoutName","pos"],$_)
	,PPAUpdateAndVerifyParticlesTemplate: ($_=function(particleTemplate,particlesDef,pos) { return {_hx_index:1,particleTemplate:particleTemplate,particlesDef:particlesDef,pos:pos,__enum__:"bh.multianim._MultiAnimParser.PostParsedActions",toString:$estr}; },$_._hx_name="PPAUpdateAndVerifyParticlesTemplate",$_.__params__ = ["particleTemplate","particlesDef","pos"],$_)
};
bh_multianim__$MultiAnimParser_PostParsedActions.__constructs__ = [bh_multianim__$MultiAnimParser_PostParsedActions.PPAVerifyRelativeLayout,bh_multianim__$MultiAnimParser_PostParsedActions.PPAUpdateAndVerifyParticlesTemplate];
bh_multianim__$MultiAnimParser_PostParsedActions.__empty_constructs__ = [];
var hxparse_Parser_$hxparse_$LexerTokenSource_$bh_$multianim_$MPToken_$bh_$multianim_$MPToken = function(stream) {
	this.stream = stream;
};
$hxClasses["hxparse.Parser_hxparse_LexerTokenSource_bh_multianim_MPToken_bh_multianim_MPToken"] = hxparse_Parser_$hxparse_$LexerTokenSource_$bh_$multianim_$MPToken_$bh_$multianim_$MPToken;
hxparse_Parser_$hxparse_$LexerTokenSource_$bh_$multianim_$MPToken_$bh_$multianim_$MPToken.__name__ = "hxparse.Parser_hxparse_LexerTokenSource_bh_multianim_MPToken_bh_multianim_MPToken";
hxparse_Parser_$hxparse_$LexerTokenSource_$bh_$multianim_$MPToken_$bh_$multianim_$MPToken.prototype = {
	peek: function(n) {
		if(this.token == null) {
			this.token = new haxe_ds_GenericCell(this.stream.token(),null);
			--n;
		}
		var tok = this.token;
		while(n > 0) {
			if(tok.next == null) {
				tok.next = new haxe_ds_GenericCell(this.stream.token(),null);
			}
			tok = tok.next;
			--n;
		}
		return tok.elt;
	}
	,parseSeparated: function(separatorFunc,f) {
		var acc = [];
		while(true) {
			try {
				acc.push(f());
			} catch( _g ) {
				if(((haxe_Exception.caught(_g).unwrap()) instanceof hxparse_NoMatch)) {
					break;
				} else {
					throw _g;
				}
			}
			if(separatorFunc(this.peek(0))) {
				this.last = this.token.elt;
				this.token = this.token.next;
			} else {
				break;
			}
		}
		return acc;
	}
	,__class__: hxparse_Parser_$hxparse_$LexerTokenSource_$bh_$multianim_$MPToken_$bh_$multianim_$MPToken
};
var hxparse_ParserBuilder = function() { };
$hxClasses["hxparse.ParserBuilder"] = hxparse_ParserBuilder;
hxparse_ParserBuilder.__name__ = "hxparse.ParserBuilder";
hxparse_ParserBuilder.__isInterface__ = true;
var bh_multianim_MultiAnimParser = function(input,sourceName,resourceLoader) {
	this.postParsedActions = [];
	this.nodes = new haxe_ds_StringMap();
	this.imports = new haxe_ds_StringMap();
	this.version = "0.1";
	this.input = input;
	this.resourceLoader = resourceLoader;
	var lexer = new bh_multianim_MultiAnimLexer(input,sourceName);
	var ts = new hxparse_LexerTokenSource(lexer,bh_multianim_MultiAnimLexer.tok);
	hxparse_Parser_$hxparse_$LexerTokenSource_$bh_$multianim_$MPToken_$bh_$multianim_$MPToken.call(this,ts);
};
$hxClasses["bh.multianim.MultiAnimParser"] = bh_multianim_MultiAnimParser;
bh_multianim_MultiAnimParser.__name__ = "bh.multianim.MultiAnimParser";
bh_multianim_MultiAnimParser.__interfaces__ = [hxparse_ParserBuilder];
bh_multianim_MultiAnimParser.parseFile = function(input,sourceName,resourceLoader) {
	try {
		var p = new bh_multianim_MultiAnimParser(input,sourceName,resourceLoader);
		return p.parse();
	} catch( _g ) {
		var _g1 = haxe_Exception.caught(_g);
		var _g2 = _g1.unwrap();
		if(((_g2) instanceof hxparse_Unexpected)) {
			var ue = _g2;
			throw haxe_Exception.thrown(new bh_multianim_MultiAnimUnexpected(ue.token,ue.pos,ue.toString(),input));
		} else {
			var e = _g1;
			haxe_Log.trace(e,{ fileName : "bh/multianim/MultiAnimParser.hx", lineNumber : 756, className : "bh.multianim.MultiAnimParser", methodName : "parseFile"});
			throw haxe_Exception.thrown(e);
		}
	}
};
bh_multianim_MultiAnimParser.tryStringToColor = function(s) {
	var color;
	var _g = s != null ? s.toLowerCase() : null;
	if(_g == null) {
		return null;
	} else {
		switch(_g) {
		case "aqua":
			color = 65535;
			break;
		case "black":
			color = 0;
			break;
		case "blue":
			color = 255;
			break;
		case "cyan":
			color = 65535;
			break;
		case "fuchsia":
			color = 16711935;
			break;
		case "gray":
			color = 8421504;
			break;
		case "green":
			color = 32768;
			break;
		case "lime":
			color = 65280;
			break;
		case "maroon":
			color = 8388608;
			break;
		case "navy":
			color = 128;
			break;
		case "olive":
			color = 8421376;
			break;
		case "orange":
			color = 16753920;
			break;
		case "purple":
			color = 8388736;
			break;
		case "red":
			color = 16711680;
			break;
		case "silver":
			color = 12632256;
			break;
		case "teal":
			color = 32896;
			break;
		case "white":
			color = 16777215;
			break;
		case "yellow":
			color = 16776960;
			break;
		default:
			color = null;
		}
	}
	if(color != null) {
		return color;
	} else if(StringTools.startsWith(s,"0x")) {
		return Std.parseInt(s);
	} else if(StringTools.startsWith(s,"#")) {
		var colorStr = s.substring(1);
		var colorVal = Std.parseInt("0x" + colorStr);
		if(colorStr.length == 3) {
			var r = colorVal >> 8;
			var g = (colorVal & 240) >> 4;
			var b = colorVal & 15;
			r |= r << 4;
			g |= g << 4;
			b |= b << 4;
			return r << 16 | g << 8 | b;
		}
		return colorVal;
	}
	return null;
};
bh_multianim_MultiAnimParser.tryStringToBool = function(val) {
	if(val == null) {
		return null;
	}
	switch(val.toLowerCase()) {
	case "0":case "false":case "no":
		return false;
	case "1":case "true":case "yes":
		return true;
	default:
		return null;
	}
};
bh_multianim_MultiAnimParser.dynamicToInt = function(dynValue,err) {
	if(typeof(dynValue) == "number" && ((dynValue | 0) === dynValue)) {
		return dynValue;
	} else if(typeof(dynValue) == "string") {
		var _g = bh_multianim_MultiAnimParser.tryStringToBool(dynValue);
		if(_g != null) {
			if(_g) {
				return 1;
			} else {
				return 0;
			}
		}
		var i = Std.parseInt(dynValue);
		if(i != null) {
			return i;
		}
		err("expected integer-ish in dynamicToInt, got parseInt error for " + Std.string(dynValue));
	} else if(typeof(dynValue) == "boolean") {
		if(dynValue == true) {
			return 1;
		} else {
			return 0;
		}
	} else if(js_Boot.__instanceof(dynValue,bh_multianim_ResolvedIndexParameters)) {
		var v = dynValue;
		if(v._hx_index == 1) {
			var i = v.val;
			return i;
		} else {
			return err("expected integer-ish in dynamicToInt as ParameterValue, got " + Std.string(dynValue));
		}
	}
	return err("expected integer-ish in dynamicToInt, got " + Std.string(dynValue));
};
bh_multianim_MultiAnimParser.dynamicToFloat = function(dynValue,err) {
	if(typeof(dynValue) == "number" && ((dynValue | 0) === dynValue)) {
		return dynValue;
	}
	if(typeof(dynValue) == "number") {
		return dynValue;
	} else if(typeof(dynValue) == "string") {
		var f = parseFloat(dynValue);
		if(f != NaN) {
			return f;
		}
		err("expected float-ish in dynamicToFloat, got parseInt error for " + Std.string(dynValue));
	} else if(js_Boot.__instanceof(dynValue,bh_multianim_ResolvedIndexParameters)) {
		var v = dynValue;
		switch(v._hx_index) {
		case 1:
			var i = v.val;
			return i;
		case 2:
			var f = v.val;
			return f;
		default:
			return err("expected float-ish in dynamicToInt as ParameterValue, got " + Std.string(dynValue));
		}
	}
	return err("expected float-ish in dynamicToInt, got " + Std.string(dynValue));
};
bh_multianim_MultiAnimParser.dynamicToString = function(dynValue,err) {
	if(dynValue == null) {
		return "";
	}
	if(typeof(dynValue) == "string") {
		return dynValue;
	} else if(typeof(dynValue) == "number" && ((dynValue | 0) === dynValue)) {
		return "" + Std.string(dynValue);
	} else if(typeof(dynValue) == "boolean") {
		if(dynValue == true) {
			return "true";
		} else {
			return "false";
		}
	} else if(js_Boot.__instanceof(dynValue,bh_multianim_ResolvedIndexParameters)) {
		var v = dynValue;
		switch(v._hx_index) {
		case 1:
			var i = v.val;
			return "" + i + ")";
		case 2:
			var f = v.val;
			return "" + f + ")";
		case 4:
			var s = v.s;
			return s;
		default:
			return err("expected string-ish in dynamicToString, got " + Std.string(dynValue));
		}
	}
	return err("expected string-ish in dynamicToString, got " + Std.string(dynValue));
};
bh_multianim_MultiAnimParser.dynamicToConditionalParam = function(inputValue,type) {
	var err = function(s) {
		throw haxe_Exception.thrown(s);
	};
	switch(type._hx_index) {
	case 0:
		return bh_multianim_ConditionalValues.CoValue(bh_multianim_MultiAnimParser.dynamicToInt(inputValue,err));
	case 1:
		return bh_multianim_ConditionalValues.CoValue(bh_multianim_MultiAnimParser.dynamicToInt(inputValue,err));
	case 2:
		var bits = type.bits;
		return bh_multianim_ConditionalValues.CoFlag(bh_multianim_MultiAnimParser.dynamicToInt(inputValue,err));
	case 3:
		var values = type.values;
		var valStr = bh_multianim_MultiAnimParser.dynamicToString(inputValue,err);
		if(values.indexOf(valStr) == -1) {
			err("define \"" + Std.string(values) + "\" does not contain value \"" + valStr + "\"");
		}
		var index = values.indexOf(valStr);
		return bh_multianim_ConditionalValues.CoIndex(index,valStr);
	case 4:
		var from = type.from;
		var to = type.to;
		return bh_multianim_ConditionalValues.CoValue(bh_multianim_MultiAnimParser.dynamicToInt(inputValue,err));
	case 5:
		return bh_multianim_ConditionalValues.CoValue(bh_multianim_MultiAnimParser.dynamicToInt(inputValue,err));
	case 6:
		return bh_multianim_ConditionalValues.CoValue(bh_multianim_MultiAnimParser.dynamicToInt(inputValue,err));
	case 7:
		return bh_multianim_ConditionalValues.CoValue(bh_multianim_MultiAnimParser.dynamicToInt(inputValue,err));
	case 8:
		return bh_multianim_ConditionalValues.CoValue(bh_multianim_MultiAnimParser.dynamicToInt(inputValue,err));
	case 9:
		return bh_multianim_ConditionalValues.CoStringValue(bh_multianim_MultiAnimParser.dynamicToString(inputValue,err));
	case 10:
		if(typeof(inputValue) == "string") {
			var color = bh_multianim_MultiAnimParser.tryStringToColor(inputValue);
			if(color == null) {
				err("expected color, got " + Std.string(inputValue));
			}
			return bh_multianim_ConditionalValues.CoValue(color);
		} else {
			return bh_multianim_ConditionalValues.CoValue(bh_multianim_MultiAnimParser.dynamicToInt(inputValue,err));
		}
		break;
	case 11:
		return err("cannot use array as conditional parameter");
	}
};
bh_multianim_MultiAnimParser.dynamicValueToIndex = function(name,type,value,error) {
	switch(type._hx_index) {
	case 0:
		var dir = bh_multianim_MultiAnimParser.dynamicToInt(value,error);
		if(dir < 0 || dir >= 6) {
			error("hexdirection must be 0...5");
		}
		return bh_multianim_ResolvedIndexParameters.Value(dir);
	case 1:
		var dir = bh_multianim_MultiAnimParser.dynamicToInt(value,error);
		if(dir < 0 || dir >= 8) {
			error("griddirection must be 0...7");
		}
		return bh_multianim_ResolvedIndexParameters.Value(dir);
	case 2:
		var bits = type.bits;
		var f = bh_multianim_MultiAnimParser.dynamicToInt(value,error);
		var maxVal = 2 << bits;
		if(f < 0 || f > maxVal) {
			error("flag have " + bits + " and max value is " + maxVal + ", yours was " + f);
		}
		return bh_multianim_ResolvedIndexParameters.Flag(f);
	case 3:
		var values = type.values;
		var valStr = bh_multianim_MultiAnimParser.dynamicToString(value,error);
		if(values.indexOf(valStr) == -1) {
			error("define \"" + name + "\" does not contain value \"" + valStr + "\"");
		}
		var index = values.indexOf(valStr);
		return bh_multianim_ResolvedIndexParameters.Index(index,valStr);
	case 4:
		var from = type.from;
		var to = type.to;
		var num = bh_multianim_MultiAnimParser.dynamicToInt(value,error);
		if(num < from || num > to) {
			error("define \"" + name + "\" must be " + from + ".." + to + " but was " + num);
		}
		return bh_multianim_ResolvedIndexParameters.Value(num);
	case 5:
		var num = bh_multianim_MultiAnimParser.dynamicToInt(value,error);
		return bh_multianim_ResolvedIndexParameters.Value(num);
	case 6:
		var num = bh_multianim_MultiAnimParser.dynamicToFloat(value,error);
		return bh_multianim_ResolvedIndexParameters.ValueF(num);
	case 7:
		switch(value._hx_index) {
		case 1:
			var i = value.val;
			if(i > 0) {
				return bh_multianim_ResolvedIndexParameters.Value(0);
			} else if(i == 0) {
				return bh_multianim_ResolvedIndexParameters.Value(1);
			}
			return error("invalid bool from int " + Std.string(value));
		case 4:
			var s = value.s;
			var b = bh_multianim_MultiAnimParser.tryStringToBool(s);
			if(b != null) {
				return bh_multianim_ResolvedIndexParameters.Value(b ? 1 : 0);
			}
			return error("invalid bool from string " + s);
		default:
			return bh_multianim_ResolvedIndexParameters.Value(bh_multianim_MultiAnimParser.dynamicToInt(value,function(error) {
				throw haxe_Exception.thrown("invalid bool from " + Std.string(value) + " " + error);
			}));
		}
		break;
	case 8:
		var num = bh_multianim_MultiAnimParser.dynamicToInt(value,error);
		if(num < 0) {
			error("define " + name + "\" must be unsigned integer but was " + num);
		}
		return bh_multianim_ResolvedIndexParameters.Value(num);
	case 9:
		return bh_multianim_ResolvedIndexParameters.StringValue(bh_multianim_MultiAnimParser.dynamicToString(value,error));
	case 10:
		if(typeof(value) == "string") {
			var color = bh_multianim_MultiAnimParser.tryStringToColor(value);
			if(color == null) {
				error("expected color, got " + Std.string(value));
			}
			return bh_multianim_ResolvedIndexParameters.Value(color);
		} else {
			return bh_multianim_ResolvedIndexParameters.Value(bh_multianim_MultiAnimParser.dynamicToInt(value,error));
		}
		break;
	case 11:
		if(((value) instanceof Array)) {
			var arrVal = value;
			var _g = [];
			var _g1 = 0;
			while(_g1 < arrVal.length) {
				var v = arrVal[_g1];
				++_g1;
				_g.push(bh_multianim_MultiAnimParser.dynamicToString(v,error));
			}
			return bh_multianim_ResolvedIndexParameters.ArrayString(_g);
		} else {
			return error("invalid array value " + Std.string(value));
		}
		break;
	}
};
bh_multianim_MultiAnimParser.getGridCoordinateSystem = function(node) {
	while(node != null) {
		if(node.gridCoordinateSystem != null) {
			return node.gridCoordinateSystem;
		}
		node = node.parent;
	}
	return null;
};
bh_multianim_MultiAnimParser.getHexCoordinateSystem = function(node) {
	while(node != null) {
		if(node.hexCoordinateSystem != null) {
			return node.hexCoordinateSystem;
		}
		node = node.parent;
	}
	return null;
};
bh_multianim_MultiAnimParser.__super__ = hxparse_Parser_$hxparse_$LexerTokenSource_$bh_$multianim_$MPToken_$bh_$multianim_$MPToken;
bh_multianim_MultiAnimParser.prototype = $extend(hxparse_Parser_$hxparse_$LexerTokenSource_$bh_$multianim_$MPToken_$bh_$multianim_$MPToken.prototype,{
	unexpectedError: function(message) {
		var error = new bh_multianim_MultiAnimUnexpected(this.peek(0),this.stream.curPos(),message,this.input);
		haxe_Log.trace(error,{ fileName : "bh/multianim/MultiAnimParser.hx", lineNumber : 766, className : "bh.multianim.MultiAnimParser", methodName : "unexpectedError"});
		throw haxe_Exception.thrown(error);
	}
	,syntaxError: function(error,pos) {
		var error1 = new bh_multianim_InvalidSyntax(error,pos == null ? this.stream.curPos() : pos,this.input);
		haxe_Log.trace(error1,{ fileName : "bh/multianim/MultiAnimParser.hx", lineNumber : 773, className : "bh.multianim.MultiAnimParser", methodName : "syntaxError"});
		throw haxe_Exception.thrown(error1);
	}
	,stringToInt: function(n) {
		var i = Std.parseInt(n);
		if(i != null) {
			return i;
		}
		return this.syntaxError("expected integer, got " + n);
	}
	,stringToFloat: function(n) {
		var f = parseFloat(n);
		if(f != NaN) {
			return f;
		}
		return this.syntaxError("expected float, got " + n);
	}
	,parseNextIntExpression: function(e1) {
		var _g = this.peek(0);
		switch(_g._hx_index) {
		case 14:
			var _g1 = _g.s;
			var _g1 = _g.keyword;
			if(_g1 == null) {
				return e1;
			} else if(_g1._hx_index == 78) {
				if(_g.identType._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var e2 = this.parseIntegerOrReference();
					return this.binop(e1,bh_multianim_RvOp.OpIntegerDiv,e2);
				} else {
					return e1;
				}
			} else {
				return e1;
			}
			break;
		case 18:
			this.last = this.token.elt;
			this.token = this.token.next;
			var e2 = this.parseIntegerOrReference();
			return this.binop(e1,bh_multianim_RvOp.OpMul,e2);
		case 19:
			this.last = this.token.elt;
			this.token = this.token.next;
			var e2 = this.parseIntegerOrReference();
			return this.binop(e1,bh_multianim_RvOp.OpMod,e2);
		case 20:
			this.last = this.token.elt;
			this.token = this.token.next;
			var e2 = this.parseIntegerOrReference();
			return this.binop(e1,bh_multianim_RvOp.OpAdd,e2);
		case 21:
			this.last = this.token.elt;
			this.token = this.token.next;
			var e2 = this.parseIntegerOrReference();
			return this.binop(e1,bh_multianim_RvOp.OpDiv,e2);
		case 22:
			this.last = this.token.elt;
			this.token = this.token.next;
			var e2 = this.parseIntegerOrReference();
			return this.binop(e1,bh_multianim_RvOp.OpSub,e2);
		default:
			return e1;
		}
	}
	,parseNextFloatExpression: function(e1) {
		var _g = this.peek(0);
		switch(_g._hx_index) {
		case 14:
			var _g1 = _g.s;
			var _g1 = _g.keyword;
			if(_g1 == null) {
				return e1;
			} else if(_g1._hx_index == 78) {
				if(_g.identType._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var e2 = this.parseIntegerOrReference();
					return this.binop(e1,bh_multianim_RvOp.OpIntegerDiv,e2);
				} else {
					return e1;
				}
			} else {
				return e1;
			}
			break;
		case 18:
			this.last = this.token.elt;
			this.token = this.token.next;
			var e2 = this.parseFloatOrReference();
			return this.binop(e1,bh_multianim_RvOp.OpMul,e2);
		case 19:
			this.last = this.token.elt;
			this.token = this.token.next;
			var e2 = this.parseFloatOrReference();
			return this.binop(e1,bh_multianim_RvOp.OpMod,e2);
		case 20:
			this.last = this.token.elt;
			this.token = this.token.next;
			var e2 = this.parseFloatOrReference();
			return this.binop(e1,bh_multianim_RvOp.OpAdd,e2);
		case 21:
			this.last = this.token.elt;
			this.token = this.token.next;
			var e2 = this.parseFloatOrReference();
			return this.binop(e1,bh_multianim_RvOp.OpDiv,e2);
		case 22:
			this.last = this.token.elt;
			this.token = this.token.next;
			var e2 = this.parseFloatOrReference();
			return this.binop(e1,bh_multianim_RvOp.OpSub,e2);
		default:
			return e1;
		}
	}
	,parseNextStringExpression: function(e1) {
		if(this.peek(0)._hx_index == 20) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var e2 = this.parseStringOrReference();
			return this.binop(e1,bh_multianim_RvOp.OpAdd,e2);
		} else {
			return e1;
		}
	}
	,parseStringInterpolated: function() {
		var _g = this.peek(0);
		if(_g._hx_index == 24) {
			var _g1 = _g.type;
			switch(_g1._hx_index) {
			case 1:
				var strValue = _g1.stringValue;
				this.last = this.token.elt;
				this.token = this.token.next;
				return bh_multianim_ReferencableValue.RVString(strValue);
			case 2:
				var prefix = _g1.prefix;
				this.last = this.token.elt;
				this.token = this.token.next;
				this.stream.ruleset = bh_multianim_MultiAnimLexer.tok;
				var retVal = this.binop(bh_multianim_ReferencableValue.RVString(prefix),bh_multianim_RvOp.OpAdd,this.parseStringOrReference());
				if(this.peek(0)._hx_index == 6) {
					this.last = this.token.elt;
					this.token = this.token.next;
					this.stream.ruleset = bh_multianim_MultiAnimLexer.interpString;
				} else {
					return this.unexpectedError();
				}
				return this.binop(retVal,bh_multianim_RvOp.OpAdd,this.parseStringInterpolated());
			default:
				return this.unexpectedError("Unexpected interpolated string content");
			}
		} else {
			return this.unexpectedError("Unexpected interpolated string content");
		}
	}
	,binop: function(e1,op,e2) {
		if(e2._hx_index == 13) {
			var _g = e2.op;
			var _g1 = e2.e1;
			var _g2 = e2.e2;
			switch(_g._hx_index) {
			case 0:case 2:
				if(op._hx_index == 1) {
					var op2 = _g;
					var e4 = _g2;
					var e3 = _g1;
					return bh_multianim_ReferencableValue.EBinop(op2,bh_multianim_ReferencableValue.EBinop(op,e1,e3),e4);
				} else {
					return bh_multianim_ReferencableValue.EBinop(op,e1,e2);
				}
				break;
			default:
				return bh_multianim_ReferencableValue.EBinop(op,e1,e2);
			}
		} else {
			return bh_multianim_ReferencableValue.EBinop(op,e1,e2);
		}
	}
	,parseCallback: function(valueType) {
		var index = null;
		if(this.peek(0)._hx_index == 1) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var name = this.parseStringOrReference();
			switch(this.peek(0)._hx_index) {
			case 2:
				this.last = this.token.elt;
				this.token = this.token.next;
				break;
			case 7:
				this.last = this.token.elt;
				this.token = this.token.next;
				var i = this.parseIntegerOrReference();
				if(this.peek(0)._hx_index == 2) {
					this.last = this.token.elt;
					this.token = this.token.next;
					index = i;
				} else {
					throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
				break;
			default:
				throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
			var defaultValue;
			if(this.peek(0)._hx_index == 23) {
				this.last = this.token.elt;
				this.token = this.token.next;
				switch(valueType._hx_index) {
				case 0:
					defaultValue = this.parseIntegerOrReference();
					break;
				case 1:
					throw haxe_Exception.thrown("no VTFloat parsing");
				case 2:
					defaultValue = this.parseStringOrReference();
					break;
				}
			} else {
				defaultValue = null;
			}
			if(index != null) {
				return bh_multianim_ReferencableValue.RVCallbacksWithIndex(name,index,defaultValue);
			} else {
				return bh_multianim_ReferencableValue.RVCallbacks(name,defaultValue);
			}
		} else {
			return this.unexpectedError("expected callback");
		}
	}
	,parseUpdatable: function(name) {
		var _g = this.peek(0);
		if(_g._hx_index == 14) {
			var _g1 = _g.s;
			var _g1 = _g.keyword;
			if(_g1 == null) {
				return this.unexpectedError("expected updatable");
			} else if(_g1._hx_index == 73) {
				if(_g.identType._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return bh_multianim_UpdatableNameType.UNTUpdatable(name);
				} else {
					return this.unexpectedError("expected updatable");
				}
			} else {
				return this.unexpectedError("expected updatable");
			}
		} else {
			return this.unexpectedError("expected updatable");
		}
	}
	,parseArrayOrReference: function() {
		if(this.peek(0)._hx_index == 3) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var _g = this;
			var interpolated = false;
			var array = this.parseSeparated(function(x) {
				if(x._hx_index == 7) {
					return true;
				} else {
					return false;
				}
			},function() {
				return _g.parseStringOrReference(interpolated);
			});
			if(this.peek(0)._hx_index == 4) {
				this.last = this.token.elt;
				this.token = this.token.next;
				return array;
			} else {
				return this.unexpectedError("expected ]");
			}
		} else {
			throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseStringArray: function() {
		if(this.peek(0)._hx_index == 3) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var array = this.parseSeparated(function(x) {
				if(x._hx_index == 7) {
					return true;
				} else {
					return false;
				}
			},$bind(this,this.parseStringValue));
			if(this.peek(0)._hx_index == 4) {
				this.last = this.token.elt;
				this.token = this.token.next;
				return array;
			} else {
				return this.unexpectedError("expected ]");
			}
		} else {
			throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseStringValue: function() {
		var _g = this.peek(0);
		switch(_g._hx_index) {
		case 13:
			var n = _g.s;
			var numberType = _g.numberType;
			this.last = this.token.elt;
			this.token = this.token.next;
			switch(numberType._hx_index) {
			case 0:
				return n;
			case 1:
				return n;
			case 2:
				return "0x" + n;
			}
			break;
		case 14:
			var _g1 = _g.keyword;
			var str = _g.s;
			var stringType = _g.identType;
			this.last = this.token.elt;
			this.token = this.token.next;
			switch(stringType._hx_index) {
			case 0:
				return str;
			case 1:
				return "!" + str;
			case 2:
				return "#" + str;
			case 3:
				return str;
			}
			break;
		case 22:
			this.last = this.token.elt;
			this.token = this.token.next;
			return "-" + this.parseStringValue();
		default:
			throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseColorOrReference: function() {
		var _g = this.peek(0);
		if(_g._hx_index == 14) {
			var _g1 = _g.s;
			var _g1 = _g.keyword;
			if(_g1 == null) {
				var color = this.tryParseColor();
				if(color == null) {
					return this.parseIntegerOrReference();
				} else {
					return bh_multianim_ReferencableValue.RVInteger(color);
				}
			} else if(_g1._hx_index == 30) {
				if(_g.identType._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var externalReference;
						var _g = this.peek(0);
						if(_g._hx_index == 14) {
							var _g1 = _g.s;
							var _g1 = _g.keyword;
							if(_g1 == null) {
								externalReference = null;
							} else if(_g1._hx_index == 79) {
								if(_g.identType._hx_index == 0) {
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 1) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var _g = this.peek(0);
										if(_g._hx_index == 14) {
											var _g1 = _g.s;
											var _g2 = _g.keyword;
											switch(_g.identType._hx_index) {
											case 0:case 3:
												var er = _g1;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 7) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var importedBuilder = this.imports.h[er];
														if(importedBuilder == null) {
															this.syntaxError("external reference \"" + er + "\" could not be found. It has to be imported BEFORE referencing it.");
														}
														externalReference = er;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											default:
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									externalReference = null;
								}
							} else {
								externalReference = null;
							}
						} else {
							externalReference = null;
						}
						var _g = this.peek(0);
						if(_g._hx_index == 14) {
							var _g1 = _g.s;
							var _g2 = _g.keyword;
							switch(_g.identType._hx_index) {
							case 0:case 3:
								var paletteName = _g1;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var index = this.parseIntegerOrReference();
									switch(this.peek(0)._hx_index) {
									case 2:
										this.last = this.token.elt;
										this.token = this.token.next;
										return bh_multianim_ReferencableValue.RVColor(externalReference,paletteName,index);
									case 7:
										this.last = this.token.elt;
										this.token = this.token.next;
										var row = this.parseIntegerOrReference();
										if(this.peek(0)._hx_index == 2) {
											this.last = this.token.elt;
											this.token = this.token.next;
											return bh_multianim_ReferencableValue.RVColorXY(externalReference,paletteName,index,row);
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									default:
										return null;
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
								break;
							default:
								return this.unexpectedError("expected paletteName[, index]");
							}
						} else {
							return this.unexpectedError("expected paletteName[, index]");
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					var color = this.tryParseColor();
					if(color == null) {
						return this.parseIntegerOrReference();
					} else {
						return bh_multianim_ReferencableValue.RVInteger(color);
					}
				}
			} else {
				var color = this.tryParseColor();
				if(color == null) {
					return this.parseIntegerOrReference();
				} else {
					return bh_multianim_ReferencableValue.RVInteger(color);
				}
			}
		} else {
			var color = this.tryParseColor();
			if(color == null) {
				return this.parseIntegerOrReference();
			} else {
				return bh_multianim_ReferencableValue.RVInteger(color);
			}
		}
	}
	,parseColor: function() {
		var color = this.tryParseColor();
		if(color == null) {
			this.unexpectedError("unknown color");
		}
		return color;
	}
	,parseColorsList: function(endSymbol) {
		var colors = [];
		while(true) {
			this.eatComma();
			if(this.peek(0) == endSymbol) {
				this.last = this.token.elt;
				this.token = this.token.next;
				break;
			}
			colors.push(this.parseColorOrReference());
		}
		return colors;
	}
	,tryParseColor: function() {
		var color;
		var _g = this.peek(0);
		switch(_g._hx_index) {
		case 13:
			if(_g.numberType._hx_index == 2) {
				var n = _g.s;
				color = bh_multianim_MultiAnimParser.tryStringToColor("0x" + n);
			} else {
				return null;
			}
			break;
		case 14:
			var _g1 = _g.s;
			var _g2 = _g.keyword;
			switch(_g.identType._hx_index) {
			case 0:
				var color1 = _g1;
				color = bh_multianim_MultiAnimParser.tryStringToColor(color1);
				break;
			case 2:
				var colorStr = _g1;
				color = bh_multianim_MultiAnimParser.tryStringToColor("#" + colorStr);
				break;
			default:
				return null;
			}
			break;
		default:
			return null;
		}
		if(color != null) {
			this.last = this.token.elt;
			this.token = this.token.next;
			return color;
		} else {
			return null;
		}
	}
	,parseFunction: function() {
		var _g = this.peek(0);
		if(_g._hx_index == 14) {
			var _g1 = _g.keyword;
			var _g1 = _g.identType;
			switch(_g.s) {
			case "gridHeight":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 2) {
						this.last = this.token.elt;
						this.token = this.token.next;
						return bh_multianim_ReferencableValueFunction.RVFGridHeight;
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					return this.syntaxError("unknown function");
				}
				break;
			case "gridWidth":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 2) {
						this.last = this.token.elt;
						this.token = this.token.next;
						return bh_multianim_ReferencableValueFunction.RVFGridWidth;
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					return this.syntaxError("unknown function");
				}
				break;
			default:
				return this.syntaxError("unknown function");
			}
		} else {
			return this.syntaxError("unknown function");
		}
	}
	,parseIntegerOrReference: function() {
		var _g = this.peek(0);
		switch(_g._hx_index) {
		case 1:
			this.last = this.token.elt;
			this.token = this.token.next;
			var e = this.parseIntegerOrReference();
			if(this.peek(0)._hx_index == 2) {
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.parseNextIntExpression(bh_multianim_ReferencableValue.RVParenthesis(e));
			} else {
				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		case 13:
			var _g1 = _g.s;
			switch(_g.numberType._hx_index) {
			case 0:case 2:
				var n = _g1;
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.parseNextIntExpression(bh_multianim_ReferencableValue.RVInteger(this.stringToInt(n)));
			default:
				return this.syntaxError("expected integer or expression, got " + Std.string(this.peek(0)));
			}
			break;
		case 14:
			var _g1 = _g.s;
			var _g2 = _g.keyword;
			var _g3 = _g.identType;
			if(_g2 == null) {
				if(_g3._hx_index == 1) {
					var s = _g1;
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 3) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var index = this.parseIntegerOrReference();
						if(this.peek(0)._hx_index == 4) {
							this.last = this.token.elt;
							this.token = this.token.next;
							return this.parseNextIntExpression(bh_multianim_ReferencableValue.RVElementOfArray(s,index));
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						return this.parseNextIntExpression(bh_multianim_ReferencableValue.RVReference(s));
					}
				} else {
					return this.syntaxError("expected integer or expression, got " + Std.string(this.peek(0)));
				}
			} else {
				switch(_g2._hx_index) {
				case 2:
					switch(_g3._hx_index) {
					case 0:
						this.last = this.token.elt;
						this.token = this.token.next;
						return this.parseCallback(bh_multianim_ValueType.VTInt);
					case 1:
						var s = _g1;
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 3) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var index = this.parseIntegerOrReference();
							if(this.peek(0)._hx_index == 4) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return this.parseNextIntExpression(bh_multianim_ReferencableValue.RVElementOfArray(s,index));
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							return this.parseNextIntExpression(bh_multianim_ReferencableValue.RVReference(s));
						}
						break;
					default:
						return this.syntaxError("expected integer or expression, got " + Std.string(this.peek(0)));
					}
					break;
				case 3:
					switch(_g3._hx_index) {
					case 0:
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							return bh_multianim_ReferencableValue.RVFunction(this.parseFunction());
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
						break;
					case 1:
						var s = _g1;
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 3) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var index = this.parseIntegerOrReference();
							if(this.peek(0)._hx_index == 4) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return this.parseNextIntExpression(bh_multianim_ReferencableValue.RVElementOfArray(s,index));
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							return this.parseNextIntExpression(bh_multianim_ReferencableValue.RVReference(s));
						}
						break;
					default:
						return this.syntaxError("expected integer or expression, got " + Std.string(this.peek(0)));
					}
					break;
				default:
					if(_g3._hx_index == 1) {
						var s = _g1;
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 3) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var index = this.parseIntegerOrReference();
							if(this.peek(0)._hx_index == 4) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return this.parseNextIntExpression(bh_multianim_ReferencableValue.RVElementOfArray(s,index));
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							return this.parseNextIntExpression(bh_multianim_ReferencableValue.RVReference(s));
						}
					} else {
						return this.syntaxError("expected integer or expression, got " + Std.string(this.peek(0)));
					}
				}
			}
			break;
		case 22:
			this.last = this.token.elt;
			this.token = this.token.next;
			var _g = this.peek(0);
			if(_g._hx_index == 13) {
				var _g1 = _g.s;
				switch(_g.numberType._hx_index) {
				case 0:case 2:
					var n = _g1;
					this.last = this.token.elt;
					this.token = this.token.next;
					return this.parseNextIntExpression(bh_multianim_ReferencableValue.RVInteger(-this.stringToInt(n)));
				default:
					throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		default:
			return this.syntaxError("expected integer or expression, got " + Std.string(this.peek(0)));
		}
	}
	,parseFloatOrReference: function() {
		var _g = this.peek(0);
		switch(_g._hx_index) {
		case 1:
			this.last = this.token.elt;
			this.token = this.token.next;
			var e = this.parseFloatOrReference();
			if(this.peek(0)._hx_index == 2) {
				this.last = this.token.elt;
				this.token = this.token.next;
				return bh_multianim_ReferencableValue.RVParenthesis(e);
			} else {
				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		case 13:
			var _g1 = _g.s;
			switch(_g.numberType._hx_index) {
			case 0:case 1:
				var n = _g1;
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.parseNextFloatExpression(bh_multianim_ReferencableValue.RVFloat(this.stringToFloat(n)));
			default:
				return this.syntaxError("expected float|integer or expression, got " + Std.string(this.peek(0)));
			}
			break;
		case 14:
			var _g1 = _g.s;
			var _g2 = _g.keyword;
			var _g3 = _g.identType;
			if(_g2 == null) {
				if(_g3._hx_index == 1) {
					var s = _g1;
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 3) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var index = this.parseIntegerOrReference();
						if(this.peek(0)._hx_index == 4) {
							this.last = this.token.elt;
							this.token = this.token.next;
							return this.parseNextFloatExpression(bh_multianim_ReferencableValue.RVElementOfArray(s,index));
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						return this.parseNextFloatExpression(bh_multianim_ReferencableValue.RVReference(s));
					}
				} else {
					return this.syntaxError("expected float|integer or expression, got " + Std.string(this.peek(0)));
				}
			} else {
				switch(_g2._hx_index) {
				case 2:
					switch(_g3._hx_index) {
					case 0:
						this.last = this.token.elt;
						this.token = this.token.next;
						return this.parseCallback(bh_multianim_ValueType.VTFloat);
					case 1:
						var s = _g1;
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 3) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var index = this.parseIntegerOrReference();
							if(this.peek(0)._hx_index == 4) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return this.parseNextFloatExpression(bh_multianim_ReferencableValue.RVElementOfArray(s,index));
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							return this.parseNextFloatExpression(bh_multianim_ReferencableValue.RVReference(s));
						}
						break;
					default:
						return this.syntaxError("expected float|integer or expression, got " + Std.string(this.peek(0)));
					}
					break;
				case 3:
					switch(_g3._hx_index) {
					case 0:
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							return bh_multianim_ReferencableValue.RVFunction(this.parseFunction());
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
						break;
					case 1:
						var s = _g1;
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 3) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var index = this.parseIntegerOrReference();
							if(this.peek(0)._hx_index == 4) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return this.parseNextFloatExpression(bh_multianim_ReferencableValue.RVElementOfArray(s,index));
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							return this.parseNextFloatExpression(bh_multianim_ReferencableValue.RVReference(s));
						}
						break;
					default:
						return this.syntaxError("expected float|integer or expression, got " + Std.string(this.peek(0)));
					}
					break;
				default:
					if(_g3._hx_index == 1) {
						var s = _g1;
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 3) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var index = this.parseIntegerOrReference();
							if(this.peek(0)._hx_index == 4) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return this.parseNextFloatExpression(bh_multianim_ReferencableValue.RVElementOfArray(s,index));
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							return this.parseNextFloatExpression(bh_multianim_ReferencableValue.RVReference(s));
						}
					} else {
						return this.syntaxError("expected float|integer or expression, got " + Std.string(this.peek(0)));
					}
				}
			}
			break;
		case 22:
			this.last = this.token.elt;
			this.token = this.token.next;
			var _g = this.peek(0);
			if(_g._hx_index == 13) {
				var _g1 = _g.s;
				switch(_g.numberType._hx_index) {
				case 0:case 1:
					var n = _g1;
					this.last = this.token.elt;
					this.token = this.token.next;
					return this.parseNextFloatExpression(bh_multianim_ReferencableValue.RVFloat(-this.stringToFloat(n)));
				default:
					throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		default:
			return this.syntaxError("expected float|integer or expression, got " + Std.string(this.peek(0)));
		}
	}
	,parseStringOrReference: function(interpolated) {
		var _g = this.peek(0);
		switch(_g._hx_index) {
		case 14:
			var _g1 = _g.s;
			var _g1 = _g.keyword;
			var _g2 = _g.identType;
			if(_g1 == null) {
				var _g = this.peek(0);
				switch(_g._hx_index) {
				case 13:
					var _g3 = _g.numberType;
					var s = _g.s;
					this.last = this.token.elt;
					this.token = this.token.next;
					return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVString(s));
				case 14:
					var _g3 = _g.s;
					var _g4 = _g.keyword;
					switch(_g.identType._hx_index) {
					case 0:case 3:
						var s = _g3;
						this.last = this.token.elt;
						this.token = this.token.next;
						return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVString(s));
					default:
						var _g = this.peek(0);
						switch(_g._hx_index) {
						case 1:
							this.last = this.token.elt;
							this.token = this.token.next;
							var e = this.parseStringOrReference();
							if(this.peek(0)._hx_index == 2) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return bh_multianim_ReferencableValue.RVParenthesis(e);
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
							break;
						case 14:
							var _g3 = _g.keyword;
							if(_g.identType._hx_index == 1) {
								var s = _g.s;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 3) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var index = this.parseIntegerOrReference();
									if(this.peek(0)._hx_index == 4) {
										this.last = this.token.elt;
										this.token = this.token.next;
										return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVElementOfArray(s,index));
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVReference(s));
								}
							} else {
								return this.syntaxError("expected string or reference, got " + Std.string(this.peek(0)));
							}
							break;
						case 24:
							var type = _g.type;
							this.last = this.token.elt;
							this.token = this.token.next;
							switch(type._hx_index) {
							case 0:
								var current = this.stream.ruleset;
								this.stream.ruleset = bh_multianim_MultiAnimLexer.interpString;
								var r = this.parseStringInterpolated();
								this.stream.ruleset = current;
								return r;
							case 1:
								var x = type.stringValue;
								return bh_multianim_ReferencableValue.RVString(x);
							case 2:
								var prefix = type.prefix;
								this.stream.ruleset = bh_multianim_MultiAnimLexer.tok;
								return bh_multianim_ReferencableValue.RVString(prefix);
							}
							break;
						default:
							return this.syntaxError("expected string or reference, got " + Std.string(this.peek(0)));
						}
					}
					break;
				default:
					var _g = this.peek(0);
					switch(_g._hx_index) {
					case 1:
						this.last = this.token.elt;
						this.token = this.token.next;
						var e = this.parseStringOrReference();
						if(this.peek(0)._hx_index == 2) {
							this.last = this.token.elt;
							this.token = this.token.next;
							return bh_multianim_ReferencableValue.RVParenthesis(e);
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
						break;
					case 14:
						var _g3 = _g.keyword;
						if(_g.identType._hx_index == 1) {
							var s = _g.s;
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 3) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var index = this.parseIntegerOrReference();
								if(this.peek(0)._hx_index == 4) {
									this.last = this.token.elt;
									this.token = this.token.next;
									return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVElementOfArray(s,index));
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVReference(s));
							}
						} else {
							return this.syntaxError("expected string or reference, got " + Std.string(this.peek(0)));
						}
						break;
					case 24:
						var type = _g.type;
						this.last = this.token.elt;
						this.token = this.token.next;
						switch(type._hx_index) {
						case 0:
							var current = this.stream.ruleset;
							this.stream.ruleset = bh_multianim_MultiAnimLexer.interpString;
							var r = this.parseStringInterpolated();
							this.stream.ruleset = current;
							return r;
						case 1:
							var x = type.stringValue;
							return bh_multianim_ReferencableValue.RVString(x);
						case 2:
							var prefix = type.prefix;
							this.stream.ruleset = bh_multianim_MultiAnimLexer.tok;
							return bh_multianim_ReferencableValue.RVString(prefix);
						}
						break;
					default:
						return this.syntaxError("expected string or reference, got " + Std.string(this.peek(0)));
					}
				}
			} else if(_g1._hx_index == 2) {
				if(_g2._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return this.parseCallback(bh_multianim_ValueType.VTString);
				} else {
					var _g = this.peek(0);
					switch(_g._hx_index) {
					case 13:
						var _g1 = _g.numberType;
						var s = _g.s;
						this.last = this.token.elt;
						this.token = this.token.next;
						return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVString(s));
					case 14:
						var _g1 = _g.s;
						var _g2 = _g.keyword;
						switch(_g.identType._hx_index) {
						case 0:case 3:
							var s = _g1;
							this.last = this.token.elt;
							this.token = this.token.next;
							return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVString(s));
						default:
							var _g = this.peek(0);
							switch(_g._hx_index) {
							case 1:
								this.last = this.token.elt;
								this.token = this.token.next;
								var e = this.parseStringOrReference();
								if(this.peek(0)._hx_index == 2) {
									this.last = this.token.elt;
									this.token = this.token.next;
									return bh_multianim_ReferencableValue.RVParenthesis(e);
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
								break;
							case 14:
								var _g1 = _g.keyword;
								if(_g.identType._hx_index == 1) {
									var s = _g.s;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 3) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var index = this.parseIntegerOrReference();
										if(this.peek(0)._hx_index == 4) {
											this.last = this.token.elt;
											this.token = this.token.next;
											return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVElementOfArray(s,index));
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVReference(s));
									}
								} else {
									return this.syntaxError("expected string or reference, got " + Std.string(this.peek(0)));
								}
								break;
							case 24:
								var type = _g.type;
								this.last = this.token.elt;
								this.token = this.token.next;
								switch(type._hx_index) {
								case 0:
									var current = this.stream.ruleset;
									this.stream.ruleset = bh_multianim_MultiAnimLexer.interpString;
									var r = this.parseStringInterpolated();
									this.stream.ruleset = current;
									return r;
								case 1:
									var x = type.stringValue;
									return bh_multianim_ReferencableValue.RVString(x);
								case 2:
									var prefix = type.prefix;
									this.stream.ruleset = bh_multianim_MultiAnimLexer.tok;
									return bh_multianim_ReferencableValue.RVString(prefix);
								}
								break;
							default:
								return this.syntaxError("expected string or reference, got " + Std.string(this.peek(0)));
							}
						}
						break;
					default:
						var _g = this.peek(0);
						switch(_g._hx_index) {
						case 1:
							this.last = this.token.elt;
							this.token = this.token.next;
							var e = this.parseStringOrReference();
							if(this.peek(0)._hx_index == 2) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return bh_multianim_ReferencableValue.RVParenthesis(e);
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
							break;
						case 14:
							var _g1 = _g.keyword;
							if(_g.identType._hx_index == 1) {
								var s = _g.s;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 3) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var index = this.parseIntegerOrReference();
									if(this.peek(0)._hx_index == 4) {
										this.last = this.token.elt;
										this.token = this.token.next;
										return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVElementOfArray(s,index));
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVReference(s));
								}
							} else {
								return this.syntaxError("expected string or reference, got " + Std.string(this.peek(0)));
							}
							break;
						case 24:
							var type = _g.type;
							this.last = this.token.elt;
							this.token = this.token.next;
							switch(type._hx_index) {
							case 0:
								var current = this.stream.ruleset;
								this.stream.ruleset = bh_multianim_MultiAnimLexer.interpString;
								var r = this.parseStringInterpolated();
								this.stream.ruleset = current;
								return r;
							case 1:
								var x = type.stringValue;
								return bh_multianim_ReferencableValue.RVString(x);
							case 2:
								var prefix = type.prefix;
								this.stream.ruleset = bh_multianim_MultiAnimLexer.tok;
								return bh_multianim_ReferencableValue.RVString(prefix);
							}
							break;
						default:
							return this.syntaxError("expected string or reference, got " + Std.string(this.peek(0)));
						}
					}
				}
			} else {
				var _g = this.peek(0);
				switch(_g._hx_index) {
				case 13:
					var _g1 = _g.numberType;
					var s = _g.s;
					this.last = this.token.elt;
					this.token = this.token.next;
					return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVString(s));
				case 14:
					var _g1 = _g.s;
					var _g2 = _g.keyword;
					switch(_g.identType._hx_index) {
					case 0:case 3:
						var s = _g1;
						this.last = this.token.elt;
						this.token = this.token.next;
						return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVString(s));
					default:
						var _g = this.peek(0);
						switch(_g._hx_index) {
						case 1:
							this.last = this.token.elt;
							this.token = this.token.next;
							var e = this.parseStringOrReference();
							if(this.peek(0)._hx_index == 2) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return bh_multianim_ReferencableValue.RVParenthesis(e);
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
							break;
						case 14:
							var _g1 = _g.keyword;
							if(_g.identType._hx_index == 1) {
								var s = _g.s;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 3) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var index = this.parseIntegerOrReference();
									if(this.peek(0)._hx_index == 4) {
										this.last = this.token.elt;
										this.token = this.token.next;
										return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVElementOfArray(s,index));
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVReference(s));
								}
							} else {
								return this.syntaxError("expected string or reference, got " + Std.string(this.peek(0)));
							}
							break;
						case 24:
							var type = _g.type;
							this.last = this.token.elt;
							this.token = this.token.next;
							switch(type._hx_index) {
							case 0:
								var current = this.stream.ruleset;
								this.stream.ruleset = bh_multianim_MultiAnimLexer.interpString;
								var r = this.parseStringInterpolated();
								this.stream.ruleset = current;
								return r;
							case 1:
								var x = type.stringValue;
								return bh_multianim_ReferencableValue.RVString(x);
							case 2:
								var prefix = type.prefix;
								this.stream.ruleset = bh_multianim_MultiAnimLexer.tok;
								return bh_multianim_ReferencableValue.RVString(prefix);
							}
							break;
						default:
							return this.syntaxError("expected string or reference, got " + Std.string(this.peek(0)));
						}
					}
					break;
				default:
					var _g = this.peek(0);
					switch(_g._hx_index) {
					case 1:
						this.last = this.token.elt;
						this.token = this.token.next;
						var e = this.parseStringOrReference();
						if(this.peek(0)._hx_index == 2) {
							this.last = this.token.elt;
							this.token = this.token.next;
							return bh_multianim_ReferencableValue.RVParenthesis(e);
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
						break;
					case 14:
						var _g1 = _g.keyword;
						if(_g.identType._hx_index == 1) {
							var s = _g.s;
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 3) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var index = this.parseIntegerOrReference();
								if(this.peek(0)._hx_index == 4) {
									this.last = this.token.elt;
									this.token = this.token.next;
									return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVElementOfArray(s,index));
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVReference(s));
							}
						} else {
							return this.syntaxError("expected string or reference, got " + Std.string(this.peek(0)));
						}
						break;
					case 24:
						var type = _g.type;
						this.last = this.token.elt;
						this.token = this.token.next;
						switch(type._hx_index) {
						case 0:
							var current = this.stream.ruleset;
							this.stream.ruleset = bh_multianim_MultiAnimLexer.interpString;
							var r = this.parseStringInterpolated();
							this.stream.ruleset = current;
							return r;
						case 1:
							var x = type.stringValue;
							return bh_multianim_ReferencableValue.RVString(x);
						case 2:
							var prefix = type.prefix;
							this.stream.ruleset = bh_multianim_MultiAnimLexer.tok;
							return bh_multianim_ReferencableValue.RVString(prefix);
						}
						break;
					default:
						return this.syntaxError("expected string or reference, got " + Std.string(this.peek(0)));
					}
				}
			}
			break;
		case 22:
			this.last = this.token.elt;
			this.token = this.token.next;
			var _g = this.peek(0);
			if(_g._hx_index == 13) {
				var _g1 = _g.numberType;
				var s = _g.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVString("-" + s));
			} else {
				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		default:
			var _g = this.peek(0);
			switch(_g._hx_index) {
			case 13:
				var _g1 = _g.numberType;
				var s = _g.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVString(s));
			case 14:
				var _g1 = _g.s;
				var _g2 = _g.keyword;
				switch(_g.identType._hx_index) {
				case 0:case 3:
					var s = _g1;
					this.last = this.token.elt;
					this.token = this.token.next;
					return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVString(s));
				default:
					var _g = this.peek(0);
					switch(_g._hx_index) {
					case 1:
						this.last = this.token.elt;
						this.token = this.token.next;
						var e = this.parseStringOrReference();
						if(this.peek(0)._hx_index == 2) {
							this.last = this.token.elt;
							this.token = this.token.next;
							return bh_multianim_ReferencableValue.RVParenthesis(e);
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
						break;
					case 14:
						var _g1 = _g.keyword;
						if(_g.identType._hx_index == 1) {
							var s = _g.s;
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 3) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var index = this.parseIntegerOrReference();
								if(this.peek(0)._hx_index == 4) {
									this.last = this.token.elt;
									this.token = this.token.next;
									return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVElementOfArray(s,index));
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVReference(s));
							}
						} else {
							return this.syntaxError("expected string or reference, got " + Std.string(this.peek(0)));
						}
						break;
					case 24:
						var type = _g.type;
						this.last = this.token.elt;
						this.token = this.token.next;
						switch(type._hx_index) {
						case 0:
							var current = this.stream.ruleset;
							this.stream.ruleset = bh_multianim_MultiAnimLexer.interpString;
							var r = this.parseStringInterpolated();
							this.stream.ruleset = current;
							return r;
						case 1:
							var x = type.stringValue;
							return bh_multianim_ReferencableValue.RVString(x);
						case 2:
							var prefix = type.prefix;
							this.stream.ruleset = bh_multianim_MultiAnimLexer.tok;
							return bh_multianim_ReferencableValue.RVString(prefix);
						}
						break;
					default:
						return this.syntaxError("expected string or reference, got " + Std.string(this.peek(0)));
					}
				}
				break;
			default:
				var _g = this.peek(0);
				switch(_g._hx_index) {
				case 1:
					this.last = this.token.elt;
					this.token = this.token.next;
					var e = this.parseStringOrReference();
					if(this.peek(0)._hx_index == 2) {
						this.last = this.token.elt;
						this.token = this.token.next;
						return bh_multianim_ReferencableValue.RVParenthesis(e);
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					break;
				case 14:
					var _g1 = _g.keyword;
					if(_g.identType._hx_index == 1) {
						var s = _g.s;
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 3) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var index = this.parseIntegerOrReference();
							if(this.peek(0)._hx_index == 4) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVElementOfArray(s,index));
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							return this.parseNextStringExpression(bh_multianim_ReferencableValue.RVReference(s));
						}
					} else {
						return this.syntaxError("expected string or reference, got " + Std.string(this.peek(0)));
					}
					break;
				case 24:
					var type = _g.type;
					this.last = this.token.elt;
					this.token = this.token.next;
					switch(type._hx_index) {
					case 0:
						var current = this.stream.ruleset;
						this.stream.ruleset = bh_multianim_MultiAnimLexer.interpString;
						var r = this.parseStringInterpolated();
						this.stream.ruleset = current;
						return r;
					case 1:
						var x = type.stringValue;
						return bh_multianim_ReferencableValue.RVString(x);
					case 2:
						var prefix = type.prefix;
						this.stream.ruleset = bh_multianim_MultiAnimLexer.tok;
						return bh_multianim_ReferencableValue.RVString(prefix);
					}
					break;
				default:
					return this.syntaxError("expected string or reference, got " + Std.string(this.peek(0)));
				}
			}
		}
	}
	,parseInteger: function() {
		var val = this.tryParseInteger();
		if(val == null) {
			this.syntaxError("expected number, got " + Std.string(this.peek(0)));
		}
		return val;
	}
	,tryParseInteger: function() {
		var _g = this.peek(0);
		switch(_g._hx_index) {
		case 13:
			var _g1 = _g.s;
			switch(_g.numberType._hx_index) {
			case 0:case 2:
				var n = _g1;
				this.last = this.token.elt;
				this.token = this.token.next;
				return this.stringToInt(n);
			default:
				return null;
			}
			break;
		case 22:
			this.last = this.token.elt;
			this.token = this.token.next;
			var _g = this.peek(0);
			if(_g._hx_index == 13) {
				var _g1 = _g.s;
				switch(_g.numberType._hx_index) {
				case 0:case 2:
					var n = _g1;
					this.last = this.token.elt;
					this.token = this.token.next;
					return -this.stringToInt(n);
				default:
					throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		default:
			return null;
		}
	}
	,parseFloat: function() {
		var sign;
		if(this.peek(0)._hx_index == 22) {
			this.last = this.token.elt;
			this.token = this.token.next;
			sign = -1;
		} else {
			sign = 1;
		}
		var _g = this.peek(0);
		if(_g._hx_index == 13) {
			var _g1 = _g.numberType;
			var n = _g.s;
			this.last = this.token.elt;
			this.token = this.token.next;
			return sign * this.stringToFloat(n);
		} else {
			return this.syntaxError("expected number, got " + Std.string(this.peek(0)));
		}
	}
	,parseXY: function() {
		try {
			var _g = this.peek(0);
			if(_g._hx_index == 14) {
				var _g1 = _g.s;
				var _g1 = _g.keyword;
				var _g2 = _g.identType;
				if(_g1 == null) {
					try {
						var x = this.parseIntegerOrReference();
						if(this.peek(0)._hx_index == 7) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var y = this.parseIntegerOrReference();
							return bh_multianim_Coordinates.OFFSET(x,y);
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} catch( _g ) {
						if(((haxe_Exception.caught(_g).unwrap()) instanceof hxparse_NoMatch)) {
							return this.unexpectedError("Unexpected pos content");
						} else {
							throw _g;
						}
					}
				} else {
					switch(_g1._hx_index) {
					case 18:
						if(_g2._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 1) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var x = this.parseIntegerOrReference();
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var y = this.parseIntegerOrReference();
									if(this.peek(0)._hx_index == 2) {
										this.last = this.token.elt;
										this.token = this.token.next;
										return bh_multianim_Coordinates.SELECTED_GRID_POSITION(x,y);
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							try {
								var x = this.parseIntegerOrReference();
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var y = this.parseIntegerOrReference();
									return bh_multianim_Coordinates.OFFSET(x,y);
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} catch( _g ) {
								if(((haxe_Exception.caught(_g).unwrap()) instanceof hxparse_NoMatch)) {
									return this.unexpectedError("Unexpected pos content");
								} else {
									throw _g;
								}
							}
						}
						break;
					case 19:
						if(_g2._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 1) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var q = this.parseInteger();
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var r = this.parseInteger();
									if(this.peek(0)._hx_index == 7) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var s = this.parseInteger();
										if(this.peek(0)._hx_index == 7) {
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												if(q + r + s != 0) {
													this.syntaxError("q + r + s must be 0");
												}
												return bh_multianim_Coordinates.SELECTED_HEX_POSITION(new bh_base_Hex(q,r,s));
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							try {
								var x = this.parseIntegerOrReference();
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var y = this.parseIntegerOrReference();
									return bh_multianim_Coordinates.OFFSET(x,y);
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} catch( _g ) {
								if(((haxe_Exception.caught(_g).unwrap()) instanceof hxparse_NoMatch)) {
									return this.unexpectedError("Unexpected pos content");
								} else {
									throw _g;
								}
							}
						}
						break;
					case 28:
						if(_g2._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 1) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var _g = this.peek(0);
								if(_g._hx_index == 14) {
									var _g1 = _g.s;
									var _g3 = _g.keyword;
									switch(_g.identType._hx_index) {
									case 0:case 3:
										var layoutName = _g1;
										this.last = this.token.elt;
										this.token = this.token.next;
										switch(this.peek(0)._hx_index) {
										case 2:
											this.last = this.token.elt;
											this.token = this.token.next;
											this.postParsedActions.push(bh_multianim__$MultiAnimParser_PostParsedActions.PPAVerifyRelativeLayout(layoutName,this.stream.curPos()));
											return bh_multianim_Coordinates.LAYOUT(layoutName,null);
										case 7:
											this.last = this.token.elt;
											this.token = this.token.next;
											var index = this.parseIntegerOrReference();
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												this.postParsedActions.push(bh_multianim__$MultiAnimParser_PostParsedActions.PPAVerifyRelativeLayout(layoutName,this.stream.curPos()));
												return bh_multianim_Coordinates.LAYOUT(layoutName,index);
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										default:
											throw haxe_Exception.thrown(this.unexpectedError("Expected ) or , index)"));
										}
										break;
									default:
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							try {
								var x = this.parseIntegerOrReference();
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var y = this.parseIntegerOrReference();
									return bh_multianim_Coordinates.OFFSET(x,y);
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} catch( _g ) {
								if(((haxe_Exception.caught(_g).unwrap()) instanceof hxparse_NoMatch)) {
									return this.unexpectedError("Unexpected pos content");
								} else {
									throw _g;
								}
							}
						}
						break;
					case 45:
						if(_g2._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 1) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var dir = this.parseIntegerOrReference();
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var factor = this.parseFloatOrReference();
									if(this.peek(0)._hx_index == 2) {
										this.last = this.token.elt;
										this.token = this.token.next;
										return bh_multianim_Coordinates.SELECTED_HEX_EDGE(dir,factor);
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(this.unexpectedError("Expected (dir, scaleFactor)"));
							}
						} else {
							try {
								var x = this.parseIntegerOrReference();
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var y = this.parseIntegerOrReference();
									return bh_multianim_Coordinates.OFFSET(x,y);
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} catch( _g ) {
								if(((haxe_Exception.caught(_g).unwrap()) instanceof hxparse_NoMatch)) {
									return this.unexpectedError("Unexpected pos content");
								} else {
									throw _g;
								}
							}
						}
						break;
					case 46:
						if(_g2._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 1) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var dir = this.parseIntegerOrReference();
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var factor = this.parseFloatOrReference();
									if(this.peek(0)._hx_index == 2) {
										this.last = this.token.elt;
										this.token = this.token.next;
										return bh_multianim_Coordinates.SELECTED_HEX_CORNER(dir,factor);
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(this.unexpectedError("expected (direction, scaleFactor)"));
							}
						} else {
							try {
								var x = this.parseIntegerOrReference();
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var y = this.parseIntegerOrReference();
									return bh_multianim_Coordinates.OFFSET(x,y);
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} catch( _g ) {
								if(((haxe_Exception.caught(_g).unwrap()) instanceof hxparse_NoMatch)) {
									return this.unexpectedError("Unexpected pos content");
								} else {
									throw _g;
								}
							}
						}
						break;
					default:
						try {
							var x = this.parseIntegerOrReference();
							if(this.peek(0)._hx_index == 7) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var y = this.parseIntegerOrReference();
								return bh_multianim_Coordinates.OFFSET(x,y);
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} catch( _g ) {
							if(((haxe_Exception.caught(_g).unwrap()) instanceof hxparse_NoMatch)) {
								return this.unexpectedError("Unexpected pos content");
							} else {
								throw _g;
							}
						}
					}
				}
			} else {
				try {
					var x = this.parseIntegerOrReference();
					if(this.peek(0)._hx_index == 7) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var y = this.parseIntegerOrReference();
						return bh_multianim_Coordinates.OFFSET(x,y);
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} catch( _g ) {
					if(((haxe_Exception.caught(_g).unwrap()) instanceof hxparse_NoMatch)) {
						return this.unexpectedError("Unexpected pos content");
					} else {
						throw _g;
					}
				}
			}
		} catch( _g ) {
			var e = haxe_Exception.caught(_g);
			return this.syntaxError("Error parsing position: " + Std.string(e) + " -  should be x,y | hexCorner | hexEdge | grid | hex | layout(name, layout[, index])");
		}
	}
	,parseSize: function() {
		try {
			var w = this.parseInteger();
			if(this.peek(0)._hx_index == 7) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var h = this.parseInteger();
				return { width : w, height : h};
			} else {
				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof hxparse_NoMatch)) {
				return this.unexpectedError("expected int,int");
			} else {
				throw _g;
			}
		}
	}
	,parseFPoint: function() {
		try {
			var x = this.parseFloat();
			if(this.peek(0)._hx_index == 7) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var y = this.parseFloat();
				return new bh_base_FPoint(x,y);
			} else {
				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof hxparse_NoMatch)) {
				return this.syntaxError("expected float,float");
			} else {
				throw _g;
			}
		}
	}
	,parseOrientation: function() {
		var _g = this.peek(0);
		if(_g._hx_index == 14) {
			var _g1 = _g.s;
			var _g1 = _g.keyword;
			var _g2 = _g.identType;
			if(_g1 == null) {
				this.syntaxError("pointy or edge expected");
			} else {
				switch(_g1._hx_index) {
				case 43:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						return bh_base_HexOrientation.FLAT;
					} else {
						this.syntaxError("pointy or edge expected");
					}
					break;
				case 44:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						return bh_base_HexOrientation.POINTY;
					} else {
						this.syntaxError("pointy or edge expected");
					}
					break;
				default:
					this.syntaxError("pointy or edge expected");
				}
			}
		} else {
			this.syntaxError("pointy or edge expected");
		}
		return null;
	}
	,parseBool: function() {
		var _g = this.peek(0);
		switch(_g._hx_index) {
		case 13:
			var _g1 = _g.numberType;
			if(_g.s == "1") {
				this.last = this.token.elt;
				this.token = this.token.next;
				return true;
			} else {
				var _g1 = this.peek(0);
				switch(_g1._hx_index) {
				case 13:
					var _g2 = _g1.numberType;
					if(_g1.s == "0") {
						this.last = this.token.elt;
						this.token = this.token.next;
						return false;
					} else {
						return this.syntaxError("expected true/false, 0/1 or yes/no");
					}
					break;
				case 14:
					var _g2 = _g1.keyword;
					var _g2 = _g1.identType;
					switch(_g1.s) {
					case "false":case "no":
						if(_g2._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							return false;
						} else {
							return this.syntaxError("expected true/false, 0/1 or yes/no");
						}
						break;
					default:
						return this.syntaxError("expected true/false, 0/1 or yes/no");
					}
					break;
				default:
					return this.syntaxError("expected true/false, 0/1 or yes/no");
				}
			}
			break;
		case 14:
			var _g1 = _g.keyword;
			var _g1 = _g.identType;
			switch(_g.s) {
			case "true":case "yes":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return true;
				} else {
					var _g = this.peek(0);
					switch(_g._hx_index) {
					case 13:
						var _g1 = _g.numberType;
						if(_g.s == "0") {
							this.last = this.token.elt;
							this.token = this.token.next;
							return false;
						} else {
							return this.syntaxError("expected true/false, 0/1 or yes/no");
						}
						break;
					case 14:
						var _g1 = _g.keyword;
						var _g1 = _g.identType;
						switch(_g.s) {
						case "false":case "no":
							if(_g1._hx_index == 0) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return false;
							} else {
								return this.syntaxError("expected true/false, 0/1 or yes/no");
							}
							break;
						default:
							return this.syntaxError("expected true/false, 0/1 or yes/no");
						}
						break;
					default:
						return this.syntaxError("expected true/false, 0/1 or yes/no");
					}
				}
				break;
			default:
				var _g = this.peek(0);
				switch(_g._hx_index) {
				case 13:
					var _g1 = _g.numberType;
					if(_g.s == "0") {
						this.last = this.token.elt;
						this.token = this.token.next;
						return false;
					} else {
						return this.syntaxError("expected true/false, 0/1 or yes/no");
					}
					break;
				case 14:
					var _g1 = _g.keyword;
					var _g1 = _g.identType;
					switch(_g.s) {
					case "false":case "no":
						if(_g1._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							return false;
						} else {
							return this.syntaxError("expected true/false, 0/1 or yes/no");
						}
						break;
					default:
						return this.syntaxError("expected true/false, 0/1 or yes/no");
					}
					break;
				default:
					return this.syntaxError("expected true/false, 0/1 or yes/no");
				}
			}
			break;
		default:
			var _g = this.peek(0);
			switch(_g._hx_index) {
			case 13:
				var _g1 = _g.numberType;
				if(_g.s == "0") {
					this.last = this.token.elt;
					this.token = this.token.next;
					return false;
				} else {
					return this.syntaxError("expected true/false, 0/1 or yes/no");
				}
				break;
			case 14:
				var _g1 = _g.keyword;
				var _g1 = _g.identType;
				switch(_g.s) {
				case "false":case "no":
					if(_g1._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						return false;
					} else {
						return this.syntaxError("expected true/false, 0/1 or yes/no");
					}
					break;
				default:
					return this.syntaxError("expected true/false, 0/1 or yes/no");
				}
				break;
			default:
				return this.syntaxError("expected true/false, 0/1 or yes/no");
			}
		}
	}
	,parseDefines: function() {
		var defines = new haxe_ds_StringMap();
		if(this.peek(0)._hx_index == 2) {
			this.last = this.token.elt;
			this.token = this.token.next;
			return defines;
		}
		while(true) {
			var ppType = this.parseDefine();
			if(Object.prototype.hasOwnProperty.call(defines.h,ppType.name)) {
				this.syntaxError("parameter type " + ppType.name + " already defined");
			}
			defines.h[ppType.name] = ppType;
			switch(this.peek(0)._hx_index) {
			case 2:
				this.last = this.token.elt;
				this.token = this.token.next;
				return defines;
			case 7:
				this.last = this.token.elt;
				this.token = this.token.next;
				if(this.peek(0)._hx_index == 7) {
					this.last = this.token.elt;
					this.token = this.token.next;
					this.syntaxError("double comma");
				}
				break;
			default:
				this.unexpectedError();
			}
		}
	}
	,parseDefaultParameterValue: function(param) {
		var _gthis = this;
		if(this.peek(0)._hx_index == 23) {
			this.last = this.token.elt;
			this.token = this.token.next;
			switch(param.type._hx_index) {
			case 10:
				param.defaultValue = bh_multianim_ResolvedIndexParameters.Value(this.parseColor());
				break;
			case 11:
				param.defaultValue = bh_multianim_ResolvedIndexParameters.ArrayString(this.parseStringArray());
				break;
			default:
				var s;
				var _g = this.peek(0);
				switch(_g._hx_index) {
				case 13:
					var _g1 = _g.numberType;
					var str = _g.s;
					this.last = this.token.elt;
					this.token = this.token.next;
					s = str;
					break;
				case 14:
					var _g1 = _g.keyword;
					var _g1 = _g.identType;
					var str = _g.s;
					this.last = this.token.elt;
					this.token = this.token.next;
					s = str;
					break;
				default:
					if(this.peek(0)._hx_index == 22) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var _g = this.peek(0);
						if(_g._hx_index == 13) {
							var _g1 = _g.numberType;
							var str = _g.s;
							this.last = this.token.elt;
							this.token = this.token.next;
							s = "-" + str;
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
				}
				param.defaultValue = bh_multianim_MultiAnimParser.dynamicValueToIndex(param.name,param.type,s,function(s) {
					return _gthis.syntaxError(s);
				});
			}
		}
	}
	,parseDefine: function() {
		var parameter = { name : null, type : bh_multianim_DefinitionType.PPTHexDirecton, defaultValue : null};
		var _g = this.peek(0);
		switch(_g._hx_index) {
		case 10:
			this.last = this.token.elt;
			this.token = this.token.next;
			var _g1 = this.peek(0);
			if(_g1._hx_index == 14) {
				var _g2 = _g1.s;
				var _g3 = _g1.keyword;
				var _g4 = _g1.identType;
				if(_g3 == null) {
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				} else {
					switch(_g3._hx_index) {
					case 13:
						var hexDirection = _g2;
						this.last = this.token.elt;
						this.token = this.token.next;
						parameter.name = hexDirection;
						parameter.type = bh_multianim_DefinitionType.PPTHexDirecton;
						this.parseDefaultParameterValue(parameter);
						return parameter;
					case 14:
						var gridDirection = _g2;
						this.last = this.token.elt;
						this.token = this.token.next;
						parameter.name = gridDirection;
						parameter.type = bh_multianim_DefinitionType.PPTGridDirection;
						this.parseDefaultParameterValue(parameter);
						return parameter;
					default:
						throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
				}
			} else {
				throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
			break;
		case 14:
			var _g1 = _g.keyword;
			if(_g.identType._hx_index == 0) {
				var paramName = _g.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				switch(this.peek(0)._hx_index) {
				case 10:
					this.last = this.token.elt;
					this.token = this.token.next;
					break;
				case 23:
					this.last = this.token.elt;
					this.token = this.token.next;
					var _g = this.peek(0);
					if(_g._hx_index == 14) {
						var _g1 = _g.keyword;
						if(_g.identType._hx_index == 3) {
							var defaultString = _g.s;
							this.last = this.token.elt;
							this.token = this.token.next;
							parameter.name = paramName;
							parameter.type = bh_multianim_DefinitionType.PPTString;
							parameter.defaultValue = bh_multianim_ResolvedIndexParameters.StringValue(defaultString);
							return parameter;
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					break;
				default:
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
				parameter.name = paramName;
			} else {
				this.unexpectedError("Unknown parameter define - expected = \"string\" or :hexDirection or :gridDirection");
			}
			break;
		default:
			this.unexpectedError("Unknown parameter define - expected = \"string\" or :hexDirection or :gridDirection");
		}
		var _g = this.peek(0);
		switch(_g._hx_index) {
		case 3:
			this.last = this.token.elt;
			this.token = this.token.next;
			var enumNames = [];
			_hx_loop1: while(true) {
				var _g1 = this.peek(0);
				switch(_g1._hx_index) {
				case 13:
					var _g2 = _g1.numberType;
					var e = _g1.s;
					this.last = this.token.elt;
					this.token = this.token.next;
					if(enumNames.indexOf(e) != -1) {
						this.syntaxError("{e} already defined in enum");
					}
					enumNames.push(e);
					break;
				case 14:
					var _g3 = _g1.s;
					var _g4 = _g1.keyword;
					switch(_g1.identType._hx_index) {
					case 0:case 3:
						var e1 = _g3;
						this.last = this.token.elt;
						this.token = this.token.next;
						if(enumNames.indexOf(e1) != -1) {
							this.syntaxError("{e} already defined in enum");
						}
						enumNames.push(e1);
						break;
					default:
						switch(this.peek(0)._hx_index) {
						case 4:
							this.last = this.token.elt;
							this.token = this.token.next;
							parameter.type = bh_multianim_DefinitionType.PPTEnum(enumNames);
							break _hx_loop1;
						case 7:
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 7) {
								this.last = this.token.elt;
								this.token = this.token.next;
								this.syntaxError("double comma");
							}
							break;
						default:
							throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
						}
					}
					break;
				default:
					switch(this.peek(0)._hx_index) {
					case 4:
						this.last = this.token.elt;
						this.token = this.token.next;
						parameter.type = bh_multianim_DefinitionType.PPTEnum(enumNames);
						break _hx_loop1;
					case 7:
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 7) {
							this.last = this.token.elt;
							this.token = this.token.next;
							this.syntaxError("double comma");
						}
						break;
					default:
						throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
				}
			}
			break;
		case 13:
			if(_g.numberType._hx_index == 0) {
				var from = _g.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				if(this.peek(0)._hx_index == 11) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var _g1 = this.peek(0);
					if(_g1._hx_index == 13) {
						if(_g1.numberType._hx_index == 0) {
							var to = _g1.s;
							this.last = this.token.elt;
							this.token = this.token.next;
							parameter.type = bh_multianim_DefinitionType.PPTRange(this.stringToInt(from),this.stringToInt(to));
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
			break;
		case 14:
			var _g1 = _g.s;
			var _g1 = _g.keyword;
			var _g2 = _g.identType;
			if(_g1 == null) {
				throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			} else {
				switch(_g1._hx_index) {
				case 13:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						parameter.type = bh_multianim_DefinitionType.PPTHexDirecton;
					} else {
						throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
					break;
				case 56:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var bits = this.parseInteger();
							if(this.peek(0)._hx_index == 2) {
								this.last = this.token.elt;
								this.token = this.token.next;
								parameter.type = bh_multianim_DefinitionType.PPTFlags(bits);
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
					break;
				case 67:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						parameter.type = bh_multianim_DefinitionType.PPTInt;
					} else {
						throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
					break;
				case 68:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						parameter.type = bh_multianim_DefinitionType.PPTFloat;
					} else {
						throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
					break;
				case 69:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						parameter.type = bh_multianim_DefinitionType.PPTColor;
					} else {
						throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
					break;
				case 70:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						parameter.type = bh_multianim_DefinitionType.PPTUnsignedInt;
					} else {
						throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
					break;
				case 71:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						parameter.type = bh_multianim_DefinitionType.PPTBool;
					} else {
						throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
					break;
				case 80:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						parameter.type = bh_multianim_DefinitionType.PPTArray;
					} else {
						throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
					break;
				default:
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
			}
			break;
		default:
			throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
		this.parseDefaultParameterValue(parameter);
		return parameter;
	}
	,parseReferenceParameters: function(defined) {
		var _gthis = this;
		var error = function(s) {
			return _gthis.syntaxError(s);
		};
		var parameterValues = new haxe_ds_StringMap();
		while(true) {
			var _g = this.peek(0);
			if(_g._hx_index == 14) {
				var _g1 = _g.s;
				var _g2 = _g.keyword;
				switch(_g.identType._hx_index) {
				case 0:case 3:
					var name = _g1;
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 17) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var paramDefinitions = defined.h[name];
						if(paramDefinitions == null) {
							this.syntaxError("param " + name + " does not have definition in " + (defined == null ? "null" : haxe_ds_StringMap.stringify(defined.h)));
						}
						if(Object.prototype.hasOwnProperty.call(parameterValues.h,name)) {
							this.syntaxError("param " + name + " already defined");
						}
						var _g3 = this.peek(0);
						if(_g3._hx_index == 14) {
							var _g4 = _g3.s;
							var _g5 = _g3.keyword;
							var _g6 = _g3.identType;
							if(_g5 == null) {
								var type = paramDefinitions.type;
								var value;
								switch(type._hx_index) {
								case 0:
									value = this.parseIntegerOrReference();
									break;
								case 1:
									value = this.parseIntegerOrReference();
									break;
								case 2:
									var bits = type.bits;
									value = this.parseIntegerOrReference();
									break;
								case 3:
									var values = type.values;
									value = this.parseStringOrReference();
									break;
								case 4:
									var from = type.from;
									var to = type.to;
									value = this.parseIntegerOrReference();
									break;
								case 5:
									value = this.parseIntegerOrReference();
									break;
								case 6:
									value = this.parseFloatOrReference();
									break;
								case 7:
									value = this.parseStringOrReference();
									break;
								case 8:
									value = this.parseIntegerOrReference();
									break;
								case 9:
									value = this.parseStringOrReference();
									break;
								case 10:
									value = this.parseColorOrReference();
									break;
								case 11:
									value = bh_multianim_ReferencableValue.RVArray(this.parseArrayOrReference());
									break;
								}
								parameterValues.h[name] = value;
							} else if(_g5._hx_index == 1) {
								if(_g6._hx_index == 0) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var bitValue = 0;
									while(true) {
										var _g7 = this.peek(0);
										if(_g7._hx_index == 13) {
											if(_g7.numberType._hx_index == 0) {
												var value1 = _g7.s;
												this.last = this.token.elt;
												this.token = this.token.next;
												var bitNumber = this.stringToInt(value1);
												bitValue |= 1 << bitNumber;
											} else {
												throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
											}
										} else {
											throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
										}
										if(this.peek(0)._hx_index == 7) {
											this.last = this.token.elt;
											this.token = this.token.next;
										} else {
											break;
										}
									}
									parameterValues.h[name] = bh_multianim_ReferencableValue.RVInteger(bitValue);
								} else {
									var type1 = paramDefinitions.type;
									var value2;
									switch(type1._hx_index) {
									case 0:
										value2 = this.parseIntegerOrReference();
										break;
									case 1:
										value2 = this.parseIntegerOrReference();
										break;
									case 2:
										var bits1 = type1.bits;
										value2 = this.parseIntegerOrReference();
										break;
									case 3:
										var values1 = type1.values;
										value2 = this.parseStringOrReference();
										break;
									case 4:
										var from1 = type1.from;
										var to1 = type1.to;
										value2 = this.parseIntegerOrReference();
										break;
									case 5:
										value2 = this.parseIntegerOrReference();
										break;
									case 6:
										value2 = this.parseFloatOrReference();
										break;
									case 7:
										value2 = this.parseStringOrReference();
										break;
									case 8:
										value2 = this.parseIntegerOrReference();
										break;
									case 9:
										value2 = this.parseStringOrReference();
										break;
									case 10:
										value2 = this.parseColorOrReference();
										break;
									case 11:
										value2 = bh_multianim_ReferencableValue.RVArray(this.parseArrayOrReference());
										break;
									}
									parameterValues.h[name] = value2;
								}
							} else {
								var type2 = paramDefinitions.type;
								var value3;
								switch(type2._hx_index) {
								case 0:
									value3 = this.parseIntegerOrReference();
									break;
								case 1:
									value3 = this.parseIntegerOrReference();
									break;
								case 2:
									var bits2 = type2.bits;
									value3 = this.parseIntegerOrReference();
									break;
								case 3:
									var values2 = type2.values;
									value3 = this.parseStringOrReference();
									break;
								case 4:
									var from2 = type2.from;
									var to2 = type2.to;
									value3 = this.parseIntegerOrReference();
									break;
								case 5:
									value3 = this.parseIntegerOrReference();
									break;
								case 6:
									value3 = this.parseFloatOrReference();
									break;
								case 7:
									value3 = this.parseStringOrReference();
									break;
								case 8:
									value3 = this.parseIntegerOrReference();
									break;
								case 9:
									value3 = this.parseStringOrReference();
									break;
								case 10:
									value3 = this.parseColorOrReference();
									break;
								case 11:
									value3 = bh_multianim_ReferencableValue.RVArray(this.parseArrayOrReference());
									break;
								}
								parameterValues.h[name] = value3;
							}
						} else {
							var type3 = paramDefinitions.type;
							var value4;
							switch(type3._hx_index) {
							case 0:
								value4 = this.parseIntegerOrReference();
								break;
							case 1:
								value4 = this.parseIntegerOrReference();
								break;
							case 2:
								var bits3 = type3.bits;
								value4 = this.parseIntegerOrReference();
								break;
							case 3:
								var values3 = type3.values;
								value4 = this.parseStringOrReference();
								break;
							case 4:
								var from3 = type3.from;
								var to3 = type3.to;
								value4 = this.parseIntegerOrReference();
								break;
							case 5:
								value4 = this.parseIntegerOrReference();
								break;
							case 6:
								value4 = this.parseFloatOrReference();
								break;
							case 7:
								value4 = this.parseStringOrReference();
								break;
							case 8:
								value4 = this.parseIntegerOrReference();
								break;
							case 9:
								value4 = this.parseStringOrReference();
								break;
							case 10:
								value4 = this.parseColorOrReference();
								break;
							case 11:
								value4 = bh_multianim_ReferencableValue.RVArray(this.parseArrayOrReference());
								break;
							}
							parameterValues.h[name] = value4;
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					break;
				default:
					this.unexpectedError("expected parameters");
				}
			} else {
				this.unexpectedError("expected parameters");
			}
			switch(this.peek(0)._hx_index) {
			case 2:
				this.last = this.token.elt;
				this.token = this.token.next;
				return parameterValues;
			case 7:
				this.last = this.token.elt;
				this.token = this.token.next;
				break;
			default:
				this.unexpectedError("Expected ) or ,");
			}
		}
	}
	,parseConditionalParameters: function(defined,strict) {
		var _gthis = this;
		var parameterValues = new haxe_ds_StringMap();
		var validateIntTypes = function(name,type,value) {
			switch(type._hx_index) {
			case 0:
				var i = bh_multianim_MultiAnimParser.dynamicToInt(value,function(s) {
					return _gthis.syntaxError(s);
				});
				if(i < 0 || i > 5) {
					_gthis.syntaxError("conditional " + name + ": hexdirection must be 0...5, was " + Std.string(value));
				}
				break;
			case 1:
				var i = bh_multianim_MultiAnimParser.dynamicToInt(value,function(s) {
					return _gthis.syntaxError(s);
				});
				if(i < 0 || i > 3) {
					_gthis.syntaxError("conditional " + name + ": gridDrection must be 0...3, was " + Std.string(value));
				}
				break;
			case 2:
				var bits = type.bits;
				break;
			case 3:
				var values = type.values;
				break;
			case 4:
				var from = type.from;
				var to = type.to;
				var i = bh_multianim_MultiAnimParser.dynamicToInt(value,function(s) {
					return _gthis.syntaxError(s);
				});
				if(i < from || i > to) {
					_gthis.syntaxError("conditional " + name + ": range must be " + from + ".." + to + ", was " + Std.string(value));
				}
				break;
			case 5:
				break;
			case 6:
				break;
			case 7:
				break;
			case 8:
				break;
			case 9:
				break;
			case 10:
				_gthis.syntaxError("conditional " + name + ": type " + Std.string(type) + " does not support enum conditional");
				break;
			case 11:
				_gthis.syntaxError("conditional " + name + ": type " + Std.string(type) + " does not support array conditional");
				break;
			}
		};
		_hx_loop1: while(true) {
			var _g = this.peek(0);
			if(_g._hx_index == 14) {
				var _g1 = _g.s;
				var _g2 = _g.keyword;
				switch(_g.identType._hx_index) {
				case 0:case 3:
					var name = _g1;
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 17) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var negate;
						if(this.peek(0)._hx_index == 9) {
							this.last = this.token.elt;
							this.token = this.token.next;
							negate = true;
						} else {
							negate = false;
						}
						var paramDefinitions = defined.h[name];
						if(paramDefinitions == null) {
							this.syntaxError("conditional parameter " + name + " does not have definition in " + (defined == null ? "null" : haxe_ds_StringMap.stringify(defined.h)));
						}
						if(Object.prototype.hasOwnProperty.call(parameterValues.h,name)) {
							this.syntaxError("conditional parameter " + name + " already defined");
						}
						var type = paramDefinitions.type;
						var value;
						var _g3 = this.peek(0);
						switch(_g3._hx_index) {
						case 3:
							this.last = this.token.elt;
							this.token = this.token.next;
							var values = [];
							while(true) {
								if(this.peek(0)._hx_index == 4) {
									this.last = this.token.elt;
									this.token = this.token.next;
									break;
								} else {
									var _g4 = this.peek(0);
									switch(_g4._hx_index) {
									case 13:
										if(_g4.numberType._hx_index == 0) {
											var value1 = _g4.s;
											this.last = this.token.elt;
											this.token = this.token.next;
											values.push(value1);
										} else if(this.peek(0)._hx_index == 22) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var _g5 = this.peek(0);
											if(_g5._hx_index == 13) {
												if(_g5.numberType._hx_index == 0) {
													var value2 = _g5.s;
													this.last = this.token.elt;
													this.token = this.token.next;
													values.push("-" + value2);
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
										}
										break;
									case 14:
										var _g6 = _g4.s;
										var _g7 = _g4.keyword;
										switch(_g4.identType._hx_index) {
										case 0:case 3:
											var value3 = _g6;
											this.last = this.token.elt;
											this.token = this.token.next;
											values.push(value3);
											break;
										default:
											if(this.peek(0)._hx_index == 22) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var _g8 = this.peek(0);
												if(_g8._hx_index == 13) {
													if(_g8.numberType._hx_index == 0) {
														var value4 = _g8.s;
														this.last = this.token.elt;
														this.token = this.token.next;
														values.push("-" + value4);
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
											}
										}
										break;
									default:
										if(this.peek(0)._hx_index == 22) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var _g9 = this.peek(0);
											if(_g9._hx_index == 13) {
												if(_g9.numberType._hx_index == 0) {
													var value5 = _g9.s;
													this.last = this.token.elt;
													this.token = this.token.next;
													values.push("-" + value5);
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
										}
									}
								}
								this.eatComma();
							}
							var _g10 = 0;
							while(_g10 < values.length) {
								var s = values[_g10];
								++_g10;
								validateIntTypes(name,type,s);
							}
							if(type._hx_index == 3) {
								var defValues = type.values;
								var _g11 = 0;
								while(_g11 < values.length) {
									var s1 = values[_g11];
									++_g11;
									if(defValues.indexOf(s1) == -1) {
										this.syntaxError("conditional " + name + ": enum value " + s1 + " not in " + Std.string(defValues));
									}
								}
							}
							value = bh_multianim_ConditionalValues.CoEnums(values);
							break;
						case 13:
							var _g12 = _g3.s;
							switch(_g3.numberType._hx_index) {
							case 0:case 1:
								var value6 = _g12;
								this.last = this.token.elt;
								this.token = this.token.next;
								value = bh_multianim_MultiAnimParser.dynamicToConditionalParam(value6,type);
								break;
							case 2:
								var value7 = _g12;
								this.last = this.token.elt;
								this.token = this.token.next;
								value = bh_multianim_MultiAnimParser.dynamicToConditionalParam("0x" + value7,type);
								break;
							}
							break;
						case 14:
							var _g13 = _g3.s;
							var _g14 = _g3.keyword;
							var _g15 = _g3.identType;
							if(_g14 == null) {
								switch(_g13) {
								case "between":
									switch(_g15._hx_index) {
									case 0:
										this.last = this.token.elt;
										this.token = this.token.next;
										var val1 = this.parseInteger();
										if(this.peek(0)._hx_index == 11) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var val2 = this.parseInteger();
											validateIntTypes(name,type,val1);
											validateIntTypes(name,type,val2);
											value = bh_multianim_ConditionalValues.CoRange(val1,val2);
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var value8 = _g13;
										this.last = this.token.elt;
										this.token = this.token.next;
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam("#" + value8,type);
										break;
									case 3:
										var value9 = _g13;
										this.last = this.token.elt;
										this.token = this.token.next;
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam(value9,type);
										break;
									default:
										throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
									}
									break;
								case "greaterThan":
									switch(_g15._hx_index) {
									case 0:
										this.last = this.token.elt;
										this.token = this.token.next;
										var val = this.parseInteger();
										validateIntTypes(name,type,val);
										value = bh_multianim_ConditionalValues.CoRange(val,null);
										break;
									case 2:
										var value10 = _g13;
										this.last = this.token.elt;
										this.token = this.token.next;
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam("#" + value10,type);
										break;
									case 3:
										var value11 = _g13;
										this.last = this.token.elt;
										this.token = this.token.next;
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam(value11,type);
										break;
									default:
										throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
									}
									break;
								case "lessThan":
									switch(_g15._hx_index) {
									case 0:
										this.last = this.token.elt;
										this.token = this.token.next;
										var val3 = this.parseInteger();
										validateIntTypes(name,type,val3);
										value = bh_multianim_ConditionalValues.CoRange(null,val3);
										break;
									case 2:
										var value12 = _g13;
										this.last = this.token.elt;
										this.token = this.token.next;
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam("#" + value12,type);
										break;
									case 3:
										var value13 = _g13;
										this.last = this.token.elt;
										this.token = this.token.next;
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam(value13,type);
										break;
									default:
										throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
									}
									break;
								default:
									switch(_g15._hx_index) {
									case 2:
										var value14 = _g13;
										this.last = this.token.elt;
										this.token = this.token.next;
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam("#" + value14,type);
										break;
									case 0:case 3:
										var value15 = _g13;
										this.last = this.token.elt;
										this.token = this.token.next;
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam(value15,type);
										break;
									default:
										throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
									}
								}
							} else if(_g14._hx_index == 1) {
								switch(_g15._hx_index) {
								case 0:
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 3) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var bitValue = 0;
										while(true) {
											var _g16 = this.peek(0);
											if(_g16._hx_index == 13) {
												if(_g16.numberType._hx_index == 0) {
													var value16 = _g16.s;
													this.last = this.token.elt;
													this.token = this.token.next;
													var bitNumber = this.stringToInt(value16);
													bitValue |= 1 << bitNumber;
												} else {
													throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
											}
											this.eatComma();
											if(this.peek(0)._hx_index == 4) {
												this.last = this.token.elt;
												this.token = this.token.next;
												break;
											}
										}
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam(bitValue,type);
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								case 2:
									var value17 = _g13;
									this.last = this.token.elt;
									this.token = this.token.next;
									value = bh_multianim_MultiAnimParser.dynamicToConditionalParam("#" + value17,type);
									break;
								case 3:
									var value18 = _g13;
									this.last = this.token.elt;
									this.token = this.token.next;
									value = bh_multianim_MultiAnimParser.dynamicToConditionalParam(value18,type);
									break;
								default:
									throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
								}
							} else {
								switch(_g13) {
								case "between":
									switch(_g15._hx_index) {
									case 0:
										this.last = this.token.elt;
										this.token = this.token.next;
										var val11 = this.parseInteger();
										if(this.peek(0)._hx_index == 11) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var val21 = this.parseInteger();
											validateIntTypes(name,type,val11);
											validateIntTypes(name,type,val21);
											value = bh_multianim_ConditionalValues.CoRange(val11,val21);
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var value19 = _g13;
										this.last = this.token.elt;
										this.token = this.token.next;
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam("#" + value19,type);
										break;
									case 3:
										var value20 = _g13;
										this.last = this.token.elt;
										this.token = this.token.next;
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam(value20,type);
										break;
									default:
										throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
									}
									break;
								case "greaterThan":
									switch(_g15._hx_index) {
									case 0:
										this.last = this.token.elt;
										this.token = this.token.next;
										var val4 = this.parseInteger();
										validateIntTypes(name,type,val4);
										value = bh_multianim_ConditionalValues.CoRange(val4,null);
										break;
									case 2:
										var value21 = _g13;
										this.last = this.token.elt;
										this.token = this.token.next;
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam("#" + value21,type);
										break;
									case 3:
										var value22 = _g13;
										this.last = this.token.elt;
										this.token = this.token.next;
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam(value22,type);
										break;
									default:
										throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
									}
									break;
								case "lessThan":
									switch(_g15._hx_index) {
									case 0:
										this.last = this.token.elt;
										this.token = this.token.next;
										var val5 = this.parseInteger();
										validateIntTypes(name,type,val5);
										value = bh_multianim_ConditionalValues.CoRange(null,val5);
										break;
									case 2:
										var value23 = _g13;
										this.last = this.token.elt;
										this.token = this.token.next;
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam("#" + value23,type);
										break;
									case 3:
										var value24 = _g13;
										this.last = this.token.elt;
										this.token = this.token.next;
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam(value24,type);
										break;
									default:
										throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
									}
									break;
								default:
									switch(_g15._hx_index) {
									case 2:
										var value25 = _g13;
										this.last = this.token.elt;
										this.token = this.token.next;
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam("#" + value25,type);
										break;
									case 0:case 3:
										var value26 = _g13;
										this.last = this.token.elt;
										this.token = this.token.next;
										value = bh_multianim_MultiAnimParser.dynamicToConditionalParam(value26,type);
										break;
									default:
										throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
									}
								}
							}
							break;
						case 18:
							this.last = this.token.elt;
							this.token = this.token.next;
							value = bh_multianim_ConditionalValues.CoAny;
							break;
						case 22:
							this.last = this.token.elt;
							this.token = this.token.next;
							var _g17 = this.peek(0);
							if(_g17._hx_index == 13) {
								var _g18 = _g17.numberType;
								var value27 = _g17.s;
								this.last = this.token.elt;
								this.token = this.token.next;
								value = bh_multianim_MultiAnimParser.dynamicToConditionalParam("-" + value27,type);
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
							break;
						default:
							throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
						}
						if(negate) {
							value = bh_multianim_ConditionalValues.CoNot(value);
						}
						parameterValues.h[name] = value;
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					break;
				default:
					this.unexpectedError("expected parameters");
				}
			} else {
				this.unexpectedError("expected parameters");
			}
			switch(this.peek(0)._hx_index) {
			case 2:
				this.last = this.token.elt;
				this.token = this.token.next;
				break _hx_loop1;
			case 7:
				this.last = this.token.elt;
				this.token = this.token.next;
				break;
			default:
				this.unexpectedError("Expected ) or ,");
			}
		}
		if(strict) {
			var h = defined.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var name = _g_key;
				var value = _g_value;
				if(!Object.prototype.hasOwnProperty.call(parameterValues.h,name) && value.defaultValue == null) {
					this.syntaxError("conditional parameter " + name + " without default value has not been specified in strict @conditional");
				}
			}
		}
		return parameterValues;
	}
	,parseStateAnimConstruct: function() {
		var stateAnimConstruct = new haxe_ds_StringMap();
		while(true) {
			var _g = this.peek(0);
			switch(_g._hx_index) {
			case 2:
				this.last = this.token.elt;
				this.token = this.token.next;
				return stateAnimConstruct;
			case 12:
				this.last = this.token.elt;
				this.token = this.token.next;
				break;
			case 14:
				var _g1 = _g.s;
				var _g2 = _g.keyword;
				switch(_g.identType._hx_index) {
				case 0:case 3:
					var stateName = _g1;
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 17) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var _g3 = this.peek(0);
						if(_g3._hx_index == 14) {
							var _g4 = _g3.s;
							var _g5 = _g3.keyword;
							if(_g5 == null) {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							} else if(_g5._hx_index == 38) {
								if(_g3.identType._hx_index == 0) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var _g6 = this.peek(0);
									if(_g6._hx_index == 14) {
										var _g7 = _g6.s;
										var _g8 = _g6.keyword;
										switch(_g6.identType._hx_index) {
										case 0:case 3:
											var sheet = _g7;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 7) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var name = this.parseStringOrReference();
												if(this.peek(0)._hx_index == 7) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var fps = this.parseIntegerOrReference();
													this.eatComma();
													var loop = false;
													var center = false;
													_hx_loop2: while(true) {
														var _g9 = this.peek(0);
														if(_g9._hx_index == 14) {
															var _g10 = _g9.s;
															var _g11 = _g9.keyword;
															var _g12 = _g9.identType;
															if(_g11 == null) {
																break;
															} else {
																switch(_g11._hx_index) {
																case 7:
																	if(_g12._hx_index == 0) {
																		this.last = this.token.elt;
																		this.token = this.token.next;
																		center = true;
																	} else {
																		break _hx_loop2;
																	}
																	break;
																case 39:
																	if(_g12._hx_index == 0) {
																		this.last = this.token.elt;
																		this.token = this.token.next;
																		loop = true;
																	} else {
																		break _hx_loop2;
																	}
																	break;
																default:
																	break _hx_loop2;
																}
															}
														} else {
															break;
														}
														this.eatComma();
													}
													if(Object.prototype.hasOwnProperty.call(stateAnimConstruct.h,stateName)) {
														this.syntaxError("duplicate state name " + stateName);
													}
													stateAnimConstruct.h[stateName] = bh_multianim_StateAnimConstruct.IndexedSheet(sheet,name,fps,loop,center);
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										default:
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					break;
				default:
					this.syntaxError("expected stateName => sheet \"sheetName\", \"anim\", fpsInt");
				}
				break;
			default:
				this.syntaxError("expected stateName => sheet \"sheetName\", \"anim\", fpsInt");
			}
		}
	}
	,parseShapes: function() {
		var shapes = [];
		while(true) {
			var _g = this.peek(0);
			switch(_g._hx_index) {
			case 2:
				this.last = this.token.elt;
				this.token = this.token.next;
				return shapes;
			case 12:
				this.last = this.token.elt;
				this.token = this.token.next;
				break;
			case 14:
				var _g1 = _g.s;
				var _g2 = _g.keyword;
				var _g3 = _g.identType;
				if(_g2 == null) {
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				} else {
					switch(_g2._hx_index) {
					case 47:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var start = this.parseXY();
							if(this.peek(0)._hx_index == 7) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var end = this.parseXY();
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var color = this.parseColorOrReference();
									shapes.push(bh_multianim_PixelShapes.LINE({ start : start, end : end, color : color}));
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
						}
						break;
					case 54:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var start1 = this.parseXY();
							if(this.peek(0)._hx_index == 7) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var width = this.parseIntegerOrReference();
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var height = this.parseIntegerOrReference();
									if(this.peek(0)._hx_index == 7) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var color1 = this.parseColorOrReference();
										shapes.push(bh_multianim_PixelShapes.RECT({ start : start1, width : width, height : height, color : color1}));
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
						}
						break;
					case 55:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var start2 = this.parseXY();
							if(this.peek(0)._hx_index == 7) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var width1 = this.parseIntegerOrReference();
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var height1 = this.parseIntegerOrReference();
									if(this.peek(0)._hx_index == 7) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var color2 = this.parseColorOrReference();
										shapes.push(bh_multianim_PixelShapes.FILLED_RECT({ start : start2, width : width1, height : height1, color : color2}));
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
						}
						break;
					default:
						throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
				}
				break;
			default:
				throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		}
	}
	,parseFlowOrientation: function() {
		var _g = this.peek(0);
		if(_g._hx_index == 14) {
			var _g1 = _g.keyword;
			var _g1 = _g.identType;
			switch(_g.s) {
			case "horizontal":
				switch(_g1._hx_index) {
				case 0:case 3:
					this.last = this.token.elt;
					this.token = this.token.next;
					return h2d_FlowLayout.Horizontal;
				default:
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
				break;
			case "stack":
				switch(_g1._hx_index) {
				case 0:case 3:
					this.last = this.token.elt;
					this.token = this.token.next;
					return h2d_FlowLayout.Stack;
				default:
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
				break;
			case "vertical":
				switch(_g1._hx_index) {
				case 0:case 3:
					this.last = this.token.elt;
					this.token = this.token.next;
					return h2d_FlowLayout.Vertical;
				default:
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
				break;
			default:
				throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} else {
			throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parseHAlign: function() {
		var _g = this.peek(0);
		if(_g._hx_index == 14) {
			var _g1 = _g.s;
			var _g1 = _g.keyword;
			var _g2 = _g.identType;
			if(_g1 == null) {
				return null;
			} else {
				switch(_g1._hx_index) {
				case 7:
					switch(_g2._hx_index) {
					case 0:case 3:
						this.last = this.token.elt;
						this.token = this.token.next;
						return bh_multianim_HorizontalAlign.Center;
					default:
						return null;
					}
					break;
				case 8:
					switch(_g2._hx_index) {
					case 0:case 3:
						this.last = this.token.elt;
						this.token = this.token.next;
						return bh_multianim_HorizontalAlign.Left;
					default:
						return null;
					}
					break;
				case 9:
					switch(_g2._hx_index) {
					case 0:case 3:
						this.last = this.token.elt;
						this.token = this.token.next;
						return bh_multianim_HorizontalAlign.Right;
					default:
						return null;
					}
					break;
				default:
					return null;
				}
			}
		} else {
			return null;
		}
	}
	,parseVAlign: function() {
		var _g = this.peek(0);
		if(_g._hx_index == 14) {
			var _g1 = _g.s;
			var _g1 = _g.keyword;
			var _g2 = _g.identType;
			if(_g1 == null) {
				return null;
			} else {
				switch(_g1._hx_index) {
				case 7:
					switch(_g2._hx_index) {
					case 0:case 3:
						this.last = this.token.elt;
						this.token = this.token.next;
						return bh_multianim_VerticalAlign.Center;
					default:
						return null;
					}
					break;
				case 10:
					switch(_g2._hx_index) {
					case 0:case 3:
						this.last = this.token.elt;
						this.token = this.token.next;
						return bh_multianim_VerticalAlign.Top;
					default:
						return null;
					}
					break;
				case 11:
					switch(_g2._hx_index) {
					case 0:case 3:
						this.last = this.token.elt;
						this.token = this.token.next;
						return bh_multianim_VerticalAlign.Bottom;
					default:
						return null;
					}
					break;
				default:
					return null;
				}
			}
		} else {
			return null;
		}
	}
	,generateUniqueName: function(uniqueId,name,type) {
		return "" + type + "/" + (name != null ? name : "") + "/" + uniqueId;
	}
	,parseTileSources: function() {
		var retVal = [];
		while(true) {
			var tile = this.tryParseTileSource();
			if(tile == null) {
				if(retVal.length == 0) {
					this.syntaxError("expected at least one tile source");
				}
				return retVal;
			} else {
				retVal.push(tile);
			}
		}
	}
	,tryParseTileSource: function() {
		var _g = this.peek(0);
		if(_g._hx_index == 14) {
			var _g1 = _g.s;
			var _g1 = _g.keyword;
			var _g2 = _g.identType;
			if(_g1 == null) {
				return null;
			} else {
				switch(_g1._hx_index) {
				case 37:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var filename = this.parseStringOrReference();
							if(this.peek(0)._hx_index == 2) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return bh_multianim_TileSource.TSFile(filename);
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						return null;
					}
					break;
				case 38:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var _g = this.peek(0);
							if(_g._hx_index == 14) {
								var _g1 = _g.s;
								var _g3 = _g.keyword;
								switch(_g.identType._hx_index) {
								case 0:case 3:
									var sheet = _g1;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 7) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var name = this.parseStringOrReference();
										switch(this.peek(0)._hx_index) {
										case 2:
											this.last = this.token.elt;
											this.token = this.token.next;
											return bh_multianim_TileSource.TSSheet(sheet,name);
										case 7:
											this.last = this.token.elt;
											this.token = this.token.next;
											var index = this.parseIntegerOrReference();
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												return bh_multianim_TileSource.TSSheetWithIndex(sheet,name,index);
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										default:
											throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								default:
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						return null;
					}
					break;
				case 40:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var _g = this.peek(0);
							if(_g._hx_index == 14) {
								var _g1 = _g.keyword;
								var _g1 = _g.identType;
								switch(_g.s) {
								case "color":
									if(_g1._hx_index == 0) {
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var width = this.parseIntegerOrReference();
											if(this.peek(0)._hx_index == 7) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var height = this.parseIntegerOrReference();
												var color;
												switch(this.peek(0)._hx_index) {
												case 2:
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														color = bh_multianim_ReferencableValue.RVInteger(-1);
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 7:
													this.last = this.token.elt;
													this.token = this.token.next;
													var color1 = this.parseColorOrReference();
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															color = color1;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												default:
													throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
												}
												return bh_multianim_TileSource.TSGenerated(bh_multianim_GeneratedTileType.SolidColor(width,height,color));
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										return this.unexpectedError("expected cross(width, height[, color] or color(width, height[, color]");
									}
									break;
								case "cross":
									if(_g1._hx_index == 0) {
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var width = this.parseIntegerOrReference();
											if(this.peek(0)._hx_index == 7) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var height = this.parseIntegerOrReference();
												var color;
												switch(this.peek(0)._hx_index) {
												case 2:
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														color = bh_multianim_ReferencableValue.RVInteger(-1);
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 7:
													this.last = this.token.elt;
													this.token = this.token.next;
													var color1 = this.parseColorOrReference();
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															color = null;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												default:
													throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
												}
												return bh_multianim_TileSource.TSGenerated(bh_multianim_GeneratedTileType.Cross(width,height,color));
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										return this.unexpectedError("expected cross(width, height[, color] or color(width, height[, color]");
									}
									break;
								default:
									return this.unexpectedError("expected cross(width, height[, color] or color(width, height[, color]");
								}
							} else {
								return this.unexpectedError("expected cross(width, height[, color] or color(width, height[, color]");
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						return null;
					}
					break;
				default:
					return null;
				}
			}
		} else {
			return null;
		}
	}
	,parseTileSource: function() {
		var ts = this.tryParseTileSource();
		if(ts == null) {
			this.unexpectedError("expected sheet(sheet, name), file(filename) or generated(cross(width, height[, color]) | color(width, height[, color])");
		}
		return ts;
	}
	,parseNode: function(updatableNameType,parent,inheritedDefinitions,uniqueId) {
		var _gthis = this;
		var currentDefinitions = inheritedDefinitions;
		var allowChildren = true;
		var onceInline = this.createOnceParser();
		var layerIndex = -1;
		var alpha = null;
		var scale = null;
		var conditional = bh_multianim_NodeConditionalValues.NoConditional;
		if(this.peek(0)._hx_index == 8) {
			this.last = this.token.elt;
			this.token = this.token.next;
			var atLestOneInline = 0;
			_hx_loop1: while(true) {
				var _g = this.peek(0);
				switch(_g._hx_index) {
				case 1:
					this.last = this.token.elt;
					this.token = this.token.next;
					var strict = false;
					onceInline.parsed("conditional");
					conditional = bh_multianim_NodeConditionalValues.Conditional(this.parseConditionalParameters(currentDefinitions,strict),strict);
					break;
				case 14:
					var _g1 = _g.s;
					var _g2 = _g.keyword;
					var _g3 = _g.identType;
					if(_g2 == null) {
						break _hx_loop1;
					} else {
						switch(_g2._hx_index) {
						case 31:
							if(_g3._hx_index == 0) {
								var s = _g1;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 1) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var i = this.parseInteger();
									if(this.peek(0)._hx_index == 2) {
										this.last = this.token.elt;
										this.token = this.token.next;
										onceInline.parsed(s);
										layerIndex = i;
										var layersAllowed;
										if(parent != null) {
											var _g4 = parent.type;
											switch(_g4._hx_index) {
											case 7:
												var _g5 = _g4.isTileGroup;
												var _g6 = _g4.parameters;
												layersAllowed = true;
												break;
											case 14:
												layersAllowed = true;
												break;
											default:
												layersAllowed = false;
											}
										} else {
											layersAllowed = false;
										}
										if(!layersAllowed) {
											this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(parent.type));
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								break _hx_loop1;
							}
							break;
						case 35:
							if(_g3._hx_index == 0) {
								var s1 = _g1;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 1) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var sc = this.parseFloatOrReference();
									if(this.peek(0)._hx_index == 2) {
										this.last = this.token.elt;
										this.token = this.token.next;
										onceInline.parsed(s1);
										scale = sc;
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								break _hx_loop1;
							}
							break;
						case 41:
							if(_g3._hx_index == 0) {
								var s2 = _g1;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 1) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var a = this.parseFloatOrReference();
									if(this.peek(0)._hx_index == 2) {
										this.last = this.token.elt;
										this.token = this.token.next;
										onceInline.parsed(s2);
										alpha = a;
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								break _hx_loop1;
							}
							break;
						case 64:
							if(_g3._hx_index == 0) {
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 1) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var strict1 = false;
									onceInline.parsed("conditional");
									conditional = bh_multianim_NodeConditionalValues.Conditional(this.parseConditionalParameters(currentDefinitions,strict1),strict1);
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								break _hx_loop1;
							}
							break;
						case 65:
							if(_g3._hx_index == 0) {
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 1) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var strict2 = true;
									onceInline.parsed("conditional");
									conditional = bh_multianim_NodeConditionalValues.Conditional(this.parseConditionalParameters(currentDefinitions,strict2),strict2);
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								break _hx_loop1;
							}
							break;
						default:
							break _hx_loop1;
						}
					}
					break;
				default:
					break _hx_loop1;
				}
				++atLestOneInline;
			}
			if(atLestOneInline == 0) {
				this.syntaxError("at least one conditional or inline property is required when using @");
			}
		}
		var gridCoordinateSystem = bh_multianim_MultiAnimParser.getGridCoordinateSystem(parent);
		var hexCoordinateSystem = bh_multianim_MultiAnimParser.getHexCoordinateSystem(parent);
		var nameString = bh_multianim_MultiAnimParser_getNameString(updatableNameType);
		var createNodeResponse = function(type) {
			return { pos : bh_multianim_Coordinates.ZERO, scale : scale, alpha : alpha, layer : layerIndex, gridCoordinateSystem : null, hexCoordinateSystem : null, blendMode : null, filter : null, parent : parent, updatableName : updatableNameType, type : type, children : [], conditionals : conditional, uniqueNodeName : _gthis.generateUniqueName(uniqueId,nameString,Std.string(type)), settings : null};
		};
		var node;
		var _g = this.peek(0);
		if(_g._hx_index == 14) {
			var _g1 = _g.s;
			var _g1 = _g.keyword;
			var _g2 = _g.identType;
			if(_g1 == null) {
				node = this.unexpectedError("expected valid node type");
			} else {
				switch(_g1._hx_index) {
				case 5:
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var _g = this.peek(0);
						if(_g._hx_index == 14) {
							var _g1 = _g.s;
							var _g3 = _g.keyword;
							switch(_g.identType._hx_index) {
							case 0:case 3:
								var sheet = _g1;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var _g = this.peek(0);
									if(_g._hx_index == 14) {
										var _g1 = _g.s;
										var _g3 = _g.keyword;
										switch(_g.identType._hx_index) {
										case 0:case 3:
											var tilename = _g1;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 7) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var width = this.parseIntegerOrReference();
												if(this.peek(0)._hx_index == 7) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var height = this.parseIntegerOrReference();
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														node = createNodeResponse(bh_multianim_NodeType.NINEPATCH(sheet,tilename,width,height));
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										default:
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
								break;
							default:
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					break;
				case 6:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(parent == null) {
							this.syntaxError("apply cannot be root node");
						}
						allowChildren = false;
						node = createNodeResponse(bh_multianim_NodeType.APPLY);
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 12:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var tileSource = this.parseTileSource();
							var vAlign = bh_multianim_VerticalAlign.Top;
							var hAlign = bh_multianim_HorizontalAlign.Left;
							switch(this.peek(0)._hx_index) {
							case 2:
								this.last = this.token.elt;
								this.token = this.token.next;
								break;
							case 7:
								this.last = this.token.elt;
								this.token = this.token.next;
								var a = this.parseHAlign();
								hAlign = a;
								if(a == null) {
									this.syntaxError("invalid Horizontal align");
								}
								switch(this.peek(0)._hx_index) {
								case 2:
									this.last = this.token.elt;
									this.token = this.token.next;
									if(hAlign == bh_multianim_HorizontalAlign.Center) {
										vAlign = bh_multianim_VerticalAlign.Center;
									}
									break;
								case 7:
									this.last = this.token.elt;
									this.token = this.token.next;
									var v = this.parseVAlign();
									if(this.peek(0)._hx_index == 2) {
										this.last = this.token.elt;
										this.token = this.token.next;
										vAlign = v;
										if(v == null) {
											this.syntaxError("invalid vertical align");
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								default:
									this.unexpectedError("Expected ) or , vertical align");
								}
								break;
							default:
								this.unexpectedError("Expected ) or , horizontal align");
							}
							node = createNodeResponse(bh_multianim_NodeType.BITMAP(tileSource,hAlign,vAlign));
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 15:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var _g = this.peek(0);
							if(_g._hx_index == 14) {
								var _g1 = _g.s;
								var _g3 = _g.keyword;
								switch(_g.identType._hx_index) {
								case 0:case 1:
									var varName = _g1;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 7) {
										this.last = this.token.elt;
										this.token = this.token.next;
										if(Object.prototype.hasOwnProperty.call(currentDefinitions.h,nameString)) {
											this.syntaxError("repeatable name \"" + varName + "\" is already a parameter.");
										}
										var response;
										var _g = this.peek(0);
										if(_g._hx_index == 14) {
											var _g1 = _g.s;
											var _g1 = _g.keyword;
											var _g3 = _g.identType;
											if(_g1 == null) {
												response = this.syntaxError("unknown repeatable iterator, expected grid(dx, dy, repeatCount) | layout(layoutName, layout)| array(arrayName)");
											} else {
												switch(_g1._hx_index) {
												case 18:
													if(_g3._hx_index == 0) {
														this.last = this.token.elt;
														this.token = this.token.next;
														if(this.peek(0)._hx_index == 1) {
															this.last = this.token.elt;
															this.token = this.token.next;
															var repeatCount = this.parseIntegerOrReference();
															if(this.peek(0)._hx_index == 7) {
																this.last = this.token.elt;
																this.token = this.token.next;
																var once = this.createOnceParser();
																var dx = null;
																var dy = null;
																var results = this.parseOptionalParams([bh_multianim_OptionalParametersParsing.ParseIntegerOrReference("dx"),bh_multianim_OptionalParametersParsing.ParseIntegerOrReference("dy")],once);
																if(this.peek(0)._hx_index == 2) {
																	this.last = this.token.elt;
																	this.token = this.token.next;
																} else {
																	this.syntaxError("expected )");
																}
																if(Object.prototype.hasOwnProperty.call(results.h,"dx")) {
																	dx = results.h["dx"];
																}
																if(Object.prototype.hasOwnProperty.call(results.h,"dy")) {
																	dy = results.h["dy"];
																}
																if(dx == null && dy == null) {
																	this.syntaxError("grid repeatable needs at least dx or dy or both");
																}
																response = createNodeResponse(bh_multianim_NodeType.REPEAT(varName,bh_multianim_RepeatType.GridIterator(dx,dy,repeatCount)));
															} else {
																throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														response = this.syntaxError("unknown repeatable iterator, expected grid(dx, dy, repeatCount) | layout(layoutName, layout)| array(arrayName)");
													}
													break;
												case 28:
													if(_g3._hx_index == 0) {
														this.last = this.token.elt;
														this.token = this.token.next;
														if(this.peek(0)._hx_index == 1) {
															this.last = this.token.elt;
															this.token = this.token.next;
															var _g = this.peek(0);
															if(_g._hx_index == 14) {
																var _g1 = _g.s;
																var _g4 = _g.keyword;
																switch(_g.identType._hx_index) {
																case 0:case 3:
																	var layout = _g1;
																	this.last = this.token.elt;
																	this.token = this.token.next;
																	if(this.peek(0)._hx_index == 7) {
																		this.last = this.token.elt;
																		this.token = this.token.next;
																		var _g = this.peek(0);
																		if(_g._hx_index == 14) {
																			var _g1 = _g.s;
																			var _g4 = _g.keyword;
																			switch(_g.identType._hx_index) {
																			case 0:case 3:
																				var layoutName = _g1;
																				this.last = this.token.elt;
																				this.token = this.token.next;
																				if(this.peek(0)._hx_index == 2) {
																					this.last = this.token.elt;
																					this.token = this.token.next;
																					this.postParsedActions.push(bh_multianim__$MultiAnimParser_PostParsedActions.PPAVerifyRelativeLayout(layoutName,this.stream.curPos()));
																					response = createNodeResponse(bh_multianim_NodeType.REPEAT(varName,bh_multianim_RepeatType.LayoutIterator(layoutName)));
																				} else {
																					throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																				}
																				break;
																			default:
																				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																			}
																		} else {
																			throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																		}
																	} else {
																		throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																	}
																	break;
																default:
																	throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																}
															} else {
																throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														response = this.syntaxError("unknown repeatable iterator, expected grid(dx, dy, repeatCount) | layout(layoutName, layout)| array(arrayName)");
													}
													break;
												case 80:
													if(_g3._hx_index == 0) {
														this.last = this.token.elt;
														this.token = this.token.next;
														if(this.peek(0)._hx_index == 1) {
															this.last = this.token.elt;
															this.token = this.token.next;
															var _g = this.peek(0);
															if(_g._hx_index == 14) {
																var _g1 = _g.s;
																var _g3 = _g.keyword;
																switch(_g.identType._hx_index) {
																case 0:case 1:
																	var valueVariableName = _g1;
																	this.last = this.token.elt;
																	this.token = this.token.next;
																	if(this.peek(0)._hx_index == 7) {
																		this.last = this.token.elt;
																		this.token = this.token.next;
																		var _g = this.peek(0);
																		if(_g._hx_index == 14) {
																			var _g1 = _g.s;
																			var _g3 = _g.keyword;
																			switch(_g.identType._hx_index) {
																			case 0:case 1:
																				var arrayName = _g1;
																				this.last = this.token.elt;
																				this.token = this.token.next;
																				if(this.peek(0)._hx_index == 2) {
																					this.last = this.token.elt;
																					this.token = this.token.next;
																					if(Object.prototype.hasOwnProperty.call(currentDefinitions.h,valueVariableName)) {
																						this.syntaxError("repeatable array iterator value variable name \"" + valueVariableName + "\" is already a parameter.");
																					}
																					response = createNodeResponse(bh_multianim_NodeType.REPEAT(varName,bh_multianim_RepeatType.ArrayIterator(valueVariableName,arrayName)));
																				} else {
																					throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																				}
																				break;
																			default:
																				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																			}
																		} else {
																			throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																		}
																	} else {
																		throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																	}
																	break;
																default:
																	throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																}
															} else {
																throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														response = this.syntaxError("unknown repeatable iterator, expected grid(dx, dy, repeatCount) | layout(layoutName, layout)| array(arrayName)");
													}
													break;
												default:
													response = this.syntaxError("unknown repeatable iterator, expected grid(dx, dy, repeatCount) | layout(layoutName, layout)| array(arrayName)");
												}
											}
										} else {
											response = this.syntaxError("unknown repeatable iterator, expected grid(dx, dy, repeatCount) | layout(layoutName, layout)| array(arrayName)");
										}
										if(this.peek(0)._hx_index == 2) {
											this.last = this.token.elt;
											this.token = this.token.next;
										} else {
											this.syntaxError("expected )");
										}
										node = response;
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								default:
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 20:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 2) {
								this.last = this.token.elt;
								this.token = this.token.next;
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						}
						node = createNodeResponse(bh_multianim_NodeType.POINT);
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 21:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var once = this.createOnceParser();
							var maxWidth = null;
							var maxHeight = null;
							var minWidth = null;
							var minHeight = null;
							var lineHeight = null;
							var colWidth = null;
							var layout = null;
							var paddingLeft = null;
							var paddingRight = null;
							var paddingTop = null;
							var paddingBottom = null;
							var horizontalSpacing = null;
							var verticalSpacing = null;
							var debug = false;
							var results = this.parseOptionalParams([bh_multianim_OptionalParametersParsing.ParseIntegerOrReference("maxWidth"),bh_multianim_OptionalParametersParsing.ParseIntegerOrReference("maxHeight"),bh_multianim_OptionalParametersParsing.ParseIntegerOrReference("minWidth"),bh_multianim_OptionalParametersParsing.ParseIntegerOrReference("minHeight"),bh_multianim_OptionalParametersParsing.ParseIntegerOrReference("lineHeight"),bh_multianim_OptionalParametersParsing.ParseIntegerOrReference("colWidth"),bh_multianim_OptionalParametersParsing.ParseCustom("layout",$bind(this,this.parseFlowOrientation)),bh_multianim_OptionalParametersParsing.ParseIntegerOrReference("paddingLeft"),bh_multianim_OptionalParametersParsing.ParseIntegerOrReference("paddingRight"),bh_multianim_OptionalParametersParsing.ParseIntegerOrReference("paddingTop"),bh_multianim_OptionalParametersParsing.ParseIntegerOrReference("paddingBottom"),bh_multianim_OptionalParametersParsing.ParseIntegerOrReference("horizontalSpacing"),bh_multianim_OptionalParametersParsing.ParseIntegerOrReference("verticalSpacing"),bh_multianim_OptionalParametersParsing.ParseIntegerOrReference("padding"),bh_multianim_OptionalParametersParsing.ParseCustom("debug",$bind(this,this.parseBool))],once);
							if(this.peek(0)._hx_index == 2) {
								this.last = this.token.elt;
								this.token = this.token.next;
							} else {
								this.syntaxError(") expected");
							}
							if(Object.prototype.hasOwnProperty.call(results.h,"maxWidth")) {
								maxWidth = results.h["maxWidth"];
							}
							if(Object.prototype.hasOwnProperty.call(results.h,"maxHeight")) {
								maxHeight = results.h["maxHeight"];
							}
							if(Object.prototype.hasOwnProperty.call(results.h,"minHeight")) {
								minHeight = results.h["minHeight"];
							}
							if(Object.prototype.hasOwnProperty.call(results.h,"minWidth")) {
								minWidth = results.h["minWidth"];
							}
							if(Object.prototype.hasOwnProperty.call(results.h,"lineHeight")) {
								lineHeight = results.h["lineHeight"];
							}
							if(Object.prototype.hasOwnProperty.call(results.h,"colWidth")) {
								colWidth = results.h["colWidth"];
							}
							if(Object.prototype.hasOwnProperty.call(results.h,"debug")) {
								debug = results.h["debug"];
							}
							layout = results.h["layout"];
							if(Object.prototype.hasOwnProperty.call(results.h,"padding")) {
								var val = results.h["padding"];
								paddingLeft = val;
								paddingRight = val;
								paddingTop = val;
								paddingBottom = val;
							}
							if(Object.prototype.hasOwnProperty.call(results.h,"paddingLeft")) {
								paddingLeft = results.h["paddingLeft"];
							}
							if(Object.prototype.hasOwnProperty.call(results.h,"paddingRight")) {
								paddingRight = results.h["paddingRight"];
							}
							if(Object.prototype.hasOwnProperty.call(results.h,"paddingTop")) {
								paddingTop = results.h["paddingTop"];
							}
							if(Object.prototype.hasOwnProperty.call(results.h,"paddingBottom")) {
								paddingBottom = results.h["paddingBottom"];
							}
							if(Object.prototype.hasOwnProperty.call(results.h,"horizontalSpacing")) {
								horizontalSpacing = results.h["horizontalSpacing"];
							}
							if(Object.prototype.hasOwnProperty.call(results.h,"verticalSpacing")) {
								verticalSpacing = results.h["verticalSpacing"];
							}
							node = createNodeResponse(bh_multianim_NodeType.FLOW(maxWidth,maxHeight,minWidth,minHeight,lineHeight,colWidth,layout,paddingTop,paddingBottom,paddingLeft,paddingRight,horizontalSpacing,verticalSpacing,debug));
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 22:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var _g = this.peek(0);
						switch(_g._hx_index) {
						case 1:
							this.last = this.token.elt;
							this.token = this.token.next;
							var _g1 = this.peek(0);
							if(_g1._hx_index == 14) {
								var _g3 = _g1.s;
								var _g4 = _g1.keyword;
								switch(_g1.identType._hx_index) {
								case 0:case 3:
									var filename = _g3;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 7) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var initialState = this.parseStringOrReference();
										var selector = new haxe_ds_StringMap();
										_hx_loop2: while(true) switch(this.peek(0)._hx_index) {
										case 2:
											this.last = this.token.elt;
											this.token = this.token.next;
											break _hx_loop2;
										case 7:
											this.last = this.token.elt;
											this.token = this.token.next;
											var _g1 = this.peek(0);
											switch(_g1._hx_index) {
											case 13:
												var _g3 = _g1.numberType;
												var key = _g1.s;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 17) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var value = this.parseStringOrReference();
													if(Object.prototype.hasOwnProperty.call(selector.h,key)) {
														this.syntaxError("" + key + " already set");
													}
													selector.h[key] = value;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 14:
												var _g4 = _g1.s;
												var _g5 = _g1.keyword;
												switch(_g1.identType._hx_index) {
												case 0:case 3:
													var key1 = _g4;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 17) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var value1 = this.parseStringOrReference();
														if(Object.prototype.hasOwnProperty.call(selector.h,key1)) {
															this.syntaxError("" + key1 + " already set");
														}
														selector.h[key1] = value1;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												default:
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											default:
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										default:
											throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
										}
										node = createNodeResponse(bh_multianim_NodeType.STATEANIM(filename,initialState,selector));
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								default:
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
							break;
						case 14:
							var _g1 = _g.s;
							var _g1 = _g.keyword;
							if(_g1 == null) {
								throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
							} else if(_g1._hx_index == 23) {
								if(_g.identType._hx_index == 0) {
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 1) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var initialState = this.parseStringOrReference();
										this.eatComma();
										var constructs = this.parseStateAnimConstruct();
										node = createNodeResponse(bh_multianim_NodeType.STATEANIM_CONSTRUCT(initialState,constructs));
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
							}
							break;
						default:
							throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
						}
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 24:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var pixelShapes = this.parseShapes();
							node = createNodeResponse(bh_multianim_NodeType.PIXELS(pixelShapes));
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 25:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						node = createNodeResponse(bh_multianim_NodeType.TILEGROUP);
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 26:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var isTileGroup;
						var _g = this.peek(0);
						if(_g._hx_index == 14) {
							var _g1 = _g.s;
							var _g1 = _g.keyword;
							if(_g1 == null) {
								isTileGroup = false;
							} else if(_g1._hx_index == 25) {
								if(_g.identType._hx_index == 0) {
									this.last = this.token.elt;
									this.token = this.token.next;
									isTileGroup = true;
								} else {
									isTileGroup = false;
								}
							} else {
								isTileGroup = false;
							}
						} else {
							isTileGroup = false;
						}
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var parsedDefinedParameters = this.parseDefines();
							if(nameString == null) {
								this.syntaxError("programmable requires #name");
							}
							currentDefinitions = parsedDefinedParameters;
							if(parent != null) {
								this.syntaxError("programmable nodes must be root node");
							}
							node = createNodeResponse(bh_multianim_NodeType.PROGRAMMABLE(isTileGroup,currentDefinitions));
						} else {
							node = this.unexpectedError("expected (");
						}
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 27:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 5) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(nameString != null) {
								this.syntaxError("relativeLayouts cannot have #name");
							}
							if(parent != null) {
								this.syntaxError("relativeLayouts nodes must be root node");
							}
							if(Object.prototype.hasOwnProperty.call(this.nodes.h,bh_multianim_MultiAnimParser.defaultLayoutNodeName)) {
								this.syntaxError("only single relativeLayouts node is allowed");
							}
							switch(updatableNameType._hx_index) {
							case 0:
								var name = updatableNameType.name;
								updatableNameType = bh_multianim_UpdatableNameType.UNTObject(bh_multianim_MultiAnimParser.defaultLayoutNodeName);
								break;
							case 1:
								var name = updatableNameType.name;
								updatableNameType = bh_multianim_UpdatableNameType.UNTUpdatable(bh_multianim_MultiAnimParser.defaultLayoutNodeName);
								break;
							}
							return createNodeResponse(bh_multianim_NodeType.RELATIVE_LAYOUTS(this.parseLayouts()));
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 29:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 2) {
								this.last = this.token.elt;
								this.token = this.token.next;
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						}
						node = createNodeResponse(bh_multianim_NodeType.LAYERS);
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 30:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(nameString == null) {
							this.syntaxError("palette requires #name");
						}
						if(parent != null) {
							this.syntaxError("palette nodes must be root node");
						}
						var paletteType;
						switch(this.peek(0)._hx_index) {
						case 1:
							this.last = this.token.elt;
							this.token = this.token.next;
							var _g = this.peek(0);
							if(_g._hx_index == 14) {
								var _g1 = _g.keyword;
								var _g1 = _g.identType;
								switch(_g.s) {
								case "2d":
									if(_g1._hx_index == 0) {
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var width = this.parseInteger();
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 5) {
													this.last = this.token.elt;
													this.token = this.token.next;
													paletteType = bh_multianim_PaletteType.PaletteColors2D(this.parseColorsList(bh_multianim_MPToken.MPCurlyClosed),width);
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										paletteType = this.unexpectedError("expected 2d:<width> or file:<filename>");
									}
									break;
								case "file":
									if(_g1._hx_index == 0) {
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var filename = this.parseStringOrReference();
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												return createNodeResponse(bh_multianim_NodeType.PALETTE(bh_multianim_PaletteType.PaletteImageFile(filename)));
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										paletteType = this.unexpectedError("expected 2d:<width> or file:<filename>");
									}
									break;
								default:
									paletteType = this.unexpectedError("expected 2d:<width> or file:<filename>");
								}
							} else {
								paletteType = this.unexpectedError("expected 2d:<width> or file:<filename>");
							}
							break;
						case 5:
							this.last = this.token.elt;
							this.token = this.token.next;
							paletteType = bh_multianim_PaletteType.PaletteColors(this.parseColorsList(bh_multianim_MPToken.MPCurlyClosed));
							break;
						default:
							throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
						}
						return createNodeResponse(bh_multianim_NodeType.PALETTE(paletteType));
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 32:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(parent == null) {
								this.syntaxError("settings must have a parent");
							}
							if(parent.settings == null) {
								parent.settings = new haxe_ds_StringMap();
							}
							_hx_loop3: while(true) {
								var _g = this.peek(0);
								if(_g._hx_index == 14) {
									var _g1 = _g.keyword;
									var _g3 = _g.identType;
									var key = _g.s;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 17) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var value = this.parseStringOrReference();
										if(Object.prototype.hasOwnProperty.call(parent.settings.h,key)) {
											this.syntaxError("setting " + key + " already defined");
										}
										parent.settings.h[key] = value;
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									this.unexpectedError("Expected name->value");
								}
								switch(this.peek(0)._hx_index) {
								case 2:
									this.last = this.token.elt;
									this.token = this.token.next;
									break _hx_loop3;
								case 7:
									this.last = this.token.elt;
									this.token = this.token.next;
									break;
								default:
									this.unexpectedError("Expected , or )");
								}
							}
							return null;
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 59:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var fontname = this.parseStringOrReference();
							if(this.peek(0)._hx_index == 7) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var text = this.parseStringOrReference();
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var color = this.parseColorOrReference();
									var maxWidth = null;
									var isParsingDone = false;
									var results = new haxe_ds_StringMap();
									var halign = null;
									var hasComma = false;
									switch(this.peek(0)._hx_index) {
									case 2:
										this.last = this.token.elt;
										this.token = this.token.next;
										isParsingDone = true;
										break;
									case 7:
										this.last = this.token.elt;
										this.token = this.token.next;
										halign = this.parseHAlign();
										if(halign != null) {
											switch(this.peek(0)._hx_index) {
											case 2:
												this.last = this.token.elt;
												this.token = this.token.next;
												isParsingDone = true;
												break;
											case 7:
												this.last = this.token.elt;
												this.token = this.token.next;
												maxWidth = this.tryParseInteger();
												if(maxWidth == null) {
													hasComma = true;
												}
												break;
											default:
												throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
											}
										} else {
											hasComma = true;
										}
										break;
									default:
										throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
									}
									if(!isParsingDone) {
										switch(this.peek(0)._hx_index) {
										case 2:
											this.last = this.token.elt;
											this.token = this.token.next;
											isParsingDone = true;
											break;
										case 7:
											this.last = this.token.elt;
											this.token = this.token.next;
											break;
										default:
											if(!hasComma) {
												this.syntaxError(") or , expected");
											}
										}
									}
									var letterSpacing = null;
									var lineSpacing = null;
									var lineBreak = null;
									var dropShadowXY = null;
									var dropShadowColor = null;
									var dropShadowAlpha = null;
									var html = null;
									if(!isParsingDone) {
										var once = this.createOnceParser();
										results = this.parseOptionalParams([bh_multianim_OptionalParametersParsing.ParseFloat("letterSpacing"),bh_multianim_OptionalParametersParsing.ParseFloat("lineSpacing"),bh_multianim_OptionalParametersParsing.ParseBool("lineBreak"),bh_multianim_OptionalParametersParsing.ParseCustom("dropShadowXY",$bind(this,this.parseFPoint)),bh_multianim_OptionalParametersParsing.ParseColor("dropShadowColor"),bh_multianim_OptionalParametersParsing.ParseFloat("dropShadowAlpha"),bh_multianim_OptionalParametersParsing.ParseBool("html")],once);
										if(this.peek(0)._hx_index == 2) {
											this.last = this.token.elt;
											this.token = this.token.next;
										} else {
											this.syntaxError("expected )");
										}
									}
									var textDef = { fontName : fontname, text : text, color : color, halign : halign, textAlignWidth : maxWidth, letterSpacing : Object.prototype.hasOwnProperty.call(results.h,"letterSpacing") ? results.h["letterSpacing"] : 0., lineSpacing : Object.prototype.hasOwnProperty.call(results.h,"lineSpacing") ? results.h["lineSpacing"] : 0., lineBreak : Object.prototype.hasOwnProperty.call(results.h,"lineBreak") ? results.h["lineBreak"] : true, dropShadowXY : Object.prototype.hasOwnProperty.call(results.h,"dropShadowXY") ? results.h["dropShadowXY"] : null, dropShadowColor : Object.prototype.hasOwnProperty.call(results.h,"dropShadowColor") ? results.h["dropShadowColor"] : 0, dropShadowAlpha : Object.prototype.hasOwnProperty.call(results.h,"dropShadowAlpha") ? results.h["dropShadowAlpha"] : 0.5, isHtml : Object.prototype.hasOwnProperty.call(results.h,"html") && results.h["html"]};
									node = createNodeResponse(bh_multianim_NodeType.TEXT(textDef));
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 61:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var type;
							var _g = this.peek(0);
							if(_g._hx_index == 14) {
								var _g1 = _g.s;
								var _g1 = _g.keyword;
								var _g3 = _g.identType;
								if(_g1 == null) {
									type = bh_multianim_PlaceholderTypes.PHTileSource(this.parseTileSource());
								} else {
									switch(_g1._hx_index) {
									case 57:
										switch(_g3._hx_index) {
										case 0:case 3:
											this.last = this.token.elt;
											this.token = this.token.next;
											type = bh_multianim_PlaceholderTypes.PHError;
											break;
										default:
											type = bh_multianim_PlaceholderTypes.PHTileSource(this.parseTileSource());
										}
										break;
									case 58:
										switch(_g3._hx_index) {
										case 0:case 3:
											this.last = this.token.elt;
											this.token = this.token.next;
											type = bh_multianim_PlaceholderTypes.PHNothing;
											break;
										default:
											type = bh_multianim_PlaceholderTypes.PHTileSource(this.parseTileSource());
										}
										break;
									default:
										type = bh_multianim_PlaceholderTypes.PHTileSource(this.parseTileSource());
									}
								}
							} else {
								type = bh_multianim_PlaceholderTypes.PHTileSource(this.parseTileSource());
							}
							if(this.peek(0)._hx_index == 7) {
								this.last = this.token.elt;
								this.token = this.token.next;
							} else {
								throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
							}
							var source = null;
							var _g = this.peek(0);
							if(_g._hx_index == 14) {
								var _g1 = _g.s;
								var _g1 = _g.keyword;
								var _g3 = _g.identType;
								if(_g1 == null) {
									this.unexpectedError("expected placeholder replacement source: callback(name), callback(name, index) or builderParameters(name)");
								} else {
									switch(_g1._hx_index) {
									case 2:
										if(_g3._hx_index == 0) {
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var name = this.parseStringOrReference();
												switch(this.peek(0)._hx_index) {
												case 2:
													this.last = this.token.elt;
													this.token = this.token.next;
													source = bh_multianim_PlaceholderReplacementSource.PRSCallback(name);
													break;
												case 7:
													this.last = this.token.elt;
													this.token = this.token.next;
													var index = this.parseIntegerOrReference();
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														source = bh_multianim_PlaceholderReplacementSource.PRSCallbackWithIndex(name,index);
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												default:
													this.unexpectedError("expected color or )");
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											this.unexpectedError("expected placeholder replacement source: callback(name), callback(name, index) or builderParameters(name)");
										}
										break;
									case 4:
										if(_g3._hx_index == 0) {
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var name = this.parseStringOrReference();
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													source = bh_multianim_PlaceholderReplacementSource.PRSBuilderParameterSource(name);
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											this.unexpectedError("expected placeholder replacement source: callback(name), callback(name, index) or builderParameters(name)");
										}
										break;
									default:
										this.unexpectedError("expected placeholder replacement source: callback(name), callback(name, index) or builderParameters(name)");
									}
								}
							} else {
								this.unexpectedError("expected placeholder replacement source: callback(name), callback(name, index) or builderParameters(name)");
							}
							if(this.peek(0)._hx_index == 2) {
								this.last = this.token.elt;
								this.token = this.token.next;
							} else {
								throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
							}
							node = createNodeResponse(bh_multianim_NodeType.PLACEHOLDER(type,source));
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 63:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var externalReference = null;
							var importedBuilder = null;
							var _g = this.peek(0);
							if(_g._hx_index == 14) {
								var _g1 = _g.s;
								var _g1 = _g.keyword;
								if(_g1 != null) {
									if(_g1._hx_index == 79) {
										if(_g.identType._hx_index == 0) {
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var _g = this.peek(0);
												if(_g._hx_index == 14) {
													var _g1 = _g.s;
													var _g3 = _g.keyword;
													switch(_g.identType._hx_index) {
													case 0:case 3:
														var er = _g1;
														this.last = this.token.elt;
														this.token = this.token.next;
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															if(this.peek(0)._hx_index == 7) {
																this.last = this.token.elt;
																this.token = this.token.next;
																importedBuilder = this.imports.h[er];
																if(importedBuilder == null) {
																	this.syntaxError("external reference \"" + er + "\" could not be found. It has to be imported BEFORE referencing it.");
																}
																externalReference = er;
															} else {
																throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
														break;
													default:
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										}
									}
								}
							}
							var programmableReference;
							var _g = this.peek(0);
							if(_g._hx_index == 14) {
								var _g1 = _g.keyword;
								if(_g.identType._hx_index == 1) {
									var p = _g.s;
									this.last = this.token.elt;
									this.token = this.token.next;
									programmableReference = p;
								} else {
									programmableReference = this.unexpectedError("expected programmable reference");
								}
							} else {
								programmableReference = this.unexpectedError("expected programmable reference");
							}
							var programmable;
							if(importedBuilder != null) {
								var tmp = importedBuilder.multiParserResult;
								var tmp1 = tmp != null ? tmp.nodes : null;
								programmable = tmp1 != null ? tmp1.h[programmableReference] : null;
							} else {
								programmable = this.nodes.h[programmableReference];
							}
							if(programmable == null) {
								this.syntaxError("programmable \"" + programmableReference + "\" could not be found in " + externalReference + ". It has to be defined BEFORE referencing it.");
							}
							var _g = programmable.type;
							if(_g._hx_index == 7) {
								var isTileGroup = _g.isTileGroup;
								var parameters = _g.parameters;
								var params;
								switch(this.peek(0)._hx_index) {
								case 2:
									this.last = this.token.elt;
									this.token = this.token.next;
									params = new haxe_ds_StringMap();
									break;
								case 7:
									this.last = this.token.elt;
									this.token = this.token.next;
									params = this.parseReferenceParameters(parameters);
									break;
								default:
									throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
								}
								node = createNodeResponse(bh_multianim_NodeType.REFERENCE(externalReference,programmableReference,params));
							} else {
								node = createNodeResponse(bh_multianim_NodeType.REFERENCE(externalReference,programmableReference,new haxe_ds_StringMap()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 66:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 1) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var width = this.parseIntegerOrReference();
							if(this.peek(0)._hx_index == 7) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var height = this.parseIntegerOrReference();
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var id = this.parseStringOrReference();
									var debug;
									var _g = this.peek(0);
									switch(_g._hx_index) {
									case 2:
										this.last = this.token.elt;
										this.token = this.token.next;
										debug = false;
										break;
									case 7:
										this.last = this.token.elt;
										this.token = this.token.next;
										var _g1 = this.peek(0);
										if(_g1._hx_index == 14) {
											var _g3 = _g1.s;
											var _g3 = _g1.keyword;
											if(_g3 == null) {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											} else if(_g3._hx_index == 62) {
												if(_g1.identType._hx_index == 0) {
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														debug = true;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 14:
										var _g1 = _g.s;
										var _g1 = _g.keyword;
										if(_g1 == null) {
											debug = this.unexpectedError("expected ) or  \"debug\"");
										} else if(_g1._hx_index == 62) {
											if(_g.identType._hx_index == 0) {
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													debug = true;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												debug = this.unexpectedError("expected ) or  \"debug\"");
											}
										} else {
											debug = this.unexpectedError("expected ) or  \"debug\"");
										}
										break;
									default:
										debug = this.unexpectedError("expected ) or  \"debug\"");
									}
									node = createNodeResponse(bh_multianim_NodeType.INTERACTIVE(width,height,id,debug));
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 74:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 5) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(Object.prototype.hasOwnProperty.call(this.nodes.h,bh_multianim_MultiAnimParser.defaultPathNodeName)) {
								this.syntaxError("only single paths node is allowed");
							}
							switch(updatableNameType._hx_index) {
							case 0:
								var name = updatableNameType.name;
								updatableNameType = bh_multianim_UpdatableNameType.UNTObject(bh_multianim_MultiAnimParser.defaultPathNodeName);
								break;
							case 1:
								var name = updatableNameType.name;
								updatableNameType = bh_multianim_UpdatableNameType.UNTUpdatable(bh_multianim_MultiAnimParser.defaultPathNodeName);
								break;
							}
							if(parent != null) {
								this.syntaxError("paths nodes must be root node");
							}
							var pathsDef = this.parsePaths();
							return createNodeResponse(bh_multianim_NodeType.PATHS(pathsDef));
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 76:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 5) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(parent == null) {
								if(nameString == null) {
									this.syntaxError("particles requires #name");
								}
								var p = this.parseParticles();
								this.validateParticles(p,this.stream.curPos());
								return createNodeResponse(bh_multianim_NodeType.PARTICLES(p));
							}
							var p = this.parseParticles();
							this.validateParticles(p,this.stream.curPos());
							return createNodeResponse(bh_multianim_NodeType.PARTICLES(p));
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				case 77:
					if(_g2._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 5) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(nameString == null) {
								this.syntaxError("animatedPath requires #name");
							}
							if(parent != null) {
								this.syntaxError("animatedPath nodes must be root node");
							}
							return createNodeResponse(bh_multianim_NodeType.ANIMATED_PATH(this.parseAnimatedPath()));
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						node = this.unexpectedError("expected valid node type");
					}
					break;
				default:
					node = this.unexpectedError("expected valid node type");
				}
			}
		} else {
			node = this.unexpectedError("expected valid node type");
		}
		switch(this.peek(0)._hx_index) {
		case 0:
			this.last = this.token.elt;
			this.token = this.token.next;
			this.syntaxError("unexpected end of file");
			break;
		case 5:
			this.last = this.token.elt;
			this.token = this.token.next;
			this.parseNodes(node,currentDefinitions,onceInline,uniqueId + 77,allowChildren);
			break;
		case 10:
			this.last = this.token.elt;
			this.token = this.token.next;
			var p = this.parseXY();
			this.eatSemicolon();
			var isFlow;
			if(parent != null) {
				var _g = parent.type;
				if(_g._hx_index == 0) {
					var _g1 = _g.maxWidth;
					var _g1 = _g.maxHeight;
					var _g1 = _g.minWidth;
					var _g1 = _g.minHeight;
					var _g1 = _g.lineHeight;
					var _g1 = _g.colWidth;
					var _g1 = _g.layout;
					var _g1 = _g.paddingTop;
					var _g1 = _g.paddingBottom;
					var _g1 = _g.paddingLeft;
					var _g1 = _g.paddingRight;
					var _g1 = _g.horizontalSpacing;
					var _g1 = _g.verticalSpacing;
					var _g1 = _g.debug;
					isFlow = true;
				} else {
					isFlow = false;
				}
			} else {
				isFlow = false;
			}
			if(isFlow) {
				if(p._hx_index != 0) {
					this.syntaxError("xy not allowed to be set for direct descendants of the flow: was " + Std.string(p) + " required \";\"");
				}
			}
			node.pos = p;
			break;
		case 12:
			this.last = this.token.elt;
			this.token = this.token.next;
			node.pos = bh_multianim_Coordinates.ZERO;
			break;
		default:
			this.unexpectedError("Expected : or { or EOF");
		}
		return node;
	}
	,addNode: function(name,node) {
		if(name == null) {
			this.syntaxError("root node needs a name");
		}
		if(Object.prototype.hasOwnProperty.call(this.nodes.h,name)) {
			this.syntaxError("duplicate node #" + name);
		}
		this.nodes.h[name] = node;
	}
	,eatSemicolon: function() {
		if(this.peek(0)._hx_index == 12) {
			this.last = this.token.elt;
			this.token = this.token.next;
		}
	}
	,eatComma: function() {
		if(this.peek(0)._hx_index == 7) {
			this.last = this.token.elt;
			this.token = this.token.next;
		}
	}
	,createOnceParser: function() {
		var _gthis = this;
		return new bh_multianim_OncePropertyParser(function(name) {
			_gthis.syntaxError("" + name + " already defined");
		});
	}
	,parseGridCoordianteSystem: function() {
		var size = this.parseSize();
		this.eatSemicolon();
		return { spacingX : size.width, spacingY : size.height};
	}
	,parseHexCoordianteSystem: function() {
		try {
			var orientation = this.parseOrientation();
			if(this.peek(0)._hx_index == 1) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var width = this.parseFloat();
				if(this.peek(0)._hx_index == 7) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var height = this.parseFloat();
					if(this.peek(0)._hx_index == 2) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var x = width;
						var y = height;
						if(y == null) {
							y = 0.;
						}
						if(x == null) {
							x = 0.;
						}
						var hexLayout = new bh_base_HexLayout(orientation,new h2d_col_PointImpl(x,y),new h2d_col_PointImpl(0.,0.));
						this.eatSemicolon();
						return { hexLayout : hexLayout};
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof hxparse_NoMatch)) {
				return this.unexpectedError("expected grid coordinate system");
			} else {
				throw _g;
			}
		}
	}
	,parseLayoutContent: function() {
		var _g = this.peek(0);
		if(_g._hx_index == 14) {
			var _g1 = _g.s;
			var _g1 = _g.keyword;
			if(_g1 == null) {
				return null;
			} else if(_g1._hx_index == 20) {
				if(_g.identType._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 10) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var xy = this.parseXY();
						return bh_multianim_layouts_LayoutContent.LayoutPoint(xy);
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
		} else {
			return null;
		}
	}
	,parseFilter: function() {
		var _g = this.peek(0);
		if(_g._hx_index == 14) {
			var _g1 = _g.keyword;
			var _g1 = _g.identType;
			switch(_g.s) {
			case "blur":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var radius = this.parseFloat();
						if(this.peek(0)._hx_index == 7) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var gain = this.parseFloat();
							if(this.peek(0)._hx_index == 2) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var quality = 1.;
								var linear = 0.0;
								return bh_multianim_FilterType.FilterBlur(radius,gain,quality,linear);
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
				break;
			case "brightness":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var value = this.parseFloat();
						if(this.peek(0)._hx_index == 2) {
							this.last = this.token.elt;
							this.token = this.token.next;
							return bh_multianim_FilterType.FilterBrightness(value);
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
				break;
			case "dropShadow":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var once = this.createOnceParser();
						var distance = null;
						var angle = null;
						var alpha = null;
						var radius = null;
						var quality = null;
						var color = null;
						var gain = null;
						var smoothColor = null;
						var results = this.parseOptionalParams([bh_multianim_OptionalParametersParsing.ParseFloat("distance"),bh_multianim_OptionalParametersParsing.ParseFloat("angle"),bh_multianim_OptionalParametersParsing.ParseFloat("alpha"),bh_multianim_OptionalParametersParsing.ParseFloat("radius"),bh_multianim_OptionalParametersParsing.ParseColor("color"),bh_multianim_OptionalParametersParsing.ParseFloat("gain"),bh_multianim_OptionalParametersParsing.ParseFloat("quality"),bh_multianim_OptionalParametersParsing.ParseBool("smoothColor")],once);
						if(this.peek(0)._hx_index == 2) {
							this.last = this.token.elt;
							this.token = this.token.next;
						} else {
							this.unexpectedError("dropShadow expected )");
						}
						return bh_multianim_FilterType.FilterDropShadow(Object.prototype.hasOwnProperty.call(results.h,"distance") ? results.h["distance"] : 4.0,(Object.prototype.hasOwnProperty.call(results.h,"angle") ? results.h["angle"] : 90.0) * 3.14159265358979323 / 180.0,Object.prototype.hasOwnProperty.call(results.h,"color") ? results.h["color"] : 0,Object.prototype.hasOwnProperty.call(results.h,"alpha") ? results.h["alpha"] : 1.,Object.prototype.hasOwnProperty.call(results.h,"radius") ? results.h["radius"] : 1.,Object.prototype.hasOwnProperty.call(results.h,"gain") ? results.h["gain"] : 1.,Object.prototype.hasOwnProperty.call(results.h,"quality") ? results.h["quality"] : 1.,Object.prototype.hasOwnProperty.call(results.h,"smoothColor") && results.h["smoothColor"]);
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
				break;
			case "glow":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var once = this.createOnceParser();
						var radius = null;
						var gain = null;
						var quality = null;
						var smoothColor = null;
						var knockout = null;
						var color = null;
						var alpha = null;
						var results = this.parseOptionalParams([bh_multianim_OptionalParametersParsing.ParseFloat("alpha"),bh_multianim_OptionalParametersParsing.ParseFloat("radius"),bh_multianim_OptionalParametersParsing.ParseFloat("gain"),bh_multianim_OptionalParametersParsing.ParseFloat("quality"),bh_multianim_OptionalParametersParsing.ParseBool("smoothColor"),bh_multianim_OptionalParametersParsing.ParseBool("knockout"),bh_multianim_OptionalParametersParsing.ParseColor("color")],once);
						if(this.peek(0)._hx_index == 2) {
							this.last = this.token.elt;
							this.token = this.token.next;
						} else {
							this.unexpectedError("glow expected )");
						}
						return bh_multianim_FilterType.FilterGlow(Object.prototype.hasOwnProperty.call(results.h,"color") ? results.h["color"] : -1,Object.prototype.hasOwnProperty.call(results.h,"alpha") ? results.h["alpha"] : 1.,Object.prototype.hasOwnProperty.call(results.h,"radius") ? results.h["radius"] : 1.,Object.prototype.hasOwnProperty.call(results.h,"gain") ? results.h["gain"] : 1.,Object.prototype.hasOwnProperty.call(results.h,"quality") ? results.h["quality"] : 1.,Object.prototype.hasOwnProperty.call(results.h,"smoothColor") && results.h["smoothColor"],Object.prototype.hasOwnProperty.call(results.h,"knockout") && results.h["knockout"]);
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
				break;
			case "group":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var filters = [];
						while(true) {
							if(this.peek(0)._hx_index == 2) {
								this.last = this.token.elt;
								this.token = this.token.next;
								break;
							} else {
								filters.push(this.parseFilter());
							}
							this.eatComma();
						}
						return bh_multianim_FilterType.FilterGroup(filters);
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
				break;
			case "none":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return bh_multianim_FilterType.FilterNone;
				} else {
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
				break;
			case "outline":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var size = this.parseFloat();
						if(this.peek(0)._hx_index == 7) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var color = this.parseColor();
							if(this.peek(0)._hx_index == 2) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return bh_multianim_FilterType.FilterOutline(size,color);
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
				break;
			case "pixelOutline":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var mode;
						var _g = this.peek(0);
						if(_g._hx_index == 14) {
							var _g2 = _g.keyword;
							var _g2 = _g.identType;
							switch(_g.s) {
							case "inlineColor":
								switch(_g2._hx_index) {
								case 0:case 3:
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 7) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var color = this.parseColor();
										if(this.peek(0)._hx_index == 7) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var inlineColor = this.parseColor();
											mode = bh_base_filters_PixelOutlineFilterMode.InlineColor(color,inlineColor);
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								default:
									throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
								}
								break;
							case "knockout":
								switch(_g2._hx_index) {
								case 0:case 3:
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 7) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var color = this.parseColor();
										if(this.peek(0)._hx_index == 7) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var knockout = this.parseFloat();
											mode = bh_base_filters_PixelOutlineFilterMode.Knockout(color,knockout);
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								default:
									throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
								}
								break;
							default:
								throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
						}
						var smoothColor;
						var _g = this.peek(0);
						switch(_g._hx_index) {
						case 2:
							this.last = this.token.elt;
							this.token = this.token.next;
							smoothColor = false;
							break;
						case 14:
							var _g2 = _g.keyword;
							if(_g.s == "smoothColor") {
								if(_g.identType._hx_index == 0) {
									this.last = this.token.elt;
									this.token = this.token.next;
									smoothColor = true;
								} else {
									smoothColor = this.unexpectedError("expected smoothColor or )");
								}
							} else {
								smoothColor = this.unexpectedError("expected smoothColor or )");
							}
							break;
						default:
							smoothColor = this.unexpectedError("expected smoothColor or )");
						}
						return bh_multianim_FilterType.FilterPixelOutline(mode,smoothColor);
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
				break;
			case "replaceColor":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 3) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var sources = this.parseColorsList(bh_multianim_MPToken.MPBracketClosed);
							this.eatComma();
							if(this.peek(0)._hx_index == 3) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var replacements = this.parseColorsList(bh_multianim_MPToken.MPBracketClosed);
								if(this.peek(0)._hx_index == 2) {
									this.last = this.token.elt;
									this.token = this.token.next;
									return bh_multianim_FilterType.FilterColorListReplace(sources,replacements);
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								return this.unexpectedError("expected [color1, color2, ...], [replacement1, replacement2, ...])");
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
				break;
			case "replacePalette":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var _g = this.peek(0);
						if(_g._hx_index == 14) {
							var _g2 = _g.s;
							var _g3 = _g.keyword;
							switch(_g.identType._hx_index) {
							case 0:case 3:
								var paletteName = _g2;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var sourceRow = this.parseIntegerOrReference();
									if(this.peek(0)._hx_index == 7) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var replacementRow = this.parseIntegerOrReference();
										if(this.peek(0)._hx_index == 2) {
											this.last = this.token.elt;
											this.token = this.token.next;
											return bh_multianim_FilterType.FilterPaletteReplace(paletteName,sourceRow,replacementRow);
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
								break;
							default:
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
				break;
			case "saturate":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var value = this.parseFloat();
						if(this.peek(0)._hx_index == 2) {
							this.last = this.token.elt;
							this.token = this.token.next;
							return bh_multianim_FilterType.FilterSaturate(value);
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
				break;
			default:
				throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
		} else {
			throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
		}
	}
	,parsePaths: function() {
		var paths = new haxe_ds_StringMap();
		while(true) {
			var name = null;
			var _g = this.peek(0);
			switch(_g._hx_index) {
			case 6:
				this.last = this.token.elt;
				this.token = this.token.next;
				return paths;
			case 14:
				var _g1 = _g.keyword;
				if(_g.identType._hx_index == 2) {
					var n = _g.s;
					this.last = this.token.elt;
					this.token = this.token.next;
					if(Object.prototype.hasOwnProperty.call(paths.h,n)) {
						this.syntaxError("duplicate path name $n");
					}
					var _g2 = this.peek(0);
					if(_g2._hx_index == 14) {
						var _g3 = _g2.s;
						var _g4 = _g2.keyword;
						if(_g4 == null) {
							this.syntaxError("expected path {");
						} else if(_g4._hx_index == 75) {
							if(_g2.identType._hx_index == 0) {
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 5) {
									this.last = this.token.elt;
									this.token = this.token.next;
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								this.syntaxError("expected path {");
							}
						} else {
							this.syntaxError("expected path {");
						}
					} else {
						this.syntaxError("expected path {");
					}
					name = n;
				} else {
					this.syntaxError("expected name");
				}
				break;
			default:
				this.syntaxError("expected name");
			}
			var pathsArr = [];
			_hx_loop2: while(true) {
				var _g5 = this.peek(0);
				switch(_g5._hx_index) {
				case 6:
					this.last = this.token.elt;
					this.token = this.token.next;
					break _hx_loop2;
				case 14:
					var _g6 = _g5.s;
					var _g7 = _g5.keyword;
					var _g8 = _g5.identType;
					if(_g7 == null) {
						this.syntaxError("expected line or bezier or }");
					} else {
						switch(_g7._hx_index) {
						case 47:
							if(_g8._hx_index == 0) {
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 1) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var end = this.parseXY();
									if(this.peek(0)._hx_index == 2) {
										this.last = this.token.elt;
										this.token = this.token.next;
										pathsArr.push(bh_multianim_ParsedPaths.LineTo(end));
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								this.syntaxError("expected line or bezier or }");
							}
							break;
						case 48:
							if(_g8._hx_index == 0) {
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 1) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var distance = this.parseIntegerOrReference();
									if(this.peek(0)._hx_index == 2) {
										this.last = this.token.elt;
										this.token = this.token.next;
										pathsArr.push(bh_multianim_ParsedPaths.Forward(distance));
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								this.syntaxError("expected line or bezier or }");
							}
							break;
						case 49:
							if(_g8._hx_index == 0) {
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 1) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var angle = this.parseIntegerOrReference();
									if(this.peek(0)._hx_index == 2) {
										this.last = this.token.elt;
										this.token = this.token.next;
										pathsArr.push(bh_multianim_ParsedPaths.TurnDegrees(angle));
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								this.syntaxError("expected line or bezier or }");
							}
							break;
						case 50:
							if(_g8._hx_index == 0) {
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 1) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var end1 = this.parseXY();
									if(this.peek(0)._hx_index == 7) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var control1 = this.parseXY();
										switch(this.peek(0)._hx_index) {
										case 2:
											this.last = this.token.elt;
											this.token = this.token.next;
											pathsArr.push(bh_multianim_ParsedPaths.Bezier2To(end1,control1));
											break;
										case 7:
											this.last = this.token.elt;
											this.token = this.token.next;
											var control2 = this.parseXY();
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												pathsArr.push(bh_multianim_ParsedPaths.Bezier3To(end1,control1,control2));
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										default:
											this.syntaxError("expected XY or )");
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								this.syntaxError("expected line or bezier or }");
							}
							break;
						case 51:
							if(_g8._hx_index == 0) {
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 1) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var _g9 = this.peek(0);
									if(_g9._hx_index == 14) {
										var _g10 = _g9.s;
										var _g11 = _g9.keyword;
										switch(_g9.identType._hx_index) {
										case 0:case 3:
											var name1 = _g10;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												pathsArr.push(bh_multianim_ParsedPaths.Checkpoint(name1));
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										default:
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								this.syntaxError("expected line or bezier or }");
							}
							break;
						default:
							this.syntaxError("expected line or bezier or }");
						}
					}
					break;
				default:
					this.syntaxError("expected line or bezier or }");
				}
			}
			paths.h[name] = pathsArr;
		}
	}
	,parseAnimatedPathAction: function() {
		var _g = this.peek(0);
		if(_g._hx_index == 14) {
			var _g1 = _g.keyword;
			var _g1 = _g.identType;
			switch(_g.s) {
			case "attachParticles":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var _g = this.peek(0);
						if(_g._hx_index == 14) {
							var _g2 = _g.s;
							var _g3 = _g.keyword;
							switch(_g.identType._hx_index) {
							case 0:case 3:
								var particlesName = _g2;
								this.last = this.token.elt;
								this.token = this.token.next;
								var particlesTemplate;
								switch(this.peek(0)._hx_index) {
								case 2:
									this.last = this.token.elt;
									this.token = this.token.next;
									particlesTemplate = null;
									break;
								case 7:
									this.last = this.token.elt;
									this.token = this.token.next;
									var _g = this.peek(0);
									if(_g._hx_index == 14) {
										var _g2 = _g.s;
										var _g3 = _g.keyword;
										switch(_g.identType._hx_index) {
										case 0:case 3:
											var particlesTemplate1 = _g2;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												particlesTemplate = particlesTemplate1;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										default:
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								default:
									particlesTemplate = this.syntaxError("expected <particles template name> or )");
								}
								if(this.peek(0)._hx_index == 5) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var particlesDef = this.parseParticles();
									if(particlesTemplate == null) {
										this.validateParticles(particlesDef,this.stream.curPos());
									} else {
										this.postParsedActions.push(bh_multianim__$MultiAnimParser_PostParsedActions.PPAUpdateAndVerifyParticlesTemplate(particlesTemplate,particlesDef,this.stream.curPos()));
									}
									return bh_multianim_AnimatedPathsAction.AttachParticles(particlesName,particlesTemplate,particlesDef);
								} else {
									return this.syntaxError("expected {");
								}
								break;
							default:
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					return this.syntaxError("expected changeSpeed or event or attachParticles or removeParticles or changeAnimState");
				}
				break;
			case "changeAnimState":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var _g = this.peek(0);
						if(_g._hx_index == 14) {
							var _g2 = _g.s;
							var _g3 = _g.keyword;
							switch(_g.identType._hx_index) {
							case 0:case 3:
								var state = _g2;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 2) {
									this.last = this.token.elt;
									this.token = this.token.next;
									return bh_multianim_AnimatedPathsAction.ChangeAnimSMState(state);
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
								break;
							default:
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					return this.syntaxError("expected changeSpeed or event or attachParticles or removeParticles or changeAnimState");
				}
				break;
			case "changeSpeed":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					var speed = this.parseFloatOrReference();
					return bh_multianim_AnimatedPathsAction.ChangeSpeed(speed);
				} else {
					return this.syntaxError("expected changeSpeed or event or attachParticles or removeParticles or changeAnimState");
				}
				break;
			case "event":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var _g = this.peek(0);
						if(_g._hx_index == 14) {
							var _g2 = _g.s;
							var _g3 = _g.keyword;
							switch(_g.identType._hx_index) {
							case 0:case 3:
								var eventName = _g2;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 2) {
									this.last = this.token.elt;
									this.token = this.token.next;
									return bh_multianim_AnimatedPathsAction.Event(eventName);
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
								break;
							default:
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					return this.syntaxError("expected changeSpeed or event or attachParticles or removeParticles or changeAnimState");
				}
				break;
			case "removeParticles":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var _g = this.peek(0);
						if(_g._hx_index == 14) {
							var _g1 = _g.s;
							var _g2 = _g.keyword;
							switch(_g.identType._hx_index) {
							case 0:case 3:
								var particlesName = _g1;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 2) {
									this.last = this.token.elt;
									this.token = this.token.next;
									return bh_multianim_AnimatedPathsAction.RemoveParticles(particlesName);
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
								break;
							default:
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					return this.syntaxError("expected changeSpeed or event or attachParticles or removeParticles or changeAnimState");
				}
				break;
			default:
				return this.syntaxError("expected changeSpeed or event or attachParticles or removeParticles or changeAnimState");
			}
		} else {
			return this.syntaxError("expected changeSpeed or event or attachParticles or removeParticles or changeAnimState");
		}
	}
	,parseAnimatedPath: function() {
		var retVal = [];
		while(true) {
			var _g = this.peek(0);
			switch(_g._hx_index) {
			case 6:
				this.last = this.token.elt;
				this.token = this.token.next;
				return retVal;
			case 14:
				var _g1 = _g.s;
				var _g2 = _g.keyword;
				switch(_g.identType._hx_index) {
				case 0:case 3:
					var checkPointName = _g1;
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 10) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var action = this.parseAnimatedPathAction();
						retVal.push(new bh_multianim_AnimatedPathTimedAction(bh_multianim_AnimatedPathTime.Checkpoint(checkPointName),action));
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
					break;
				default:
					try {
						var rate = this.parseFloatOrReference();
						if(this.peek(0)._hx_index == 10) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var action1 = this.parseAnimatedPathAction();
							switch(rate._hx_index) {
							case 2:
								var i = rate.i;
								if(i < 0 || i > 1) {
									this.syntaxError("at rate must be between 0.0 and 1.0");
								}
								break;
							case 5:
								var f = rate.f;
								if(f < 0. || f > 1.) {
									this.syntaxError("at rate must be between 0.0 and 1.0");
								}
								break;
							default:
							}
							retVal.push(new bh_multianim_AnimatedPathTimedAction(bh_multianim_AnimatedPathTime.Rate(rate),action1));
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} catch( _g3 ) {
						if(((haxe_Exception.caught(_g3).unwrap()) instanceof hxparse_NoMatch)) {
							this.syntaxError("<at>: <command> or }");
						} else {
							throw _g3;
						}
					}
				}
				break;
			default:
				try {
					var rate1 = this.parseFloatOrReference();
					if(this.peek(0)._hx_index == 10) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var action2 = this.parseAnimatedPathAction();
						switch(rate1._hx_index) {
						case 2:
							var i1 = rate1.i;
							if(i1 < 0 || i1 > 1) {
								this.syntaxError("at rate must be between 0.0 and 1.0");
							}
							break;
						case 5:
							var f1 = rate1.f;
							if(f1 < 0. || f1 > 1.) {
								this.syntaxError("at rate must be between 0.0 and 1.0");
							}
							break;
						default:
						}
						retVal.push(new bh_multianim_AnimatedPathTimedAction(bh_multianim_AnimatedPathTime.Rate(rate1),action2));
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} catch( _g4 ) {
					if(((haxe_Exception.caught(_g4).unwrap()) instanceof hxparse_NoMatch)) {
						this.syntaxError("<at>: <command> or }");
					} else {
						throw _g4;
					}
				}
			}
		}
	}
	,parseParticlesEmitMode: function() {
		var _g = this.peek(0);
		if(_g._hx_index == 14) {
			var _g1 = _g.keyword;
			var _g1 = _g.identType;
			switch(_g.s) {
			case "box":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var width = this.parseFloatOrReference();
						if(this.peek(0)._hx_index == 7) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var height = this.parseFloatOrReference();
							if(this.peek(0)._hx_index == 7) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var emitConeAngle = this.parseFloatOrReference();
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var emitConeAngleRandom = this.parseFloatOrReference();
									if(this.peek(0)._hx_index == 2) {
										this.last = this.token.elt;
										this.token = this.token.next;
										return bh_multianim_ParticlesEmitMode.Box(width,height,emitConeAngle,emitConeAngleRandom);
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					return this.syntaxError("expected point, cone or box");
				}
				break;
			case "cone":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var emitDistance = this.parseFloatOrReference();
						if(this.peek(0)._hx_index == 7) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var emitDistanceRandom = this.parseFloatOrReference();
							if(this.peek(0)._hx_index == 7) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var emitConeAngle = this.parseFloatOrReference();
								if(this.peek(0)._hx_index == 7) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var emitConeAngleRandom = this.parseFloatOrReference();
									if(this.peek(0)._hx_index == 2) {
										this.last = this.token.elt;
										this.token = this.token.next;
										return bh_multianim_ParticlesEmitMode.Cone(emitDistance,emitDistanceRandom,emitConeAngle,emitConeAngleRandom);
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					return this.syntaxError("expected point, cone or box");
				}
				break;
			case "point":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 1) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var emitDistance = this.parseFloatOrReference();
						if(this.peek(0)._hx_index == 7) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var emitDistanceRandom = this.parseFloatOrReference();
							if(this.peek(0)._hx_index == 2) {
								this.last = this.token.elt;
								this.token = this.token.next;
								return bh_multianim_ParticlesEmitMode.Point(emitDistance,emitDistanceRandom);
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					return this.syntaxError("expected point, cone or box");
				}
				break;
			default:
				return this.syntaxError("expected point, cone or box");
			}
		} else {
			return this.syntaxError("expected point, cone or box");
		}
	}
	,validateParticles: function(particlesDefs,pos) {
		if(particlesDefs.emit == null) {
			this.syntaxError("emit is required",pos);
		}
		if(particlesDefs.tiles == null) {
			this.syntaxError("tiles is required",pos);
		}
	}
	,createEmptyParticlesDef: function() {
		return { count : null, emitDelay : null, emitSync : null, maxLife : null, lifeRandom : null, size : null, sizeRandom : null, speed : null, speedRandom : null, speedIncrease : null, loop : null, relative : null, tiles : null, gravity : null, gravityAngle : null, fadeIn : null, fadeOut : null, fadePower : null, blendMode : null, emit : null, rotationInitial : null, rotationSpeed : null, rotationSpeedRandom : null, rotateAuto : null};
	}
	,updateParticlesFromTemplate: function(template,particlesDef) {
		var tmp = particlesDef.count;
		particlesDef.count = tmp != null ? tmp : template.count;
		var tmp = particlesDef.emitDelay;
		particlesDef.emitDelay = tmp != null ? tmp : template.emitDelay;
		var tmp = particlesDef.emitSync;
		particlesDef.emitSync = tmp != null ? tmp : template.emitSync;
		var tmp = particlesDef.maxLife;
		particlesDef.maxLife = tmp != null ? tmp : template.maxLife;
		var tmp = particlesDef.lifeRandom;
		particlesDef.lifeRandom = tmp != null ? tmp : template.lifeRandom;
		var tmp = particlesDef.size;
		particlesDef.size = tmp != null ? tmp : template.size;
		var tmp = particlesDef.sizeRandom;
		particlesDef.sizeRandom = tmp != null ? tmp : template.sizeRandom;
		var tmp = particlesDef.speed;
		particlesDef.speed = tmp != null ? tmp : template.speed;
		var tmp = particlesDef.speedRandom;
		particlesDef.speedRandom = tmp != null ? tmp : template.speedRandom;
		var tmp = particlesDef.speedIncrease;
		particlesDef.speedIncrease = tmp != null ? tmp : template.speedIncrease;
		var tmp = particlesDef.loop;
		particlesDef.loop = tmp != null ? tmp : template.loop;
		var tmp = particlesDef.relative;
		particlesDef.relative = tmp != null ? tmp : template.relative;
		var tmp = particlesDef.tiles;
		particlesDef.tiles = tmp != null ? tmp : template.tiles;
		var tmp = particlesDef.gravity;
		particlesDef.gravity = tmp != null ? tmp : template.gravity;
		var tmp = particlesDef.gravityAngle;
		particlesDef.gravityAngle = tmp != null ? tmp : template.gravityAngle;
		var tmp = particlesDef.fadeIn;
		particlesDef.fadeIn = tmp != null ? tmp : template.fadeIn;
		var tmp = particlesDef.fadeOut;
		particlesDef.fadeOut = tmp != null ? tmp : template.fadeOut;
		var tmp = particlesDef.fadePower;
		particlesDef.fadePower = tmp != null ? tmp : template.fadePower;
		var tmp = particlesDef.blendMode;
		particlesDef.blendMode = tmp != null ? tmp : template.blendMode;
		var tmp = particlesDef.emit;
		particlesDef.emit = tmp != null ? tmp : template.emit;
		var tmp = particlesDef.rotationInitial;
		particlesDef.rotationInitial = tmp != null ? tmp : template.rotationInitial;
		var tmp = particlesDef.rotationSpeed;
		particlesDef.rotationSpeed = tmp != null ? tmp : template.rotationSpeed;
		var tmp = particlesDef.rotationSpeedRandom;
		particlesDef.rotationSpeedRandom = tmp != null ? tmp : template.rotationSpeedRandom;
		var tmp = particlesDef.rotateAuto;
		particlesDef.rotateAuto = tmp != null ? tmp : template.rotateAuto;
	}
	,parseParticles: function() {
		var retVal = this.createEmptyParticlesDef();
		var once = this.createOnceParser();
		var results = this.parseOptionalParams([bh_multianim_OptionalParametersParsing.ParseIntegerOrReference("count"),bh_multianim_OptionalParametersParsing.ParseFloatOrReference("emitDelay"),bh_multianim_OptionalParametersParsing.ParseFloatOrReference("emitSync"),bh_multianim_OptionalParametersParsing.ParseFloatOrReference("maxLife"),bh_multianim_OptionalParametersParsing.ParseFloatOrReference("lifeRandom"),bh_multianim_OptionalParametersParsing.ParseFloatOrReference("size"),bh_multianim_OptionalParametersParsing.ParseFloatOrReference("sizeRandom"),bh_multianim_OptionalParametersParsing.ParseFloatOrReference("speed"),bh_multianim_OptionalParametersParsing.ParseFloatOrReference("speedRandom"),bh_multianim_OptionalParametersParsing.ParseFloatOrReference("speedIncrease"),bh_multianim_OptionalParametersParsing.ParseFloatOrReference("gravity"),bh_multianim_OptionalParametersParsing.ParseFloatOrReference("gravityAngle"),bh_multianim_OptionalParametersParsing.ParseFloatOrReference("fadeIn"),bh_multianim_OptionalParametersParsing.ParseFloatOrReference("fadeOut"),bh_multianim_OptionalParametersParsing.ParseFloatOrReference("rotationSpeed"),bh_multianim_OptionalParametersParsing.ParseFloatOrReference("rotationSpeedRandom"),bh_multianim_OptionalParametersParsing.ParseFloatOrReference("rotationInitial"),bh_multianim_OptionalParametersParsing.ParseBool("rotateAuto"),bh_multianim_OptionalParametersParsing.ParseBool("loop"),bh_multianim_OptionalParametersParsing.ParseBool("relative"),bh_multianim_OptionalParametersParsing.ParseCustom("tiles",$bind(this,this.parseTileSources)),bh_multianim_OptionalParametersParsing.ParseCustom("blendMode",$bind(this,this.tryParseBlendMode)),bh_multianim_OptionalParametersParsing.ParseCustom("emit",$bind(this,this.parseParticlesEmitMode))],once);
		if(this.peek(0)._hx_index == 6) {
			this.last = this.token.elt;
			this.token = this.token.next;
		} else {
			this.syntaxError("} expected");
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"emit")) {
			retVal.emit = results.h["emit"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"tiles")) {
			retVal.tiles = results.h["tiles"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"count")) {
			retVal.count = results.h["count"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"emitDelay")) {
			retVal.emitDelay = results.h["emitDelay"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"emitSync")) {
			retVal.emitSync = results.h["emitSync"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"maxLife")) {
			retVal.maxLife = results.h["maxLife"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"lifeRandom")) {
			retVal.lifeRandom = results.h["lifeRandom"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"size")) {
			retVal.size = results.h["size"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"sizeRandom")) {
			retVal.sizeRandom = results.h["sizeRandom"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"speed")) {
			retVal.speed = results.h["speed"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"speedRandom")) {
			retVal.speedRandom = results.h["speedRandom"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"speedIncrease")) {
			retVal.speedIncrease = results.h["speedIncrease"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"gravity")) {
			retVal.gravity = results.h["gravity"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"gravityAngle")) {
			retVal.gravityAngle = results.h["gravityAngle"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"fadeIn")) {
			retVal.fadeIn = results.h["fadeIn"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"fadeOut")) {
			retVal.fadeOut = results.h["fadeOut"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"fadePower")) {
			retVal.fadePower = results.h["fadePower"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"rotationInitial")) {
			retVal.rotationInitial = results.h["rotationInitial"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"rotationSpeed")) {
			retVal.rotationSpeed = results.h["rotationSpeed"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"rotationSpeedRandom")) {
			retVal.rotationSpeedRandom = results.h["rotationSpeedRandom"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"rotateAuto")) {
			retVal.rotateAuto = results.h["rotateAuto"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"loop")) {
			retVal.loop = results.h["loop"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"relative")) {
			retVal.relative = results.h["relative"];
		}
		if(Object.prototype.hasOwnProperty.call(results.h,"blendMode")) {
			retVal.blendMode = results.h["blendMode"];
		}
		return retVal;
	}
	,parseLayouts: function() {
		var layouts = new haxe_ds_StringMap();
		var grids = [];
		var hexes = [];
		var offsets = [new bh_base_Point(0,0)];
		var parsingStates = [bh_multianim__$MultiAnimParser_LayoutsParsingState.LPSEnd];
		while(true) {
			var name = [null];
			var addLayout = (function(name) {
				return function(layoutType) {
					if(layoutType == null) {
						throw haxe_Exception.thrown("missing layout content in layout " + name[0]);
					}
					var layout = { name : name[0], type : layoutType, grid : grids.length == 0 ? null : grids[grids.length - 1], hex : hexes.length == 0 ? null : hexes[hexes.length - 1], offset : Lambda.fold(offsets,(function() {
						return function(a,b) {
							return new bh_base_Point(a.x + b.x,a.y + b.y);
						};
					})(),new bh_base_Point(0,0))};
					if(Object.prototype.hasOwnProperty.call(layouts.h,name[0])) {
						throw haxe_Exception.thrown("layout " + name[0] + " already defined");
					}
					layouts.h[name[0]] = layout;
				};
			})(name);
			var _g = this.peek(0);
			switch(_g._hx_index) {
			case 6:
				this.last = this.token.elt;
				this.token = this.token.next;
				var state = parsingStates.pop();
				if(state == null) {
					this.syntaxError("Unexpected }");
				} else {
					switch(state._hx_index) {
					case 0:
						grids.pop();
						break;
					case 1:
						hexes.pop();
						break;
					case 2:
						offsets.pop();
						break;
					case 3:
						return layouts;
					}
				}
				break;
			case 14:
				var _g1 = _g.s;
				var _g2 = _g.keyword;
				switch(_g.identType._hx_index) {
				case 0:
					if(_g2 == null) {
						this.unexpectedError("Unexpected layout property");
					} else {
						switch(_g2._hx_index) {
						case 16:
							var propName = _g1;
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 10) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var system = this.parseHexCoordianteSystem();
								if(this.peek(0)._hx_index == 5) {
									this.last = this.token.elt;
									this.token = this.token.next;
									parsingStates.push(bh_multianim__$MultiAnimParser_LayoutsParsingState.LPSHex);
									hexes.push(system);
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
							break;
						case 17:
							var propName1 = _g1;
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 10) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var size = this.parseSize();
								if(this.peek(0)._hx_index == 5) {
									this.last = this.token.elt;
									this.token = this.token.next;
									parsingStates.push(bh_multianim__$MultiAnimParser_LayoutsParsingState.LPSOffset);
									offsets.push(new bh_base_Point(size.width,size.height));
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
							break;
						case 18:
							var propName2 = _g1;
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 10) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var system1 = this.parseGridCoordianteSystem();
								if(this.peek(0)._hx_index == 5) {
									this.last = this.token.elt;
									this.token = this.token.next;
									parsingStates.push(bh_multianim__$MultiAnimParser_LayoutsParsingState.LPSGrid);
									grids.push(system1);
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
							break;
						default:
							this.unexpectedError("Unexpected layout property");
						}
					}
					break;
				case 2:
					var n = _g1;
					this.last = this.token.elt;
					this.token = this.token.next;
					name[0] = n;
					var content = this.parseLayoutContent();
					if(content != null) {
						addLayout(bh_multianim_layouts_LayoutsType.Single(content));
						continue;
					}
					var _g3 = this.peek(0);
					if(_g3._hx_index == 14) {
						var _g4 = _g3.s;
						var _g5 = _g3.keyword;
						var _g6 = _g3.identType;
						if(_g5 == null) {
							throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
						} else {
							switch(_g5._hx_index) {
							case 52:
								if(_g6._hx_index == 0) {
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 5) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var contentList = [];
										while(true) {
											var lc = this.parseLayoutContent();
											if(lc != null) {
												this.eatSemicolon();
												contentList.push(lc);
											} else {
												this.eatSemicolon();
												addLayout(bh_multianim_layouts_LayoutsType.List(contentList));
												break;
											}
										}
										if(this.peek(0)._hx_index == 6) {
											this.last = this.token.elt;
											this.token = this.token.next;
										} else {
											this.unexpectedError("expected } or more layout content");
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
								}
								break;
							case 53:
								if(_g6._hx_index == 0) {
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 1) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var _g7 = this.peek(0);
										if(_g7._hx_index == 14) {
											var _g8 = _g7.keyword;
											if(_g7.identType._hx_index == 1) {
												var varName = _g7.s;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var from = this.parseInteger();
													if(this.peek(0)._hx_index == 11) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var to = this.parseInteger();
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															var lc1 = this.parseLayoutContent();
															if(lc1 == null) {
																throw haxe_Exception.thrown("layout content expected");
															}
															addLayout(bh_multianim_layouts_LayoutsType.Sequence(varName,from,to,lc1));
															continue;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
								}
								break;
							default:
								throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
							}
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
					}
					break;
				default:
					this.unexpectedError("Unexpected layout property");
				}
				break;
			case 16:
				this.last = this.token.elt;
				this.token = this.token.next;
				break;
			default:
				this.unexpectedError("Unexpected layout property");
			}
		}
	}
	,parseNodes: function(node,definitions,once,uniqueId,allowParseChildren) {
		if(allowParseChildren == null) {
			allowParseChildren = true;
		}
		while(true) {
			var _g = this.peek(0);
			if(_g._hx_index == 14) {
				var _g1 = _g.s;
				var _g2 = _g.keyword;
				var _g3 = _g.identType;
				if(_g2 == null) {
					var _g4 = this.peek(0);
					if(_g4._hx_index == 14) {
						var _g5 = _g4.s;
						var _g6 = _g4.keyword;
						var _g7 = _g4.identType;
						if(_g6 == null) {
							var _g8 = this.peek(0);
							switch(_g8._hx_index) {
							case 0:
								this.last = this.token.elt;
								this.token = this.token.next;
								if(node != null) {
									this.syntaxError("unexpected end of file");
								} else {
									return;
								}
								break;
							case 6:
								this.last = this.token.elt;
								this.token = this.token.next;
								return;
							case 12:
								this.last = this.token.elt;
								this.token = this.token.next;
								break;
							case 14:
								var _g9 = _g8.s;
								var _g10 = _g8.keyword;
								var _g11 = _g8.identType;
								if(_g10 == null) {
									if(_g11._hx_index == 2) {
										var name = _g9;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un = this.parseUpdatable(name);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName = un;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName = bh_multianim_UpdatableNameType.UNTObject(name);
										}
										var newNode = this.parseNode(updatableName,node,definitions,uniqueId + 1);
										if(newNode == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name,newNode);
										} else {
											node.children.push(newNode);
										}
									} else {
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode1 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode1 == null) {
											continue;
										}
										if(node == null) {
											var tmp = newNode1 != null ? newNode1.updatableName : null;
											this.addNode(tmp != null ? bh_multianim_MultiAnimParser_getNameString(tmp) : null,newNode1);
										} else {
											node.children.push(newNode1);
										}
									}
								} else {
									switch(_g10._hx_index) {
									case 18:
										switch(_g11._hx_index) {
										case 0:
											var propName = _g9;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												if(node == null) {
													this.syntaxError("grid coordinate system not supported on root elements");
												}
												once.parsed(propName);
												node.gridCoordinateSystem = this.parseGridCoordianteSystem();
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name1 = _g9;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName1;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un1 = this.parseUpdatable(name1);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName1 = un1;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName1 = bh_multianim_UpdatableNameType.UNTObject(name1);
											}
											var newNode2 = this.parseNode(updatableName1,node,definitions,uniqueId + 1);
											if(newNode2 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name1,newNode2);
											} else {
												node.children.push(newNode2);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode3 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode3 == null) {
												continue;
											}
											if(node == null) {
												var tmp1 = newNode3 != null ? newNode3.updatableName : null;
												this.addNode(tmp1 != null ? bh_multianim_MultiAnimParser_getNameString(tmp1) : null,newNode3);
											} else {
												node.children.push(newNode3);
											}
										}
										break;
									case 19:
										switch(_g11._hx_index) {
										case 0:
											var propName1 = _g9;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												if(node == null) {
													this.syntaxError("hex coordinate system not supported on root elements");
												}
												once.parsed(propName1);
												node.hexCoordinateSystem = this.parseHexCoordianteSystem();
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name2 = _g9;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName2;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un2 = this.parseUpdatable(name2);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName2 = un2;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName2 = bh_multianim_UpdatableNameType.UNTObject(name2);
											}
											var newNode4 = this.parseNode(updatableName2,node,definitions,uniqueId + 1);
											if(newNode4 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name2,newNode4);
											} else {
												node.children.push(newNode4);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode5 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode5 == null) {
												continue;
											}
											if(node == null) {
												var tmp2 = newNode5 != null ? newNode5.updatableName : null;
												this.addNode(tmp2 != null ? bh_multianim_MultiAnimParser_getNameString(tmp2) : null,newNode5);
											} else {
												node.children.push(newNode5);
											}
										}
										break;
									case 31:
										switch(_g11._hx_index) {
										case 0:
											var propName2 = _g9;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var layerIndex = this.parseInteger();
												if(node == null) {
													this.syntaxError("layer not supported on root elements");
												} else {
													var _g12 = node.parent.type;
													switch(_g12._hx_index) {
													case 7:
														var isTileGroup = _g12.isTileGroup;
														var parameters = _g12.parameters;
														break;
													case 14:
														break;
													default:
														this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(node.type));
													}
												}
												once.parsed(propName2);
												node.layer = layerIndex;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name3 = _g9;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName3;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un3 = this.parseUpdatable(name3);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName3 = un3;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName3 = bh_multianim_UpdatableNameType.UNTObject(name3);
											}
											var newNode6 = this.parseNode(updatableName3,node,definitions,uniqueId + 1);
											if(newNode6 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name3,newNode6);
											} else {
												node.children.push(newNode6);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode7 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode7 == null) {
												continue;
											}
											if(node == null) {
												var tmp3 = newNode7 != null ? newNode7.updatableName : null;
												this.addNode(tmp3 != null ? bh_multianim_MultiAnimParser_getNameString(tmp3) : null,newNode7);
											} else {
												node.children.push(newNode7);
											}
										}
										break;
									case 35:
										switch(_g11._hx_index) {
										case 0:
											var propName3 = _g9;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var f = this.parseFloatOrReference();
												if(node == null) {
													this.syntaxError("scale not supported on root elements");
												}
												once.parsed(propName3);
												node.scale = f;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name4 = _g9;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName4;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un4 = this.parseUpdatable(name4);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName4 = un4;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName4 = bh_multianim_UpdatableNameType.UNTObject(name4);
											}
											var newNode8 = this.parseNode(updatableName4,node,definitions,uniqueId + 1);
											if(newNode8 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name4,newNode8);
											} else {
												node.children.push(newNode8);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode9 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode9 == null) {
												continue;
											}
											if(node == null) {
												var tmp4 = newNode9 != null ? newNode9.updatableName : null;
												this.addNode(tmp4 != null ? bh_multianim_MultiAnimParser_getNameString(tmp4) : null,newNode9);
											} else {
												node.children.push(newNode9);
											}
										}
										break;
									case 36:
										switch(_g11._hx_index) {
										case 0:
											var propName4 = _g9;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var filter = this.parseFilter();
												if(node == null) {
													this.syntaxError("filter not supported on root elements");
												}
												once.parsed(propName4);
												node.filter = filter;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name5 = _g9;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName5;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un5 = this.parseUpdatable(name5);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName5 = un5;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName5 = bh_multianim_UpdatableNameType.UNTObject(name5);
											}
											var newNode10 = this.parseNode(updatableName5,node,definitions,uniqueId + 1);
											if(newNode10 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name5,newNode10);
											} else {
												node.children.push(newNode10);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode11 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode11 == null) {
												continue;
											}
											if(node == null) {
												var tmp5 = newNode11 != null ? newNode11.updatableName : null;
												this.addNode(tmp5 != null ? bh_multianim_MultiAnimParser_getNameString(tmp5) : null,newNode11);
											} else {
												node.children.push(newNode11);
											}
										}
										break;
									case 41:
										switch(_g11._hx_index) {
										case 0:
											var propName5 = _g9;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var f1 = this.parseFloatOrReference();
												if(node == null) {
													this.syntaxError("alpha not supported on root elements");
												}
												once.parsed(propName5);
												node.alpha = f1;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name6 = _g9;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName6;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un6 = this.parseUpdatable(name6);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName6 = un6;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName6 = bh_multianim_UpdatableNameType.UNTObject(name6);
											}
											var newNode12 = this.parseNode(updatableName6,node,definitions,uniqueId + 1);
											if(newNode12 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name6,newNode12);
											} else {
												node.children.push(newNode12);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode13 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode13 == null) {
												continue;
											}
											if(node == null) {
												var tmp6 = newNode13 != null ? newNode13.updatableName : null;
												this.addNode(tmp6 != null ? bh_multianim_MultiAnimParser_getNameString(tmp6) : null,newNode13);
											} else {
												node.children.push(newNode13);
											}
										}
										break;
									case 72:
										switch(_g11._hx_index) {
										case 0:
											var propName6 = _g9;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												if(node == null) {
													this.syntaxError("blendMode not supported on root elements");
												}
												once.parsed(propName6);
												var blendMode = this.tryParseBlendMode();
												if(blendMode == null) {
													this.unexpectedError("unsupported blend mode");
												} else {
													node.blendMode = blendMode;
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name7 = _g9;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName7;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un7 = this.parseUpdatable(name7);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName7 = un7;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName7 = bh_multianim_UpdatableNameType.UNTObject(name7);
											}
											var newNode14 = this.parseNode(updatableName7,node,definitions,uniqueId + 1);
											if(newNode14 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name7,newNode14);
											} else {
												node.children.push(newNode14);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode15 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode15 == null) {
												continue;
											}
											if(node == null) {
												var tmp7 = newNode15 != null ? newNode15.updatableName : null;
												this.addNode(tmp7 != null ? bh_multianim_MultiAnimParser_getNameString(tmp7) : null,newNode15);
											} else {
												node.children.push(newNode15);
											}
										}
										break;
									default:
										if(_g11._hx_index == 2) {
											var name8 = _g9;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName8;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un8 = this.parseUpdatable(name8);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName8 = un8;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName8 = bh_multianim_UpdatableNameType.UNTObject(name8);
											}
											var newNode16 = this.parseNode(updatableName8,node,definitions,uniqueId + 1);
											if(newNode16 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name8,newNode16);
											} else {
												node.children.push(newNode16);
											}
										} else {
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode17 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode17 == null) {
												continue;
											}
											if(node == null) {
												var tmp8 = newNode17 != null ? newNode17.updatableName : null;
												this.addNode(tmp8 != null ? bh_multianim_MultiAnimParser_getNameString(tmp8) : null,newNode17);
											} else {
												node.children.push(newNode17);
											}
										}
									}
								}
								break;
							case 16:
								this.last = this.token.elt;
								this.token = this.token.next;
								break;
							default:
								if(allowParseChildren == false) {
									this.syntaxError("children not allowed");
								}
								var newNode18 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
								if(newNode18 == null) {
									continue;
								}
								if(node == null) {
									var tmp9 = newNode18 != null ? newNode18.updatableName : null;
									this.addNode(tmp9 != null ? bh_multianim_MultiAnimParser_getNameString(tmp9) : null,newNode18);
								} else {
									node.children.push(newNode18);
								}
							}
						} else {
							switch(_g6._hx_index) {
							case 33:case 42:
								if(_g7._hx_index == 0) {
									var propName7 = _g5;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(node == null) {
										this.syntaxError("position not supported on root elements");
									}
									once.parsed(propName7);
									if(this.peek(0)._hx_index == 10) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var pos = this.parseXY();
										node.pos = pos;
									} else {
										this.unexpectedError("expected valid position:x,y, grid, hex, hexEdge, hexCorner");
									}
								} else {
									var _g13 = this.peek(0);
									switch(_g13._hx_index) {
									case 0:
										this.last = this.token.elt;
										this.token = this.token.next;
										if(node != null) {
											this.syntaxError("unexpected end of file");
										} else {
											return;
										}
										break;
									case 6:
										this.last = this.token.elt;
										this.token = this.token.next;
										return;
									case 12:
										this.last = this.token.elt;
										this.token = this.token.next;
										break;
									case 14:
										var _g14 = _g13.s;
										var _g15 = _g13.keyword;
										var _g16 = _g13.identType;
										if(_g15 == null) {
											if(_g16._hx_index == 2) {
												var name9 = _g14;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName9;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un9 = this.parseUpdatable(name9);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName9 = un9;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName9 = bh_multianim_UpdatableNameType.UNTObject(name9);
												}
												var newNode19 = this.parseNode(updatableName9,node,definitions,uniqueId + 1);
												if(newNode19 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name9,newNode19);
												} else {
													node.children.push(newNode19);
												}
											} else {
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode20 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode20 == null) {
													continue;
												}
												if(node == null) {
													var tmp10 = newNode20 != null ? newNode20.updatableName : null;
													this.addNode(tmp10 != null ? bh_multianim_MultiAnimParser_getNameString(tmp10) : null,newNode20);
												} else {
													node.children.push(newNode20);
												}
											}
										} else {
											switch(_g15._hx_index) {
											case 18:
												switch(_g16._hx_index) {
												case 0:
													var propName8 = _g14;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														if(node == null) {
															this.syntaxError("grid coordinate system not supported on root elements");
														}
														once.parsed(propName8);
														node.gridCoordinateSystem = this.parseGridCoordianteSystem();
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name10 = _g14;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName10;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un10 = this.parseUpdatable(name10);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName10 = un10;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName10 = bh_multianim_UpdatableNameType.UNTObject(name10);
													}
													var newNode21 = this.parseNode(updatableName10,node,definitions,uniqueId + 1);
													if(newNode21 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name10,newNode21);
													} else {
														node.children.push(newNode21);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode22 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode22 == null) {
														continue;
													}
													if(node == null) {
														var tmp11 = newNode22 != null ? newNode22.updatableName : null;
														this.addNode(tmp11 != null ? bh_multianim_MultiAnimParser_getNameString(tmp11) : null,newNode22);
													} else {
														node.children.push(newNode22);
													}
												}
												break;
											case 19:
												switch(_g16._hx_index) {
												case 0:
													var propName9 = _g14;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														if(node == null) {
															this.syntaxError("hex coordinate system not supported on root elements");
														}
														once.parsed(propName9);
														node.hexCoordinateSystem = this.parseHexCoordianteSystem();
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name11 = _g14;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName11;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un11 = this.parseUpdatable(name11);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName11 = un11;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName11 = bh_multianim_UpdatableNameType.UNTObject(name11);
													}
													var newNode23 = this.parseNode(updatableName11,node,definitions,uniqueId + 1);
													if(newNode23 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name11,newNode23);
													} else {
														node.children.push(newNode23);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode24 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode24 == null) {
														continue;
													}
													if(node == null) {
														var tmp12 = newNode24 != null ? newNode24.updatableName : null;
														this.addNode(tmp12 != null ? bh_multianim_MultiAnimParser_getNameString(tmp12) : null,newNode24);
													} else {
														node.children.push(newNode24);
													}
												}
												break;
											case 31:
												switch(_g16._hx_index) {
												case 0:
													var propName10 = _g14;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var layerIndex1 = this.parseInteger();
														if(node == null) {
															this.syntaxError("layer not supported on root elements");
														} else {
															var _g17 = node.parent.type;
															switch(_g17._hx_index) {
															case 7:
																var isTileGroup1 = _g17.isTileGroup;
																var parameters1 = _g17.parameters;
																break;
															case 14:
																break;
															default:
																this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(node.type));
															}
														}
														once.parsed(propName10);
														node.layer = layerIndex1;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name12 = _g14;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName12;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un12 = this.parseUpdatable(name12);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName12 = un12;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName12 = bh_multianim_UpdatableNameType.UNTObject(name12);
													}
													var newNode25 = this.parseNode(updatableName12,node,definitions,uniqueId + 1);
													if(newNode25 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name12,newNode25);
													} else {
														node.children.push(newNode25);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode26 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode26 == null) {
														continue;
													}
													if(node == null) {
														var tmp13 = newNode26 != null ? newNode26.updatableName : null;
														this.addNode(tmp13 != null ? bh_multianim_MultiAnimParser_getNameString(tmp13) : null,newNode26);
													} else {
														node.children.push(newNode26);
													}
												}
												break;
											case 35:
												switch(_g16._hx_index) {
												case 0:
													var propName11 = _g14;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var f2 = this.parseFloatOrReference();
														if(node == null) {
															this.syntaxError("scale not supported on root elements");
														}
														once.parsed(propName11);
														node.scale = f2;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name13 = _g14;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName13;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un13 = this.parseUpdatable(name13);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName13 = un13;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName13 = bh_multianim_UpdatableNameType.UNTObject(name13);
													}
													var newNode27 = this.parseNode(updatableName13,node,definitions,uniqueId + 1);
													if(newNode27 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name13,newNode27);
													} else {
														node.children.push(newNode27);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode28 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode28 == null) {
														continue;
													}
													if(node == null) {
														var tmp14 = newNode28 != null ? newNode28.updatableName : null;
														this.addNode(tmp14 != null ? bh_multianim_MultiAnimParser_getNameString(tmp14) : null,newNode28);
													} else {
														node.children.push(newNode28);
													}
												}
												break;
											case 36:
												switch(_g16._hx_index) {
												case 0:
													var propName12 = _g14;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var filter1 = this.parseFilter();
														if(node == null) {
															this.syntaxError("filter not supported on root elements");
														}
														once.parsed(propName12);
														node.filter = filter1;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name14 = _g14;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName14;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un14 = this.parseUpdatable(name14);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName14 = un14;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName14 = bh_multianim_UpdatableNameType.UNTObject(name14);
													}
													var newNode29 = this.parseNode(updatableName14,node,definitions,uniqueId + 1);
													if(newNode29 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name14,newNode29);
													} else {
														node.children.push(newNode29);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode30 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode30 == null) {
														continue;
													}
													if(node == null) {
														var tmp15 = newNode30 != null ? newNode30.updatableName : null;
														this.addNode(tmp15 != null ? bh_multianim_MultiAnimParser_getNameString(tmp15) : null,newNode30);
													} else {
														node.children.push(newNode30);
													}
												}
												break;
											case 41:
												switch(_g16._hx_index) {
												case 0:
													var propName13 = _g14;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var f3 = this.parseFloatOrReference();
														if(node == null) {
															this.syntaxError("alpha not supported on root elements");
														}
														once.parsed(propName13);
														node.alpha = f3;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name15 = _g14;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName15;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un15 = this.parseUpdatable(name15);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName15 = un15;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName15 = bh_multianim_UpdatableNameType.UNTObject(name15);
													}
													var newNode31 = this.parseNode(updatableName15,node,definitions,uniqueId + 1);
													if(newNode31 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name15,newNode31);
													} else {
														node.children.push(newNode31);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode32 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode32 == null) {
														continue;
													}
													if(node == null) {
														var tmp16 = newNode32 != null ? newNode32.updatableName : null;
														this.addNode(tmp16 != null ? bh_multianim_MultiAnimParser_getNameString(tmp16) : null,newNode32);
													} else {
														node.children.push(newNode32);
													}
												}
												break;
											case 72:
												switch(_g16._hx_index) {
												case 0:
													var propName14 = _g14;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														if(node == null) {
															this.syntaxError("blendMode not supported on root elements");
														}
														once.parsed(propName14);
														var blendMode1 = this.tryParseBlendMode();
														if(blendMode1 == null) {
															this.unexpectedError("unsupported blend mode");
														} else {
															node.blendMode = blendMode1;
														}
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name16 = _g14;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName16;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un16 = this.parseUpdatable(name16);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName16 = un16;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName16 = bh_multianim_UpdatableNameType.UNTObject(name16);
													}
													var newNode33 = this.parseNode(updatableName16,node,definitions,uniqueId + 1);
													if(newNode33 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name16,newNode33);
													} else {
														node.children.push(newNode33);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode34 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode34 == null) {
														continue;
													}
													if(node == null) {
														var tmp17 = newNode34 != null ? newNode34.updatableName : null;
														this.addNode(tmp17 != null ? bh_multianim_MultiAnimParser_getNameString(tmp17) : null,newNode34);
													} else {
														node.children.push(newNode34);
													}
												}
												break;
											default:
												if(_g16._hx_index == 2) {
													var name17 = _g14;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName17;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un17 = this.parseUpdatable(name17);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName17 = un17;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName17 = bh_multianim_UpdatableNameType.UNTObject(name17);
													}
													var newNode35 = this.parseNode(updatableName17,node,definitions,uniqueId + 1);
													if(newNode35 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name17,newNode35);
													} else {
														node.children.push(newNode35);
													}
												} else {
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode36 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode36 == null) {
														continue;
													}
													if(node == null) {
														var tmp18 = newNode36 != null ? newNode36.updatableName : null;
														this.addNode(tmp18 != null ? bh_multianim_MultiAnimParser_getNameString(tmp18) : null,newNode36);
													} else {
														node.children.push(newNode36);
													}
												}
											}
										}
										break;
									case 16:
										this.last = this.token.elt;
										this.token = this.token.next;
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode37 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode37 == null) {
											continue;
										}
										if(node == null) {
											var tmp19 = newNode37 != null ? newNode37.updatableName : null;
											this.addNode(tmp19 != null ? bh_multianim_MultiAnimParser_getNameString(tmp19) : null,newNode37);
										} else {
											node.children.push(newNode37);
										}
									}
								}
								break;
							default:
								var _g18 = this.peek(0);
								switch(_g18._hx_index) {
								case 0:
									this.last = this.token.elt;
									this.token = this.token.next;
									if(node != null) {
										this.syntaxError("unexpected end of file");
									} else {
										return;
									}
									break;
								case 6:
									this.last = this.token.elt;
									this.token = this.token.next;
									return;
								case 12:
									this.last = this.token.elt;
									this.token = this.token.next;
									break;
								case 14:
									var _g19 = _g18.s;
									var _g20 = _g18.keyword;
									var _g21 = _g18.identType;
									if(_g20 == null) {
										if(_g21._hx_index == 2) {
											var name18 = _g19;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName18;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un18 = this.parseUpdatable(name18);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName18 = un18;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName18 = bh_multianim_UpdatableNameType.UNTObject(name18);
											}
											var newNode38 = this.parseNode(updatableName18,node,definitions,uniqueId + 1);
											if(newNode38 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name18,newNode38);
											} else {
												node.children.push(newNode38);
											}
										} else {
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode39 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode39 == null) {
												continue;
											}
											if(node == null) {
												var tmp20 = newNode39 != null ? newNode39.updatableName : null;
												this.addNode(tmp20 != null ? bh_multianim_MultiAnimParser_getNameString(tmp20) : null,newNode39);
											} else {
												node.children.push(newNode39);
											}
										}
									} else {
										switch(_g20._hx_index) {
										case 18:
											switch(_g21._hx_index) {
											case 0:
												var propName15 = _g19;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													if(node == null) {
														this.syntaxError("grid coordinate system not supported on root elements");
													}
													once.parsed(propName15);
													node.gridCoordinateSystem = this.parseGridCoordianteSystem();
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name19 = _g19;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName19;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un19 = this.parseUpdatable(name19);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName19 = un19;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName19 = bh_multianim_UpdatableNameType.UNTObject(name19);
												}
												var newNode40 = this.parseNode(updatableName19,node,definitions,uniqueId + 1);
												if(newNode40 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name19,newNode40);
												} else {
													node.children.push(newNode40);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode41 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode41 == null) {
													continue;
												}
												if(node == null) {
													var tmp21 = newNode41 != null ? newNode41.updatableName : null;
													this.addNode(tmp21 != null ? bh_multianim_MultiAnimParser_getNameString(tmp21) : null,newNode41);
												} else {
													node.children.push(newNode41);
												}
											}
											break;
										case 19:
											switch(_g21._hx_index) {
											case 0:
												var propName16 = _g19;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													if(node == null) {
														this.syntaxError("hex coordinate system not supported on root elements");
													}
													once.parsed(propName16);
													node.hexCoordinateSystem = this.parseHexCoordianteSystem();
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name20 = _g19;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName20;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un20 = this.parseUpdatable(name20);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName20 = un20;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName20 = bh_multianim_UpdatableNameType.UNTObject(name20);
												}
												var newNode42 = this.parseNode(updatableName20,node,definitions,uniqueId + 1);
												if(newNode42 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name20,newNode42);
												} else {
													node.children.push(newNode42);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode43 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode43 == null) {
													continue;
												}
												if(node == null) {
													var tmp22 = newNode43 != null ? newNode43.updatableName : null;
													this.addNode(tmp22 != null ? bh_multianim_MultiAnimParser_getNameString(tmp22) : null,newNode43);
												} else {
													node.children.push(newNode43);
												}
											}
											break;
										case 31:
											switch(_g21._hx_index) {
											case 0:
												var propName17 = _g19;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var layerIndex2 = this.parseInteger();
													if(node == null) {
														this.syntaxError("layer not supported on root elements");
													} else {
														var _g22 = node.parent.type;
														switch(_g22._hx_index) {
														case 7:
															var isTileGroup2 = _g22.isTileGroup;
															var parameters2 = _g22.parameters;
															break;
														case 14:
															break;
														default:
															this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(node.type));
														}
													}
													once.parsed(propName17);
													node.layer = layerIndex2;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name21 = _g19;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName21;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un21 = this.parseUpdatable(name21);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName21 = un21;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName21 = bh_multianim_UpdatableNameType.UNTObject(name21);
												}
												var newNode44 = this.parseNode(updatableName21,node,definitions,uniqueId + 1);
												if(newNode44 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name21,newNode44);
												} else {
													node.children.push(newNode44);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode45 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode45 == null) {
													continue;
												}
												if(node == null) {
													var tmp23 = newNode45 != null ? newNode45.updatableName : null;
													this.addNode(tmp23 != null ? bh_multianim_MultiAnimParser_getNameString(tmp23) : null,newNode45);
												} else {
													node.children.push(newNode45);
												}
											}
											break;
										case 35:
											switch(_g21._hx_index) {
											case 0:
												var propName18 = _g19;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var f4 = this.parseFloatOrReference();
													if(node == null) {
														this.syntaxError("scale not supported on root elements");
													}
													once.parsed(propName18);
													node.scale = f4;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name22 = _g19;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName22;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un22 = this.parseUpdatable(name22);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName22 = un22;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName22 = bh_multianim_UpdatableNameType.UNTObject(name22);
												}
												var newNode46 = this.parseNode(updatableName22,node,definitions,uniqueId + 1);
												if(newNode46 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name22,newNode46);
												} else {
													node.children.push(newNode46);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode47 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode47 == null) {
													continue;
												}
												if(node == null) {
													var tmp24 = newNode47 != null ? newNode47.updatableName : null;
													this.addNode(tmp24 != null ? bh_multianim_MultiAnimParser_getNameString(tmp24) : null,newNode47);
												} else {
													node.children.push(newNode47);
												}
											}
											break;
										case 36:
											switch(_g21._hx_index) {
											case 0:
												var propName19 = _g19;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var filter2 = this.parseFilter();
													if(node == null) {
														this.syntaxError("filter not supported on root elements");
													}
													once.parsed(propName19);
													node.filter = filter2;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name23 = _g19;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName23;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un23 = this.parseUpdatable(name23);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName23 = un23;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName23 = bh_multianim_UpdatableNameType.UNTObject(name23);
												}
												var newNode48 = this.parseNode(updatableName23,node,definitions,uniqueId + 1);
												if(newNode48 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name23,newNode48);
												} else {
													node.children.push(newNode48);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode49 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode49 == null) {
													continue;
												}
												if(node == null) {
													var tmp25 = newNode49 != null ? newNode49.updatableName : null;
													this.addNode(tmp25 != null ? bh_multianim_MultiAnimParser_getNameString(tmp25) : null,newNode49);
												} else {
													node.children.push(newNode49);
												}
											}
											break;
										case 41:
											switch(_g21._hx_index) {
											case 0:
												var propName20 = _g19;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var f5 = this.parseFloatOrReference();
													if(node == null) {
														this.syntaxError("alpha not supported on root elements");
													}
													once.parsed(propName20);
													node.alpha = f5;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name24 = _g19;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName24;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un24 = this.parseUpdatable(name24);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName24 = un24;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName24 = bh_multianim_UpdatableNameType.UNTObject(name24);
												}
												var newNode50 = this.parseNode(updatableName24,node,definitions,uniqueId + 1);
												if(newNode50 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name24,newNode50);
												} else {
													node.children.push(newNode50);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode51 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode51 == null) {
													continue;
												}
												if(node == null) {
													var tmp26 = newNode51 != null ? newNode51.updatableName : null;
													this.addNode(tmp26 != null ? bh_multianim_MultiAnimParser_getNameString(tmp26) : null,newNode51);
												} else {
													node.children.push(newNode51);
												}
											}
											break;
										case 72:
											switch(_g21._hx_index) {
											case 0:
												var propName21 = _g19;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													if(node == null) {
														this.syntaxError("blendMode not supported on root elements");
													}
													once.parsed(propName21);
													var blendMode2 = this.tryParseBlendMode();
													if(blendMode2 == null) {
														this.unexpectedError("unsupported blend mode");
													} else {
														node.blendMode = blendMode2;
													}
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name25 = _g19;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName25;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un25 = this.parseUpdatable(name25);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName25 = un25;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName25 = bh_multianim_UpdatableNameType.UNTObject(name25);
												}
												var newNode52 = this.parseNode(updatableName25,node,definitions,uniqueId + 1);
												if(newNode52 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name25,newNode52);
												} else {
													node.children.push(newNode52);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode53 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode53 == null) {
													continue;
												}
												if(node == null) {
													var tmp27 = newNode53 != null ? newNode53.updatableName : null;
													this.addNode(tmp27 != null ? bh_multianim_MultiAnimParser_getNameString(tmp27) : null,newNode53);
												} else {
													node.children.push(newNode53);
												}
											}
											break;
										default:
											if(_g21._hx_index == 2) {
												var name26 = _g19;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName26;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un26 = this.parseUpdatable(name26);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName26 = un26;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName26 = bh_multianim_UpdatableNameType.UNTObject(name26);
												}
												var newNode54 = this.parseNode(updatableName26,node,definitions,uniqueId + 1);
												if(newNode54 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name26,newNode54);
												} else {
													node.children.push(newNode54);
												}
											} else {
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode55 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode55 == null) {
													continue;
												}
												if(node == null) {
													var tmp28 = newNode55 != null ? newNode55.updatableName : null;
													this.addNode(tmp28 != null ? bh_multianim_MultiAnimParser_getNameString(tmp28) : null,newNode55);
												} else {
													node.children.push(newNode55);
												}
											}
										}
									}
									break;
								case 16:
									this.last = this.token.elt;
									this.token = this.token.next;
									break;
								default:
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var newNode56 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
									if(newNode56 == null) {
										continue;
									}
									if(node == null) {
										var tmp29 = newNode56 != null ? newNode56.updatableName : null;
										this.addNode(tmp29 != null ? bh_multianim_MultiAnimParser_getNameString(tmp29) : null,newNode56);
									} else {
										node.children.push(newNode56);
									}
								}
							}
						}
					} else {
						var _g23 = this.peek(0);
						switch(_g23._hx_index) {
						case 0:
							this.last = this.token.elt;
							this.token = this.token.next;
							if(node != null) {
								this.syntaxError("unexpected end of file");
							} else {
								return;
							}
							break;
						case 6:
							this.last = this.token.elt;
							this.token = this.token.next;
							return;
						case 12:
							this.last = this.token.elt;
							this.token = this.token.next;
							break;
						case 14:
							var _g24 = _g23.s;
							var _g25 = _g23.keyword;
							var _g26 = _g23.identType;
							if(_g25 == null) {
								if(_g26._hx_index == 2) {
									var name27 = _g24;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var updatableName27;
									if(this.peek(0)._hx_index == 1) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var un27 = this.parseUpdatable(name27);
										if(this.peek(0)._hx_index == 2) {
											this.last = this.token.elt;
											this.token = this.token.next;
											updatableName27 = un27;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										updatableName27 = bh_multianim_UpdatableNameType.UNTObject(name27);
									}
									var newNode57 = this.parseNode(updatableName27,node,definitions,uniqueId + 1);
									if(newNode57 == null) {
										continue;
									}
									if(node == null) {
										this.addNode(name27,newNode57);
									} else {
										node.children.push(newNode57);
									}
								} else {
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var newNode58 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
									if(newNode58 == null) {
										continue;
									}
									if(node == null) {
										var tmp30 = newNode58 != null ? newNode58.updatableName : null;
										this.addNode(tmp30 != null ? bh_multianim_MultiAnimParser_getNameString(tmp30) : null,newNode58);
									} else {
										node.children.push(newNode58);
									}
								}
							} else {
								switch(_g25._hx_index) {
								case 18:
									switch(_g26._hx_index) {
									case 0:
										var propName22 = _g24;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											if(node == null) {
												this.syntaxError("grid coordinate system not supported on root elements");
											}
											once.parsed(propName22);
											node.gridCoordinateSystem = this.parseGridCoordianteSystem();
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name28 = _g24;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName28;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un28 = this.parseUpdatable(name28);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName28 = un28;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName28 = bh_multianim_UpdatableNameType.UNTObject(name28);
										}
										var newNode59 = this.parseNode(updatableName28,node,definitions,uniqueId + 1);
										if(newNode59 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name28,newNode59);
										} else {
											node.children.push(newNode59);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode60 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode60 == null) {
											continue;
										}
										if(node == null) {
											var tmp31 = newNode60 != null ? newNode60.updatableName : null;
											this.addNode(tmp31 != null ? bh_multianim_MultiAnimParser_getNameString(tmp31) : null,newNode60);
										} else {
											node.children.push(newNode60);
										}
									}
									break;
								case 19:
									switch(_g26._hx_index) {
									case 0:
										var propName23 = _g24;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											if(node == null) {
												this.syntaxError("hex coordinate system not supported on root elements");
											}
											once.parsed(propName23);
											node.hexCoordinateSystem = this.parseHexCoordianteSystem();
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name29 = _g24;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName29;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un29 = this.parseUpdatable(name29);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName29 = un29;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName29 = bh_multianim_UpdatableNameType.UNTObject(name29);
										}
										var newNode61 = this.parseNode(updatableName29,node,definitions,uniqueId + 1);
										if(newNode61 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name29,newNode61);
										} else {
											node.children.push(newNode61);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode62 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode62 == null) {
											continue;
										}
										if(node == null) {
											var tmp32 = newNode62 != null ? newNode62.updatableName : null;
											this.addNode(tmp32 != null ? bh_multianim_MultiAnimParser_getNameString(tmp32) : null,newNode62);
										} else {
											node.children.push(newNode62);
										}
									}
									break;
								case 31:
									switch(_g26._hx_index) {
									case 0:
										var propName24 = _g24;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var layerIndex3 = this.parseInteger();
											if(node == null) {
												this.syntaxError("layer not supported on root elements");
											} else {
												var _g27 = node.parent.type;
												switch(_g27._hx_index) {
												case 7:
													var isTileGroup3 = _g27.isTileGroup;
													var parameters3 = _g27.parameters;
													break;
												case 14:
													break;
												default:
													this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(node.type));
												}
											}
											once.parsed(propName24);
											node.layer = layerIndex3;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name30 = _g24;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName30;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un30 = this.parseUpdatable(name30);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName30 = un30;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName30 = bh_multianim_UpdatableNameType.UNTObject(name30);
										}
										var newNode63 = this.parseNode(updatableName30,node,definitions,uniqueId + 1);
										if(newNode63 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name30,newNode63);
										} else {
											node.children.push(newNode63);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode64 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode64 == null) {
											continue;
										}
										if(node == null) {
											var tmp33 = newNode64 != null ? newNode64.updatableName : null;
											this.addNode(tmp33 != null ? bh_multianim_MultiAnimParser_getNameString(tmp33) : null,newNode64);
										} else {
											node.children.push(newNode64);
										}
									}
									break;
								case 35:
									switch(_g26._hx_index) {
									case 0:
										var propName25 = _g24;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var f6 = this.parseFloatOrReference();
											if(node == null) {
												this.syntaxError("scale not supported on root elements");
											}
											once.parsed(propName25);
											node.scale = f6;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name31 = _g24;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName31;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un31 = this.parseUpdatable(name31);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName31 = un31;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName31 = bh_multianim_UpdatableNameType.UNTObject(name31);
										}
										var newNode65 = this.parseNode(updatableName31,node,definitions,uniqueId + 1);
										if(newNode65 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name31,newNode65);
										} else {
											node.children.push(newNode65);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode66 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode66 == null) {
											continue;
										}
										if(node == null) {
											var tmp34 = newNode66 != null ? newNode66.updatableName : null;
											this.addNode(tmp34 != null ? bh_multianim_MultiAnimParser_getNameString(tmp34) : null,newNode66);
										} else {
											node.children.push(newNode66);
										}
									}
									break;
								case 36:
									switch(_g26._hx_index) {
									case 0:
										var propName26 = _g24;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var filter3 = this.parseFilter();
											if(node == null) {
												this.syntaxError("filter not supported on root elements");
											}
											once.parsed(propName26);
											node.filter = filter3;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name32 = _g24;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName32;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un32 = this.parseUpdatable(name32);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName32 = un32;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName32 = bh_multianim_UpdatableNameType.UNTObject(name32);
										}
										var newNode67 = this.parseNode(updatableName32,node,definitions,uniqueId + 1);
										if(newNode67 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name32,newNode67);
										} else {
											node.children.push(newNode67);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode68 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode68 == null) {
											continue;
										}
										if(node == null) {
											var tmp35 = newNode68 != null ? newNode68.updatableName : null;
											this.addNode(tmp35 != null ? bh_multianim_MultiAnimParser_getNameString(tmp35) : null,newNode68);
										} else {
											node.children.push(newNode68);
										}
									}
									break;
								case 41:
									switch(_g26._hx_index) {
									case 0:
										var propName27 = _g24;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var f7 = this.parseFloatOrReference();
											if(node == null) {
												this.syntaxError("alpha not supported on root elements");
											}
											once.parsed(propName27);
											node.alpha = f7;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name33 = _g24;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName33;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un33 = this.parseUpdatable(name33);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName33 = un33;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName33 = bh_multianim_UpdatableNameType.UNTObject(name33);
										}
										var newNode69 = this.parseNode(updatableName33,node,definitions,uniqueId + 1);
										if(newNode69 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name33,newNode69);
										} else {
											node.children.push(newNode69);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode70 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode70 == null) {
											continue;
										}
										if(node == null) {
											var tmp36 = newNode70 != null ? newNode70.updatableName : null;
											this.addNode(tmp36 != null ? bh_multianim_MultiAnimParser_getNameString(tmp36) : null,newNode70);
										} else {
											node.children.push(newNode70);
										}
									}
									break;
								case 72:
									switch(_g26._hx_index) {
									case 0:
										var propName28 = _g24;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											if(node == null) {
												this.syntaxError("blendMode not supported on root elements");
											}
											once.parsed(propName28);
											var blendMode3 = this.tryParseBlendMode();
											if(blendMode3 == null) {
												this.unexpectedError("unsupported blend mode");
											} else {
												node.blendMode = blendMode3;
											}
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name34 = _g24;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName34;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un34 = this.parseUpdatable(name34);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName34 = un34;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName34 = bh_multianim_UpdatableNameType.UNTObject(name34);
										}
										var newNode71 = this.parseNode(updatableName34,node,definitions,uniqueId + 1);
										if(newNode71 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name34,newNode71);
										} else {
											node.children.push(newNode71);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode72 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode72 == null) {
											continue;
										}
										if(node == null) {
											var tmp37 = newNode72 != null ? newNode72.updatableName : null;
											this.addNode(tmp37 != null ? bh_multianim_MultiAnimParser_getNameString(tmp37) : null,newNode72);
										} else {
											node.children.push(newNode72);
										}
									}
									break;
								default:
									if(_g26._hx_index == 2) {
										var name35 = _g24;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName35;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un35 = this.parseUpdatable(name35);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName35 = un35;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName35 = bh_multianim_UpdatableNameType.UNTObject(name35);
										}
										var newNode73 = this.parseNode(updatableName35,node,definitions,uniqueId + 1);
										if(newNode73 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name35,newNode73);
										} else {
											node.children.push(newNode73);
										}
									} else {
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode74 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode74 == null) {
											continue;
										}
										if(node == null) {
											var tmp38 = newNode74 != null ? newNode74.updatableName : null;
											this.addNode(tmp38 != null ? bh_multianim_MultiAnimParser_getNameString(tmp38) : null,newNode74);
										} else {
											node.children.push(newNode74);
										}
									}
								}
							}
							break;
						case 16:
							this.last = this.token.elt;
							this.token = this.token.next;
							break;
						default:
							if(allowParseChildren == false) {
								this.syntaxError("children not allowed");
							}
							var newNode75 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
							if(newNode75 == null) {
								continue;
							}
							if(node == null) {
								var tmp39 = newNode75 != null ? newNode75.updatableName : null;
								this.addNode(tmp39 != null ? bh_multianim_MultiAnimParser_getNameString(tmp39) : null,newNode75);
							} else {
								node.children.push(newNode75);
							}
						}
					}
				} else if(_g2._hx_index == 34) {
					if(_g3._hx_index == 0) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var _g28 = this.peek(0);
						if(_g28._hx_index == 14) {
							var _g29 = _g28.s;
							var _g30 = _g28.keyword;
							switch(_g28.identType._hx_index) {
							case 0:case 3:
								var file = _g29;
								this.last = this.token.elt;
								this.token = this.token.next;
								var _g31 = this.peek(0);
								if(_g31._hx_index == 14) {
									var _g32 = _g31.keyword;
									if(_g31.s == "as") {
										if(_g31.identType._hx_index == 0) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var _g33 = this.peek(0);
											if(_g33._hx_index == 14) {
												var _g34 = _g33.s;
												var _g35 = _g33.keyword;
												switch(_g33.identType._hx_index) {
												case 0:case 3:
													var importName = _g34;
													this.last = this.token.elt;
													this.token = this.token.next;
													this.eatSemicolon();
													var loadedFile = this.resourceLoader.loadMultiAnim(file);
													if(loadedFile == null) {
														this.syntaxError("could not load multiAnim file " + file);
													}
													this.imports.h[importName] = loadedFile;
													break;
												default:
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
								break;
							default:
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						var _g36 = this.peek(0);
						if(_g36._hx_index == 14) {
							var _g37 = _g36.s;
							var _g38 = _g36.keyword;
							var _g39 = _g36.identType;
							if(_g38 == null) {
								var _g40 = this.peek(0);
								switch(_g40._hx_index) {
								case 0:
									this.last = this.token.elt;
									this.token = this.token.next;
									if(node != null) {
										this.syntaxError("unexpected end of file");
									} else {
										return;
									}
									break;
								case 6:
									this.last = this.token.elt;
									this.token = this.token.next;
									return;
								case 12:
									this.last = this.token.elt;
									this.token = this.token.next;
									break;
								case 14:
									var _g41 = _g40.s;
									var _g42 = _g40.keyword;
									var _g43 = _g40.identType;
									if(_g42 == null) {
										if(_g43._hx_index == 2) {
											var name36 = _g41;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName36;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un36 = this.parseUpdatable(name36);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName36 = un36;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName36 = bh_multianim_UpdatableNameType.UNTObject(name36);
											}
											var newNode76 = this.parseNode(updatableName36,node,definitions,uniqueId + 1);
											if(newNode76 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name36,newNode76);
											} else {
												node.children.push(newNode76);
											}
										} else {
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode77 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode77 == null) {
												continue;
											}
											if(node == null) {
												var tmp40 = newNode77 != null ? newNode77.updatableName : null;
												this.addNode(tmp40 != null ? bh_multianim_MultiAnimParser_getNameString(tmp40) : null,newNode77);
											} else {
												node.children.push(newNode77);
											}
										}
									} else {
										switch(_g42._hx_index) {
										case 18:
											switch(_g43._hx_index) {
											case 0:
												var propName29 = _g41;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													if(node == null) {
														this.syntaxError("grid coordinate system not supported on root elements");
													}
													once.parsed(propName29);
													node.gridCoordinateSystem = this.parseGridCoordianteSystem();
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name37 = _g41;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName37;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un37 = this.parseUpdatable(name37);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName37 = un37;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName37 = bh_multianim_UpdatableNameType.UNTObject(name37);
												}
												var newNode78 = this.parseNode(updatableName37,node,definitions,uniqueId + 1);
												if(newNode78 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name37,newNode78);
												} else {
													node.children.push(newNode78);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode79 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode79 == null) {
													continue;
												}
												if(node == null) {
													var tmp41 = newNode79 != null ? newNode79.updatableName : null;
													this.addNode(tmp41 != null ? bh_multianim_MultiAnimParser_getNameString(tmp41) : null,newNode79);
												} else {
													node.children.push(newNode79);
												}
											}
											break;
										case 19:
											switch(_g43._hx_index) {
											case 0:
												var propName30 = _g41;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													if(node == null) {
														this.syntaxError("hex coordinate system not supported on root elements");
													}
													once.parsed(propName30);
													node.hexCoordinateSystem = this.parseHexCoordianteSystem();
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name38 = _g41;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName38;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un38 = this.parseUpdatable(name38);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName38 = un38;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName38 = bh_multianim_UpdatableNameType.UNTObject(name38);
												}
												var newNode80 = this.parseNode(updatableName38,node,definitions,uniqueId + 1);
												if(newNode80 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name38,newNode80);
												} else {
													node.children.push(newNode80);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode81 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode81 == null) {
													continue;
												}
												if(node == null) {
													var tmp42 = newNode81 != null ? newNode81.updatableName : null;
													this.addNode(tmp42 != null ? bh_multianim_MultiAnimParser_getNameString(tmp42) : null,newNode81);
												} else {
													node.children.push(newNode81);
												}
											}
											break;
										case 31:
											switch(_g43._hx_index) {
											case 0:
												var propName31 = _g41;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var layerIndex4 = this.parseInteger();
													if(node == null) {
														this.syntaxError("layer not supported on root elements");
													} else {
														var _g44 = node.parent.type;
														switch(_g44._hx_index) {
														case 7:
															var isTileGroup4 = _g44.isTileGroup;
															var parameters4 = _g44.parameters;
															break;
														case 14:
															break;
														default:
															this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(node.type));
														}
													}
													once.parsed(propName31);
													node.layer = layerIndex4;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name39 = _g41;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName39;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un39 = this.parseUpdatable(name39);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName39 = un39;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName39 = bh_multianim_UpdatableNameType.UNTObject(name39);
												}
												var newNode82 = this.parseNode(updatableName39,node,definitions,uniqueId + 1);
												if(newNode82 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name39,newNode82);
												} else {
													node.children.push(newNode82);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode83 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode83 == null) {
													continue;
												}
												if(node == null) {
													var tmp43 = newNode83 != null ? newNode83.updatableName : null;
													this.addNode(tmp43 != null ? bh_multianim_MultiAnimParser_getNameString(tmp43) : null,newNode83);
												} else {
													node.children.push(newNode83);
												}
											}
											break;
										case 35:
											switch(_g43._hx_index) {
											case 0:
												var propName32 = _g41;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var f8 = this.parseFloatOrReference();
													if(node == null) {
														this.syntaxError("scale not supported on root elements");
													}
													once.parsed(propName32);
													node.scale = f8;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name40 = _g41;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName40;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un40 = this.parseUpdatable(name40);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName40 = un40;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName40 = bh_multianim_UpdatableNameType.UNTObject(name40);
												}
												var newNode84 = this.parseNode(updatableName40,node,definitions,uniqueId + 1);
												if(newNode84 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name40,newNode84);
												} else {
													node.children.push(newNode84);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode85 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode85 == null) {
													continue;
												}
												if(node == null) {
													var tmp44 = newNode85 != null ? newNode85.updatableName : null;
													this.addNode(tmp44 != null ? bh_multianim_MultiAnimParser_getNameString(tmp44) : null,newNode85);
												} else {
													node.children.push(newNode85);
												}
											}
											break;
										case 36:
											switch(_g43._hx_index) {
											case 0:
												var propName33 = _g41;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var filter4 = this.parseFilter();
													if(node == null) {
														this.syntaxError("filter not supported on root elements");
													}
													once.parsed(propName33);
													node.filter = filter4;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name41 = _g41;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName41;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un41 = this.parseUpdatable(name41);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName41 = un41;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName41 = bh_multianim_UpdatableNameType.UNTObject(name41);
												}
												var newNode86 = this.parseNode(updatableName41,node,definitions,uniqueId + 1);
												if(newNode86 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name41,newNode86);
												} else {
													node.children.push(newNode86);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode87 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode87 == null) {
													continue;
												}
												if(node == null) {
													var tmp45 = newNode87 != null ? newNode87.updatableName : null;
													this.addNode(tmp45 != null ? bh_multianim_MultiAnimParser_getNameString(tmp45) : null,newNode87);
												} else {
													node.children.push(newNode87);
												}
											}
											break;
										case 41:
											switch(_g43._hx_index) {
											case 0:
												var propName34 = _g41;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var f9 = this.parseFloatOrReference();
													if(node == null) {
														this.syntaxError("alpha not supported on root elements");
													}
													once.parsed(propName34);
													node.alpha = f9;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name42 = _g41;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName42;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un42 = this.parseUpdatable(name42);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName42 = un42;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName42 = bh_multianim_UpdatableNameType.UNTObject(name42);
												}
												var newNode88 = this.parseNode(updatableName42,node,definitions,uniqueId + 1);
												if(newNode88 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name42,newNode88);
												} else {
													node.children.push(newNode88);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode89 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode89 == null) {
													continue;
												}
												if(node == null) {
													var tmp46 = newNode89 != null ? newNode89.updatableName : null;
													this.addNode(tmp46 != null ? bh_multianim_MultiAnimParser_getNameString(tmp46) : null,newNode89);
												} else {
													node.children.push(newNode89);
												}
											}
											break;
										case 72:
											switch(_g43._hx_index) {
											case 0:
												var propName35 = _g41;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													if(node == null) {
														this.syntaxError("blendMode not supported on root elements");
													}
													once.parsed(propName35);
													var blendMode4 = this.tryParseBlendMode();
													if(blendMode4 == null) {
														this.unexpectedError("unsupported blend mode");
													} else {
														node.blendMode = blendMode4;
													}
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name43 = _g41;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName43;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un43 = this.parseUpdatable(name43);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName43 = un43;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName43 = bh_multianim_UpdatableNameType.UNTObject(name43);
												}
												var newNode90 = this.parseNode(updatableName43,node,definitions,uniqueId + 1);
												if(newNode90 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name43,newNode90);
												} else {
													node.children.push(newNode90);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode91 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode91 == null) {
													continue;
												}
												if(node == null) {
													var tmp47 = newNode91 != null ? newNode91.updatableName : null;
													this.addNode(tmp47 != null ? bh_multianim_MultiAnimParser_getNameString(tmp47) : null,newNode91);
												} else {
													node.children.push(newNode91);
												}
											}
											break;
										default:
											if(_g43._hx_index == 2) {
												var name44 = _g41;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName44;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un44 = this.parseUpdatable(name44);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName44 = un44;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName44 = bh_multianim_UpdatableNameType.UNTObject(name44);
												}
												var newNode92 = this.parseNode(updatableName44,node,definitions,uniqueId + 1);
												if(newNode92 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name44,newNode92);
												} else {
													node.children.push(newNode92);
												}
											} else {
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode93 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode93 == null) {
													continue;
												}
												if(node == null) {
													var tmp48 = newNode93 != null ? newNode93.updatableName : null;
													this.addNode(tmp48 != null ? bh_multianim_MultiAnimParser_getNameString(tmp48) : null,newNode93);
												} else {
													node.children.push(newNode93);
												}
											}
										}
									}
									break;
								case 16:
									this.last = this.token.elt;
									this.token = this.token.next;
									break;
								default:
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var newNode94 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
									if(newNode94 == null) {
										continue;
									}
									if(node == null) {
										var tmp49 = newNode94 != null ? newNode94.updatableName : null;
										this.addNode(tmp49 != null ? bh_multianim_MultiAnimParser_getNameString(tmp49) : null,newNode94);
									} else {
										node.children.push(newNode94);
									}
								}
							} else {
								switch(_g38._hx_index) {
								case 33:case 42:
									if(_g39._hx_index == 0) {
										var propName36 = _g37;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(node == null) {
											this.syntaxError("position not supported on root elements");
										}
										once.parsed(propName36);
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var pos1 = this.parseXY();
											node.pos = pos1;
										} else {
											this.unexpectedError("expected valid position:x,y, grid, hex, hexEdge, hexCorner");
										}
									} else {
										var _g45 = this.peek(0);
										switch(_g45._hx_index) {
										case 0:
											this.last = this.token.elt;
											this.token = this.token.next;
											if(node != null) {
												this.syntaxError("unexpected end of file");
											} else {
												return;
											}
											break;
										case 6:
											this.last = this.token.elt;
											this.token = this.token.next;
											return;
										case 12:
											this.last = this.token.elt;
											this.token = this.token.next;
											break;
										case 14:
											var _g46 = _g45.s;
											var _g47 = _g45.keyword;
											var _g48 = _g45.identType;
											if(_g47 == null) {
												if(_g48._hx_index == 2) {
													var name45 = _g46;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName45;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un45 = this.parseUpdatable(name45);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName45 = un45;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName45 = bh_multianim_UpdatableNameType.UNTObject(name45);
													}
													var newNode95 = this.parseNode(updatableName45,node,definitions,uniqueId + 1);
													if(newNode95 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name45,newNode95);
													} else {
														node.children.push(newNode95);
													}
												} else {
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode96 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode96 == null) {
														continue;
													}
													if(node == null) {
														var tmp50 = newNode96 != null ? newNode96.updatableName : null;
														this.addNode(tmp50 != null ? bh_multianim_MultiAnimParser_getNameString(tmp50) : null,newNode96);
													} else {
														node.children.push(newNode96);
													}
												}
											} else {
												switch(_g47._hx_index) {
												case 18:
													switch(_g48._hx_index) {
													case 0:
														var propName37 = _g46;
														this.last = this.token.elt;
														this.token = this.token.next;
														if(this.peek(0)._hx_index == 10) {
															this.last = this.token.elt;
															this.token = this.token.next;
															if(node == null) {
																this.syntaxError("grid coordinate system not supported on root elements");
															}
															once.parsed(propName37);
															node.gridCoordinateSystem = this.parseGridCoordianteSystem();
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
														break;
													case 2:
														var name46 = _g46;
														this.last = this.token.elt;
														this.token = this.token.next;
														if(allowParseChildren == false) {
															this.syntaxError("children not allowed");
														}
														var updatableName46;
														if(this.peek(0)._hx_index == 1) {
															this.last = this.token.elt;
															this.token = this.token.next;
															var un46 = this.parseUpdatable(name46);
															if(this.peek(0)._hx_index == 2) {
																this.last = this.token.elt;
																this.token = this.token.next;
																updatableName46 = un46;
															} else {
																throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															updatableName46 = bh_multianim_UpdatableNameType.UNTObject(name46);
														}
														var newNode97 = this.parseNode(updatableName46,node,definitions,uniqueId + 1);
														if(newNode97 == null) {
															continue;
														}
														if(node == null) {
															this.addNode(name46,newNode97);
														} else {
															node.children.push(newNode97);
														}
														break;
													default:
														if(allowParseChildren == false) {
															this.syntaxError("children not allowed");
														}
														var newNode98 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
														if(newNode98 == null) {
															continue;
														}
														if(node == null) {
															var tmp51 = newNode98 != null ? newNode98.updatableName : null;
															this.addNode(tmp51 != null ? bh_multianim_MultiAnimParser_getNameString(tmp51) : null,newNode98);
														} else {
															node.children.push(newNode98);
														}
													}
													break;
												case 19:
													switch(_g48._hx_index) {
													case 0:
														var propName38 = _g46;
														this.last = this.token.elt;
														this.token = this.token.next;
														if(this.peek(0)._hx_index == 10) {
															this.last = this.token.elt;
															this.token = this.token.next;
															if(node == null) {
																this.syntaxError("hex coordinate system not supported on root elements");
															}
															once.parsed(propName38);
															node.hexCoordinateSystem = this.parseHexCoordianteSystem();
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
														break;
													case 2:
														var name47 = _g46;
														this.last = this.token.elt;
														this.token = this.token.next;
														if(allowParseChildren == false) {
															this.syntaxError("children not allowed");
														}
														var updatableName47;
														if(this.peek(0)._hx_index == 1) {
															this.last = this.token.elt;
															this.token = this.token.next;
															var un47 = this.parseUpdatable(name47);
															if(this.peek(0)._hx_index == 2) {
																this.last = this.token.elt;
																this.token = this.token.next;
																updatableName47 = un47;
															} else {
																throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															updatableName47 = bh_multianim_UpdatableNameType.UNTObject(name47);
														}
														var newNode99 = this.parseNode(updatableName47,node,definitions,uniqueId + 1);
														if(newNode99 == null) {
															continue;
														}
														if(node == null) {
															this.addNode(name47,newNode99);
														} else {
															node.children.push(newNode99);
														}
														break;
													default:
														if(allowParseChildren == false) {
															this.syntaxError("children not allowed");
														}
														var newNode100 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
														if(newNode100 == null) {
															continue;
														}
														if(node == null) {
															var tmp52 = newNode100 != null ? newNode100.updatableName : null;
															this.addNode(tmp52 != null ? bh_multianim_MultiAnimParser_getNameString(tmp52) : null,newNode100);
														} else {
															node.children.push(newNode100);
														}
													}
													break;
												case 31:
													switch(_g48._hx_index) {
													case 0:
														var propName39 = _g46;
														this.last = this.token.elt;
														this.token = this.token.next;
														if(this.peek(0)._hx_index == 10) {
															this.last = this.token.elt;
															this.token = this.token.next;
															var layerIndex5 = this.parseInteger();
															if(node == null) {
																this.syntaxError("layer not supported on root elements");
															} else {
																var _g49 = node.parent.type;
																switch(_g49._hx_index) {
																case 7:
																	var isTileGroup5 = _g49.isTileGroup;
																	var parameters5 = _g49.parameters;
																	break;
																case 14:
																	break;
																default:
																	this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(node.type));
																}
															}
															once.parsed(propName39);
															node.layer = layerIndex5;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
														break;
													case 2:
														var name48 = _g46;
														this.last = this.token.elt;
														this.token = this.token.next;
														if(allowParseChildren == false) {
															this.syntaxError("children not allowed");
														}
														var updatableName48;
														if(this.peek(0)._hx_index == 1) {
															this.last = this.token.elt;
															this.token = this.token.next;
															var un48 = this.parseUpdatable(name48);
															if(this.peek(0)._hx_index == 2) {
																this.last = this.token.elt;
																this.token = this.token.next;
																updatableName48 = un48;
															} else {
																throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															updatableName48 = bh_multianim_UpdatableNameType.UNTObject(name48);
														}
														var newNode101 = this.parseNode(updatableName48,node,definitions,uniqueId + 1);
														if(newNode101 == null) {
															continue;
														}
														if(node == null) {
															this.addNode(name48,newNode101);
														} else {
															node.children.push(newNode101);
														}
														break;
													default:
														if(allowParseChildren == false) {
															this.syntaxError("children not allowed");
														}
														var newNode102 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
														if(newNode102 == null) {
															continue;
														}
														if(node == null) {
															var tmp53 = newNode102 != null ? newNode102.updatableName : null;
															this.addNode(tmp53 != null ? bh_multianim_MultiAnimParser_getNameString(tmp53) : null,newNode102);
														} else {
															node.children.push(newNode102);
														}
													}
													break;
												case 35:
													switch(_g48._hx_index) {
													case 0:
														var propName40 = _g46;
														this.last = this.token.elt;
														this.token = this.token.next;
														if(this.peek(0)._hx_index == 10) {
															this.last = this.token.elt;
															this.token = this.token.next;
															var f10 = this.parseFloatOrReference();
															if(node == null) {
																this.syntaxError("scale not supported on root elements");
															}
															once.parsed(propName40);
															node.scale = f10;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
														break;
													case 2:
														var name49 = _g46;
														this.last = this.token.elt;
														this.token = this.token.next;
														if(allowParseChildren == false) {
															this.syntaxError("children not allowed");
														}
														var updatableName49;
														if(this.peek(0)._hx_index == 1) {
															this.last = this.token.elt;
															this.token = this.token.next;
															var un49 = this.parseUpdatable(name49);
															if(this.peek(0)._hx_index == 2) {
																this.last = this.token.elt;
																this.token = this.token.next;
																updatableName49 = un49;
															} else {
																throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															updatableName49 = bh_multianim_UpdatableNameType.UNTObject(name49);
														}
														var newNode103 = this.parseNode(updatableName49,node,definitions,uniqueId + 1);
														if(newNode103 == null) {
															continue;
														}
														if(node == null) {
															this.addNode(name49,newNode103);
														} else {
															node.children.push(newNode103);
														}
														break;
													default:
														if(allowParseChildren == false) {
															this.syntaxError("children not allowed");
														}
														var newNode104 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
														if(newNode104 == null) {
															continue;
														}
														if(node == null) {
															var tmp54 = newNode104 != null ? newNode104.updatableName : null;
															this.addNode(tmp54 != null ? bh_multianim_MultiAnimParser_getNameString(tmp54) : null,newNode104);
														} else {
															node.children.push(newNode104);
														}
													}
													break;
												case 36:
													switch(_g48._hx_index) {
													case 0:
														var propName41 = _g46;
														this.last = this.token.elt;
														this.token = this.token.next;
														if(this.peek(0)._hx_index == 10) {
															this.last = this.token.elt;
															this.token = this.token.next;
															var filter5 = this.parseFilter();
															if(node == null) {
																this.syntaxError("filter not supported on root elements");
															}
															once.parsed(propName41);
															node.filter = filter5;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
														break;
													case 2:
														var name50 = _g46;
														this.last = this.token.elt;
														this.token = this.token.next;
														if(allowParseChildren == false) {
															this.syntaxError("children not allowed");
														}
														var updatableName50;
														if(this.peek(0)._hx_index == 1) {
															this.last = this.token.elt;
															this.token = this.token.next;
															var un50 = this.parseUpdatable(name50);
															if(this.peek(0)._hx_index == 2) {
																this.last = this.token.elt;
																this.token = this.token.next;
																updatableName50 = un50;
															} else {
																throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															updatableName50 = bh_multianim_UpdatableNameType.UNTObject(name50);
														}
														var newNode105 = this.parseNode(updatableName50,node,definitions,uniqueId + 1);
														if(newNode105 == null) {
															continue;
														}
														if(node == null) {
															this.addNode(name50,newNode105);
														} else {
															node.children.push(newNode105);
														}
														break;
													default:
														if(allowParseChildren == false) {
															this.syntaxError("children not allowed");
														}
														var newNode106 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
														if(newNode106 == null) {
															continue;
														}
														if(node == null) {
															var tmp55 = newNode106 != null ? newNode106.updatableName : null;
															this.addNode(tmp55 != null ? bh_multianim_MultiAnimParser_getNameString(tmp55) : null,newNode106);
														} else {
															node.children.push(newNode106);
														}
													}
													break;
												case 41:
													switch(_g48._hx_index) {
													case 0:
														var propName42 = _g46;
														this.last = this.token.elt;
														this.token = this.token.next;
														if(this.peek(0)._hx_index == 10) {
															this.last = this.token.elt;
															this.token = this.token.next;
															var f11 = this.parseFloatOrReference();
															if(node == null) {
																this.syntaxError("alpha not supported on root elements");
															}
															once.parsed(propName42);
															node.alpha = f11;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
														break;
													case 2:
														var name51 = _g46;
														this.last = this.token.elt;
														this.token = this.token.next;
														if(allowParseChildren == false) {
															this.syntaxError("children not allowed");
														}
														var updatableName51;
														if(this.peek(0)._hx_index == 1) {
															this.last = this.token.elt;
															this.token = this.token.next;
															var un51 = this.parseUpdatable(name51);
															if(this.peek(0)._hx_index == 2) {
																this.last = this.token.elt;
																this.token = this.token.next;
																updatableName51 = un51;
															} else {
																throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															updatableName51 = bh_multianim_UpdatableNameType.UNTObject(name51);
														}
														var newNode107 = this.parseNode(updatableName51,node,definitions,uniqueId + 1);
														if(newNode107 == null) {
															continue;
														}
														if(node == null) {
															this.addNode(name51,newNode107);
														} else {
															node.children.push(newNode107);
														}
														break;
													default:
														if(allowParseChildren == false) {
															this.syntaxError("children not allowed");
														}
														var newNode108 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
														if(newNode108 == null) {
															continue;
														}
														if(node == null) {
															var tmp56 = newNode108 != null ? newNode108.updatableName : null;
															this.addNode(tmp56 != null ? bh_multianim_MultiAnimParser_getNameString(tmp56) : null,newNode108);
														} else {
															node.children.push(newNode108);
														}
													}
													break;
												case 72:
													switch(_g48._hx_index) {
													case 0:
														var propName43 = _g46;
														this.last = this.token.elt;
														this.token = this.token.next;
														if(this.peek(0)._hx_index == 10) {
															this.last = this.token.elt;
															this.token = this.token.next;
															if(node == null) {
																this.syntaxError("blendMode not supported on root elements");
															}
															once.parsed(propName43);
															var blendMode5 = this.tryParseBlendMode();
															if(blendMode5 == null) {
																this.unexpectedError("unsupported blend mode");
															} else {
																node.blendMode = blendMode5;
															}
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
														break;
													case 2:
														var name52 = _g46;
														this.last = this.token.elt;
														this.token = this.token.next;
														if(allowParseChildren == false) {
															this.syntaxError("children not allowed");
														}
														var updatableName52;
														if(this.peek(0)._hx_index == 1) {
															this.last = this.token.elt;
															this.token = this.token.next;
															var un52 = this.parseUpdatable(name52);
															if(this.peek(0)._hx_index == 2) {
																this.last = this.token.elt;
																this.token = this.token.next;
																updatableName52 = un52;
															} else {
																throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															updatableName52 = bh_multianim_UpdatableNameType.UNTObject(name52);
														}
														var newNode109 = this.parseNode(updatableName52,node,definitions,uniqueId + 1);
														if(newNode109 == null) {
															continue;
														}
														if(node == null) {
															this.addNode(name52,newNode109);
														} else {
															node.children.push(newNode109);
														}
														break;
													default:
														if(allowParseChildren == false) {
															this.syntaxError("children not allowed");
														}
														var newNode110 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
														if(newNode110 == null) {
															continue;
														}
														if(node == null) {
															var tmp57 = newNode110 != null ? newNode110.updatableName : null;
															this.addNode(tmp57 != null ? bh_multianim_MultiAnimParser_getNameString(tmp57) : null,newNode110);
														} else {
															node.children.push(newNode110);
														}
													}
													break;
												default:
													if(_g48._hx_index == 2) {
														var name53 = _g46;
														this.last = this.token.elt;
														this.token = this.token.next;
														if(allowParseChildren == false) {
															this.syntaxError("children not allowed");
														}
														var updatableName53;
														if(this.peek(0)._hx_index == 1) {
															this.last = this.token.elt;
															this.token = this.token.next;
															var un53 = this.parseUpdatable(name53);
															if(this.peek(0)._hx_index == 2) {
																this.last = this.token.elt;
																this.token = this.token.next;
																updatableName53 = un53;
															} else {
																throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															updatableName53 = bh_multianim_UpdatableNameType.UNTObject(name53);
														}
														var newNode111 = this.parseNode(updatableName53,node,definitions,uniqueId + 1);
														if(newNode111 == null) {
															continue;
														}
														if(node == null) {
															this.addNode(name53,newNode111);
														} else {
															node.children.push(newNode111);
														}
													} else {
														if(allowParseChildren == false) {
															this.syntaxError("children not allowed");
														}
														var newNode112 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
														if(newNode112 == null) {
															continue;
														}
														if(node == null) {
															var tmp58 = newNode112 != null ? newNode112.updatableName : null;
															this.addNode(tmp58 != null ? bh_multianim_MultiAnimParser_getNameString(tmp58) : null,newNode112);
														} else {
															node.children.push(newNode112);
														}
													}
												}
											}
											break;
										case 16:
											this.last = this.token.elt;
											this.token = this.token.next;
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode113 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode113 == null) {
												continue;
											}
											if(node == null) {
												var tmp59 = newNode113 != null ? newNode113.updatableName : null;
												this.addNode(tmp59 != null ? bh_multianim_MultiAnimParser_getNameString(tmp59) : null,newNode113);
											} else {
												node.children.push(newNode113);
											}
										}
									}
									break;
								default:
									var _g50 = this.peek(0);
									switch(_g50._hx_index) {
									case 0:
										this.last = this.token.elt;
										this.token = this.token.next;
										if(node != null) {
											this.syntaxError("unexpected end of file");
										} else {
											return;
										}
										break;
									case 6:
										this.last = this.token.elt;
										this.token = this.token.next;
										return;
									case 12:
										this.last = this.token.elt;
										this.token = this.token.next;
										break;
									case 14:
										var _g51 = _g50.s;
										var _g52 = _g50.keyword;
										var _g53 = _g50.identType;
										if(_g52 == null) {
											if(_g53._hx_index == 2) {
												var name54 = _g51;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName54;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un54 = this.parseUpdatable(name54);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName54 = un54;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName54 = bh_multianim_UpdatableNameType.UNTObject(name54);
												}
												var newNode114 = this.parseNode(updatableName54,node,definitions,uniqueId + 1);
												if(newNode114 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name54,newNode114);
												} else {
													node.children.push(newNode114);
												}
											} else {
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode115 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode115 == null) {
													continue;
												}
												if(node == null) {
													var tmp60 = newNode115 != null ? newNode115.updatableName : null;
													this.addNode(tmp60 != null ? bh_multianim_MultiAnimParser_getNameString(tmp60) : null,newNode115);
												} else {
													node.children.push(newNode115);
												}
											}
										} else {
											switch(_g52._hx_index) {
											case 18:
												switch(_g53._hx_index) {
												case 0:
													var propName44 = _g51;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														if(node == null) {
															this.syntaxError("grid coordinate system not supported on root elements");
														}
														once.parsed(propName44);
														node.gridCoordinateSystem = this.parseGridCoordianteSystem();
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name55 = _g51;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName55;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un55 = this.parseUpdatable(name55);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName55 = un55;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName55 = bh_multianim_UpdatableNameType.UNTObject(name55);
													}
													var newNode116 = this.parseNode(updatableName55,node,definitions,uniqueId + 1);
													if(newNode116 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name55,newNode116);
													} else {
														node.children.push(newNode116);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode117 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode117 == null) {
														continue;
													}
													if(node == null) {
														var tmp61 = newNode117 != null ? newNode117.updatableName : null;
														this.addNode(tmp61 != null ? bh_multianim_MultiAnimParser_getNameString(tmp61) : null,newNode117);
													} else {
														node.children.push(newNode117);
													}
												}
												break;
											case 19:
												switch(_g53._hx_index) {
												case 0:
													var propName45 = _g51;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														if(node == null) {
															this.syntaxError("hex coordinate system not supported on root elements");
														}
														once.parsed(propName45);
														node.hexCoordinateSystem = this.parseHexCoordianteSystem();
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name56 = _g51;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName56;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un56 = this.parseUpdatable(name56);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName56 = un56;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName56 = bh_multianim_UpdatableNameType.UNTObject(name56);
													}
													var newNode118 = this.parseNode(updatableName56,node,definitions,uniqueId + 1);
													if(newNode118 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name56,newNode118);
													} else {
														node.children.push(newNode118);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode119 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode119 == null) {
														continue;
													}
													if(node == null) {
														var tmp62 = newNode119 != null ? newNode119.updatableName : null;
														this.addNode(tmp62 != null ? bh_multianim_MultiAnimParser_getNameString(tmp62) : null,newNode119);
													} else {
														node.children.push(newNode119);
													}
												}
												break;
											case 31:
												switch(_g53._hx_index) {
												case 0:
													var propName46 = _g51;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var layerIndex6 = this.parseInteger();
														if(node == null) {
															this.syntaxError("layer not supported on root elements");
														} else {
															var _g54 = node.parent.type;
															switch(_g54._hx_index) {
															case 7:
																var isTileGroup6 = _g54.isTileGroup;
																var parameters6 = _g54.parameters;
																break;
															case 14:
																break;
															default:
																this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(node.type));
															}
														}
														once.parsed(propName46);
														node.layer = layerIndex6;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name57 = _g51;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName57;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un57 = this.parseUpdatable(name57);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName57 = un57;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName57 = bh_multianim_UpdatableNameType.UNTObject(name57);
													}
													var newNode120 = this.parseNode(updatableName57,node,definitions,uniqueId + 1);
													if(newNode120 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name57,newNode120);
													} else {
														node.children.push(newNode120);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode121 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode121 == null) {
														continue;
													}
													if(node == null) {
														var tmp63 = newNode121 != null ? newNode121.updatableName : null;
														this.addNode(tmp63 != null ? bh_multianim_MultiAnimParser_getNameString(tmp63) : null,newNode121);
													} else {
														node.children.push(newNode121);
													}
												}
												break;
											case 35:
												switch(_g53._hx_index) {
												case 0:
													var propName47 = _g51;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var f12 = this.parseFloatOrReference();
														if(node == null) {
															this.syntaxError("scale not supported on root elements");
														}
														once.parsed(propName47);
														node.scale = f12;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name58 = _g51;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName58;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un58 = this.parseUpdatable(name58);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName58 = un58;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName58 = bh_multianim_UpdatableNameType.UNTObject(name58);
													}
													var newNode122 = this.parseNode(updatableName58,node,definitions,uniqueId + 1);
													if(newNode122 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name58,newNode122);
													} else {
														node.children.push(newNode122);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode123 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode123 == null) {
														continue;
													}
													if(node == null) {
														var tmp64 = newNode123 != null ? newNode123.updatableName : null;
														this.addNode(tmp64 != null ? bh_multianim_MultiAnimParser_getNameString(tmp64) : null,newNode123);
													} else {
														node.children.push(newNode123);
													}
												}
												break;
											case 36:
												switch(_g53._hx_index) {
												case 0:
													var propName48 = _g51;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var filter6 = this.parseFilter();
														if(node == null) {
															this.syntaxError("filter not supported on root elements");
														}
														once.parsed(propName48);
														node.filter = filter6;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name59 = _g51;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName59;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un59 = this.parseUpdatable(name59);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName59 = un59;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName59 = bh_multianim_UpdatableNameType.UNTObject(name59);
													}
													var newNode124 = this.parseNode(updatableName59,node,definitions,uniqueId + 1);
													if(newNode124 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name59,newNode124);
													} else {
														node.children.push(newNode124);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode125 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode125 == null) {
														continue;
													}
													if(node == null) {
														var tmp65 = newNode125 != null ? newNode125.updatableName : null;
														this.addNode(tmp65 != null ? bh_multianim_MultiAnimParser_getNameString(tmp65) : null,newNode125);
													} else {
														node.children.push(newNode125);
													}
												}
												break;
											case 41:
												switch(_g53._hx_index) {
												case 0:
													var propName49 = _g51;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var f13 = this.parseFloatOrReference();
														if(node == null) {
															this.syntaxError("alpha not supported on root elements");
														}
														once.parsed(propName49);
														node.alpha = f13;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name60 = _g51;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName60;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un60 = this.parseUpdatable(name60);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName60 = un60;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName60 = bh_multianim_UpdatableNameType.UNTObject(name60);
													}
													var newNode126 = this.parseNode(updatableName60,node,definitions,uniqueId + 1);
													if(newNode126 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name60,newNode126);
													} else {
														node.children.push(newNode126);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode127 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode127 == null) {
														continue;
													}
													if(node == null) {
														var tmp66 = newNode127 != null ? newNode127.updatableName : null;
														this.addNode(tmp66 != null ? bh_multianim_MultiAnimParser_getNameString(tmp66) : null,newNode127);
													} else {
														node.children.push(newNode127);
													}
												}
												break;
											case 72:
												switch(_g53._hx_index) {
												case 0:
													var propName50 = _g51;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														if(node == null) {
															this.syntaxError("blendMode not supported on root elements");
														}
														once.parsed(propName50);
														var blendMode6 = this.tryParseBlendMode();
														if(blendMode6 == null) {
															this.unexpectedError("unsupported blend mode");
														} else {
															node.blendMode = blendMode6;
														}
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name61 = _g51;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName61;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un61 = this.parseUpdatable(name61);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName61 = un61;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName61 = bh_multianim_UpdatableNameType.UNTObject(name61);
													}
													var newNode128 = this.parseNode(updatableName61,node,definitions,uniqueId + 1);
													if(newNode128 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name61,newNode128);
													} else {
														node.children.push(newNode128);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode129 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode129 == null) {
														continue;
													}
													if(node == null) {
														var tmp67 = newNode129 != null ? newNode129.updatableName : null;
														this.addNode(tmp67 != null ? bh_multianim_MultiAnimParser_getNameString(tmp67) : null,newNode129);
													} else {
														node.children.push(newNode129);
													}
												}
												break;
											default:
												if(_g53._hx_index == 2) {
													var name62 = _g51;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName62;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un62 = this.parseUpdatable(name62);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName62 = un62;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName62 = bh_multianim_UpdatableNameType.UNTObject(name62);
													}
													var newNode130 = this.parseNode(updatableName62,node,definitions,uniqueId + 1);
													if(newNode130 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name62,newNode130);
													} else {
														node.children.push(newNode130);
													}
												} else {
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode131 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode131 == null) {
														continue;
													}
													if(node == null) {
														var tmp68 = newNode131 != null ? newNode131.updatableName : null;
														this.addNode(tmp68 != null ? bh_multianim_MultiAnimParser_getNameString(tmp68) : null,newNode131);
													} else {
														node.children.push(newNode131);
													}
												}
											}
										}
										break;
									case 16:
										this.last = this.token.elt;
										this.token = this.token.next;
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode132 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode132 == null) {
											continue;
										}
										if(node == null) {
											var tmp69 = newNode132 != null ? newNode132.updatableName : null;
											this.addNode(tmp69 != null ? bh_multianim_MultiAnimParser_getNameString(tmp69) : null,newNode132);
										} else {
											node.children.push(newNode132);
										}
									}
								}
							}
						} else {
							var _g55 = this.peek(0);
							switch(_g55._hx_index) {
							case 0:
								this.last = this.token.elt;
								this.token = this.token.next;
								if(node != null) {
									this.syntaxError("unexpected end of file");
								} else {
									return;
								}
								break;
							case 6:
								this.last = this.token.elt;
								this.token = this.token.next;
								return;
							case 12:
								this.last = this.token.elt;
								this.token = this.token.next;
								break;
							case 14:
								var _g56 = _g55.s;
								var _g57 = _g55.keyword;
								var _g58 = _g55.identType;
								if(_g57 == null) {
									if(_g58._hx_index == 2) {
										var name63 = _g56;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName63;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un63 = this.parseUpdatable(name63);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName63 = un63;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName63 = bh_multianim_UpdatableNameType.UNTObject(name63);
										}
										var newNode133 = this.parseNode(updatableName63,node,definitions,uniqueId + 1);
										if(newNode133 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name63,newNode133);
										} else {
											node.children.push(newNode133);
										}
									} else {
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode134 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode134 == null) {
											continue;
										}
										if(node == null) {
											var tmp70 = newNode134 != null ? newNode134.updatableName : null;
											this.addNode(tmp70 != null ? bh_multianim_MultiAnimParser_getNameString(tmp70) : null,newNode134);
										} else {
											node.children.push(newNode134);
										}
									}
								} else {
									switch(_g57._hx_index) {
									case 18:
										switch(_g58._hx_index) {
										case 0:
											var propName51 = _g56;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												if(node == null) {
													this.syntaxError("grid coordinate system not supported on root elements");
												}
												once.parsed(propName51);
												node.gridCoordinateSystem = this.parseGridCoordianteSystem();
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name64 = _g56;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName64;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un64 = this.parseUpdatable(name64);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName64 = un64;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName64 = bh_multianim_UpdatableNameType.UNTObject(name64);
											}
											var newNode135 = this.parseNode(updatableName64,node,definitions,uniqueId + 1);
											if(newNode135 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name64,newNode135);
											} else {
												node.children.push(newNode135);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode136 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode136 == null) {
												continue;
											}
											if(node == null) {
												var tmp71 = newNode136 != null ? newNode136.updatableName : null;
												this.addNode(tmp71 != null ? bh_multianim_MultiAnimParser_getNameString(tmp71) : null,newNode136);
											} else {
												node.children.push(newNode136);
											}
										}
										break;
									case 19:
										switch(_g58._hx_index) {
										case 0:
											var propName52 = _g56;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												if(node == null) {
													this.syntaxError("hex coordinate system not supported on root elements");
												}
												once.parsed(propName52);
												node.hexCoordinateSystem = this.parseHexCoordianteSystem();
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name65 = _g56;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName65;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un65 = this.parseUpdatable(name65);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName65 = un65;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName65 = bh_multianim_UpdatableNameType.UNTObject(name65);
											}
											var newNode137 = this.parseNode(updatableName65,node,definitions,uniqueId + 1);
											if(newNode137 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name65,newNode137);
											} else {
												node.children.push(newNode137);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode138 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode138 == null) {
												continue;
											}
											if(node == null) {
												var tmp72 = newNode138 != null ? newNode138.updatableName : null;
												this.addNode(tmp72 != null ? bh_multianim_MultiAnimParser_getNameString(tmp72) : null,newNode138);
											} else {
												node.children.push(newNode138);
											}
										}
										break;
									case 31:
										switch(_g58._hx_index) {
										case 0:
											var propName53 = _g56;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var layerIndex7 = this.parseInteger();
												if(node == null) {
													this.syntaxError("layer not supported on root elements");
												} else {
													var _g59 = node.parent.type;
													switch(_g59._hx_index) {
													case 7:
														var isTileGroup7 = _g59.isTileGroup;
														var parameters7 = _g59.parameters;
														break;
													case 14:
														break;
													default:
														this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(node.type));
													}
												}
												once.parsed(propName53);
												node.layer = layerIndex7;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name66 = _g56;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName66;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un66 = this.parseUpdatable(name66);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName66 = un66;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName66 = bh_multianim_UpdatableNameType.UNTObject(name66);
											}
											var newNode139 = this.parseNode(updatableName66,node,definitions,uniqueId + 1);
											if(newNode139 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name66,newNode139);
											} else {
												node.children.push(newNode139);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode140 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode140 == null) {
												continue;
											}
											if(node == null) {
												var tmp73 = newNode140 != null ? newNode140.updatableName : null;
												this.addNode(tmp73 != null ? bh_multianim_MultiAnimParser_getNameString(tmp73) : null,newNode140);
											} else {
												node.children.push(newNode140);
											}
										}
										break;
									case 35:
										switch(_g58._hx_index) {
										case 0:
											var propName54 = _g56;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var f14 = this.parseFloatOrReference();
												if(node == null) {
													this.syntaxError("scale not supported on root elements");
												}
												once.parsed(propName54);
												node.scale = f14;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name67 = _g56;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName67;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un67 = this.parseUpdatable(name67);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName67 = un67;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName67 = bh_multianim_UpdatableNameType.UNTObject(name67);
											}
											var newNode141 = this.parseNode(updatableName67,node,definitions,uniqueId + 1);
											if(newNode141 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name67,newNode141);
											} else {
												node.children.push(newNode141);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode142 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode142 == null) {
												continue;
											}
											if(node == null) {
												var tmp74 = newNode142 != null ? newNode142.updatableName : null;
												this.addNode(tmp74 != null ? bh_multianim_MultiAnimParser_getNameString(tmp74) : null,newNode142);
											} else {
												node.children.push(newNode142);
											}
										}
										break;
									case 36:
										switch(_g58._hx_index) {
										case 0:
											var propName55 = _g56;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var filter7 = this.parseFilter();
												if(node == null) {
													this.syntaxError("filter not supported on root elements");
												}
												once.parsed(propName55);
												node.filter = filter7;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name68 = _g56;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName68;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un68 = this.parseUpdatable(name68);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName68 = un68;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName68 = bh_multianim_UpdatableNameType.UNTObject(name68);
											}
											var newNode143 = this.parseNode(updatableName68,node,definitions,uniqueId + 1);
											if(newNode143 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name68,newNode143);
											} else {
												node.children.push(newNode143);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode144 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode144 == null) {
												continue;
											}
											if(node == null) {
												var tmp75 = newNode144 != null ? newNode144.updatableName : null;
												this.addNode(tmp75 != null ? bh_multianim_MultiAnimParser_getNameString(tmp75) : null,newNode144);
											} else {
												node.children.push(newNode144);
											}
										}
										break;
									case 41:
										switch(_g58._hx_index) {
										case 0:
											var propName56 = _g56;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var f15 = this.parseFloatOrReference();
												if(node == null) {
													this.syntaxError("alpha not supported on root elements");
												}
												once.parsed(propName56);
												node.alpha = f15;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name69 = _g56;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName69;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un69 = this.parseUpdatable(name69);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName69 = un69;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName69 = bh_multianim_UpdatableNameType.UNTObject(name69);
											}
											var newNode145 = this.parseNode(updatableName69,node,definitions,uniqueId + 1);
											if(newNode145 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name69,newNode145);
											} else {
												node.children.push(newNode145);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode146 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode146 == null) {
												continue;
											}
											if(node == null) {
												var tmp76 = newNode146 != null ? newNode146.updatableName : null;
												this.addNode(tmp76 != null ? bh_multianim_MultiAnimParser_getNameString(tmp76) : null,newNode146);
											} else {
												node.children.push(newNode146);
											}
										}
										break;
									case 72:
										switch(_g58._hx_index) {
										case 0:
											var propName57 = _g56;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												if(node == null) {
													this.syntaxError("blendMode not supported on root elements");
												}
												once.parsed(propName57);
												var blendMode7 = this.tryParseBlendMode();
												if(blendMode7 == null) {
													this.unexpectedError("unsupported blend mode");
												} else {
													node.blendMode = blendMode7;
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name70 = _g56;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName70;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un70 = this.parseUpdatable(name70);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName70 = un70;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName70 = bh_multianim_UpdatableNameType.UNTObject(name70);
											}
											var newNode147 = this.parseNode(updatableName70,node,definitions,uniqueId + 1);
											if(newNode147 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name70,newNode147);
											} else {
												node.children.push(newNode147);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode148 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode148 == null) {
												continue;
											}
											if(node == null) {
												var tmp77 = newNode148 != null ? newNode148.updatableName : null;
												this.addNode(tmp77 != null ? bh_multianim_MultiAnimParser_getNameString(tmp77) : null,newNode148);
											} else {
												node.children.push(newNode148);
											}
										}
										break;
									default:
										if(_g58._hx_index == 2) {
											var name71 = _g56;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName71;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un71 = this.parseUpdatable(name71);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName71 = un71;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName71 = bh_multianim_UpdatableNameType.UNTObject(name71);
											}
											var newNode149 = this.parseNode(updatableName71,node,definitions,uniqueId + 1);
											if(newNode149 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name71,newNode149);
											} else {
												node.children.push(newNode149);
											}
										} else {
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode150 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode150 == null) {
												continue;
											}
											if(node == null) {
												var tmp78 = newNode150 != null ? newNode150.updatableName : null;
												this.addNode(tmp78 != null ? bh_multianim_MultiAnimParser_getNameString(tmp78) : null,newNode150);
											} else {
												node.children.push(newNode150);
											}
										}
									}
								}
								break;
							case 16:
								this.last = this.token.elt;
								this.token = this.token.next;
								break;
							default:
								if(allowParseChildren == false) {
									this.syntaxError("children not allowed");
								}
								var newNode151 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
								if(newNode151 == null) {
									continue;
								}
								if(node == null) {
									var tmp79 = newNode151 != null ? newNode151.updatableName : null;
									this.addNode(tmp79 != null ? bh_multianim_MultiAnimParser_getNameString(tmp79) : null,newNode151);
								} else {
									node.children.push(newNode151);
								}
							}
						}
					}
				} else {
					var _g60 = this.peek(0);
					if(_g60._hx_index == 14) {
						var _g61 = _g60.s;
						var _g62 = _g60.keyword;
						var _g63 = _g60.identType;
						if(_g62 == null) {
							var _g64 = this.peek(0);
							switch(_g64._hx_index) {
							case 0:
								this.last = this.token.elt;
								this.token = this.token.next;
								if(node != null) {
									this.syntaxError("unexpected end of file");
								} else {
									return;
								}
								break;
							case 6:
								this.last = this.token.elt;
								this.token = this.token.next;
								return;
							case 12:
								this.last = this.token.elt;
								this.token = this.token.next;
								break;
							case 14:
								var _g65 = _g64.s;
								var _g66 = _g64.keyword;
								var _g67 = _g64.identType;
								if(_g66 == null) {
									if(_g67._hx_index == 2) {
										var name72 = _g65;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName72;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un72 = this.parseUpdatable(name72);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName72 = un72;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName72 = bh_multianim_UpdatableNameType.UNTObject(name72);
										}
										var newNode152 = this.parseNode(updatableName72,node,definitions,uniqueId + 1);
										if(newNode152 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name72,newNode152);
										} else {
											node.children.push(newNode152);
										}
									} else {
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode153 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode153 == null) {
											continue;
										}
										if(node == null) {
											var tmp80 = newNode153 != null ? newNode153.updatableName : null;
											this.addNode(tmp80 != null ? bh_multianim_MultiAnimParser_getNameString(tmp80) : null,newNode153);
										} else {
											node.children.push(newNode153);
										}
									}
								} else {
									switch(_g66._hx_index) {
									case 18:
										switch(_g67._hx_index) {
										case 0:
											var propName58 = _g65;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												if(node == null) {
													this.syntaxError("grid coordinate system not supported on root elements");
												}
												once.parsed(propName58);
												node.gridCoordinateSystem = this.parseGridCoordianteSystem();
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name73 = _g65;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName73;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un73 = this.parseUpdatable(name73);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName73 = un73;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName73 = bh_multianim_UpdatableNameType.UNTObject(name73);
											}
											var newNode154 = this.parseNode(updatableName73,node,definitions,uniqueId + 1);
											if(newNode154 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name73,newNode154);
											} else {
												node.children.push(newNode154);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode155 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode155 == null) {
												continue;
											}
											if(node == null) {
												var tmp81 = newNode155 != null ? newNode155.updatableName : null;
												this.addNode(tmp81 != null ? bh_multianim_MultiAnimParser_getNameString(tmp81) : null,newNode155);
											} else {
												node.children.push(newNode155);
											}
										}
										break;
									case 19:
										switch(_g67._hx_index) {
										case 0:
											var propName59 = _g65;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												if(node == null) {
													this.syntaxError("hex coordinate system not supported on root elements");
												}
												once.parsed(propName59);
												node.hexCoordinateSystem = this.parseHexCoordianteSystem();
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name74 = _g65;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName74;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un74 = this.parseUpdatable(name74);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName74 = un74;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName74 = bh_multianim_UpdatableNameType.UNTObject(name74);
											}
											var newNode156 = this.parseNode(updatableName74,node,definitions,uniqueId + 1);
											if(newNode156 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name74,newNode156);
											} else {
												node.children.push(newNode156);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode157 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode157 == null) {
												continue;
											}
											if(node == null) {
												var tmp82 = newNode157 != null ? newNode157.updatableName : null;
												this.addNode(tmp82 != null ? bh_multianim_MultiAnimParser_getNameString(tmp82) : null,newNode157);
											} else {
												node.children.push(newNode157);
											}
										}
										break;
									case 31:
										switch(_g67._hx_index) {
										case 0:
											var propName60 = _g65;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var layerIndex8 = this.parseInteger();
												if(node == null) {
													this.syntaxError("layer not supported on root elements");
												} else {
													var _g68 = node.parent.type;
													switch(_g68._hx_index) {
													case 7:
														var isTileGroup8 = _g68.isTileGroup;
														var parameters8 = _g68.parameters;
														break;
													case 14:
														break;
													default:
														this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(node.type));
													}
												}
												once.parsed(propName60);
												node.layer = layerIndex8;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name75 = _g65;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName75;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un75 = this.parseUpdatable(name75);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName75 = un75;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName75 = bh_multianim_UpdatableNameType.UNTObject(name75);
											}
											var newNode158 = this.parseNode(updatableName75,node,definitions,uniqueId + 1);
											if(newNode158 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name75,newNode158);
											} else {
												node.children.push(newNode158);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode159 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode159 == null) {
												continue;
											}
											if(node == null) {
												var tmp83 = newNode159 != null ? newNode159.updatableName : null;
												this.addNode(tmp83 != null ? bh_multianim_MultiAnimParser_getNameString(tmp83) : null,newNode159);
											} else {
												node.children.push(newNode159);
											}
										}
										break;
									case 35:
										switch(_g67._hx_index) {
										case 0:
											var propName61 = _g65;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var f16 = this.parseFloatOrReference();
												if(node == null) {
													this.syntaxError("scale not supported on root elements");
												}
												once.parsed(propName61);
												node.scale = f16;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name76 = _g65;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName76;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un76 = this.parseUpdatable(name76);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName76 = un76;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName76 = bh_multianim_UpdatableNameType.UNTObject(name76);
											}
											var newNode160 = this.parseNode(updatableName76,node,definitions,uniqueId + 1);
											if(newNode160 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name76,newNode160);
											} else {
												node.children.push(newNode160);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode161 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode161 == null) {
												continue;
											}
											if(node == null) {
												var tmp84 = newNode161 != null ? newNode161.updatableName : null;
												this.addNode(tmp84 != null ? bh_multianim_MultiAnimParser_getNameString(tmp84) : null,newNode161);
											} else {
												node.children.push(newNode161);
											}
										}
										break;
									case 36:
										switch(_g67._hx_index) {
										case 0:
											var propName62 = _g65;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var filter8 = this.parseFilter();
												if(node == null) {
													this.syntaxError("filter not supported on root elements");
												}
												once.parsed(propName62);
												node.filter = filter8;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name77 = _g65;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName77;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un77 = this.parseUpdatable(name77);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName77 = un77;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName77 = bh_multianim_UpdatableNameType.UNTObject(name77);
											}
											var newNode162 = this.parseNode(updatableName77,node,definitions,uniqueId + 1);
											if(newNode162 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name77,newNode162);
											} else {
												node.children.push(newNode162);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode163 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode163 == null) {
												continue;
											}
											if(node == null) {
												var tmp85 = newNode163 != null ? newNode163.updatableName : null;
												this.addNode(tmp85 != null ? bh_multianim_MultiAnimParser_getNameString(tmp85) : null,newNode163);
											} else {
												node.children.push(newNode163);
											}
										}
										break;
									case 41:
										switch(_g67._hx_index) {
										case 0:
											var propName63 = _g65;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var f17 = this.parseFloatOrReference();
												if(node == null) {
													this.syntaxError("alpha not supported on root elements");
												}
												once.parsed(propName63);
												node.alpha = f17;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name78 = _g65;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName78;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un78 = this.parseUpdatable(name78);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName78 = un78;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName78 = bh_multianim_UpdatableNameType.UNTObject(name78);
											}
											var newNode164 = this.parseNode(updatableName78,node,definitions,uniqueId + 1);
											if(newNode164 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name78,newNode164);
											} else {
												node.children.push(newNode164);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode165 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode165 == null) {
												continue;
											}
											if(node == null) {
												var tmp86 = newNode165 != null ? newNode165.updatableName : null;
												this.addNode(tmp86 != null ? bh_multianim_MultiAnimParser_getNameString(tmp86) : null,newNode165);
											} else {
												node.children.push(newNode165);
											}
										}
										break;
									case 72:
										switch(_g67._hx_index) {
										case 0:
											var propName64 = _g65;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												if(node == null) {
													this.syntaxError("blendMode not supported on root elements");
												}
												once.parsed(propName64);
												var blendMode8 = this.tryParseBlendMode();
												if(blendMode8 == null) {
													this.unexpectedError("unsupported blend mode");
												} else {
													node.blendMode = blendMode8;
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name79 = _g65;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName79;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un79 = this.parseUpdatable(name79);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName79 = un79;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName79 = bh_multianim_UpdatableNameType.UNTObject(name79);
											}
											var newNode166 = this.parseNode(updatableName79,node,definitions,uniqueId + 1);
											if(newNode166 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name79,newNode166);
											} else {
												node.children.push(newNode166);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode167 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode167 == null) {
												continue;
											}
											if(node == null) {
												var tmp87 = newNode167 != null ? newNode167.updatableName : null;
												this.addNode(tmp87 != null ? bh_multianim_MultiAnimParser_getNameString(tmp87) : null,newNode167);
											} else {
												node.children.push(newNode167);
											}
										}
										break;
									default:
										if(_g67._hx_index == 2) {
											var name80 = _g65;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName80;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un80 = this.parseUpdatable(name80);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName80 = un80;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName80 = bh_multianim_UpdatableNameType.UNTObject(name80);
											}
											var newNode168 = this.parseNode(updatableName80,node,definitions,uniqueId + 1);
											if(newNode168 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name80,newNode168);
											} else {
												node.children.push(newNode168);
											}
										} else {
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode169 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode169 == null) {
												continue;
											}
											if(node == null) {
												var tmp88 = newNode169 != null ? newNode169.updatableName : null;
												this.addNode(tmp88 != null ? bh_multianim_MultiAnimParser_getNameString(tmp88) : null,newNode169);
											} else {
												node.children.push(newNode169);
											}
										}
									}
								}
								break;
							case 16:
								this.last = this.token.elt;
								this.token = this.token.next;
								break;
							default:
								if(allowParseChildren == false) {
									this.syntaxError("children not allowed");
								}
								var newNode170 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
								if(newNode170 == null) {
									continue;
								}
								if(node == null) {
									var tmp89 = newNode170 != null ? newNode170.updatableName : null;
									this.addNode(tmp89 != null ? bh_multianim_MultiAnimParser_getNameString(tmp89) : null,newNode170);
								} else {
									node.children.push(newNode170);
								}
							}
						} else {
							switch(_g62._hx_index) {
							case 33:case 42:
								if(_g63._hx_index == 0) {
									var propName65 = _g61;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(node == null) {
										this.syntaxError("position not supported on root elements");
									}
									once.parsed(propName65);
									if(this.peek(0)._hx_index == 10) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var pos2 = this.parseXY();
										node.pos = pos2;
									} else {
										this.unexpectedError("expected valid position:x,y, grid, hex, hexEdge, hexCorner");
									}
								} else {
									var _g69 = this.peek(0);
									switch(_g69._hx_index) {
									case 0:
										this.last = this.token.elt;
										this.token = this.token.next;
										if(node != null) {
											this.syntaxError("unexpected end of file");
										} else {
											return;
										}
										break;
									case 6:
										this.last = this.token.elt;
										this.token = this.token.next;
										return;
									case 12:
										this.last = this.token.elt;
										this.token = this.token.next;
										break;
									case 14:
										var _g70 = _g69.s;
										var _g71 = _g69.keyword;
										var _g72 = _g69.identType;
										if(_g71 == null) {
											if(_g72._hx_index == 2) {
												var name81 = _g70;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName81;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un81 = this.parseUpdatable(name81);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName81 = un81;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName81 = bh_multianim_UpdatableNameType.UNTObject(name81);
												}
												var newNode171 = this.parseNode(updatableName81,node,definitions,uniqueId + 1);
												if(newNode171 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name81,newNode171);
												} else {
													node.children.push(newNode171);
												}
											} else {
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode172 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode172 == null) {
													continue;
												}
												if(node == null) {
													var tmp90 = newNode172 != null ? newNode172.updatableName : null;
													this.addNode(tmp90 != null ? bh_multianim_MultiAnimParser_getNameString(tmp90) : null,newNode172);
												} else {
													node.children.push(newNode172);
												}
											}
										} else {
											switch(_g71._hx_index) {
											case 18:
												switch(_g72._hx_index) {
												case 0:
													var propName66 = _g70;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														if(node == null) {
															this.syntaxError("grid coordinate system not supported on root elements");
														}
														once.parsed(propName66);
														node.gridCoordinateSystem = this.parseGridCoordianteSystem();
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name82 = _g70;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName82;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un82 = this.parseUpdatable(name82);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName82 = un82;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName82 = bh_multianim_UpdatableNameType.UNTObject(name82);
													}
													var newNode173 = this.parseNode(updatableName82,node,definitions,uniqueId + 1);
													if(newNode173 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name82,newNode173);
													} else {
														node.children.push(newNode173);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode174 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode174 == null) {
														continue;
													}
													if(node == null) {
														var tmp91 = newNode174 != null ? newNode174.updatableName : null;
														this.addNode(tmp91 != null ? bh_multianim_MultiAnimParser_getNameString(tmp91) : null,newNode174);
													} else {
														node.children.push(newNode174);
													}
												}
												break;
											case 19:
												switch(_g72._hx_index) {
												case 0:
													var propName67 = _g70;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														if(node == null) {
															this.syntaxError("hex coordinate system not supported on root elements");
														}
														once.parsed(propName67);
														node.hexCoordinateSystem = this.parseHexCoordianteSystem();
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name83 = _g70;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName83;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un83 = this.parseUpdatable(name83);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName83 = un83;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName83 = bh_multianim_UpdatableNameType.UNTObject(name83);
													}
													var newNode175 = this.parseNode(updatableName83,node,definitions,uniqueId + 1);
													if(newNode175 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name83,newNode175);
													} else {
														node.children.push(newNode175);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode176 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode176 == null) {
														continue;
													}
													if(node == null) {
														var tmp92 = newNode176 != null ? newNode176.updatableName : null;
														this.addNode(tmp92 != null ? bh_multianim_MultiAnimParser_getNameString(tmp92) : null,newNode176);
													} else {
														node.children.push(newNode176);
													}
												}
												break;
											case 31:
												switch(_g72._hx_index) {
												case 0:
													var propName68 = _g70;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var layerIndex9 = this.parseInteger();
														if(node == null) {
															this.syntaxError("layer not supported on root elements");
														} else {
															var _g73 = node.parent.type;
															switch(_g73._hx_index) {
															case 7:
																var isTileGroup9 = _g73.isTileGroup;
																var parameters9 = _g73.parameters;
																break;
															case 14:
																break;
															default:
																this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(node.type));
															}
														}
														once.parsed(propName68);
														node.layer = layerIndex9;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name84 = _g70;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName84;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un84 = this.parseUpdatable(name84);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName84 = un84;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName84 = bh_multianim_UpdatableNameType.UNTObject(name84);
													}
													var newNode177 = this.parseNode(updatableName84,node,definitions,uniqueId + 1);
													if(newNode177 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name84,newNode177);
													} else {
														node.children.push(newNode177);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode178 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode178 == null) {
														continue;
													}
													if(node == null) {
														var tmp93 = newNode178 != null ? newNode178.updatableName : null;
														this.addNode(tmp93 != null ? bh_multianim_MultiAnimParser_getNameString(tmp93) : null,newNode178);
													} else {
														node.children.push(newNode178);
													}
												}
												break;
											case 35:
												switch(_g72._hx_index) {
												case 0:
													var propName69 = _g70;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var f18 = this.parseFloatOrReference();
														if(node == null) {
															this.syntaxError("scale not supported on root elements");
														}
														once.parsed(propName69);
														node.scale = f18;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name85 = _g70;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName85;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un85 = this.parseUpdatable(name85);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName85 = un85;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName85 = bh_multianim_UpdatableNameType.UNTObject(name85);
													}
													var newNode179 = this.parseNode(updatableName85,node,definitions,uniqueId + 1);
													if(newNode179 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name85,newNode179);
													} else {
														node.children.push(newNode179);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode180 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode180 == null) {
														continue;
													}
													if(node == null) {
														var tmp94 = newNode180 != null ? newNode180.updatableName : null;
														this.addNode(tmp94 != null ? bh_multianim_MultiAnimParser_getNameString(tmp94) : null,newNode180);
													} else {
														node.children.push(newNode180);
													}
												}
												break;
											case 36:
												switch(_g72._hx_index) {
												case 0:
													var propName70 = _g70;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var filter9 = this.parseFilter();
														if(node == null) {
															this.syntaxError("filter not supported on root elements");
														}
														once.parsed(propName70);
														node.filter = filter9;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name86 = _g70;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName86;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un86 = this.parseUpdatable(name86);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName86 = un86;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName86 = bh_multianim_UpdatableNameType.UNTObject(name86);
													}
													var newNode181 = this.parseNode(updatableName86,node,definitions,uniqueId + 1);
													if(newNode181 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name86,newNode181);
													} else {
														node.children.push(newNode181);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode182 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode182 == null) {
														continue;
													}
													if(node == null) {
														var tmp95 = newNode182 != null ? newNode182.updatableName : null;
														this.addNode(tmp95 != null ? bh_multianim_MultiAnimParser_getNameString(tmp95) : null,newNode182);
													} else {
														node.children.push(newNode182);
													}
												}
												break;
											case 41:
												switch(_g72._hx_index) {
												case 0:
													var propName71 = _g70;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var f19 = this.parseFloatOrReference();
														if(node == null) {
															this.syntaxError("alpha not supported on root elements");
														}
														once.parsed(propName71);
														node.alpha = f19;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name87 = _g70;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName87;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un87 = this.parseUpdatable(name87);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName87 = un87;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName87 = bh_multianim_UpdatableNameType.UNTObject(name87);
													}
													var newNode183 = this.parseNode(updatableName87,node,definitions,uniqueId + 1);
													if(newNode183 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name87,newNode183);
													} else {
														node.children.push(newNode183);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode184 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode184 == null) {
														continue;
													}
													if(node == null) {
														var tmp96 = newNode184 != null ? newNode184.updatableName : null;
														this.addNode(tmp96 != null ? bh_multianim_MultiAnimParser_getNameString(tmp96) : null,newNode184);
													} else {
														node.children.push(newNode184);
													}
												}
												break;
											case 72:
												switch(_g72._hx_index) {
												case 0:
													var propName72 = _g70;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 10) {
														this.last = this.token.elt;
														this.token = this.token.next;
														if(node == null) {
															this.syntaxError("blendMode not supported on root elements");
														}
														once.parsed(propName72);
														var blendMode9 = this.tryParseBlendMode();
														if(blendMode9 == null) {
															this.unexpectedError("unsupported blend mode");
														} else {
															node.blendMode = blendMode9;
														}
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
													break;
												case 2:
													var name88 = _g70;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName88;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un88 = this.parseUpdatable(name88);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName88 = un88;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName88 = bh_multianim_UpdatableNameType.UNTObject(name88);
													}
													var newNode185 = this.parseNode(updatableName88,node,definitions,uniqueId + 1);
													if(newNode185 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name88,newNode185);
													} else {
														node.children.push(newNode185);
													}
													break;
												default:
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode186 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode186 == null) {
														continue;
													}
													if(node == null) {
														var tmp97 = newNode186 != null ? newNode186.updatableName : null;
														this.addNode(tmp97 != null ? bh_multianim_MultiAnimParser_getNameString(tmp97) : null,newNode186);
													} else {
														node.children.push(newNode186);
													}
												}
												break;
											default:
												if(_g72._hx_index == 2) {
													var name89 = _g70;
													this.last = this.token.elt;
													this.token = this.token.next;
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var updatableName89;
													if(this.peek(0)._hx_index == 1) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var un89 = this.parseUpdatable(name89);
														if(this.peek(0)._hx_index == 2) {
															this.last = this.token.elt;
															this.token = this.token.next;
															updatableName89 = un89;
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														updatableName89 = bh_multianim_UpdatableNameType.UNTObject(name89);
													}
													var newNode187 = this.parseNode(updatableName89,node,definitions,uniqueId + 1);
													if(newNode187 == null) {
														continue;
													}
													if(node == null) {
														this.addNode(name89,newNode187);
													} else {
														node.children.push(newNode187);
													}
												} else {
													if(allowParseChildren == false) {
														this.syntaxError("children not allowed");
													}
													var newNode188 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
													if(newNode188 == null) {
														continue;
													}
													if(node == null) {
														var tmp98 = newNode188 != null ? newNode188.updatableName : null;
														this.addNode(tmp98 != null ? bh_multianim_MultiAnimParser_getNameString(tmp98) : null,newNode188);
													} else {
														node.children.push(newNode188);
													}
												}
											}
										}
										break;
									case 16:
										this.last = this.token.elt;
										this.token = this.token.next;
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode189 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode189 == null) {
											continue;
										}
										if(node == null) {
											var tmp99 = newNode189 != null ? newNode189.updatableName : null;
											this.addNode(tmp99 != null ? bh_multianim_MultiAnimParser_getNameString(tmp99) : null,newNode189);
										} else {
											node.children.push(newNode189);
										}
									}
								}
								break;
							default:
								var _g74 = this.peek(0);
								switch(_g74._hx_index) {
								case 0:
									this.last = this.token.elt;
									this.token = this.token.next;
									if(node != null) {
										this.syntaxError("unexpected end of file");
									} else {
										return;
									}
									break;
								case 6:
									this.last = this.token.elt;
									this.token = this.token.next;
									return;
								case 12:
									this.last = this.token.elt;
									this.token = this.token.next;
									break;
								case 14:
									var _g75 = _g74.s;
									var _g76 = _g74.keyword;
									var _g77 = _g74.identType;
									if(_g76 == null) {
										if(_g77._hx_index == 2) {
											var name90 = _g75;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName90;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un90 = this.parseUpdatable(name90);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName90 = un90;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName90 = bh_multianim_UpdatableNameType.UNTObject(name90);
											}
											var newNode190 = this.parseNode(updatableName90,node,definitions,uniqueId + 1);
											if(newNode190 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name90,newNode190);
											} else {
												node.children.push(newNode190);
											}
										} else {
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode191 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode191 == null) {
												continue;
											}
											if(node == null) {
												var tmp100 = newNode191 != null ? newNode191.updatableName : null;
												this.addNode(tmp100 != null ? bh_multianim_MultiAnimParser_getNameString(tmp100) : null,newNode191);
											} else {
												node.children.push(newNode191);
											}
										}
									} else {
										switch(_g76._hx_index) {
										case 18:
											switch(_g77._hx_index) {
											case 0:
												var propName73 = _g75;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													if(node == null) {
														this.syntaxError("grid coordinate system not supported on root elements");
													}
													once.parsed(propName73);
													node.gridCoordinateSystem = this.parseGridCoordianteSystem();
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name91 = _g75;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName91;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un91 = this.parseUpdatable(name91);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName91 = un91;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName91 = bh_multianim_UpdatableNameType.UNTObject(name91);
												}
												var newNode192 = this.parseNode(updatableName91,node,definitions,uniqueId + 1);
												if(newNode192 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name91,newNode192);
												} else {
													node.children.push(newNode192);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode193 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode193 == null) {
													continue;
												}
												if(node == null) {
													var tmp101 = newNode193 != null ? newNode193.updatableName : null;
													this.addNode(tmp101 != null ? bh_multianim_MultiAnimParser_getNameString(tmp101) : null,newNode193);
												} else {
													node.children.push(newNode193);
												}
											}
											break;
										case 19:
											switch(_g77._hx_index) {
											case 0:
												var propName74 = _g75;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													if(node == null) {
														this.syntaxError("hex coordinate system not supported on root elements");
													}
													once.parsed(propName74);
													node.hexCoordinateSystem = this.parseHexCoordianteSystem();
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name92 = _g75;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName92;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un92 = this.parseUpdatable(name92);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName92 = un92;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName92 = bh_multianim_UpdatableNameType.UNTObject(name92);
												}
												var newNode194 = this.parseNode(updatableName92,node,definitions,uniqueId + 1);
												if(newNode194 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name92,newNode194);
												} else {
													node.children.push(newNode194);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode195 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode195 == null) {
													continue;
												}
												if(node == null) {
													var tmp102 = newNode195 != null ? newNode195.updatableName : null;
													this.addNode(tmp102 != null ? bh_multianim_MultiAnimParser_getNameString(tmp102) : null,newNode195);
												} else {
													node.children.push(newNode195);
												}
											}
											break;
										case 31:
											switch(_g77._hx_index) {
											case 0:
												var propName75 = _g75;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var layerIndex10 = this.parseInteger();
													if(node == null) {
														this.syntaxError("layer not supported on root elements");
													} else {
														var _g78 = node.parent.type;
														switch(_g78._hx_index) {
														case 7:
															var isTileGroup10 = _g78.isTileGroup;
															var parameters10 = _g78.parameters;
															break;
														case 14:
															break;
														default:
															this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(node.type));
														}
													}
													once.parsed(propName75);
													node.layer = layerIndex10;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name93 = _g75;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName93;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un93 = this.parseUpdatable(name93);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName93 = un93;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName93 = bh_multianim_UpdatableNameType.UNTObject(name93);
												}
												var newNode196 = this.parseNode(updatableName93,node,definitions,uniqueId + 1);
												if(newNode196 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name93,newNode196);
												} else {
													node.children.push(newNode196);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode197 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode197 == null) {
													continue;
												}
												if(node == null) {
													var tmp103 = newNode197 != null ? newNode197.updatableName : null;
													this.addNode(tmp103 != null ? bh_multianim_MultiAnimParser_getNameString(tmp103) : null,newNode197);
												} else {
													node.children.push(newNode197);
												}
											}
											break;
										case 35:
											switch(_g77._hx_index) {
											case 0:
												var propName76 = _g75;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var f20 = this.parseFloatOrReference();
													if(node == null) {
														this.syntaxError("scale not supported on root elements");
													}
													once.parsed(propName76);
													node.scale = f20;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name94 = _g75;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName94;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un94 = this.parseUpdatable(name94);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName94 = un94;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName94 = bh_multianim_UpdatableNameType.UNTObject(name94);
												}
												var newNode198 = this.parseNode(updatableName94,node,definitions,uniqueId + 1);
												if(newNode198 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name94,newNode198);
												} else {
													node.children.push(newNode198);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode199 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode199 == null) {
													continue;
												}
												if(node == null) {
													var tmp104 = newNode199 != null ? newNode199.updatableName : null;
													this.addNode(tmp104 != null ? bh_multianim_MultiAnimParser_getNameString(tmp104) : null,newNode199);
												} else {
													node.children.push(newNode199);
												}
											}
											break;
										case 36:
											switch(_g77._hx_index) {
											case 0:
												var propName77 = _g75;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var filter10 = this.parseFilter();
													if(node == null) {
														this.syntaxError("filter not supported on root elements");
													}
													once.parsed(propName77);
													node.filter = filter10;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name95 = _g75;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName95;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un95 = this.parseUpdatable(name95);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName95 = un95;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName95 = bh_multianim_UpdatableNameType.UNTObject(name95);
												}
												var newNode200 = this.parseNode(updatableName95,node,definitions,uniqueId + 1);
												if(newNode200 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name95,newNode200);
												} else {
													node.children.push(newNode200);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode201 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode201 == null) {
													continue;
												}
												if(node == null) {
													var tmp105 = newNode201 != null ? newNode201.updatableName : null;
													this.addNode(tmp105 != null ? bh_multianim_MultiAnimParser_getNameString(tmp105) : null,newNode201);
												} else {
													node.children.push(newNode201);
												}
											}
											break;
										case 41:
											switch(_g77._hx_index) {
											case 0:
												var propName78 = _g75;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var f21 = this.parseFloatOrReference();
													if(node == null) {
														this.syntaxError("alpha not supported on root elements");
													}
													once.parsed(propName78);
													node.alpha = f21;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name96 = _g75;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName96;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un96 = this.parseUpdatable(name96);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName96 = un96;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName96 = bh_multianim_UpdatableNameType.UNTObject(name96);
												}
												var newNode202 = this.parseNode(updatableName96,node,definitions,uniqueId + 1);
												if(newNode202 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name96,newNode202);
												} else {
													node.children.push(newNode202);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode203 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode203 == null) {
													continue;
												}
												if(node == null) {
													var tmp106 = newNode203 != null ? newNode203.updatableName : null;
													this.addNode(tmp106 != null ? bh_multianim_MultiAnimParser_getNameString(tmp106) : null,newNode203);
												} else {
													node.children.push(newNode203);
												}
											}
											break;
										case 72:
											switch(_g77._hx_index) {
											case 0:
												var propName79 = _g75;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													if(node == null) {
														this.syntaxError("blendMode not supported on root elements");
													}
													once.parsed(propName79);
													var blendMode10 = this.tryParseBlendMode();
													if(blendMode10 == null) {
														this.unexpectedError("unsupported blend mode");
													} else {
														node.blendMode = blendMode10;
													}
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name97 = _g75;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName97;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un97 = this.parseUpdatable(name97);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName97 = un97;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName97 = bh_multianim_UpdatableNameType.UNTObject(name97);
												}
												var newNode204 = this.parseNode(updatableName97,node,definitions,uniqueId + 1);
												if(newNode204 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name97,newNode204);
												} else {
													node.children.push(newNode204);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode205 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode205 == null) {
													continue;
												}
												if(node == null) {
													var tmp107 = newNode205 != null ? newNode205.updatableName : null;
													this.addNode(tmp107 != null ? bh_multianim_MultiAnimParser_getNameString(tmp107) : null,newNode205);
												} else {
													node.children.push(newNode205);
												}
											}
											break;
										default:
											if(_g77._hx_index == 2) {
												var name98 = _g75;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName98;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un98 = this.parseUpdatable(name98);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName98 = un98;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName98 = bh_multianim_UpdatableNameType.UNTObject(name98);
												}
												var newNode206 = this.parseNode(updatableName98,node,definitions,uniqueId + 1);
												if(newNode206 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name98,newNode206);
												} else {
													node.children.push(newNode206);
												}
											} else {
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode207 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode207 == null) {
													continue;
												}
												if(node == null) {
													var tmp108 = newNode207 != null ? newNode207.updatableName : null;
													this.addNode(tmp108 != null ? bh_multianim_MultiAnimParser_getNameString(tmp108) : null,newNode207);
												} else {
													node.children.push(newNode207);
												}
											}
										}
									}
									break;
								case 16:
									this.last = this.token.elt;
									this.token = this.token.next;
									break;
								default:
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var newNode208 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
									if(newNode208 == null) {
										continue;
									}
									if(node == null) {
										var tmp109 = newNode208 != null ? newNode208.updatableName : null;
										this.addNode(tmp109 != null ? bh_multianim_MultiAnimParser_getNameString(tmp109) : null,newNode208);
									} else {
										node.children.push(newNode208);
									}
								}
							}
						}
					} else {
						var _g79 = this.peek(0);
						switch(_g79._hx_index) {
						case 0:
							this.last = this.token.elt;
							this.token = this.token.next;
							if(node != null) {
								this.syntaxError("unexpected end of file");
							} else {
								return;
							}
							break;
						case 6:
							this.last = this.token.elt;
							this.token = this.token.next;
							return;
						case 12:
							this.last = this.token.elt;
							this.token = this.token.next;
							break;
						case 14:
							var _g80 = _g79.s;
							var _g81 = _g79.keyword;
							var _g82 = _g79.identType;
							if(_g81 == null) {
								if(_g82._hx_index == 2) {
									var name99 = _g80;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var updatableName99;
									if(this.peek(0)._hx_index == 1) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var un99 = this.parseUpdatable(name99);
										if(this.peek(0)._hx_index == 2) {
											this.last = this.token.elt;
											this.token = this.token.next;
											updatableName99 = un99;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										updatableName99 = bh_multianim_UpdatableNameType.UNTObject(name99);
									}
									var newNode209 = this.parseNode(updatableName99,node,definitions,uniqueId + 1);
									if(newNode209 == null) {
										continue;
									}
									if(node == null) {
										this.addNode(name99,newNode209);
									} else {
										node.children.push(newNode209);
									}
								} else {
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var newNode210 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
									if(newNode210 == null) {
										continue;
									}
									if(node == null) {
										var tmp110 = newNode210 != null ? newNode210.updatableName : null;
										this.addNode(tmp110 != null ? bh_multianim_MultiAnimParser_getNameString(tmp110) : null,newNode210);
									} else {
										node.children.push(newNode210);
									}
								}
							} else {
								switch(_g81._hx_index) {
								case 18:
									switch(_g82._hx_index) {
									case 0:
										var propName80 = _g80;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											if(node == null) {
												this.syntaxError("grid coordinate system not supported on root elements");
											}
											once.parsed(propName80);
											node.gridCoordinateSystem = this.parseGridCoordianteSystem();
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name100 = _g80;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName100;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un100 = this.parseUpdatable(name100);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName100 = un100;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName100 = bh_multianim_UpdatableNameType.UNTObject(name100);
										}
										var newNode211 = this.parseNode(updatableName100,node,definitions,uniqueId + 1);
										if(newNode211 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name100,newNode211);
										} else {
											node.children.push(newNode211);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode212 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode212 == null) {
											continue;
										}
										if(node == null) {
											var tmp111 = newNode212 != null ? newNode212.updatableName : null;
											this.addNode(tmp111 != null ? bh_multianim_MultiAnimParser_getNameString(tmp111) : null,newNode212);
										} else {
											node.children.push(newNode212);
										}
									}
									break;
								case 19:
									switch(_g82._hx_index) {
									case 0:
										var propName81 = _g80;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											if(node == null) {
												this.syntaxError("hex coordinate system not supported on root elements");
											}
											once.parsed(propName81);
											node.hexCoordinateSystem = this.parseHexCoordianteSystem();
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name101 = _g80;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName101;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un101 = this.parseUpdatable(name101);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName101 = un101;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName101 = bh_multianim_UpdatableNameType.UNTObject(name101);
										}
										var newNode213 = this.parseNode(updatableName101,node,definitions,uniqueId + 1);
										if(newNode213 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name101,newNode213);
										} else {
											node.children.push(newNode213);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode214 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode214 == null) {
											continue;
										}
										if(node == null) {
											var tmp112 = newNode214 != null ? newNode214.updatableName : null;
											this.addNode(tmp112 != null ? bh_multianim_MultiAnimParser_getNameString(tmp112) : null,newNode214);
										} else {
											node.children.push(newNode214);
										}
									}
									break;
								case 31:
									switch(_g82._hx_index) {
									case 0:
										var propName82 = _g80;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var layerIndex11 = this.parseInteger();
											if(node == null) {
												this.syntaxError("layer not supported on root elements");
											} else {
												var _g83 = node.parent.type;
												switch(_g83._hx_index) {
												case 7:
													var isTileGroup11 = _g83.isTileGroup;
													var parameters11 = _g83.parameters;
													break;
												case 14:
													break;
												default:
													this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(node.type));
												}
											}
											once.parsed(propName82);
											node.layer = layerIndex11;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name102 = _g80;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName102;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un102 = this.parseUpdatable(name102);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName102 = un102;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName102 = bh_multianim_UpdatableNameType.UNTObject(name102);
										}
										var newNode215 = this.parseNode(updatableName102,node,definitions,uniqueId + 1);
										if(newNode215 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name102,newNode215);
										} else {
											node.children.push(newNode215);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode216 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode216 == null) {
											continue;
										}
										if(node == null) {
											var tmp113 = newNode216 != null ? newNode216.updatableName : null;
											this.addNode(tmp113 != null ? bh_multianim_MultiAnimParser_getNameString(tmp113) : null,newNode216);
										} else {
											node.children.push(newNode216);
										}
									}
									break;
								case 35:
									switch(_g82._hx_index) {
									case 0:
										var propName83 = _g80;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var f22 = this.parseFloatOrReference();
											if(node == null) {
												this.syntaxError("scale not supported on root elements");
											}
											once.parsed(propName83);
											node.scale = f22;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name103 = _g80;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName103;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un103 = this.parseUpdatable(name103);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName103 = un103;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName103 = bh_multianim_UpdatableNameType.UNTObject(name103);
										}
										var newNode217 = this.parseNode(updatableName103,node,definitions,uniqueId + 1);
										if(newNode217 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name103,newNode217);
										} else {
											node.children.push(newNode217);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode218 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode218 == null) {
											continue;
										}
										if(node == null) {
											var tmp114 = newNode218 != null ? newNode218.updatableName : null;
											this.addNode(tmp114 != null ? bh_multianim_MultiAnimParser_getNameString(tmp114) : null,newNode218);
										} else {
											node.children.push(newNode218);
										}
									}
									break;
								case 36:
									switch(_g82._hx_index) {
									case 0:
										var propName84 = _g80;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var filter11 = this.parseFilter();
											if(node == null) {
												this.syntaxError("filter not supported on root elements");
											}
											once.parsed(propName84);
											node.filter = filter11;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name104 = _g80;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName104;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un104 = this.parseUpdatable(name104);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName104 = un104;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName104 = bh_multianim_UpdatableNameType.UNTObject(name104);
										}
										var newNode219 = this.parseNode(updatableName104,node,definitions,uniqueId + 1);
										if(newNode219 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name104,newNode219);
										} else {
											node.children.push(newNode219);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode220 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode220 == null) {
											continue;
										}
										if(node == null) {
											var tmp115 = newNode220 != null ? newNode220.updatableName : null;
											this.addNode(tmp115 != null ? bh_multianim_MultiAnimParser_getNameString(tmp115) : null,newNode220);
										} else {
											node.children.push(newNode220);
										}
									}
									break;
								case 41:
									switch(_g82._hx_index) {
									case 0:
										var propName85 = _g80;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var f23 = this.parseFloatOrReference();
											if(node == null) {
												this.syntaxError("alpha not supported on root elements");
											}
											once.parsed(propName85);
											node.alpha = f23;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name105 = _g80;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName105;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un105 = this.parseUpdatable(name105);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName105 = un105;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName105 = bh_multianim_UpdatableNameType.UNTObject(name105);
										}
										var newNode221 = this.parseNode(updatableName105,node,definitions,uniqueId + 1);
										if(newNode221 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name105,newNode221);
										} else {
											node.children.push(newNode221);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode222 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode222 == null) {
											continue;
										}
										if(node == null) {
											var tmp116 = newNode222 != null ? newNode222.updatableName : null;
											this.addNode(tmp116 != null ? bh_multianim_MultiAnimParser_getNameString(tmp116) : null,newNode222);
										} else {
											node.children.push(newNode222);
										}
									}
									break;
								case 72:
									switch(_g82._hx_index) {
									case 0:
										var propName86 = _g80;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											if(node == null) {
												this.syntaxError("blendMode not supported on root elements");
											}
											once.parsed(propName86);
											var blendMode11 = this.tryParseBlendMode();
											if(blendMode11 == null) {
												this.unexpectedError("unsupported blend mode");
											} else {
												node.blendMode = blendMode11;
											}
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name106 = _g80;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName106;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un106 = this.parseUpdatable(name106);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName106 = un106;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName106 = bh_multianim_UpdatableNameType.UNTObject(name106);
										}
										var newNode223 = this.parseNode(updatableName106,node,definitions,uniqueId + 1);
										if(newNode223 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name106,newNode223);
										} else {
											node.children.push(newNode223);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode224 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode224 == null) {
											continue;
										}
										if(node == null) {
											var tmp117 = newNode224 != null ? newNode224.updatableName : null;
											this.addNode(tmp117 != null ? bh_multianim_MultiAnimParser_getNameString(tmp117) : null,newNode224);
										} else {
											node.children.push(newNode224);
										}
									}
									break;
								default:
									if(_g82._hx_index == 2) {
										var name107 = _g80;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName107;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un107 = this.parseUpdatable(name107);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName107 = un107;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName107 = bh_multianim_UpdatableNameType.UNTObject(name107);
										}
										var newNode225 = this.parseNode(updatableName107,node,definitions,uniqueId + 1);
										if(newNode225 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name107,newNode225);
										} else {
											node.children.push(newNode225);
										}
									} else {
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode226 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode226 == null) {
											continue;
										}
										if(node == null) {
											var tmp118 = newNode226 != null ? newNode226.updatableName : null;
											this.addNode(tmp118 != null ? bh_multianim_MultiAnimParser_getNameString(tmp118) : null,newNode226);
										} else {
											node.children.push(newNode226);
										}
									}
								}
							}
							break;
						case 16:
							this.last = this.token.elt;
							this.token = this.token.next;
							break;
						default:
							if(allowParseChildren == false) {
								this.syntaxError("children not allowed");
							}
							var newNode227 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
							if(newNode227 == null) {
								continue;
							}
							if(node == null) {
								var tmp119 = newNode227 != null ? newNode227.updatableName : null;
								this.addNode(tmp119 != null ? bh_multianim_MultiAnimParser_getNameString(tmp119) : null,newNode227);
							} else {
								node.children.push(newNode227);
							}
						}
					}
				}
			} else {
				var _g84 = this.peek(0);
				if(_g84._hx_index == 14) {
					var _g85 = _g84.s;
					var _g86 = _g84.keyword;
					var _g87 = _g84.identType;
					if(_g86 == null) {
						var _g88 = this.peek(0);
						switch(_g88._hx_index) {
						case 0:
							this.last = this.token.elt;
							this.token = this.token.next;
							if(node != null) {
								this.syntaxError("unexpected end of file");
							} else {
								return;
							}
							break;
						case 6:
							this.last = this.token.elt;
							this.token = this.token.next;
							return;
						case 12:
							this.last = this.token.elt;
							this.token = this.token.next;
							break;
						case 14:
							var _g89 = _g88.s;
							var _g90 = _g88.keyword;
							var _g91 = _g88.identType;
							if(_g90 == null) {
								if(_g91._hx_index == 2) {
									var name108 = _g89;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var updatableName108;
									if(this.peek(0)._hx_index == 1) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var un108 = this.parseUpdatable(name108);
										if(this.peek(0)._hx_index == 2) {
											this.last = this.token.elt;
											this.token = this.token.next;
											updatableName108 = un108;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										updatableName108 = bh_multianim_UpdatableNameType.UNTObject(name108);
									}
									var newNode228 = this.parseNode(updatableName108,node,definitions,uniqueId + 1);
									if(newNode228 == null) {
										continue;
									}
									if(node == null) {
										this.addNode(name108,newNode228);
									} else {
										node.children.push(newNode228);
									}
								} else {
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var newNode229 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
									if(newNode229 == null) {
										continue;
									}
									if(node == null) {
										var tmp120 = newNode229 != null ? newNode229.updatableName : null;
										this.addNode(tmp120 != null ? bh_multianim_MultiAnimParser_getNameString(tmp120) : null,newNode229);
									} else {
										node.children.push(newNode229);
									}
								}
							} else {
								switch(_g90._hx_index) {
								case 18:
									switch(_g91._hx_index) {
									case 0:
										var propName87 = _g89;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											if(node == null) {
												this.syntaxError("grid coordinate system not supported on root elements");
											}
											once.parsed(propName87);
											node.gridCoordinateSystem = this.parseGridCoordianteSystem();
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name109 = _g89;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName109;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un109 = this.parseUpdatable(name109);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName109 = un109;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName109 = bh_multianim_UpdatableNameType.UNTObject(name109);
										}
										var newNode230 = this.parseNode(updatableName109,node,definitions,uniqueId + 1);
										if(newNode230 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name109,newNode230);
										} else {
											node.children.push(newNode230);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode231 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode231 == null) {
											continue;
										}
										if(node == null) {
											var tmp121 = newNode231 != null ? newNode231.updatableName : null;
											this.addNode(tmp121 != null ? bh_multianim_MultiAnimParser_getNameString(tmp121) : null,newNode231);
										} else {
											node.children.push(newNode231);
										}
									}
									break;
								case 19:
									switch(_g91._hx_index) {
									case 0:
										var propName88 = _g89;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											if(node == null) {
												this.syntaxError("hex coordinate system not supported on root elements");
											}
											once.parsed(propName88);
											node.hexCoordinateSystem = this.parseHexCoordianteSystem();
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name110 = _g89;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName110;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un110 = this.parseUpdatable(name110);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName110 = un110;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName110 = bh_multianim_UpdatableNameType.UNTObject(name110);
										}
										var newNode232 = this.parseNode(updatableName110,node,definitions,uniqueId + 1);
										if(newNode232 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name110,newNode232);
										} else {
											node.children.push(newNode232);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode233 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode233 == null) {
											continue;
										}
										if(node == null) {
											var tmp122 = newNode233 != null ? newNode233.updatableName : null;
											this.addNode(tmp122 != null ? bh_multianim_MultiAnimParser_getNameString(tmp122) : null,newNode233);
										} else {
											node.children.push(newNode233);
										}
									}
									break;
								case 31:
									switch(_g91._hx_index) {
									case 0:
										var propName89 = _g89;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var layerIndex12 = this.parseInteger();
											if(node == null) {
												this.syntaxError("layer not supported on root elements");
											} else {
												var _g92 = node.parent.type;
												switch(_g92._hx_index) {
												case 7:
													var isTileGroup12 = _g92.isTileGroup;
													var parameters12 = _g92.parameters;
													break;
												case 14:
													break;
												default:
													this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(node.type));
												}
											}
											once.parsed(propName89);
											node.layer = layerIndex12;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name111 = _g89;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName111;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un111 = this.parseUpdatable(name111);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName111 = un111;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName111 = bh_multianim_UpdatableNameType.UNTObject(name111);
										}
										var newNode234 = this.parseNode(updatableName111,node,definitions,uniqueId + 1);
										if(newNode234 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name111,newNode234);
										} else {
											node.children.push(newNode234);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode235 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode235 == null) {
											continue;
										}
										if(node == null) {
											var tmp123 = newNode235 != null ? newNode235.updatableName : null;
											this.addNode(tmp123 != null ? bh_multianim_MultiAnimParser_getNameString(tmp123) : null,newNode235);
										} else {
											node.children.push(newNode235);
										}
									}
									break;
								case 35:
									switch(_g91._hx_index) {
									case 0:
										var propName90 = _g89;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var f24 = this.parseFloatOrReference();
											if(node == null) {
												this.syntaxError("scale not supported on root elements");
											}
											once.parsed(propName90);
											node.scale = f24;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name112 = _g89;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName112;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un112 = this.parseUpdatable(name112);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName112 = un112;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName112 = bh_multianim_UpdatableNameType.UNTObject(name112);
										}
										var newNode236 = this.parseNode(updatableName112,node,definitions,uniqueId + 1);
										if(newNode236 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name112,newNode236);
										} else {
											node.children.push(newNode236);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode237 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode237 == null) {
											continue;
										}
										if(node == null) {
											var tmp124 = newNode237 != null ? newNode237.updatableName : null;
											this.addNode(tmp124 != null ? bh_multianim_MultiAnimParser_getNameString(tmp124) : null,newNode237);
										} else {
											node.children.push(newNode237);
										}
									}
									break;
								case 36:
									switch(_g91._hx_index) {
									case 0:
										var propName91 = _g89;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var filter12 = this.parseFilter();
											if(node == null) {
												this.syntaxError("filter not supported on root elements");
											}
											once.parsed(propName91);
											node.filter = filter12;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name113 = _g89;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName113;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un113 = this.parseUpdatable(name113);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName113 = un113;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName113 = bh_multianim_UpdatableNameType.UNTObject(name113);
										}
										var newNode238 = this.parseNode(updatableName113,node,definitions,uniqueId + 1);
										if(newNode238 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name113,newNode238);
										} else {
											node.children.push(newNode238);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode239 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode239 == null) {
											continue;
										}
										if(node == null) {
											var tmp125 = newNode239 != null ? newNode239.updatableName : null;
											this.addNode(tmp125 != null ? bh_multianim_MultiAnimParser_getNameString(tmp125) : null,newNode239);
										} else {
											node.children.push(newNode239);
										}
									}
									break;
								case 41:
									switch(_g91._hx_index) {
									case 0:
										var propName92 = _g89;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var f25 = this.parseFloatOrReference();
											if(node == null) {
												this.syntaxError("alpha not supported on root elements");
											}
											once.parsed(propName92);
											node.alpha = f25;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name114 = _g89;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName114;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un114 = this.parseUpdatable(name114);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName114 = un114;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName114 = bh_multianim_UpdatableNameType.UNTObject(name114);
										}
										var newNode240 = this.parseNode(updatableName114,node,definitions,uniqueId + 1);
										if(newNode240 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name114,newNode240);
										} else {
											node.children.push(newNode240);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode241 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode241 == null) {
											continue;
										}
										if(node == null) {
											var tmp126 = newNode241 != null ? newNode241.updatableName : null;
											this.addNode(tmp126 != null ? bh_multianim_MultiAnimParser_getNameString(tmp126) : null,newNode241);
										} else {
											node.children.push(newNode241);
										}
									}
									break;
								case 72:
									switch(_g91._hx_index) {
									case 0:
										var propName93 = _g89;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 10) {
											this.last = this.token.elt;
											this.token = this.token.next;
											if(node == null) {
												this.syntaxError("blendMode not supported on root elements");
											}
											once.parsed(propName93);
											var blendMode12 = this.tryParseBlendMode();
											if(blendMode12 == null) {
												this.unexpectedError("unsupported blend mode");
											} else {
												node.blendMode = blendMode12;
											}
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									case 2:
										var name115 = _g89;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName115;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un115 = this.parseUpdatable(name115);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName115 = un115;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName115 = bh_multianim_UpdatableNameType.UNTObject(name115);
										}
										var newNode242 = this.parseNode(updatableName115,node,definitions,uniqueId + 1);
										if(newNode242 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name115,newNode242);
										} else {
											node.children.push(newNode242);
										}
										break;
									default:
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode243 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode243 == null) {
											continue;
										}
										if(node == null) {
											var tmp127 = newNode243 != null ? newNode243.updatableName : null;
											this.addNode(tmp127 != null ? bh_multianim_MultiAnimParser_getNameString(tmp127) : null,newNode243);
										} else {
											node.children.push(newNode243);
										}
									}
									break;
								default:
									if(_g91._hx_index == 2) {
										var name116 = _g89;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName116;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un116 = this.parseUpdatable(name116);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName116 = un116;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName116 = bh_multianim_UpdatableNameType.UNTObject(name116);
										}
										var newNode244 = this.parseNode(updatableName116,node,definitions,uniqueId + 1);
										if(newNode244 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name116,newNode244);
										} else {
											node.children.push(newNode244);
										}
									} else {
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode245 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode245 == null) {
											continue;
										}
										if(node == null) {
											var tmp128 = newNode245 != null ? newNode245.updatableName : null;
											this.addNode(tmp128 != null ? bh_multianim_MultiAnimParser_getNameString(tmp128) : null,newNode245);
										} else {
											node.children.push(newNode245);
										}
									}
								}
							}
							break;
						case 16:
							this.last = this.token.elt;
							this.token = this.token.next;
							break;
						default:
							if(allowParseChildren == false) {
								this.syntaxError("children not allowed");
							}
							var newNode246 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
							if(newNode246 == null) {
								continue;
							}
							if(node == null) {
								var tmp129 = newNode246 != null ? newNode246.updatableName : null;
								this.addNode(tmp129 != null ? bh_multianim_MultiAnimParser_getNameString(tmp129) : null,newNode246);
							} else {
								node.children.push(newNode246);
							}
						}
					} else {
						switch(_g86._hx_index) {
						case 33:case 42:
							if(_g87._hx_index == 0) {
								var propName94 = _g85;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(node == null) {
									this.syntaxError("position not supported on root elements");
								}
								once.parsed(propName94);
								if(this.peek(0)._hx_index == 10) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var pos3 = this.parseXY();
									node.pos = pos3;
								} else {
									this.unexpectedError("expected valid position:x,y, grid, hex, hexEdge, hexCorner");
								}
							} else {
								var _g93 = this.peek(0);
								switch(_g93._hx_index) {
								case 0:
									this.last = this.token.elt;
									this.token = this.token.next;
									if(node != null) {
										this.syntaxError("unexpected end of file");
									} else {
										return;
									}
									break;
								case 6:
									this.last = this.token.elt;
									this.token = this.token.next;
									return;
								case 12:
									this.last = this.token.elt;
									this.token = this.token.next;
									break;
								case 14:
									var _g94 = _g93.s;
									var _g95 = _g93.keyword;
									var _g96 = _g93.identType;
									if(_g95 == null) {
										if(_g96._hx_index == 2) {
											var name117 = _g94;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName117;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un117 = this.parseUpdatable(name117);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName117 = un117;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName117 = bh_multianim_UpdatableNameType.UNTObject(name117);
											}
											var newNode247 = this.parseNode(updatableName117,node,definitions,uniqueId + 1);
											if(newNode247 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name117,newNode247);
											} else {
												node.children.push(newNode247);
											}
										} else {
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode248 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode248 == null) {
												continue;
											}
											if(node == null) {
												var tmp130 = newNode248 != null ? newNode248.updatableName : null;
												this.addNode(tmp130 != null ? bh_multianim_MultiAnimParser_getNameString(tmp130) : null,newNode248);
											} else {
												node.children.push(newNode248);
											}
										}
									} else {
										switch(_g95._hx_index) {
										case 18:
											switch(_g96._hx_index) {
											case 0:
												var propName95 = _g94;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													if(node == null) {
														this.syntaxError("grid coordinate system not supported on root elements");
													}
													once.parsed(propName95);
													node.gridCoordinateSystem = this.parseGridCoordianteSystem();
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name118 = _g94;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName118;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un118 = this.parseUpdatable(name118);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName118 = un118;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName118 = bh_multianim_UpdatableNameType.UNTObject(name118);
												}
												var newNode249 = this.parseNode(updatableName118,node,definitions,uniqueId + 1);
												if(newNode249 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name118,newNode249);
												} else {
													node.children.push(newNode249);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode250 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode250 == null) {
													continue;
												}
												if(node == null) {
													var tmp131 = newNode250 != null ? newNode250.updatableName : null;
													this.addNode(tmp131 != null ? bh_multianim_MultiAnimParser_getNameString(tmp131) : null,newNode250);
												} else {
													node.children.push(newNode250);
												}
											}
											break;
										case 19:
											switch(_g96._hx_index) {
											case 0:
												var propName96 = _g94;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													if(node == null) {
														this.syntaxError("hex coordinate system not supported on root elements");
													}
													once.parsed(propName96);
													node.hexCoordinateSystem = this.parseHexCoordianteSystem();
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name119 = _g94;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName119;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un119 = this.parseUpdatable(name119);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName119 = un119;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName119 = bh_multianim_UpdatableNameType.UNTObject(name119);
												}
												var newNode251 = this.parseNode(updatableName119,node,definitions,uniqueId + 1);
												if(newNode251 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name119,newNode251);
												} else {
													node.children.push(newNode251);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode252 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode252 == null) {
													continue;
												}
												if(node == null) {
													var tmp132 = newNode252 != null ? newNode252.updatableName : null;
													this.addNode(tmp132 != null ? bh_multianim_MultiAnimParser_getNameString(tmp132) : null,newNode252);
												} else {
													node.children.push(newNode252);
												}
											}
											break;
										case 31:
											switch(_g96._hx_index) {
											case 0:
												var propName97 = _g94;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var layerIndex13 = this.parseInteger();
													if(node == null) {
														this.syntaxError("layer not supported on root elements");
													} else {
														var _g97 = node.parent.type;
														switch(_g97._hx_index) {
														case 7:
															var isTileGroup13 = _g97.isTileGroup;
															var parameters13 = _g97.parameters;
															break;
														case 14:
															break;
														default:
															this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(node.type));
														}
													}
													once.parsed(propName97);
													node.layer = layerIndex13;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name120 = _g94;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName120;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un120 = this.parseUpdatable(name120);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName120 = un120;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName120 = bh_multianim_UpdatableNameType.UNTObject(name120);
												}
												var newNode253 = this.parseNode(updatableName120,node,definitions,uniqueId + 1);
												if(newNode253 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name120,newNode253);
												} else {
													node.children.push(newNode253);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode254 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode254 == null) {
													continue;
												}
												if(node == null) {
													var tmp133 = newNode254 != null ? newNode254.updatableName : null;
													this.addNode(tmp133 != null ? bh_multianim_MultiAnimParser_getNameString(tmp133) : null,newNode254);
												} else {
													node.children.push(newNode254);
												}
											}
											break;
										case 35:
											switch(_g96._hx_index) {
											case 0:
												var propName98 = _g94;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var f26 = this.parseFloatOrReference();
													if(node == null) {
														this.syntaxError("scale not supported on root elements");
													}
													once.parsed(propName98);
													node.scale = f26;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name121 = _g94;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName121;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un121 = this.parseUpdatable(name121);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName121 = un121;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName121 = bh_multianim_UpdatableNameType.UNTObject(name121);
												}
												var newNode255 = this.parseNode(updatableName121,node,definitions,uniqueId + 1);
												if(newNode255 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name121,newNode255);
												} else {
													node.children.push(newNode255);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode256 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode256 == null) {
													continue;
												}
												if(node == null) {
													var tmp134 = newNode256 != null ? newNode256.updatableName : null;
													this.addNode(tmp134 != null ? bh_multianim_MultiAnimParser_getNameString(tmp134) : null,newNode256);
												} else {
													node.children.push(newNode256);
												}
											}
											break;
										case 36:
											switch(_g96._hx_index) {
											case 0:
												var propName99 = _g94;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var filter13 = this.parseFilter();
													if(node == null) {
														this.syntaxError("filter not supported on root elements");
													}
													once.parsed(propName99);
													node.filter = filter13;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name122 = _g94;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName122;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un122 = this.parseUpdatable(name122);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName122 = un122;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName122 = bh_multianim_UpdatableNameType.UNTObject(name122);
												}
												var newNode257 = this.parseNode(updatableName122,node,definitions,uniqueId + 1);
												if(newNode257 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name122,newNode257);
												} else {
													node.children.push(newNode257);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode258 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode258 == null) {
													continue;
												}
												if(node == null) {
													var tmp135 = newNode258 != null ? newNode258.updatableName : null;
													this.addNode(tmp135 != null ? bh_multianim_MultiAnimParser_getNameString(tmp135) : null,newNode258);
												} else {
													node.children.push(newNode258);
												}
											}
											break;
										case 41:
											switch(_g96._hx_index) {
											case 0:
												var propName100 = _g94;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var f27 = this.parseFloatOrReference();
													if(node == null) {
														this.syntaxError("alpha not supported on root elements");
													}
													once.parsed(propName100);
													node.alpha = f27;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name123 = _g94;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName123;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un123 = this.parseUpdatable(name123);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName123 = un123;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName123 = bh_multianim_UpdatableNameType.UNTObject(name123);
												}
												var newNode259 = this.parseNode(updatableName123,node,definitions,uniqueId + 1);
												if(newNode259 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name123,newNode259);
												} else {
													node.children.push(newNode259);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode260 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode260 == null) {
													continue;
												}
												if(node == null) {
													var tmp136 = newNode260 != null ? newNode260.updatableName : null;
													this.addNode(tmp136 != null ? bh_multianim_MultiAnimParser_getNameString(tmp136) : null,newNode260);
												} else {
													node.children.push(newNode260);
												}
											}
											break;
										case 72:
											switch(_g96._hx_index) {
											case 0:
												var propName101 = _g94;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(this.peek(0)._hx_index == 10) {
													this.last = this.token.elt;
													this.token = this.token.next;
													if(node == null) {
														this.syntaxError("blendMode not supported on root elements");
													}
													once.parsed(propName101);
													var blendMode13 = this.tryParseBlendMode();
													if(blendMode13 == null) {
														this.unexpectedError("unsupported blend mode");
													} else {
														node.blendMode = blendMode13;
													}
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
												break;
											case 2:
												var name124 = _g94;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName124;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un124 = this.parseUpdatable(name124);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName124 = un124;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName124 = bh_multianim_UpdatableNameType.UNTObject(name124);
												}
												var newNode261 = this.parseNode(updatableName124,node,definitions,uniqueId + 1);
												if(newNode261 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name124,newNode261);
												} else {
													node.children.push(newNode261);
												}
												break;
											default:
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode262 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode262 == null) {
													continue;
												}
												if(node == null) {
													var tmp137 = newNode262 != null ? newNode262.updatableName : null;
													this.addNode(tmp137 != null ? bh_multianim_MultiAnimParser_getNameString(tmp137) : null,newNode262);
												} else {
													node.children.push(newNode262);
												}
											}
											break;
										default:
											if(_g96._hx_index == 2) {
												var name125 = _g94;
												this.last = this.token.elt;
												this.token = this.token.next;
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var updatableName125;
												if(this.peek(0)._hx_index == 1) {
													this.last = this.token.elt;
													this.token = this.token.next;
													var un125 = this.parseUpdatable(name125);
													if(this.peek(0)._hx_index == 2) {
														this.last = this.token.elt;
														this.token = this.token.next;
														updatableName125 = un125;
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													updatableName125 = bh_multianim_UpdatableNameType.UNTObject(name125);
												}
												var newNode263 = this.parseNode(updatableName125,node,definitions,uniqueId + 1);
												if(newNode263 == null) {
													continue;
												}
												if(node == null) {
													this.addNode(name125,newNode263);
												} else {
													node.children.push(newNode263);
												}
											} else {
												if(allowParseChildren == false) {
													this.syntaxError("children not allowed");
												}
												var newNode264 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
												if(newNode264 == null) {
													continue;
												}
												if(node == null) {
													var tmp138 = newNode264 != null ? newNode264.updatableName : null;
													this.addNode(tmp138 != null ? bh_multianim_MultiAnimParser_getNameString(tmp138) : null,newNode264);
												} else {
													node.children.push(newNode264);
												}
											}
										}
									}
									break;
								case 16:
									this.last = this.token.elt;
									this.token = this.token.next;
									break;
								default:
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var newNode265 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
									if(newNode265 == null) {
										continue;
									}
									if(node == null) {
										var tmp139 = newNode265 != null ? newNode265.updatableName : null;
										this.addNode(tmp139 != null ? bh_multianim_MultiAnimParser_getNameString(tmp139) : null,newNode265);
									} else {
										node.children.push(newNode265);
									}
								}
							}
							break;
						default:
							var _g98 = this.peek(0);
							switch(_g98._hx_index) {
							case 0:
								this.last = this.token.elt;
								this.token = this.token.next;
								if(node != null) {
									this.syntaxError("unexpected end of file");
								} else {
									return;
								}
								break;
							case 6:
								this.last = this.token.elt;
								this.token = this.token.next;
								return;
							case 12:
								this.last = this.token.elt;
								this.token = this.token.next;
								break;
							case 14:
								var _g99 = _g98.s;
								var _g100 = _g98.keyword;
								var _g101 = _g98.identType;
								if(_g100 == null) {
									if(_g101._hx_index == 2) {
										var name126 = _g99;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var updatableName126;
										if(this.peek(0)._hx_index == 1) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var un126 = this.parseUpdatable(name126);
											if(this.peek(0)._hx_index == 2) {
												this.last = this.token.elt;
												this.token = this.token.next;
												updatableName126 = un126;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											updatableName126 = bh_multianim_UpdatableNameType.UNTObject(name126);
										}
										var newNode266 = this.parseNode(updatableName126,node,definitions,uniqueId + 1);
										if(newNode266 == null) {
											continue;
										}
										if(node == null) {
											this.addNode(name126,newNode266);
										} else {
											node.children.push(newNode266);
										}
									} else {
										if(allowParseChildren == false) {
											this.syntaxError("children not allowed");
										}
										var newNode267 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
										if(newNode267 == null) {
											continue;
										}
										if(node == null) {
											var tmp140 = newNode267 != null ? newNode267.updatableName : null;
											this.addNode(tmp140 != null ? bh_multianim_MultiAnimParser_getNameString(tmp140) : null,newNode267);
										} else {
											node.children.push(newNode267);
										}
									}
								} else {
									switch(_g100._hx_index) {
									case 18:
										switch(_g101._hx_index) {
										case 0:
											var propName102 = _g99;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												if(node == null) {
													this.syntaxError("grid coordinate system not supported on root elements");
												}
												once.parsed(propName102);
												node.gridCoordinateSystem = this.parseGridCoordianteSystem();
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name127 = _g99;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName127;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un127 = this.parseUpdatable(name127);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName127 = un127;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName127 = bh_multianim_UpdatableNameType.UNTObject(name127);
											}
											var newNode268 = this.parseNode(updatableName127,node,definitions,uniqueId + 1);
											if(newNode268 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name127,newNode268);
											} else {
												node.children.push(newNode268);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode269 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode269 == null) {
												continue;
											}
											if(node == null) {
												var tmp141 = newNode269 != null ? newNode269.updatableName : null;
												this.addNode(tmp141 != null ? bh_multianim_MultiAnimParser_getNameString(tmp141) : null,newNode269);
											} else {
												node.children.push(newNode269);
											}
										}
										break;
									case 19:
										switch(_g101._hx_index) {
										case 0:
											var propName103 = _g99;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												if(node == null) {
													this.syntaxError("hex coordinate system not supported on root elements");
												}
												once.parsed(propName103);
												node.hexCoordinateSystem = this.parseHexCoordianteSystem();
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name128 = _g99;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName128;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un128 = this.parseUpdatable(name128);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName128 = un128;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName128 = bh_multianim_UpdatableNameType.UNTObject(name128);
											}
											var newNode270 = this.parseNode(updatableName128,node,definitions,uniqueId + 1);
											if(newNode270 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name128,newNode270);
											} else {
												node.children.push(newNode270);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode271 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode271 == null) {
												continue;
											}
											if(node == null) {
												var tmp142 = newNode271 != null ? newNode271.updatableName : null;
												this.addNode(tmp142 != null ? bh_multianim_MultiAnimParser_getNameString(tmp142) : null,newNode271);
											} else {
												node.children.push(newNode271);
											}
										}
										break;
									case 31:
										switch(_g101._hx_index) {
										case 0:
											var propName104 = _g99;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var layerIndex14 = this.parseInteger();
												if(node == null) {
													this.syntaxError("layer not supported on root elements");
												} else {
													var _g102 = node.parent.type;
													switch(_g102._hx_index) {
													case 7:
														var isTileGroup14 = _g102.isTileGroup;
														var parameters14 = _g102.parameters;
														break;
													case 14:
														break;
													default:
														this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(node.type));
													}
												}
												once.parsed(propName104);
												node.layer = layerIndex14;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name129 = _g99;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName129;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un129 = this.parseUpdatable(name129);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName129 = un129;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName129 = bh_multianim_UpdatableNameType.UNTObject(name129);
											}
											var newNode272 = this.parseNode(updatableName129,node,definitions,uniqueId + 1);
											if(newNode272 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name129,newNode272);
											} else {
												node.children.push(newNode272);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode273 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode273 == null) {
												continue;
											}
											if(node == null) {
												var tmp143 = newNode273 != null ? newNode273.updatableName : null;
												this.addNode(tmp143 != null ? bh_multianim_MultiAnimParser_getNameString(tmp143) : null,newNode273);
											} else {
												node.children.push(newNode273);
											}
										}
										break;
									case 35:
										switch(_g101._hx_index) {
										case 0:
											var propName105 = _g99;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var f28 = this.parseFloatOrReference();
												if(node == null) {
													this.syntaxError("scale not supported on root elements");
												}
												once.parsed(propName105);
												node.scale = f28;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name130 = _g99;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName130;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un130 = this.parseUpdatable(name130);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName130 = un130;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName130 = bh_multianim_UpdatableNameType.UNTObject(name130);
											}
											var newNode274 = this.parseNode(updatableName130,node,definitions,uniqueId + 1);
											if(newNode274 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name130,newNode274);
											} else {
												node.children.push(newNode274);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode275 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode275 == null) {
												continue;
											}
											if(node == null) {
												var tmp144 = newNode275 != null ? newNode275.updatableName : null;
												this.addNode(tmp144 != null ? bh_multianim_MultiAnimParser_getNameString(tmp144) : null,newNode275);
											} else {
												node.children.push(newNode275);
											}
										}
										break;
									case 36:
										switch(_g101._hx_index) {
										case 0:
											var propName106 = _g99;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var filter14 = this.parseFilter();
												if(node == null) {
													this.syntaxError("filter not supported on root elements");
												}
												once.parsed(propName106);
												node.filter = filter14;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name131 = _g99;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName131;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un131 = this.parseUpdatable(name131);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName131 = un131;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName131 = bh_multianim_UpdatableNameType.UNTObject(name131);
											}
											var newNode276 = this.parseNode(updatableName131,node,definitions,uniqueId + 1);
											if(newNode276 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name131,newNode276);
											} else {
												node.children.push(newNode276);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode277 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode277 == null) {
												continue;
											}
											if(node == null) {
												var tmp145 = newNode277 != null ? newNode277.updatableName : null;
												this.addNode(tmp145 != null ? bh_multianim_MultiAnimParser_getNameString(tmp145) : null,newNode277);
											} else {
												node.children.push(newNode277);
											}
										}
										break;
									case 41:
										switch(_g101._hx_index) {
										case 0:
											var propName107 = _g99;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var f29 = this.parseFloatOrReference();
												if(node == null) {
													this.syntaxError("alpha not supported on root elements");
												}
												once.parsed(propName107);
												node.alpha = f29;
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name132 = _g99;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName132;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un132 = this.parseUpdatable(name132);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName132 = un132;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName132 = bh_multianim_UpdatableNameType.UNTObject(name132);
											}
											var newNode278 = this.parseNode(updatableName132,node,definitions,uniqueId + 1);
											if(newNode278 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name132,newNode278);
											} else {
												node.children.push(newNode278);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode279 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode279 == null) {
												continue;
											}
											if(node == null) {
												var tmp146 = newNode279 != null ? newNode279.updatableName : null;
												this.addNode(tmp146 != null ? bh_multianim_MultiAnimParser_getNameString(tmp146) : null,newNode279);
											} else {
												node.children.push(newNode279);
											}
										}
										break;
									case 72:
										switch(_g101._hx_index) {
										case 0:
											var propName108 = _g99;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(this.peek(0)._hx_index == 10) {
												this.last = this.token.elt;
												this.token = this.token.next;
												if(node == null) {
													this.syntaxError("blendMode not supported on root elements");
												}
												once.parsed(propName108);
												var blendMode14 = this.tryParseBlendMode();
												if(blendMode14 == null) {
													this.unexpectedError("unsupported blend mode");
												} else {
													node.blendMode = blendMode14;
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
											break;
										case 2:
											var name133 = _g99;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName133;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un133 = this.parseUpdatable(name133);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName133 = un133;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName133 = bh_multianim_UpdatableNameType.UNTObject(name133);
											}
											var newNode280 = this.parseNode(updatableName133,node,definitions,uniqueId + 1);
											if(newNode280 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name133,newNode280);
											} else {
												node.children.push(newNode280);
											}
											break;
										default:
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode281 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode281 == null) {
												continue;
											}
											if(node == null) {
												var tmp147 = newNode281 != null ? newNode281.updatableName : null;
												this.addNode(tmp147 != null ? bh_multianim_MultiAnimParser_getNameString(tmp147) : null,newNode281);
											} else {
												node.children.push(newNode281);
											}
										}
										break;
									default:
										if(_g101._hx_index == 2) {
											var name134 = _g99;
											this.last = this.token.elt;
											this.token = this.token.next;
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var updatableName134;
											if(this.peek(0)._hx_index == 1) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var un134 = this.parseUpdatable(name134);
												if(this.peek(0)._hx_index == 2) {
													this.last = this.token.elt;
													this.token = this.token.next;
													updatableName134 = un134;
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												updatableName134 = bh_multianim_UpdatableNameType.UNTObject(name134);
											}
											var newNode282 = this.parseNode(updatableName134,node,definitions,uniqueId + 1);
											if(newNode282 == null) {
												continue;
											}
											if(node == null) {
												this.addNode(name134,newNode282);
											} else {
												node.children.push(newNode282);
											}
										} else {
											if(allowParseChildren == false) {
												this.syntaxError("children not allowed");
											}
											var newNode283 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
											if(newNode283 == null) {
												continue;
											}
											if(node == null) {
												var tmp148 = newNode283 != null ? newNode283.updatableName : null;
												this.addNode(tmp148 != null ? bh_multianim_MultiAnimParser_getNameString(tmp148) : null,newNode283);
											} else {
												node.children.push(newNode283);
											}
										}
									}
								}
								break;
							case 16:
								this.last = this.token.elt;
								this.token = this.token.next;
								break;
							default:
								if(allowParseChildren == false) {
									this.syntaxError("children not allowed");
								}
								var newNode284 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
								if(newNode284 == null) {
									continue;
								}
								if(node == null) {
									var tmp149 = newNode284 != null ? newNode284.updatableName : null;
									this.addNode(tmp149 != null ? bh_multianim_MultiAnimParser_getNameString(tmp149) : null,newNode284);
								} else {
									node.children.push(newNode284);
								}
							}
						}
					}
				} else {
					var _g103 = this.peek(0);
					switch(_g103._hx_index) {
					case 0:
						this.last = this.token.elt;
						this.token = this.token.next;
						if(node != null) {
							this.syntaxError("unexpected end of file");
						} else {
							return;
						}
						break;
					case 6:
						this.last = this.token.elt;
						this.token = this.token.next;
						return;
					case 12:
						this.last = this.token.elt;
						this.token = this.token.next;
						break;
					case 14:
						var _g104 = _g103.s;
						var _g105 = _g103.keyword;
						var _g106 = _g103.identType;
						if(_g105 == null) {
							if(_g106._hx_index == 2) {
								var name135 = _g104;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(allowParseChildren == false) {
									this.syntaxError("children not allowed");
								}
								var updatableName135;
								if(this.peek(0)._hx_index == 1) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var un135 = this.parseUpdatable(name135);
									if(this.peek(0)._hx_index == 2) {
										this.last = this.token.elt;
										this.token = this.token.next;
										updatableName135 = un135;
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									updatableName135 = bh_multianim_UpdatableNameType.UNTObject(name135);
								}
								var newNode285 = this.parseNode(updatableName135,node,definitions,uniqueId + 1);
								if(newNode285 == null) {
									continue;
								}
								if(node == null) {
									this.addNode(name135,newNode285);
								} else {
									node.children.push(newNode285);
								}
							} else {
								if(allowParseChildren == false) {
									this.syntaxError("children not allowed");
								}
								var newNode286 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
								if(newNode286 == null) {
									continue;
								}
								if(node == null) {
									var tmp150 = newNode286 != null ? newNode286.updatableName : null;
									this.addNode(tmp150 != null ? bh_multianim_MultiAnimParser_getNameString(tmp150) : null,newNode286);
								} else {
									node.children.push(newNode286);
								}
							}
						} else {
							switch(_g105._hx_index) {
							case 18:
								switch(_g106._hx_index) {
								case 0:
									var propName109 = _g104;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 10) {
										this.last = this.token.elt;
										this.token = this.token.next;
										if(node == null) {
											this.syntaxError("grid coordinate system not supported on root elements");
										}
										once.parsed(propName109);
										node.gridCoordinateSystem = this.parseGridCoordianteSystem();
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								case 2:
									var name136 = _g104;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var updatableName136;
									if(this.peek(0)._hx_index == 1) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var un136 = this.parseUpdatable(name136);
										if(this.peek(0)._hx_index == 2) {
											this.last = this.token.elt;
											this.token = this.token.next;
											updatableName136 = un136;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										updatableName136 = bh_multianim_UpdatableNameType.UNTObject(name136);
									}
									var newNode287 = this.parseNode(updatableName136,node,definitions,uniqueId + 1);
									if(newNode287 == null) {
										continue;
									}
									if(node == null) {
										this.addNode(name136,newNode287);
									} else {
										node.children.push(newNode287);
									}
									break;
								default:
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var newNode288 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
									if(newNode288 == null) {
										continue;
									}
									if(node == null) {
										var tmp151 = newNode288 != null ? newNode288.updatableName : null;
										this.addNode(tmp151 != null ? bh_multianim_MultiAnimParser_getNameString(tmp151) : null,newNode288);
									} else {
										node.children.push(newNode288);
									}
								}
								break;
							case 19:
								switch(_g106._hx_index) {
								case 0:
									var propName110 = _g104;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 10) {
										this.last = this.token.elt;
										this.token = this.token.next;
										if(node == null) {
											this.syntaxError("hex coordinate system not supported on root elements");
										}
										once.parsed(propName110);
										node.hexCoordinateSystem = this.parseHexCoordianteSystem();
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								case 2:
									var name137 = _g104;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var updatableName137;
									if(this.peek(0)._hx_index == 1) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var un137 = this.parseUpdatable(name137);
										if(this.peek(0)._hx_index == 2) {
											this.last = this.token.elt;
											this.token = this.token.next;
											updatableName137 = un137;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										updatableName137 = bh_multianim_UpdatableNameType.UNTObject(name137);
									}
									var newNode289 = this.parseNode(updatableName137,node,definitions,uniqueId + 1);
									if(newNode289 == null) {
										continue;
									}
									if(node == null) {
										this.addNode(name137,newNode289);
									} else {
										node.children.push(newNode289);
									}
									break;
								default:
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var newNode290 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
									if(newNode290 == null) {
										continue;
									}
									if(node == null) {
										var tmp152 = newNode290 != null ? newNode290.updatableName : null;
										this.addNode(tmp152 != null ? bh_multianim_MultiAnimParser_getNameString(tmp152) : null,newNode290);
									} else {
										node.children.push(newNode290);
									}
								}
								break;
							case 31:
								switch(_g106._hx_index) {
								case 0:
									var propName111 = _g104;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 10) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var layerIndex15 = this.parseInteger();
										if(node == null) {
											this.syntaxError("layer not supported on root elements");
										} else {
											var _g107 = node.parent.type;
											switch(_g107._hx_index) {
											case 7:
												var isTileGroup15 = _g107.isTileGroup;
												var parameters15 = _g107.parameters;
												break;
											case 14:
												break;
											default:
												this.syntaxError("layer requires parent node to be either programmable or layers but was " + Std.string(node.type));
											}
										}
										once.parsed(propName111);
										node.layer = layerIndex15;
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								case 2:
									var name138 = _g104;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var updatableName138;
									if(this.peek(0)._hx_index == 1) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var un138 = this.parseUpdatable(name138);
										if(this.peek(0)._hx_index == 2) {
											this.last = this.token.elt;
											this.token = this.token.next;
											updatableName138 = un138;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										updatableName138 = bh_multianim_UpdatableNameType.UNTObject(name138);
									}
									var newNode291 = this.parseNode(updatableName138,node,definitions,uniqueId + 1);
									if(newNode291 == null) {
										continue;
									}
									if(node == null) {
										this.addNode(name138,newNode291);
									} else {
										node.children.push(newNode291);
									}
									break;
								default:
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var newNode292 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
									if(newNode292 == null) {
										continue;
									}
									if(node == null) {
										var tmp153 = newNode292 != null ? newNode292.updatableName : null;
										this.addNode(tmp153 != null ? bh_multianim_MultiAnimParser_getNameString(tmp153) : null,newNode292);
									} else {
										node.children.push(newNode292);
									}
								}
								break;
							case 35:
								switch(_g106._hx_index) {
								case 0:
									var propName112 = _g104;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 10) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var f30 = this.parseFloatOrReference();
										if(node == null) {
											this.syntaxError("scale not supported on root elements");
										}
										once.parsed(propName112);
										node.scale = f30;
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								case 2:
									var name139 = _g104;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var updatableName139;
									if(this.peek(0)._hx_index == 1) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var un139 = this.parseUpdatable(name139);
										if(this.peek(0)._hx_index == 2) {
											this.last = this.token.elt;
											this.token = this.token.next;
											updatableName139 = un139;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										updatableName139 = bh_multianim_UpdatableNameType.UNTObject(name139);
									}
									var newNode293 = this.parseNode(updatableName139,node,definitions,uniqueId + 1);
									if(newNode293 == null) {
										continue;
									}
									if(node == null) {
										this.addNode(name139,newNode293);
									} else {
										node.children.push(newNode293);
									}
									break;
								default:
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var newNode294 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
									if(newNode294 == null) {
										continue;
									}
									if(node == null) {
										var tmp154 = newNode294 != null ? newNode294.updatableName : null;
										this.addNode(tmp154 != null ? bh_multianim_MultiAnimParser_getNameString(tmp154) : null,newNode294);
									} else {
										node.children.push(newNode294);
									}
								}
								break;
							case 36:
								switch(_g106._hx_index) {
								case 0:
									var propName113 = _g104;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 10) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var filter15 = this.parseFilter();
										if(node == null) {
											this.syntaxError("filter not supported on root elements");
										}
										once.parsed(propName113);
										node.filter = filter15;
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								case 2:
									var name140 = _g104;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var updatableName140;
									if(this.peek(0)._hx_index == 1) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var un140 = this.parseUpdatable(name140);
										if(this.peek(0)._hx_index == 2) {
											this.last = this.token.elt;
											this.token = this.token.next;
											updatableName140 = un140;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										updatableName140 = bh_multianim_UpdatableNameType.UNTObject(name140);
									}
									var newNode295 = this.parseNode(updatableName140,node,definitions,uniqueId + 1);
									if(newNode295 == null) {
										continue;
									}
									if(node == null) {
										this.addNode(name140,newNode295);
									} else {
										node.children.push(newNode295);
									}
									break;
								default:
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var newNode296 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
									if(newNode296 == null) {
										continue;
									}
									if(node == null) {
										var tmp155 = newNode296 != null ? newNode296.updatableName : null;
										this.addNode(tmp155 != null ? bh_multianim_MultiAnimParser_getNameString(tmp155) : null,newNode296);
									} else {
										node.children.push(newNode296);
									}
								}
								break;
							case 41:
								switch(_g106._hx_index) {
								case 0:
									var propName114 = _g104;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 10) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var f31 = this.parseFloatOrReference();
										if(node == null) {
											this.syntaxError("alpha not supported on root elements");
										}
										once.parsed(propName114);
										node.alpha = f31;
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								case 2:
									var name141 = _g104;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var updatableName141;
									if(this.peek(0)._hx_index == 1) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var un141 = this.parseUpdatable(name141);
										if(this.peek(0)._hx_index == 2) {
											this.last = this.token.elt;
											this.token = this.token.next;
											updatableName141 = un141;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										updatableName141 = bh_multianim_UpdatableNameType.UNTObject(name141);
									}
									var newNode297 = this.parseNode(updatableName141,node,definitions,uniqueId + 1);
									if(newNode297 == null) {
										continue;
									}
									if(node == null) {
										this.addNode(name141,newNode297);
									} else {
										node.children.push(newNode297);
									}
									break;
								default:
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var newNode298 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
									if(newNode298 == null) {
										continue;
									}
									if(node == null) {
										var tmp156 = newNode298 != null ? newNode298.updatableName : null;
										this.addNode(tmp156 != null ? bh_multianim_MultiAnimParser_getNameString(tmp156) : null,newNode298);
									} else {
										node.children.push(newNode298);
									}
								}
								break;
							case 72:
								switch(_g106._hx_index) {
								case 0:
									var propName115 = _g104;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 10) {
										this.last = this.token.elt;
										this.token = this.token.next;
										if(node == null) {
											this.syntaxError("blendMode not supported on root elements");
										}
										once.parsed(propName115);
										var blendMode15 = this.tryParseBlendMode();
										if(blendMode15 == null) {
											this.unexpectedError("unsupported blend mode");
										} else {
											node.blendMode = blendMode15;
										}
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								case 2:
									var name142 = _g104;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var updatableName142;
									if(this.peek(0)._hx_index == 1) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var un142 = this.parseUpdatable(name142);
										if(this.peek(0)._hx_index == 2) {
											this.last = this.token.elt;
											this.token = this.token.next;
											updatableName142 = un142;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										updatableName142 = bh_multianim_UpdatableNameType.UNTObject(name142);
									}
									var newNode299 = this.parseNode(updatableName142,node,definitions,uniqueId + 1);
									if(newNode299 == null) {
										continue;
									}
									if(node == null) {
										this.addNode(name142,newNode299);
									} else {
										node.children.push(newNode299);
									}
									break;
								default:
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var newNode300 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
									if(newNode300 == null) {
										continue;
									}
									if(node == null) {
										var tmp157 = newNode300 != null ? newNode300.updatableName : null;
										this.addNode(tmp157 != null ? bh_multianim_MultiAnimParser_getNameString(tmp157) : null,newNode300);
									} else {
										node.children.push(newNode300);
									}
								}
								break;
							default:
								if(_g106._hx_index == 2) {
									var name143 = _g104;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var updatableName143;
									if(this.peek(0)._hx_index == 1) {
										this.last = this.token.elt;
										this.token = this.token.next;
										var un143 = this.parseUpdatable(name143);
										if(this.peek(0)._hx_index == 2) {
											this.last = this.token.elt;
											this.token = this.token.next;
											updatableName143 = un143;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										updatableName143 = bh_multianim_UpdatableNameType.UNTObject(name143);
									}
									var newNode301 = this.parseNode(updatableName143,node,definitions,uniqueId + 1);
									if(newNode301 == null) {
										continue;
									}
									if(node == null) {
										this.addNode(name143,newNode301);
									} else {
										node.children.push(newNode301);
									}
								} else {
									if(allowParseChildren == false) {
										this.syntaxError("children not allowed");
									}
									var newNode302 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
									if(newNode302 == null) {
										continue;
									}
									if(node == null) {
										var tmp158 = newNode302 != null ? newNode302.updatableName : null;
										this.addNode(tmp158 != null ? bh_multianim_MultiAnimParser_getNameString(tmp158) : null,newNode302);
									} else {
										node.children.push(newNode302);
									}
								}
							}
						}
						break;
					case 16:
						this.last = this.token.elt;
						this.token = this.token.next;
						break;
					default:
						if(allowParseChildren == false) {
							this.syntaxError("children not allowed");
						}
						var newNode303 = this.parseNode(bh_multianim_UpdatableNameType.UNTObject(null),node,definitions,uniqueId + 1);
						if(newNode303 == null) {
							continue;
						}
						if(node == null) {
							var tmp159 = newNode303 != null ? newNode303.updatableName : null;
							this.addNode(tmp159 != null ? bh_multianim_MultiAnimParser_getNameString(tmp159) : null,newNode303);
						} else {
							node.children.push(newNode303);
						}
					}
				}
			}
		}
	}
	,tryParseBlendMode: function() {
		var _g = this.peek(0);
		if(_g._hx_index == 14) {
			var _g1 = _g.keyword;
			var _g1 = _g.identType;
			switch(_g.s) {
			case "add":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return h2d_BlendMode.Add;
				} else {
					return null;
				}
				break;
			case "alpha":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return h2d_BlendMode.Alpha;
				} else {
					return null;
				}
				break;
			case "alphaAdd":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return h2d_BlendMode.AlphaAdd;
				} else {
					return null;
				}
				break;
			case "alphaMultiply":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return h2d_BlendMode.AlphaMultiply;
				} else {
					return null;
				}
				break;
			case "erase":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return h2d_BlendMode.Erase;
				} else {
					return null;
				}
				break;
			case "max":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return h2d_BlendMode.Max;
				} else {
					return null;
				}
				break;
			case "min":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return h2d_BlendMode.Min;
				} else {
					return null;
				}
				break;
			case "multiply":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return h2d_BlendMode.Multiply;
				} else {
					return null;
				}
				break;
			case "none":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return h2d_BlendMode.None;
				} else {
					return null;
				}
				break;
			case "screen":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return h2d_BlendMode.Screen;
				} else {
					return null;
				}
				break;
			case "softAdd":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return h2d_BlendMode.SoftAdd;
				} else {
					return null;
				}
				break;
			case "sub":
				if(_g1._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					return h2d_BlendMode.Sub;
				} else {
					return null;
				}
				break;
			default:
				return null;
			}
		} else {
			return null;
		}
	}
	,parseOptionalParams: function(parameters,once) {
		var _gthis = this;
		var getName = function(parsingParam) {
			switch(parsingParam._hx_index) {
			case 0:
				var name = parsingParam.name;
				return name;
			case 1:
				var name = parsingParam.name;
				return name;
			case 2:
				var name = parsingParam.name;
				return name;
			case 3:
				var name = parsingParam.name;
				return name;
			case 4:
				var name = parsingParam.name;
				return name;
			case 5:
				var _g = parsingParam.parse;
				var name = parsingParam.name;
				return name;
			case 6:
				var name = parsingParam.name;
				return name;
			}
		};
		var findByName = function(name) {
			var res = Lambda.find(parameters,function(x) {
				return name == getName(x);
			});
			if(res == null) {
				_gthis.syntaxError("optional param " + name + " not declared");
			}
			return res;
		};
		var getValue = function(parsingMode) {
			switch(parsingMode._hx_index) {
			case 0:
				var _g = parsingMode.name;
				return _gthis.parseInteger();
			case 1:
				var _g = parsingMode.name;
				return _gthis.parseIntegerOrReference();
			case 2:
				var _g = parsingMode.name;
				return _gthis.parseFloat();
			case 3:
				var _g = parsingMode.name;
				return _gthis.parseFloatOrReference();
			case 4:
				var _g = parsingMode.name;
				return _gthis.parseBool();
			case 5:
				var _g = parsingMode.name;
				var parse = parsingMode.parse;
				return parse();
			case 6:
				var _g = parsingMode.name;
				return _gthis.parseColor();
			}
		};
		var results = new haxe_ds_StringMap();
		var canBreak = false;
		while(true) {
			var _g = this.peek(0);
			if(_g._hx_index == 14) {
				var _g1 = _g.keyword;
				if(_g.identType._hx_index == 0) {
					var name = _g.s;
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 10) {
						this.last = this.token.elt;
						this.token = this.token.next;
						once.parsed(name);
						var param = findByName(name);
						var value = getValue(param);
						results.h[name] = value;
						canBreak = false;
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else if(canBreak) {
					break;
				} else {
					this.eatComma();
					canBreak = true;
				}
			} else if(canBreak) {
				break;
			} else {
				this.eatComma();
				canBreak = true;
			}
		}
		return results;
	}
	,parse: function() {
		var _g = this.peek(0);
		if(_g._hx_index == 14) {
			var _g1 = _g.s;
			var _g1 = _g.keyword;
			if(_g1 == null) {
				this.syntaxError("verson expected, got " + Std.string(this.peek(0)));
			} else if(_g1._hx_index == 60) {
				if(_g.identType._hx_index == 0) {
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 10) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var _g = this.peek(0);
						if(_g._hx_index == 13) {
							var _g1 = _g.s;
							switch(_g.numberType._hx_index) {
							case 0:case 1:
								var fileVersion = _g1;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(fileVersion != this.version) {
									this.syntaxError("verson " + this.version + " expected, got " + fileVersion);
								}
								break;
							default:
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					this.syntaxError("verson expected, got " + Std.string(this.peek(0)));
				}
			} else {
				this.syntaxError("verson expected, got " + Std.string(this.peek(0)));
			}
		} else {
			this.syntaxError("verson expected, got " + Std.string(this.peek(0)));
		}
		this.parseNodes(null,new haxe_ds_StringMap(),this.createOnceParser(),654321);
		if(this.peek(0)._hx_index == 0) {
			this.last = this.token.elt;
			this.token = this.token.next;
		} else {
			this.unexpectedError("unexpected content: probably mismatching \", ) or }");
		}
		var _g = 0;
		var _g1 = this.postParsedActions;
		while(_g < _g1.length) {
			var action = _g1[_g];
			++_g;
			switch(action._hx_index) {
			case 0:
				var layoutName = action.layoutName;
				var pos = action.pos;
				var l = this.nodes.h[bh_multianim_MultiAnimParser.defaultLayoutNodeName];
				var _g2 = l.type;
				if(_g2._hx_index == 9) {
					var layoutsDef = _g2.layoutsDef;
					if(Object.prototype.hasOwnProperty.call(layoutsDef.h,layoutName) == false) {
						this.syntaxError("expected relativeLayout to have layout name " + layoutName + " but did not",pos);
					}
				} else {
					this.syntaxError("expected relativeLayout but got " + Std.string(l.type),pos);
				}
				break;
			case 1:
				var particleTemplate = action.particleTemplate;
				var particlesDef = action.particlesDef;
				var pos1 = action.pos;
				var particles = this.nodes.h[particleTemplate];
				if(particles == null) {
					this.syntaxError("particles " + particleTemplate + " does not exist",pos1);
				}
				var _g3 = particles.type;
				if(_g3._hx_index == 12) {
					var templateParticlesDef = _g3.particles;
					this.updateParticlesFromTemplate(templateParticlesDef,particlesDef);
					this.validateParticles(particlesDef,pos1);
				} else {
					this.syntaxError("expected particles " + particleTemplate + " but got " + Std.string(particles.type),pos1);
				}
				break;
			}
		}
		return { nodes : this.nodes, imports : this.imports};
	}
	,__class__: bh_multianim_MultiAnimParser
});
function bh_multianim_MultiAnimParser_getBuiltHeapsObject(NamedBuildResult) {
	return NamedBuildResult.object;
}
function bh_multianim_MultiAnimParser_getNameString(updatableNameType) {
	switch(updatableNameType._hx_index) {
	case 0:
		var name = updatableNameType.name;
		return name;
	case 1:
		var name = updatableNameType.name;
		return name;
	}
}
function bh_multianim_MultiAnimParser_toh2dObject(builtHeapsComponent) {
	switch(builtHeapsComponent._hx_index) {
	case 0:
		var obj = builtHeapsComponent.obj;
		return obj;
	case 1:
		var p = builtHeapsComponent.t;
		return p;
	case 2:
		var a = builtHeapsComponent.a;
		return a;
	case 3:
		var b = builtHeapsComponent.b;
		return b;
	case 4:
		var b = builtHeapsComponent.b;
		return b;
	case 5:
		var s = builtHeapsComponent.s;
		return s;
	case 6:
		var f = builtHeapsComponent.f;
		return f;
	case 7:
		var layers = builtHeapsComponent.f;
		return layers;
	case 8:
		var p = builtHeapsComponent.p;
		return p;
	}
}
var bh_multianim_OncePropertyParser = function(parameterExistsError) {
	this.valueMap = new haxe_ds_StringMap();
	this.parameterExistsError = parameterExistsError;
};
$hxClasses["bh.multianim.OncePropertyParser"] = bh_multianim_OncePropertyParser;
bh_multianim_OncePropertyParser.__name__ = "bh.multianim.OncePropertyParser";
bh_multianim_OncePropertyParser.prototype = {
	parsed: function(name) {
		if(Object.prototype.hasOwnProperty.call(this.valueMap.h,name)) {
			this.parameterExistsError(name);
		}
		this.valueMap.h[name] = true;
	}
	,__class__: bh_multianim_OncePropertyParser
};
var bh_multianim_layouts_LayoutContent = $hxEnums["bh.multianim.layouts.LayoutContent"] = { __ename__:true,__constructs__:null
	,LayoutPoint: ($_=function(pos) { return {_hx_index:0,pos:pos,__enum__:"bh.multianim.layouts.LayoutContent",toString:$estr}; },$_._hx_name="LayoutPoint",$_.__params__ = ["pos"],$_)
};
bh_multianim_layouts_LayoutContent.__constructs__ = [bh_multianim_layouts_LayoutContent.LayoutPoint];
bh_multianim_layouts_LayoutContent.__empty_constructs__ = [];
var bh_multianim_layouts_LayoutsType = $hxEnums["bh.multianim.layouts.LayoutsType"] = { __ename__:true,__constructs__:null
	,Single: ($_=function(content) { return {_hx_index:0,content:content,__enum__:"bh.multianim.layouts.LayoutsType",toString:$estr}; },$_._hx_name="Single",$_.__params__ = ["content"],$_)
	,List: ($_=function(list) { return {_hx_index:1,list:list,__enum__:"bh.multianim.layouts.LayoutsType",toString:$estr}; },$_._hx_name="List",$_.__params__ = ["list"],$_)
	,Sequence: ($_=function(varName,from,to,content) { return {_hx_index:2,varName:varName,from:from,to:to,content:content,__enum__:"bh.multianim.layouts.LayoutsType",toString:$estr}; },$_._hx_name="Sequence",$_.__params__ = ["varName","from","to","content"],$_)
};
bh_multianim_layouts_LayoutsType.__constructs__ = [bh_multianim_layouts_LayoutsType.Single,bh_multianim_layouts_LayoutsType.List,bh_multianim_layouts_LayoutsType.Sequence];
bh_multianim_layouts_LayoutsType.__empty_constructs__ = [];
var bh_multianim_layouts_LayoutPointIterator = function(layout,animLayout) {
	this.animLayout = animLayout;
	this.layout = layout;
	this.index = 0;
	this.length = animLayout.getLayoutSequenceLength(layout);
};
$hxClasses["bh.multianim.layouts.LayoutPointIterator"] = bh_multianim_layouts_LayoutPointIterator;
bh_multianim_layouts_LayoutPointIterator.__name__ = "bh.multianim.layouts.LayoutPointIterator";
bh_multianim_layouts_LayoutPointIterator.prototype = {
	hasNext: function() {
		return this.index < this.length;
	}
	,next: function() {
		return this.animLayout.getPointFromLayout(this.layout,this.index++);
	}
	,__class__: bh_multianim_layouts_LayoutPointIterator
};
var bh_multianim_layouts_MultiAnimLayouts = function(layoutsDef,builder) {
	this.layoutsDef = layoutsDef;
	this.builder = builder;
};
$hxClasses["bh.multianim.layouts.MultiAnimLayouts"] = bh_multianim_layouts_MultiAnimLayouts;
bh_multianim_layouts_MultiAnimLayouts.__name__ = "bh.multianim.layouts.MultiAnimLayouts";
bh_multianim_layouts_MultiAnimLayouts.prototype = {
	getLayoutSequenceLengthByLayoutName: function(layoutName) {
		var l = this.layoutsDef.h[layoutName];
		if(l == null) {
			throw haxe_Exception.thrown("layout " + layoutName + " not found");
		}
		return this.getLayoutSequenceLength(l);
	}
	,getLayoutSequenceLength: function(l) {
		var _g = l.type;
		switch(_g._hx_index) {
		case 0:
			var content = _g.content;
			return 1;
		case 1:
			var list = _g.list;
			return list.length;
		case 2:
			var varName = _g.varName;
			var from = _g.from;
			var to = _g.to;
			var content = _g.content;
			return to - from + 1;
		}
	}
	,getIterator: function(name) {
		var l = this.layoutsDef.h[name];
		if(l == null) {
			throw haxe_Exception.thrown("layout " + name + " not found");
		}
		return new bh_multianim_layouts_LayoutPointIterator(l,this);
	}
	,getPointFromLayout: function(l,index,builderParams) {
		if(index < 0) {
			throw haxe_Exception.thrown("index < 0 for layout " + l.name);
		}
		var _g = l.type;
		switch(_g._hx_index) {
		case 0:
			var content = _g.content;
			var gridCoordinateSystem = l.grid;
			var hexCoordinateSystem = l.hex;
			var offset = l.offset;
			var pos = content.pos;
			var oldIndexed = this.builder.indexedParams;
			var _g1 = new haxe_ds_StringMap();
			_g1.h["i"] = bh_multianim_ResolvedIndexParameters.Value(index);
			this.builder.indexedParams = _g1;
			var pos1 = this.builder.calculatePosition(pos,gridCoordinateSystem,hexCoordinateSystem);
			this.builder.indexedParams = oldIndexed;
			var pt = pos1;
			pt.x += offset.x;
			pt.y += offset.y;
			return pt;
		case 1:
			var list = _g.list;
			if(list.length <= index) {
				throw haxe_Exception.thrown("cannot get layout \"" + l.name + "\" point at " + index + " because list is only " + list.length + " long");
			}
			var gridCoordinateSystem = l.grid;
			var hexCoordinateSystem = l.hex;
			var offset = l.offset;
			var pos = list[index].pos;
			var oldIndexed = this.builder.indexedParams;
			var _g1 = new haxe_ds_StringMap();
			_g1.h["i"] = bh_multianim_ResolvedIndexParameters.Value(0);
			this.builder.indexedParams = _g1;
			var pos1 = this.builder.calculatePosition(pos,gridCoordinateSystem,hexCoordinateSystem);
			this.builder.indexedParams = oldIndexed;
			var pt = pos1;
			pt.x += offset.x;
			pt.y += offset.y;
			return pt;
		case 2:
			var variable = _g.varName;
			var from = _g.from;
			var to = _g.to;
			var content = _g.content;
			if(index > to - from) {
				throw haxe_Exception.thrown("index > to - from for layout " + l.name);
			}
			var gridCoordinateSystem = l.grid;
			var hexCoordinateSystem = l.hex;
			var offset = l.offset;
			var pos = content.pos;
			var oldIndexed = this.builder.indexedParams;
			var _g = new haxe_ds_StringMap();
			_g.h[variable] = bh_multianim_ResolvedIndexParameters.Value(from + index);
			this.builder.indexedParams = _g;
			var pos1 = this.builder.calculatePosition(pos,gridCoordinateSystem,hexCoordinateSystem);
			this.builder.indexedParams = oldIndexed;
			var pt = pos1;
			pt.x += offset.x;
			pt.y += offset.y;
			return pt;
		}
	}
	,getPoint: function(name,index) {
		if(index == null) {
			index = 0;
		}
		var l = this.layoutsDef.h[name];
		if(l == null) {
			throw haxe_Exception.thrown("layout " + name + " not found");
		}
		var l1 = l;
		return this.getPointFromLayout(l1,index);
	}
	,__class__: bh_multianim_layouts_MultiAnimLayouts
};
var bh_paths_AnimatePathEvents = $hxEnums["bh.paths.AnimatePathEvents"] = { __ename__:true,__constructs__:null
	,PathStart: {_hx_name:"PathStart",_hx_index:0,__enum__:"bh.paths.AnimatePathEvents",toString:$estr}
	,PathEnd: {_hx_name:"PathEnd",_hx_index:1,__enum__:"bh.paths.AnimatePathEvents",toString:$estr}
	,Event: ($_=function(event) { return {_hx_index:2,event:event,__enum__:"bh.paths.AnimatePathEvents",toString:$estr}; },$_._hx_name="Event",$_.__params__ = ["event"],$_)
};
bh_paths_AnimatePathEvents.__constructs__ = [bh_paths_AnimatePathEvents.PathStart,bh_paths_AnimatePathEvents.PathEnd,bh_paths_AnimatePathEvents.Event];
bh_paths_AnimatePathEvents.__empty_constructs__ = [bh_paths_AnimatePathEvents.PathStart,bh_paths_AnimatePathEvents.PathEnd];
var bh_paths_AnimatePathCommands = $hxEnums["bh.paths.AnimatePathCommands"] = { __ename__:true,__constructs__:null
	,ChangeSpeed: ($_=function(newSpeed) { return {_hx_index:0,newSpeed:newSpeed,__enum__:"bh.paths.AnimatePathCommands",toString:$estr}; },$_._hx_name="ChangeSpeed",$_.__params__ = ["newSpeed"],$_)
	,Event: ($_=function(event) { return {_hx_index:1,event:event,__enum__:"bh.paths.AnimatePathCommands",toString:$estr}; },$_._hx_name="Event",$_.__params__ = ["event"],$_)
	,AttachParticles: ($_=function(particlesName,particlesDef) { return {_hx_index:2,particlesName:particlesName,particlesDef:particlesDef,__enum__:"bh.paths.AnimatePathCommands",toString:$estr}; },$_._hx_name="AttachParticles",$_.__params__ = ["particlesName","particlesDef"],$_)
	,RemoveParticles: ($_=function(particlesName) { return {_hx_index:3,particlesName:particlesName,__enum__:"bh.paths.AnimatePathCommands",toString:$estr}; },$_._hx_name="RemoveParticles",$_.__params__ = ["particlesName"],$_)
	,ChangeAnimSMState: ($_=function(state) { return {_hx_index:4,state:state,__enum__:"bh.paths.AnimatePathCommands",toString:$estr}; },$_._hx_name="ChangeAnimSMState",$_.__params__ = ["state"],$_)
};
bh_paths_AnimatePathCommands.__constructs__ = [bh_paths_AnimatePathCommands.ChangeSpeed,bh_paths_AnimatePathCommands.Event,bh_paths_AnimatePathCommands.AttachParticles,bh_paths_AnimatePathCommands.RemoveParticles,bh_paths_AnimatePathCommands.ChangeAnimSMState];
bh_paths_AnimatePathCommands.__empty_constructs__ = [];
var bh_paths__$AnimatedPath_TimedAction = function(atRateTime,action) {
	this.atRateTime = atRateTime;
	this.action = action;
};
$hxClasses["bh.paths._AnimatedPath.TimedAction"] = bh_paths__$AnimatedPath_TimedAction;
bh_paths__$AnimatedPath_TimedAction.__name__ = "bh.paths._AnimatedPath.TimedAction";
bh_paths__$AnimatedPath_TimedAction.prototype = {
	__class__: bh_paths__$AnimatedPath_TimedAction
};
var bh_paths_AnimatedPathPositionMode = $hxEnums["bh.paths.AnimatedPathPositionMode"] = { __ename__:true,__constructs__:null
	,RelativeTo: ($_=function(parent) { return {_hx_index:0,parent:parent,__enum__:"bh.paths.AnimatedPathPositionMode",toString:$estr}; },$_._hx_name="RelativeTo",$_.__params__ = ["parent"],$_)
	,Absolute: {_hx_name:"Absolute",_hx_index:1,__enum__:"bh.paths.AnimatedPathPositionMode",toString:$estr}
};
bh_paths_AnimatedPathPositionMode.__constructs__ = [bh_paths_AnimatedPathPositionMode.RelativeTo,bh_paths_AnimatedPathPositionMode.Absolute];
bh_paths_AnimatedPathPositionMode.__empty_constructs__ = [bh_paths_AnimatedPathPositionMode.Absolute];
var bh_paths_AnimatedPath = function(path,speed,object,positionMode,builder) {
	this.isDone = false;
	this.currentTimedActionIndex = 0;
	this.timedActions = [];
	this.activeParticles = new haxe_ds_StringMap();
	this.currentPoint = new bh_base_FPoint(0,0);
	this.prevPoint = new bh_base_FPoint(0,0);
	this.distance = 0.;
	this.time = 0.;
	this.builder = builder;
	this.path = path;
	this.speed = speed;
	this.pathLength = path.totalLength;
	if(this.pathLength == 0) {
		throw haxe_Exception.thrown("pathLength must be > 0");
	}
	this.object = object;
	this.h2dObject = bh_multianim_MultiAnimParser_toh2dObject(object);
	this.angleRad = 0;
	if(this.h2dObject.parent == null) {
		throw haxe_Exception.thrown("h2dObject must be added to the scene before creating AnimatedPath");
	}
	this.positionMode = positionMode;
};
$hxClasses["bh.paths.AnimatedPath"] = bh_paths_AnimatedPath;
bh_paths_AnimatedPath.__name__ = "bh.paths.AnimatedPath";
bh_paths_AnimatedPath.prototype = {
	onStart: function() {
		this.currentPoint = this.calculatePosition();
		var _this = this.currentPoint;
		this.prevPoint = new bh_base_FPoint(_this.x,_this.y);
		this.execute(bh_paths_AnimatePathCommands.Event(bh_paths_AnimatePathEvents.PathStart));
	}
	,addAction: function(element) {
		var left = 0;
		var right = this.timedActions.length;
		var mid;
		while(left < right) {
			mid = (left + right) / 2 | 0;
			if(this.timedActions[mid].atRateTime < element.atRateTime) {
				left = mid + 1;
			} else {
				right = mid;
			}
		}
		this.timedActions.splice(left,0,element);
	}
	,execute: function(animePathCommand) {
		switch(animePathCommand._hx_index) {
		case 0:
			var newSpeed = animePathCommand.newSpeed;
			this.speed = newSpeed;
			break;
		case 1:
			var e = animePathCommand.event;
			this.onEvent(e);
			break;
		case 2:
			var particlesName = animePathCommand.particlesName;
			var particlesDef = animePathCommand.particlesDef;
			var oldIndexed = this.builder.indexedParams;
			var newIndexedParams = new haxe_ds_StringMap();
			newIndexedParams.h["angle"] = bh_multianim_ResolvedIndexParameters.ValueF(this.angleRad * 180.0 / 3.14159265358979323);
			haxe_Log.trace(newIndexedParams == null ? "null" : haxe_ds_StringMap.stringify(newIndexedParams.h),{ fileName : "bh/paths/AnimatedPath.hx", lineNumber : 115, className : "bh.paths.AnimatedPath", methodName : "execute"});
			newIndexedParams.h["x"] = bh_multianim_ResolvedIndexParameters.ValueF(this.currentPoint.x);
			newIndexedParams.h["y"] = bh_multianim_ResolvedIndexParameters.ValueF(this.currentPoint.y);
			this.builder.indexedParams = newIndexedParams;
			var particles = this.builder.createParticleImpl(particlesDef,particlesName);
			this.activeParticles.h[particlesName] = particles;
			this.h2dObject.addChild(particles);
			this.builder.indexedParams = oldIndexed;
			break;
		case 3:
			var particlesName = animePathCommand.particlesName;
			break;
		case 4:
			var state = animePathCommand.state;
			break;
		}
	}
	,calculatePosition: function() {
		return this.path.getPoint(this.distance / this.pathLength);
	}
	,onEvent: function(event) {
	}
	,update: function(dt) {
		if(this.isDone) {
			return;
		}
		if(dt == 0) {
			throw haxe_Exception.thrown("dt must be > 0");
		}
		if(this.time == 0.) {
			this.onStart();
		}
		var currentRate = this.distance / this.pathLength;
		while(this.currentTimedActionIndex < this.timedActions.length) {
			var action = this.timedActions[this.currentTimedActionIndex];
			if(action.atRateTime <= currentRate) {
				this.execute(action.action);
				this.currentTimedActionIndex++;
			} else {
				break;
			}
		}
		this.time += dt;
		this.distance += dt * this.speed;
		if(this.distance > this.pathLength) {
			this.distance = this.pathLength;
			this.execute(bh_paths_AnimatePathCommands.Event(bh_paths_AnimatePathEvents.PathEnd));
			this.isDone = true;
			return;
		}
		this.prevPoint = this.currentPoint;
		this.currentPoint = this.calculatePosition();
		this.angleRad = Math.atan2(this.currentPoint.y - this.prevPoint.y,this.currentPoint.x - this.prevPoint.x);
		var _g = this.positionMode;
		switch(_g._hx_index) {
		case 0:
			var parent = _g.parent;
			var x = this.currentPoint.x;
			var y = this.currentPoint.y;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var gp = parent.localToGlobal(new h2d_col_PointImpl(x,y));
			gp = this.h2dObject.parent.globalToLocal(gp);
			var _this = this.h2dObject;
			_this.posChanged = true;
			_this.x = gp.x;
			_this.posChanged = true;
			_this.y = gp.y;
			break;
		case 1:
			var x = this.currentPoint.x;
			var y = this.currentPoint.y;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var newObjPos = this.h2dObject.parent.globalToLocal(new h2d_col_PointImpl(x,y));
			var _this = this.h2dObject;
			_this.posChanged = true;
			_this.x = newObjPos.x;
			_this.posChanged = true;
			_this.y = newObjPos.y;
			break;
		}
		var _g = this.object;
		switch(_g._hx_index) {
		case 2:
			var a = _g.a;
			break;
		case 8:
			var p = _g.p;
			break;
		default:
		}
	}
	,__class__: bh_paths_AnimatedPath
};
var bh_paths_PathType = $hxEnums["bh.paths.PathType"] = { __ename__:true,__constructs__:null
	,Checkpoint: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"bh.paths.PathType",toString:$estr}; },$_._hx_name="Checkpoint",$_.__params__ = ["name"],$_)
	,Line: {_hx_name:"Line",_hx_index:1,__enum__:"bh.paths.PathType",toString:$estr}
	,Bezier2: ($_=function(control) { return {_hx_index:2,control:control,__enum__:"bh.paths.PathType",toString:$estr}; },$_._hx_name="Bezier2",$_.__params__ = ["control"],$_)
	,Bezier3: ($_=function(control1,control2) { return {_hx_index:3,control1:control1,control2:control2,__enum__:"bh.paths.PathType",toString:$estr}; },$_._hx_name="Bezier3",$_.__params__ = ["control1","control2"],$_)
};
bh_paths_PathType.__constructs__ = [bh_paths_PathType.Checkpoint,bh_paths_PathType.Line,bh_paths_PathType.Bezier2,bh_paths_PathType.Bezier3];
bh_paths_PathType.__empty_constructs__ = [bh_paths_PathType.Line];
var bh_paths_MultiAnimPaths = function(pathDefs,builder) {
	this.pathDefs = pathDefs;
	this.builder = builder;
};
$hxClasses["bh.paths.MultiAnimPaths"] = bh_paths_MultiAnimPaths;
bh_paths_MultiAnimPaths.__name__ = "bh.paths.MultiAnimPaths";
bh_paths_MultiAnimPaths.prototype = {
	getPath: function(name,startPoint,startAngle,endPoint) {
		var _gthis = this;
		var oldIndexed = this.builder.indexedParams;
		var newIndexedParams = new haxe_ds_StringMap();
		if(startPoint != null) {
			newIndexedParams.h["startX"] = bh_multianim_ResolvedIndexParameters.ValueF(startPoint.x);
			newIndexedParams.h["startY"] = bh_multianim_ResolvedIndexParameters.ValueF(startPoint.y);
		}
		if(endPoint != null) {
			newIndexedParams.h["endX"] = bh_multianim_ResolvedIndexParameters.ValueF(endPoint.x);
			newIndexedParams.h["endY"] = bh_multianim_ResolvedIndexParameters.ValueF(endPoint.y);
		}
		if(startAngle != null) {
			newIndexedParams.h["startAngle"] = bh_multianim_ResolvedIndexParameters.ValueF(startAngle);
		}
		this.builder.indexedParams = newIndexedParams;
		var gridCoordinateSystem = null;
		var hexCoordinateSystem = null;
		var def = this.pathDefs.h[name];
		if(def == null) {
			throw haxe_Exception.thrown("path not found: " + name);
		}
		var singlePaths = [];
		var tmp = startPoint;
		var point = tmp != null ? tmp : new bh_base_FPoint(0,0);
		var angle = startAngle != null ? startAngle * 3.14159265358979323 / 180.0 : 0.;
		var _g = 0;
		while(_g < def.length) {
			var path = def[_g];
			++_g;
			switch(path._hx_index) {
			case 0:
				var end = path.end;
				var end1 = _gthis.builder.calculatePosition(end,gridCoordinateSystem,hexCoordinateSystem);
				singlePaths.push(new bh_paths__$MultiAnimPaths_SinglePath(point,end1,bh_paths_PathType.Line));
				angle = Math.atan2(end1.y - end1.y,point.x - point.x);
				point = end1;
				break;
			case 1:
				var distance = path.distance;
				var distance1 = _gthis.builder.resolveAsNumber(distance);
				var end2 = new bh_base_FPoint(point.x + distance1 * Math.cos(angle),point.y + distance1 * Math.sin(angle));
				singlePaths.push(new bh_paths__$MultiAnimPaths_SinglePath(point,end2,bh_paths_PathType.Line));
				point = end2;
				break;
			case 2:
				var angleDelta = path.angleDelta;
				var angleDelta1 = _gthis.builder.resolveAsNumber(angleDelta);
				var da = angle + angleDelta1 * 3.14159265358979323 / 180.0;
				da %= 6.2831853071795862;
				if(da > 3.14159265358979323) {
					da -= 6.2831853071795862;
				} else if(da <= -3.1415926535897931) {
					da += 6.2831853071795862;
				}
				angle = da;
				break;
			case 3:
				var name = path.checkpointName;
				singlePaths.push(new bh_paths__$MultiAnimPaths_SinglePath(point,point,bh_paths_PathType.Checkpoint(name)));
				break;
			case 4:
				var end3 = path.end;
				var control = path.control;
				var end4 = _gthis.builder.calculatePosition(end3,gridCoordinateSystem,hexCoordinateSystem);
				singlePaths.push(new bh_paths__$MultiAnimPaths_SinglePath(point,end4,bh_paths_PathType.Bezier2(_gthis.builder.calculatePosition(control,gridCoordinateSystem,hexCoordinateSystem))));
				angle = Math.atan2(end4.y - end4.y,point.x - point.x);
				point = end4;
				break;
			case 5:
				var end5 = path.end;
				var control1 = path.control1;
				var control2 = path.control2;
				var end6 = _gthis.builder.calculatePosition(end5,gridCoordinateSystem,hexCoordinateSystem);
				singlePaths.push(new bh_paths__$MultiAnimPaths_SinglePath(point,end6,bh_paths_PathType.Bezier3(_gthis.builder.calculatePosition(control1,gridCoordinateSystem,hexCoordinateSystem),_gthis.builder.calculatePosition(control2,gridCoordinateSystem,hexCoordinateSystem))));
				angle = Math.atan2(end6.y - end6.y,point.x - point.x);
				point = end6;
				break;
			}
		}
		this.builder.indexedParams = oldIndexed;
		return new bh_paths_Path(singlePaths);
	}
	,__class__: bh_paths_MultiAnimPaths
};
var bh_paths_Path = function(singlePaths) {
	this.checkpoints = new haxe_ds_StringMap();
	this.singlePaths = singlePaths;
	var currentLength = 0.;
	var _g = 0;
	while(_g < singlePaths.length) {
		var singlePath = singlePaths[_g];
		++_g;
		var startOffset = currentLength;
		currentLength += singlePath.length();
		singlePath.startRange = startOffset;
		singlePath.endRange = currentLength;
	}
	this.totalLength = currentLength;
	var _g = 0;
	while(_g < singlePaths.length) {
		var singlePath = singlePaths[_g];
		++_g;
		singlePath.startRange /= this.totalLength;
		singlePath.endRange /= this.totalLength;
		var _g1 = singlePath.path;
		if(_g1._hx_index == 0) {
			var name = _g1.name;
			if(Object.prototype.hasOwnProperty.call(this.checkpoints.h,name)) {
				throw haxe_Exception.thrown("duplicate checkpoint: " + name);
			}
			this.checkpoints.h[name] = singlePath.startRange;
		}
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = this.singlePaths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		var _g3 = v.path;
		var tmp;
		if(_g3._hx_index == 0) {
			var _g4 = _g3.name;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			_g.push(v);
		}
	}
	this.singlePaths = _g;
};
$hxClasses["bh.paths.Path"] = bh_paths_Path;
bh_paths_Path.__name__ = "bh.paths.Path";
bh_paths_Path.prototype = {
	drawToGraphics: function(g) {
		var pixels = this.toPixelsLine();
		var _g = 0;
		var _g1 = pixels.length - 1;
		while(_g < _g1) {
			var i = _g++;
			var pt = pixels[i];
			var pt1 = pixels[i + 1];
			var x = pt.x;
			var y = pt.y;
			g.flush();
			g.addVertex(x,y,g.curR,g.curG,g.curB,g.curA,x * g.ma + y * g.mc + g.mx,x * g.mb + y * g.md + g.my);
			var x1 = pt1.x;
			var y1 = pt1.y;
			g.addVertex(x1,y1,g.curR,g.curG,g.curB,g.curA,x1 * g.ma + y1 * g.mc + g.mx,x1 * g.mb + y1 * g.md + g.my);
		}
	}
	,toPixelsLine: function() {
		var retVal = [];
		var _g = 0;
		var _g1 = this.singlePaths;
		while(_g < _g1.length) {
			var path = _g1[_g];
			++_g;
			retVal = retVal.concat(path.toPixelArray());
		}
		return retVal;
	}
	,getPoint: function(rate) {
		var _g = 0;
		var _g1 = this.singlePaths;
		while(_g < _g1.length) {
			var singlePath = _g1[_g];
			++_g;
			if(rate >= singlePath.startRange && rate <= singlePath.endRange) {
				return singlePath.getPoint((rate - singlePath.startRange) / (singlePath.endRange - singlePath.startRange));
			}
		}
		throw haxe_Exception.thrown("rate out of range: " + rate);
	}
	,__class__: bh_paths_Path
};
var bh_paths__$MultiAnimPaths_SinglePath = function(start,end,path) {
	this.endRange = NaN;
	this.startRange = NaN;
	this.start = start;
	this.end = end;
	this.path = path;
};
$hxClasses["bh.paths._MultiAnimPaths.SinglePath"] = bh_paths__$MultiAnimPaths_SinglePath;
bh_paths__$MultiAnimPaths_SinglePath.__name__ = "bh.paths._MultiAnimPaths.SinglePath";
bh_paths__$MultiAnimPaths_SinglePath.prototype = {
	getPoint: function(rate) {
		var _g = this.path;
		switch(_g._hx_index) {
		case 0:
			var name = _g.name;
			var _this = this.start;
			return new bh_base_FPoint(_this.x,_this.y);
		case 1:
			return new bh_base_FPoint(this.start.x * (1 - rate) + this.end.x * rate,this.start.y * (1 - rate) + this.end.y * rate);
		case 2:
			var control1 = _g.control;
			var control = control1.x;
			var control2 = control1.y;
			return new bh_base_FPoint((this.start.x * (1 - rate) + control * rate) * (1 - rate) + (control * (1 - rate) + this.end.x * rate) * rate,(this.start.y * (1 - rate) + control2 * rate) * (1 - rate) + (control2 * (1 - rate) + this.end.y * rate) * rate);
		case 3:
			var control1 = _g.control1;
			var control2 = _g.control2;
			var control11 = control1.x;
			var control21 = control2.x;
			var control = control11 * (1 - rate) + control21 * rate;
			var control12 = control1.y;
			var control22 = control2.y;
			var control1 = control12 * (1 - rate) + control22 * rate;
			return new bh_base_FPoint(((this.start.x * (1 - rate) + control11 * rate) * (1 - rate) + control * rate) * (1 - rate) + (control * (1 - rate) + (control21 * (1 - rate) + this.end.x * rate) * rate) * rate,((this.start.y * (1 - rate) + control12 * rate) * (1 - rate) + control1 * rate) * (1 - rate) + (control1 * (1 - rate) + (control22 * (1 - rate) + this.end.y * rate) * rate) * rate);
		}
	}
	,toPixelArray: function() {
		if(this.path._hx_index == 1) {
			return [this.start,this.end];
		} else {
			var b = this.length() / 4;
			var steps = 2 < b ? b : 2;
			var _g = [];
			var _g1 = 0;
			var _g2 = steps;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(this.getPoint(1.0 * i / steps));
			}
			return _g;
		}
	}
	,length: function() {
		var _gthis = this;
		var estimate = function(steps) {
			var length = 0.;
			var lastPoint = _gthis.start;
			var _g = 1;
			var _g1 = steps + 1;
			while(_g < _g1) {
				var i = _g++;
				var point = _gthis.getPoint(i / steps);
				var dx = lastPoint.x - point.x;
				var dy = lastPoint.y - point.y;
				var dz = 0.;
				if(dz == null) {
					dz = 0.;
				}
				length += Math.sqrt(dx * dx + dy * dy + dz * dz);
				lastPoint = point;
			}
			return length;
		};
		var _g = this.path;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.name;
			return 0;
		case 1:
			var dx = this.start.x - this.end.x;
			var dy = this.start.y - this.end.y;
			var dz = 0.;
			if(dz == null) {
				dz = 0.;
			}
			return Math.sqrt(dx * dx + dy * dy + dz * dz);
		case 2:
			var control = _g.control;
			return estimate(4);
		case 3:
			var control1 = _g.control1;
			var control2 = _g.control2;
			return estimate(8);
		}
	}
	,__class__: bh_paths__$MultiAnimPaths_SinglePath
};
var bh_stateanim_APIdentifierType = $hxEnums["bh.stateanim.APIdentifierType"] = { __ename__:true,__constructs__:null
	,AITString: {_hx_name:"AITString",_hx_index:0,__enum__:"bh.stateanim.APIdentifierType",toString:$estr}
	,AITParameter: {_hx_name:"AITParameter",_hx_index:1,__enum__:"bh.stateanim.APIdentifierType",toString:$estr}
	,AITQuotedString: {_hx_name:"AITQuotedString",_hx_index:2,__enum__:"bh.stateanim.APIdentifierType",toString:$estr}
};
bh_stateanim_APIdentifierType.__constructs__ = [bh_stateanim_APIdentifierType.AITString,bh_stateanim_APIdentifierType.AITParameter,bh_stateanim_APIdentifierType.AITQuotedString];
bh_stateanim_APIdentifierType.__empty_constructs__ = [bh_stateanim_APIdentifierType.AITString,bh_stateanim_APIdentifierType.AITParameter,bh_stateanim_APIdentifierType.AITQuotedString];
var bh_stateanim_APToken = $hxEnums["bh.stateanim.APToken"] = { __ename__:true,__constructs__:null
	,APEof: {_hx_name:"APEof",_hx_index:0,__enum__:"bh.stateanim.APToken",toString:$estr}
	,APOpen: {_hx_name:"APOpen",_hx_index:1,__enum__:"bh.stateanim.APToken",toString:$estr}
	,APClosed: {_hx_name:"APClosed",_hx_index:2,__enum__:"bh.stateanim.APToken",toString:$estr}
	,APComma: {_hx_name:"APComma",_hx_index:3,__enum__:"bh.stateanim.APToken",toString:$estr}
	,APColon: {_hx_name:"APColon",_hx_index:4,__enum__:"bh.stateanim.APToken",toString:$estr}
	,APSemiColon: {_hx_name:"APSemiColon",_hx_index:5,__enum__:"bh.stateanim.APToken",toString:$estr}
	,APNumber: ($_=function(s) { return {_hx_index:6,s:s,__enum__:"bh.stateanim.APToken",toString:$estr}; },$_._hx_name="APNumber",$_.__params__ = ["s"],$_)
	,APIdentifier: ($_=function(s,keyword,identType) { return {_hx_index:7,s:s,keyword:keyword,identType:identType,__enum__:"bh.stateanim.APToken",toString:$estr}; },$_._hx_name="APIdentifier",$_.__params__ = ["s","keyword","identType"],$_)
	,APCurlyClosed: {_hx_name:"APCurlyClosed",_hx_index:8,__enum__:"bh.stateanim.APToken",toString:$estr}
	,APCurlyOpen: {_hx_name:"APCurlyOpen",_hx_index:9,__enum__:"bh.stateanim.APToken",toString:$estr}
	,APBracketClosed: {_hx_name:"APBracketClosed",_hx_index:10,__enum__:"bh.stateanim.APToken",toString:$estr}
	,APBracketOpen: {_hx_name:"APBracketOpen",_hx_index:11,__enum__:"bh.stateanim.APToken",toString:$estr}
	,APNewLine: {_hx_name:"APNewLine",_hx_index:12,__enum__:"bh.stateanim.APToken",toString:$estr}
	,APDoubleDot: {_hx_name:"APDoubleDot",_hx_index:13,__enum__:"bh.stateanim.APToken",toString:$estr}
	,APAt: {_hx_name:"APAt",_hx_index:14,__enum__:"bh.stateanim.APToken",toString:$estr}
	,APArrow: {_hx_name:"APArrow",_hx_index:15,__enum__:"bh.stateanim.APToken",toString:$estr}
};
bh_stateanim_APToken.__constructs__ = [bh_stateanim_APToken.APEof,bh_stateanim_APToken.APOpen,bh_stateanim_APToken.APClosed,bh_stateanim_APToken.APComma,bh_stateanim_APToken.APColon,bh_stateanim_APToken.APSemiColon,bh_stateanim_APToken.APNumber,bh_stateanim_APToken.APIdentifier,bh_stateanim_APToken.APCurlyClosed,bh_stateanim_APToken.APCurlyOpen,bh_stateanim_APToken.APBracketClosed,bh_stateanim_APToken.APBracketOpen,bh_stateanim_APToken.APNewLine,bh_stateanim_APToken.APDoubleDot,bh_stateanim_APToken.APAt,bh_stateanim_APToken.APArrow];
bh_stateanim_APToken.__empty_constructs__ = [bh_stateanim_APToken.APEof,bh_stateanim_APToken.APOpen,bh_stateanim_APToken.APClosed,bh_stateanim_APToken.APComma,bh_stateanim_APToken.APColon,bh_stateanim_APToken.APSemiColon,bh_stateanim_APToken.APCurlyClosed,bh_stateanim_APToken.APCurlyOpen,bh_stateanim_APToken.APBracketClosed,bh_stateanim_APToken.APBracketOpen,bh_stateanim_APToken.APNewLine,bh_stateanim_APToken.APDoubleDot,bh_stateanim_APToken.APAt,bh_stateanim_APToken.APArrow];
var bh_stateanim_APKeywords = $hxEnums["bh.stateanim.APKeywords"] = { __ename__:true,__constructs__:null
	,APSheet: {_hx_name:"APSheet",_hx_index:0,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APFile: {_hx_name:"APFile",_hx_index:1,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APStates: {_hx_name:"APStates",_hx_index:2,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APAllowedExtraPoints: {_hx_name:"APAllowedExtraPoints",_hx_index:3,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APExtrapoints: {_hx_name:"APExtrapoints",_hx_index:4,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APPlaylist: {_hx_name:"APPlaylist",_hx_index:5,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APCenter: {_hx_name:"APCenter",_hx_index:6,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APLoop: {_hx_name:"APLoop",_hx_index:7,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APAnimation: {_hx_name:"APAnimation",_hx_index:8,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APName: {_hx_name:"APName",_hx_index:9,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APFps: {_hx_name:"APFps",_hx_index:10,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APGoto: {_hx_name:"APGoto",_hx_index:11,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APCommand: {_hx_name:"APCommand",_hx_index:12,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APUntilCommand: {_hx_name:"APUntilCommand",_hx_index:13,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APEvent: {_hx_name:"APEvent",_hx_index:14,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APDuration: {_hx_name:"APDuration",_hx_index:15,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APRandom: {_hx_name:"APRandom",_hx_index:16,__enum__:"bh.stateanim.APKeywords",toString:$estr}
	,APFrames: {_hx_name:"APFrames",_hx_index:17,__enum__:"bh.stateanim.APKeywords",toString:$estr}
};
bh_stateanim_APKeywords.__constructs__ = [bh_stateanim_APKeywords.APSheet,bh_stateanim_APKeywords.APFile,bh_stateanim_APKeywords.APStates,bh_stateanim_APKeywords.APAllowedExtraPoints,bh_stateanim_APKeywords.APExtrapoints,bh_stateanim_APKeywords.APPlaylist,bh_stateanim_APKeywords.APCenter,bh_stateanim_APKeywords.APLoop,bh_stateanim_APKeywords.APAnimation,bh_stateanim_APKeywords.APName,bh_stateanim_APKeywords.APFps,bh_stateanim_APKeywords.APGoto,bh_stateanim_APKeywords.APCommand,bh_stateanim_APKeywords.APUntilCommand,bh_stateanim_APKeywords.APEvent,bh_stateanim_APKeywords.APDuration,bh_stateanim_APKeywords.APRandom,bh_stateanim_APKeywords.APFrames];
bh_stateanim_APKeywords.__empty_constructs__ = [bh_stateanim_APKeywords.APSheet,bh_stateanim_APKeywords.APFile,bh_stateanim_APKeywords.APStates,bh_stateanim_APKeywords.APAllowedExtraPoints,bh_stateanim_APKeywords.APExtrapoints,bh_stateanim_APKeywords.APPlaylist,bh_stateanim_APKeywords.APCenter,bh_stateanim_APKeywords.APLoop,bh_stateanim_APKeywords.APAnimation,bh_stateanim_APKeywords.APName,bh_stateanim_APKeywords.APFps,bh_stateanim_APKeywords.APGoto,bh_stateanim_APKeywords.APCommand,bh_stateanim_APKeywords.APUntilCommand,bh_stateanim_APKeywords.APEvent,bh_stateanim_APKeywords.APDuration,bh_stateanim_APKeywords.APRandom,bh_stateanim_APKeywords.APFrames];
var bh_stateanim_AnimLexer = function(input,sourceName) {
	hxparse_Lexer.call(this,input,sourceName);
};
$hxClasses["bh.stateanim.AnimLexer"] = bh_stateanim_AnimLexer;
bh_stateanim_AnimLexer.__name__ = "bh.stateanim.AnimLexer";
bh_stateanim_AnimLexer.__interfaces__ = [hxparse_RuleBuilder];
bh_stateanim_AnimLexer.__super__ = hxparse_Lexer;
bh_stateanim_AnimLexer.prototype = $extend(hxparse_Lexer.prototype,{
	__class__: bh_stateanim_AnimLexer
});
var bh_stateanim_AnimPlaylistFrames = $hxEnums["bh.stateanim.AnimPlaylistFrames"] = { __ename__:true,__constructs__:null
	,SheetFrameAnim: ($_=function(name,durationMilliseconds) { return {_hx_index:0,name:name,durationMilliseconds:durationMilliseconds,__enum__:"bh.stateanim.AnimPlaylistFrames",toString:$estr}; },$_._hx_name="SheetFrameAnim",$_.__params__ = ["name","durationMilliseconds"],$_)
	,SheetFrameAnimWithIndex: ($_=function(name,from,to,durationMilliseconds) { return {_hx_index:1,name:name,from:from,to:to,durationMilliseconds:durationMilliseconds,__enum__:"bh.stateanim.AnimPlaylistFrames",toString:$estr}; },$_._hx_name="SheetFrameAnimWithIndex",$_.__params__ = ["name","from","to","durationMilliseconds"],$_)
	,FileSingleFrame: ($_=function(filename,durationMilliseconds) { return {_hx_index:2,filename:filename,durationMilliseconds:durationMilliseconds,__enum__:"bh.stateanim.AnimPlaylistFrames",toString:$estr}; },$_._hx_name="FileSingleFrame",$_.__params__ = ["filename","durationMilliseconds"],$_)
	,Loop: ($_=function(frames,condition) { return {_hx_index:3,frames:frames,condition:condition,__enum__:"bh.stateanim.AnimPlaylistFrames",toString:$estr}; },$_._hx_name="Loop",$_.__params__ = ["frames","condition"],$_)
	,ChangeState: ($_=function(newState) { return {_hx_index:4,newState:newState,__enum__:"bh.stateanim.AnimPlaylistFrames",toString:$estr}; },$_._hx_name="ChangeState",$_.__params__ = ["newState"],$_)
	,AnimExitPoint: {_hx_name:"AnimExitPoint",_hx_index:5,__enum__:"bh.stateanim.AnimPlaylistFrames",toString:$estr}
	,PlaylistEvent: ($_=function(playlistEvent) { return {_hx_index:6,playlistEvent:playlistEvent,__enum__:"bh.stateanim.AnimPlaylistFrames",toString:$estr}; },$_._hx_name="PlaylistEvent",$_.__params__ = ["playlistEvent"],$_)
};
bh_stateanim_AnimPlaylistFrames.__constructs__ = [bh_stateanim_AnimPlaylistFrames.SheetFrameAnim,bh_stateanim_AnimPlaylistFrames.SheetFrameAnimWithIndex,bh_stateanim_AnimPlaylistFrames.FileSingleFrame,bh_stateanim_AnimPlaylistFrames.Loop,bh_stateanim_AnimPlaylistFrames.ChangeState,bh_stateanim_AnimPlaylistFrames.AnimExitPoint,bh_stateanim_AnimPlaylistFrames.PlaylistEvent];
bh_stateanim_AnimPlaylistFrames.__empty_constructs__ = [bh_stateanim_AnimPlaylistFrames.AnimExitPoint];
var bh_stateanim_ExtraPointsHelper = function() { };
$hxClasses["bh.stateanim.ExtraPointsHelper"] = bh_stateanim_ExtraPointsHelper;
bh_stateanim_ExtraPointsHelper.__name__ = "bh.stateanim.ExtraPointsHelper";
bh_stateanim_ExtraPointsHelper.toPoint = function(pt) {
	return new h2d_col_IPoint(pt.point.x,pt.point.y);
};
var bh_stateanim_InvalidSyntax = function(error,pos) {
	hxparse_ParserError.call(this,pos);
	this.error = error;
};
$hxClasses["bh.stateanim.InvalidSyntax"] = bh_stateanim_InvalidSyntax;
bh_stateanim_InvalidSyntax.__name__ = "bh.stateanim.InvalidSyntax";
bh_stateanim_InvalidSyntax.__super__ = hxparse_ParserError;
bh_stateanim_InvalidSyntax.prototype = $extend(hxparse_ParserError.prototype,{
	toString: function() {
		return this.error;
	}
	,__class__: bh_stateanim_InvalidSyntax
});
var bh_stateanim_AnimParserResult = function() { };
$hxClasses["bh.stateanim.AnimParserResult"] = bh_stateanim_AnimParserResult;
bh_stateanim_AnimParserResult.__name__ = "bh.stateanim.AnimParserResult";
bh_stateanim_AnimParserResult.__isInterface__ = true;
bh_stateanim_AnimParserResult.prototype = {
	__class__: bh_stateanim_AnimParserResult
};
var hxparse_Parser_$hxparse_$LexerTokenSource_$bh_$stateanim_$APToken_$bh_$stateanim_$APToken = function(stream) {
	this.stream = stream;
};
$hxClasses["hxparse.Parser_hxparse_LexerTokenSource_bh_stateanim_APToken_bh_stateanim_APToken"] = hxparse_Parser_$hxparse_$LexerTokenSource_$bh_$stateanim_$APToken_$bh_$stateanim_$APToken;
hxparse_Parser_$hxparse_$LexerTokenSource_$bh_$stateanim_$APToken_$bh_$stateanim_$APToken.__name__ = "hxparse.Parser_hxparse_LexerTokenSource_bh_stateanim_APToken_bh_stateanim_APToken";
hxparse_Parser_$hxparse_$LexerTokenSource_$bh_$stateanim_$APToken_$bh_$stateanim_$APToken.prototype = {
	peek: function(n) {
		if(this.token == null) {
			this.token = new haxe_ds_GenericCell(this.stream.token(),null);
			--n;
		}
		var tok = this.token;
		while(n > 0) {
			if(tok.next == null) {
				tok.next = new haxe_ds_GenericCell(this.stream.token(),null);
			}
			tok = tok.next;
			--n;
		}
		return tok.elt;
	}
	,__class__: hxparse_Parser_$hxparse_$LexerTokenSource_$bh_$stateanim_$APToken_$bh_$stateanim_$APToken
};
var bh_stateanim_AnimParser = function(input,resourceLoader) {
	this.cache = new haxe_ds_StringMap();
	this.center = null;
	this.definedStatesIndexes = [];
	this.definedStates = new haxe_ds_StringMap();
	this.allowedExtraPoints = [];
	this.animationNames = [];
	this.animations = [];
	this.resourceLoader = resourceLoader;
	this.input = input;
	var lexer = new bh_stateanim_AnimLexer(input);
	var ts = new hxparse_LexerTokenSource(lexer,bh_stateanim_AnimLexer.tok);
	hxparse_Parser_$hxparse_$LexerTokenSource_$bh_$stateanim_$APToken_$bh_$stateanim_$APToken.call(this,ts);
};
$hxClasses["bh.stateanim.AnimParser"] = bh_stateanim_AnimParser;
bh_stateanim_AnimParser.__name__ = "bh.stateanim.AnimParser";
bh_stateanim_AnimParser.__interfaces__ = [bh_stateanim_AnimParserResult,hxparse_ParserBuilder];
bh_stateanim_AnimParser.validateState = function(definedStates,name,value) {
	if(!Object.prototype.hasOwnProperty.call(definedStates.h,name)) {
		throw haxe_Exception.thrown("state " + name + " not defined");
	}
	if(definedStates.h[name].indexOf(value) != -1 == false) {
		throw haxe_Exception.thrown("state " + name + " does not allow value:" + value);
	}
};
bh_stateanim_AnimParser.validateStateSelector = function(definedStates,selector) {
	if(bh_base_MapTools.count(definedStates) != bh_base_MapTools.count(selector)) {
		throw haxe_Exception.thrown("invalid selector " + (selector == null ? "null" : haxe_ds_StringMap.stringify(selector.h)) + " for defined states " + (definedStates == null ? "null" : haxe_ds_StringMap.stringify(definedStates.h)));
	}
	var h = definedStates.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g_key = key;
		var _g_value = _g_h[key];
		var key1 = _g_key;
		var value = _g_value;
		if(Object.prototype.hasOwnProperty.call(selector.h,key1) == false) {
			throw haxe_Exception.thrown("key not defined: " + key1);
		}
		if(value.indexOf(selector.h[key1]) != -1 == false) {
			throw haxe_Exception.thrown("unknown state value " + Std.string(value) + " not defined for key: " + key1 + ": " + (definedStates == null ? "null" : haxe_ds_StringMap.stringify(definedStates.h)));
		}
	}
	var h = selector.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g_key = key;
		var _g_value = _g_h[key];
		var key1 = _g_key;
		var value = _g_value;
		if(Object.prototype.hasOwnProperty.call(definedStates.h,key1) == false) {
			throw haxe_Exception.thrown("unknown state key: " + key1);
		}
		if(definedStates.h[key1].indexOf(value) != -1 == false) {
			throw haxe_Exception.thrown("unknown state value " + value + " not defined for key: " + key1 + ": " + (definedStates == null ? "null" : haxe_ds_StringMap.stringify(definedStates.h)));
		}
	}
};
bh_stateanim_AnimParser.countStateMatch = function(match,selector) {
	var retVal = 0;
	var h = selector.h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g_key = key;
		var _g_value = _g_h[key];
		var key1 = _g_key;
		var value = _g_value;
		if(Object.prototype.hasOwnProperty.call(match.h,key1)) {
			if(match.h[key1] == value) {
				++retVal;
			} else {
				retVal -= 10000;
			}
		}
	}
	return retVal;
};
bh_stateanim_AnimParser.findPlaylist = function(stateSelector,animation,definedStates) {
	bh_stateanim_AnimParser.validateStateSelector(definedStates,stateSelector);
	var bestScore = -1;
	var best2Score = -1;
	var best = null;
	var best2 = null;
	var _g = 0;
	var _g1 = animation.playlist;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		var count = bh_stateanim_AnimParser.countStateMatch(p.states,stateSelector);
		if(count > bestScore) {
			best2Score = bestScore;
			best2 = best;
			best = p;
			bestScore = count;
		} else if(bestScore == count) {
			best2 = best;
			best = p;
			best2Score = bestScore;
		}
	}
	if(best != null && best2Score == bestScore) {
		throw haxe_Exception.thrown("ambigious playlist: " + animation.name + " " + (best.states == null ? "null" : haxe_ds_StringMap.stringify(best.states.h)) + " " + (best2.states == null ? "null" : haxe_ds_StringMap.stringify(best2.states.h)) + " selector: " + (stateSelector == null ? "null" : haxe_ds_StringMap.stringify(stateSelector.h)));
	}
	return best;
};
bh_stateanim_AnimParser.findExtraPoint = function(extraPointName,stateSelector,animation,definedStates) {
	bh_stateanim_AnimParser.validateStateSelector(definedStates,stateSelector);
	var bestScore = -1;
	var best2Score = -1;
	var best = null;
	var best2 = null;
	var allExtraPoints = animation.extraPoint.h[extraPointName];
	if(allExtraPoints == null) {
		return null;
	}
	var _g = 0;
	while(_g < allExtraPoints.length) {
		var p = allExtraPoints[_g];
		++_g;
		var count = bh_stateanim_AnimParser.countStateMatch(p.states,stateSelector);
		if(count > bestScore) {
			best2Score = bestScore;
			best2 = best;
			best = p;
			bestScore = count;
		} else if(bestScore == count) {
			best2 = best;
			best = p;
			best2Score = bestScore;
		}
	}
	if(best != null && best2Score == bestScore) {
		throw haxe_Exception.thrown("ambigious extraPoint: " + extraPointName + " " + (best.states == null ? "null" : haxe_ds_StringMap.stringify(best.states.h)) + " " + (best2.states == null ? "null" : haxe_ds_StringMap.stringify(best2.states.h)) + " selector: " + (stateSelector == null ? "null" : haxe_ds_StringMap.stringify(stateSelector.h)));
	}
	return best;
};
bh_stateanim_AnimParser.findAnimation = function(name,stateSelector,definedStates,animations) {
	bh_stateanim_AnimParser.validateStateSelector(definedStates,stateSelector);
	return bh_stateanim_AnimParser.findAnimationInternal(name,stateSelector,animations);
};
bh_stateanim_AnimParser.findAnimationInternal = function(name,stateSelector,animations) {
	var bestScore = -1;
	var best = null;
	var _g = 0;
	while(_g < animations.length) {
		var a = animations[_g];
		++_g;
		if(name != a.name) {
			continue;
		}
		var count = bh_stateanim_AnimParser.countStateMatch(a.states,stateSelector);
		if(count > bestScore) {
			best = a;
			bestScore = count;
		} else if(bestScore == count) {
			throw haxe_Exception.thrown("ambigious animation: " + a.name + ":" + (a.states == null ? "null" : haxe_ds_StringMap.stringify(a.states.h)) + ", " + best.name + ":" + (best.states == null ? "null" : haxe_ds_StringMap.stringify(best.states.h)));
		}
	}
	return best;
};
bh_stateanim_AnimParser.parseFile = function(input,resourceLoader) {
	var p = new bh_stateanim_AnimParser(input,resourceLoader);
	p.parse();
	return p;
};
bh_stateanim_AnimParser.__super__ = hxparse_Parser_$hxparse_$LexerTokenSource_$bh_$stateanim_$APToken_$bh_$stateanim_$APToken;
bh_stateanim_AnimParser.prototype = $extend(hxparse_Parser_$hxparse_$LexerTokenSource_$bh_$stateanim_$APToken_$bh_$stateanim_$APToken.prototype,{
	parserValidateState: function(animStates,name,value) {
		try {
			bh_stateanim_AnimParser.validateState(animStates,name,value);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g);
			this.syntaxError(e.get_message());
		}
	}
	,createAllStates: function(statesDefinitions) {
		var totalStates = 1;
		var stateValuesCount = [];
		var stateKeys = [];
		var retVal = [];
		var h = statesDefinitions.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g_key = key;
			var _g_value = _g_h[key];
			var key1 = _g_key;
			var value = _g_value;
			totalStates *= value.length;
			stateValuesCount.push(value.length);
			stateKeys.push(key1);
		}
		var _g = 0;
		var _g1 = totalStates;
		while(_g < _g1) {
			var i = _g++;
			var x = new haxe_ds_StringMap();
			var ci = i;
			var _g2 = 0;
			var _g3 = stateKeys.length;
			while(_g2 < _g3) {
				var ki = _g2++;
				var vi = ci % stateValuesCount[ki];
				ci = ci / stateValuesCount[ki] | 0;
				var key = stateKeys[ki];
				x.h[key] = statesDefinitions.h[key][vi];
			}
			retVal.push(x);
		}
		return retVal;
	}
	,checkForUnreachableState: function(parentState,childState) {
		var h = childState.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g_key = key;
			var _g_value = _g_h[key];
			var key1 = _g_key;
			var value = _g_value;
			if(!Object.prototype.hasOwnProperty.call(parentState.h,key1)) {
				continue;
			}
			if(parentState.h[key1] != value) {
				this.syntaxError("unreachable state " + (childState == null ? "null" : haxe_ds_StringMap.stringify(childState.h)) + ", limited by " + (parentState == null ? "null" : haxe_ds_StringMap.stringify(parentState.h)));
			} else {
				this.syntaxError("useless state limit " + (childState == null ? "null" : haxe_ds_StringMap.stringify(childState.h)) + ", limited by " + (parentState == null ? "null" : haxe_ds_StringMap.stringify(parentState.h)));
			}
		}
		return true;
	}
	,syntaxError: function(error,pos) {
		var error1 = new bh_stateanim_InvalidSyntax(error,pos == null ? this.stream.curPos() : pos);
		haxe_Log.trace("Error " + Std.string(error1) + ", line " + error1.pos.getLinePosition(this.input).lineMin,{ fileName : "bh/stateanim/AnimParser.hx", lineNumber : 367, className : "bh.stateanim.AnimParser", methodName : "syntaxError"});
		throw haxe_Exception.thrown(error1);
	}
	,unexpectedError: function(message) {
		var error = new hxparse_Unexpected(this.peek(0),this.stream.curPos());
		haxe_Log.trace("Error " + Std.string(error) + ", line " + error.pos.getLinePosition(this.input).lineMin,{ fileName : "bh/stateanim/AnimParser.hx", lineNumber : 374, className : "bh.stateanim.AnimParser", methodName : "unexpectedError"});
		throw haxe_Exception.thrown(error);
	}
	,parse: function() {
		var animationParsingStarted = false;
		_hx_loop1: while(true) {
			var _g = this.peek(0);
			switch(_g._hx_index) {
			case 0:
				this.last = this.token.elt;
				this.token = this.token.next;
				break _hx_loop1;
			case 7:
				var _g1 = _g.s;
				var _g2 = _g.keyword;
				var _g3 = _g.identType;
				if(_g2 == null) {
					throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				} else {
					switch(_g2._hx_index) {
					case 0:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 4) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var _g4 = this.peek(0);
								if(_g4._hx_index == 7) {
									var _g5 = _g4.s;
									var _g6 = _g4.keyword;
									switch(_g4.identType._hx_index) {
									case 0:case 2:
										var value = _g5;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 12) {
											this.last = this.token.elt;
											this.token = this.token.next;
											if(animationParsingStarted) {
												this.syntaxError("sheet must be defined before animations");
											}
											if(this.sheetName != null) {
												this.syntaxError("sheet already defined");
											}
											this.sheetName = value;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
										break;
									default:
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
						break;
					case 2:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 4) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var s = this.parseAllStates(new haxe_ds_StringMap());
								if(animationParsingStarted) {
									this.syntaxError("states must be defined before animations");
								}
								if(bh_base_MapTools.count(this.definedStates) > 0) {
									this.syntaxError("states already defined");
								}
								this.definedStates = s;
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
						break;
					case 3:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 4) {
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 11) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var list = this.parseListUntilBracket();
									if(animationParsingStarted) {
										this.syntaxError("allowedExtraPoints must be defined before animations");
									}
									if(this.allowedExtraPoints.length > 0) {
										this.syntaxError("allowedExtraPoints already defined");
									}
									this.allowedExtraPoints = list;
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
						break;
					case 6:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 4) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var c = this.parseCoordinates();
								if(this.center != null) {
									this.syntaxError("center already defined");
								}
								this.center = c;
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
						break;
					case 8:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var animationStates = this.parseStates(new haxe_ds_StringMap());
							if(this.peek(0)._hx_index == 9) {
								this.last = this.token.elt;
								this.token = this.token.next;
								animationParsingStarted = true;
								var h = animationStates.h;
								var _g_h = h;
								var _g_keys = Object.keys(h);
								var _g_length = _g_keys.length;
								var _g_current = 0;
								while(_g_current < _g_length) {
									var key = _g_keys[_g_current++];
									var _g_key = key;
									var _g_value = _g_h[key];
									var key1 = _g_key;
									var value1 = _g_value;
									this.parserValidateState(this.definedStates,key1,value1);
								}
								var startOfAnim = this.stream.curPos();
								var parsedAnim = this.parseAnimation(this.definedStates,animationStates,this.allowedExtraPoints);
								if(parsedAnim.fps == null) {
									this.syntaxError("fps expected",startOfAnim);
								}
								var anim = { states : animationStates, name : parsedAnim.name, loop : parsedAnim.loop, fps : parsedAnim.fps, extraPoint : parsedAnim.extraPoints, playlist : parsedAnim.playlist};
								this.animations.push(anim);
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
						break;
					default:
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				}
				break;
			case 12:
				this.last = this.token.elt;
				this.token = this.token.next;
				break;
			default:
				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
		}
		var h = this.definedStates.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g_key = key;
			var _g_value = _g_h[key];
			var key1 = _g_key;
			var value = _g_value;
			this.definedStatesIndexes.push(key1);
		}
		var allStates = this.createAllStates(this.definedStates);
		if(allStates.length > 50) {
			haxe_Log.trace("Warning: large number of states in AnimParser: " + allStates.length + "}",{ fileName : "bh/stateanim/AnimParser.hx", lineNumber : 446, className : "bh.stateanim.AnimParser", methodName : "parse"});
		}
		var _g = 0;
		while(_g < allStates.length) {
			var state = allStates[_g];
			++_g;
			var _g1 = 0;
			var _g2 = this.animationNames;
			while(_g1 < _g2.length) {
				var name = _g2[_g1];
				++_g1;
				var anim = bh_stateanim_AnimParser.findAnimationInternal(name,state,this.animations);
				if(anim == null) {
					this.syntaxError("no animation " + name + " defined for states " + (state == null ? "null" : haxe_ds_StringMap.stringify(state.h)));
				} else {
					anim.visited = true;
				}
				var _g3 = 0;
				var _g4 = this.allowedExtraPoints;
				while(_g3 < _g4.length) {
					var epoint = _g4[_g3];
					++_g3;
					var p = bh_stateanim_AnimParser.findExtraPoint(epoint,state,anim,this.definedStates);
					if(p != null) {
						p.visited = true;
					}
				}
				var playlist = bh_stateanim_AnimParser.findPlaylist(state,anim,this.definedStates);
				if(playlist == null) {
					throw haxe_Exception.thrown("no playlist for " + (state == null ? "null" : haxe_ds_StringMap.stringify(state.h)) + ", id " + anim.name);
				}
			}
		}
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var anim = _g1[_g];
			++_g;
			if(anim.visited == false) {
				throw haxe_Exception.thrown("animation " + anim.name + " not reachable");
			}
			var h = anim.extraPoint.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var ek = _g_key;
				var ev = _g_value;
				var _g2 = 0;
				while(_g2 < ev.length) {
					var epoint = ev[_g2];
					++_g2;
					if(epoint.visited == false) {
						throw haxe_Exception.thrown("Extra point " + ek + " in anim " + anim.name + " not reachable " + (epoint.states == null ? "null" : haxe_ds_StringMap.stringify(epoint.states.h)));
					}
				}
				var _g3 = 0;
				var _g4 = anim.playlist;
				while(_g3 < _g4.length) {
					var pl = _g4[_g3];
					++_g3;
					if(pl.visited == false) {
						throw haxe_Exception.thrown("Playlist in anim " + anim.name + " not reachable " + (pl.states == null ? "null" : haxe_ds_StringMap.stringify(pl.states.h)));
					}
				}
			}
		}
		return { sheet : this.sheetName, states : this.definedStates, allowedExtraPoints : this.allowedExtraPoints, center : this.center, animations : this.animations};
	}
	,parseExtraPoints: function(statesDefinitions,animationStates,extraPoints,allowedExtraPoints) {
		_hx_loop1: while(true) switch(this.peek(0)._hx_index) {
		case 8:
			this.last = this.token.elt;
			this.token = this.token.next;
			break _hx_loop1;
		case 12:
			this.last = this.token.elt;
			this.token = this.token.next;
			break;
		default:
			try {
				var states = this.parseStates(new haxe_ds_StringMap());
				var _g = this.peek(0);
				if(_g._hx_index == 7) {
					var _g1 = _g.keyword;
					var _g2 = _g.identType;
					var pointName = _g.s;
					this.last = this.token.elt;
					this.token = this.token.next;
					if(this.peek(0)._hx_index == 4) {
						this.last = this.token.elt;
						this.token = this.token.next;
						var c = this.parseCoordinates();
						if(allowedExtraPoints.indexOf(pointName) != -1 == false) {
							this.syntaxError("extraPoint " + pointName + " not declared in allowedExtraPoints");
						}
						var h = states.h;
						var _g_h = h;
						var _g_keys = Object.keys(h);
						var _g_length = _g_keys.length;
						var _g_current = 0;
						while(_g_current < _g_length) {
							var key = _g_keys[_g_current++];
							var _g_key = key;
							var _g_value = _g_h[key];
							var key1 = _g_key;
							var value = _g_value;
							this.parserValidateState(statesDefinitions,key1,value);
						}
						this.checkForUnreachableState(animationStates,states);
						var p = { states : states, point : c};
						if(Object.prototype.hasOwnProperty.call(extraPoints.h,pointName)) {
							extraPoints.h[pointName].push(p);
						} else {
							extraPoints.h[pointName] = [p];
						}
					} else {
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} catch( _g3 ) {
				if(((haxe_Exception.caught(_g3).unwrap()) instanceof hxparse_NoMatch)) {
					this.unexpectedError();
				} else {
					throw _g3;
				}
			}
		}
	}
	,parseAnimation: function(statesDefinitions,animationStates,allowedExtraPoints) {
		var extraPoints = new haxe_ds_StringMap();
		var ret = { loop : null, name : null, fps : null, extraPoints : extraPoints, playlist : []};
		var exit = false;
		_hx_loop1: while(true) {
			var _g = this.peek(0);
			switch(_g._hx_index) {
			case 7:
				var _g1 = _g.s;
				var _g2 = _g.keyword;
				var _g3 = _g.identType;
				if(_g2 == null) {
					this.unexpectedError();
				} else {
					switch(_g2._hx_index) {
					case 4:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 9) {
								this.last = this.token.elt;
								this.token = this.token.next;
								if(bh_base_MapTools.count(extraPoints) > 0) {
									this.syntaxError("extraPoints already defined");
								}
								this.parseExtraPoints(statesDefinitions,animationStates,extraPoints,allowedExtraPoints);
								if(bh_base_MapTools.count(extraPoints) == 0) {
									this.syntaxError("extraPoints must not be empty");
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							this.unexpectedError();
						}
						break;
					case 5:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var playlistStates = this.parseStates(new haxe_ds_StringMap());
							if(this.peek(0)._hx_index == 9) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var playlist = { anims : [], states : playlistStates};
								var h = playlistStates.h;
								var _g_h = h;
								var _g_keys = Object.keys(h);
								var _g_length = _g_keys.length;
								var _g_current = 0;
								while(_g_current < _g_length) {
									var key = _g_keys[_g_current++];
									var _g_key = key;
									var _g_value = _g_h[key];
									var key1 = _g_key;
									var value = _g_value;
									this.parserValidateState(statesDefinitions,key1,value);
								}
								this.checkForUnreachableState(animationStates,playlistStates);
								this.parseFrames(playlist.anims);
								ret.playlist.push(playlist);
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							this.unexpectedError();
						}
						break;
					case 7:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							switch(this.peek(0)._hx_index) {
							case 4:
								this.last = this.token.elt;
								this.token = this.token.next;
								var _g4 = this.peek(0);
								switch(_g4._hx_index) {
								case 6:
									var number = _g4.s;
									this.last = this.token.elt;
									this.token = this.token.next;
									var cnt = Std.parseInt(number);
									if(cnt <= 0) {
										this.syntaxError("loop counter must be greater than 0");
									}
									ret.loop = bh_stateanim_AnimationFrameCondition.AFC_COUNT(cnt);
									break;
								case 7:
									var _g5 = _g4.keyword;
									var _g6 = _g4.identType;
									switch(_g4.s) {
									case "false":case "no":
										this.last = this.token.elt;
										this.token = this.token.next;
										ret.loop = null;
										break;
									case "true":case "yes":
										this.last = this.token.elt;
										this.token = this.token.next;
										ret.loop = bh_stateanim_AnimationFrameCondition.FOREVER;
										break;
									default:
										if(_g5 == null) {
											this.syntaxError("unknown bool value " + Std.string(this.peek(0)));
										} else if(_g5._hx_index == 13) {
											if(_g6._hx_index == 0) {
												this.last = this.token.elt;
												this.token = this.token.next;
												ret.loop = bh_stateanim_AnimationFrameCondition.AFC_UNTIL_COMMAND;
											} else {
												this.syntaxError("unknown bool value " + Std.string(this.peek(0)));
											}
										} else {
											this.syntaxError("unknown bool value " + Std.string(this.peek(0)));
										}
									}
									break;
								default:
									this.syntaxError("unknown bool value " + Std.string(this.peek(0)));
								}
								break;
							case 12:
								this.last = this.token.elt;
								this.token = this.token.next;
								ret.loop = bh_stateanim_AnimationFrameCondition.FOREVER;
								break;
							default:
								this.unexpectedError();
							}
						} else {
							this.unexpectedError();
						}
						break;
					case 9:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 4) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var _g7 = this.peek(0);
								switch(_g7._hx_index) {
								case 6:
									var name = _g7.s;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.animationNames.indexOf(name) == -1) {
										this.animationNames.push(name);
									}
									ret.name = name;
									break;
								case 7:
									var _g8 = _g7.s;
									var _g9 = _g7.keyword;
									switch(_g7.identType._hx_index) {
									case 0:case 2:
										var name1 = _g8;
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.animationNames.indexOf(name1) == -1) {
											this.animationNames.push(name1);
										}
										ret.name = name1;
										break;
									default:
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								default:
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							this.unexpectedError();
						}
						break;
					case 10:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 4) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var _g10 = this.peek(0);
								if(_g10._hx_index == 6) {
									var number1 = _g10.s;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(ret.fps != null) {
										this.syntaxError("fps already set");
									}
									ret.fps = Std.parseInt(number1);
									if(ret.fps <= 0) {
										this.syntaxError("fps must be greater than 0");
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							this.unexpectedError();
						}
						break;
					default:
						this.unexpectedError();
					}
				}
				break;
			case 8:
				this.last = this.token.elt;
				this.token = this.token.next;
				break _hx_loop1;
			case 12:
				this.last = this.token.elt;
				this.token = this.token.next;
				break;
			default:
				this.unexpectedError();
			}
		}
		if(ret.name == null) {
			this.syntaxError("name not defined");
		}
		if(ret.playlist.length == 0) {
			this.syntaxError("animation requries playlist");
		}
		return ret;
	}
	,parseFrames: function(anims,isLoop) {
		if(isLoop == null) {
			isLoop = false;
		}
		var exit = false;
		while(!exit) {
			var _g = this.peek(0);
			switch(_g._hx_index) {
			case 7:
				var _g1 = _g.s;
				var _g2 = _g.keyword;
				var _g3 = _g.identType;
				if(_g2 == null) {
					this.unexpectedError();
				} else {
					switch(_g2._hx_index) {
					case 0:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 4) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var _g4 = this.peek(0);
								if(_g4._hx_index == 7) {
									var _g5 = _g4.s;
									var _g6 = _g4.keyword;
									switch(_g4.identType._hx_index) {
									case 0:case 2:
										var frameName = _g5;
										this.last = this.token.elt;
										this.token = this.token.next;
										var start = null;
										var end = null;
										var duration = null;
										if(this.peek(0)._hx_index == 3) {
											this.last = this.token.elt;
											this.token = this.token.next;
										}
										var _g7 = this.peek(0);
										switch(_g7._hx_index) {
										case 7:
											var _g8 = _g7.s;
											var _g9 = _g7.keyword;
											if(_g9 == null) {
												this.unexpectedError();
											} else if(_g9._hx_index == 17) {
												if(_g7.identType._hx_index == 0) {
													this.last = this.token.elt;
													this.token = this.token.next;
													if(this.peek(0)._hx_index == 4) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var _g10 = this.peek(0);
														if(_g10._hx_index == 6) {
															var startIndex = _g10.s;
															this.last = this.token.elt;
															this.token = this.token.next;
															if(this.peek(0)._hx_index == 13) {
																this.last = this.token.elt;
																this.token = this.token.next;
																var _g11 = this.peek(0);
																if(_g11._hx_index == 6) {
																	var endIndex = _g11.s;
																	this.last = this.token.elt;
																	this.token = this.token.next;
																	var start1 = Std.parseInt(startIndex);
																	var end1 = Std.parseInt(endIndex);
																	var _g12 = this.peek(0);
																	switch(_g12._hx_index) {
																	case 3:
																		this.last = this.token.elt;
																		this.token = this.token.next;
																		var _g13 = this.peek(0);
																		if(_g13._hx_index == 7) {
																			var _g14 = _g13.s;
																			var _g15 = _g13.keyword;
																			if(_g15 == null) {
																				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																			} else if(_g15._hx_index == 15) {
																				if(_g13.identType._hx_index == 0) {
																					this.last = this.token.elt;
																					this.token = this.token.next;
																					if(this.peek(0)._hx_index == 4) {
																						this.last = this.token.elt;
																						this.token = this.token.next;
																						var d = this.parseDuration();
																						duration = d;
																					} else {
																						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																					}
																				} else {
																					throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																				}
																			} else {
																				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																			}
																		} else {
																			throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																		}
																		break;
																	case 7:
																		var _g16 = _g12.s;
																		var _g17 = _g12.keyword;
																		if(_g17 != null) {
																			if(_g17._hx_index == 15) {
																				if(_g12.identType._hx_index == 0) {
																					this.last = this.token.elt;
																					this.token = this.token.next;
																					if(this.peek(0)._hx_index == 4) {
																						this.last = this.token.elt;
																						this.token = this.token.next;
																						var d1 = this.parseDuration();
																						duration = d1;
																					} else {
																						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																					}
																				}
																			}
																		}
																		break;
																	default:
																	}
																} else {
																	throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
																}
															} else {
																throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
															}
														} else {
															throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
														}
													} else {
														throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
													}
												} else {
													this.unexpectedError();
												}
											} else {
												this.unexpectedError();
											}
											break;
										case 8:
											this.last = this.token.elt;
											this.token = this.token.next;
											exit = true;
											break;
										case 12:
											this.last = this.token.elt;
											this.token = this.token.next;
											break;
										default:
											this.unexpectedError();
										}
										if(start == null && end == null) {
											anims.push(bh_stateanim_AnimPlaylistFrames.SheetFrameAnim(frameName,duration));
										} else {
											anims.push(bh_stateanim_AnimPlaylistFrames.SheetFrameAnimWithIndex(frameName,start,end,duration));
										}
										break;
									default:
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							this.unexpectedError();
						}
						break;
					case 1:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							if(this.peek(0)._hx_index == 4) {
								this.last = this.token.elt;
								this.token = this.token.next;
								var _g18 = this.peek(0);
								if(_g18._hx_index == 7) {
									var _g19 = _g18.keyword;
									if(_g18.identType._hx_index == 2) {
										var frameFilename = _g18.s;
										this.last = this.token.elt;
										this.token = this.token.next;
										var duration1 = null;
										var _g20 = this.peek(0);
										if(_g20._hx_index == 7) {
											var _g21 = _g20.s;
											var _g22 = _g20.keyword;
											if(_g22 != null) {
												if(_g22._hx_index == 15) {
													if(_g20.identType._hx_index == 0) {
														this.last = this.token.elt;
														this.token = this.token.next;
														var d2 = this.parseDuration();
														duration1 = d2;
													}
												}
											}
										}
										anims.push(bh_stateanim_AnimPlaylistFrames.FileSingleFrame(frameFilename,duration1));
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							this.unexpectedError();
						}
						break;
					case 7:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var condition = bh_stateanim_AnimationFrameCondition.FOREVER;
							var _g23 = this.peek(0);
							switch(_g23._hx_index) {
							case 6:
								var loopCountStr = _g23.s;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 9) {
									this.last = this.token.elt;
									this.token = this.token.next;
									var loopCount = Std.parseInt(loopCountStr);
									if(loopCount <= 0) {
										throw haxe_Exception.thrown("loop count must be greater than 0");
									}
									condition = bh_stateanim_AnimationFrameCondition.AFC_COUNT(loopCount);
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
								break;
							case 7:
								var _g24 = _g23.s;
								var _g25 = _g23.keyword;
								if(_g25 == null) {
									this.syntaxError("invalid loop, count:Int, untilCommand or { expected");
								} else if(_g25._hx_index == 13) {
									if(_g23.identType._hx_index == 0) {
										this.last = this.token.elt;
										this.token = this.token.next;
										if(this.peek(0)._hx_index == 9) {
											this.last = this.token.elt;
											this.token = this.token.next;
											condition = bh_stateanim_AnimationFrameCondition.AFC_UNTIL_COMMAND;
										} else {
											throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
										}
									} else {
										this.syntaxError("invalid loop, count:Int, untilCommand or { expected");
									}
								} else {
									this.syntaxError("invalid loop, count:Int, untilCommand or { expected");
								}
								break;
							case 9:
								this.last = this.token.elt;
								this.token = this.token.next;
								break;
							default:
								this.syntaxError("invalid loop, count:Int, untilCommand or { expected");
							}
							var loopFrames = this.parseFrames([],true);
							anims.push(bh_stateanim_AnimPlaylistFrames.Loop(loopFrames,condition));
						} else {
							this.unexpectedError();
						}
						break;
					case 11:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var _g26 = this.peek(0);
							if(_g26._hx_index == 7) {
								var _g27 = _g26.keyword;
								var _g28 = _g26.identType;
								var stateName = _g26.s;
								this.last = this.token.elt;
								this.token = this.token.next;
								anims.push(bh_stateanim_AnimPlaylistFrames.ChangeState(stateName));
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							this.unexpectedError();
						}
						break;
					case 12:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							anims.push(bh_stateanim_AnimPlaylistFrames.AnimExitPoint);
						} else {
							this.unexpectedError();
						}
						break;
					case 14:
						if(_g3._hx_index == 0) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var _g29 = this.peek(0);
							if(_g29._hx_index == 7) {
								var _g30 = _g29.keyword;
								var _g31 = _g29.identType;
								var eventName = _g29.s;
								this.last = this.token.elt;
								this.token = this.token.next;
								var _g32 = this.peek(0);
								if(_g32._hx_index == 7) {
									var _g33 = _g32.s;
									var _g34 = _g32.keyword;
									var _g35 = _g32.identType;
									if(_g34 == null) {
										switch(this.peek(0)._hx_index) {
										case 5:case 12:
											this.last = this.token.elt;
											this.token = this.token.next;
											anims.push(bh_stateanim_AnimPlaylistFrames.PlaylistEvent(bh_stateanim_AnimationPlaylistEvent.TRIGGER(eventName)));
											break;
										default:
											try {
												var p = this.parseCoordinates();
												anims.push(bh_stateanim_AnimPlaylistFrames.PlaylistEvent(bh_stateanim_AnimationPlaylistEvent.POINT_EVENT(eventName,new h2d_col_IPoint(p.x,p.y))));
											} catch( _g36 ) {
												if(((haxe_Exception.caught(_g36).unwrap()) instanceof hxparse_NoMatch)) {
													this.unexpectedError();
												} else {
													throw _g36;
												}
											}
										}
									} else if(_g34._hx_index == 16) {
										if(_g35._hx_index == 0) {
											this.last = this.token.elt;
											this.token = this.token.next;
											var p1 = this.parseCoordinates();
											if(this.peek(0)._hx_index == 3) {
												this.last = this.token.elt;
												this.token = this.token.next;
												var _g37 = this.peek(0);
												if(_g37._hx_index == 6) {
													var randomRadius = _g37.s;
													this.last = this.token.elt;
													this.token = this.token.next;
													var r = Std.parseInt(randomRadius);
													anims.push(bh_stateanim_AnimPlaylistFrames.PlaylistEvent(bh_stateanim_AnimationPlaylistEvent.RANDOM_POINT_EVENT(eventName,new h2d_col_IPoint(p1.x,p1.y),r)));
												} else {
													throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
												}
											} else {
												throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
											}
										} else {
											switch(this.peek(0)._hx_index) {
											case 5:case 12:
												this.last = this.token.elt;
												this.token = this.token.next;
												anims.push(bh_stateanim_AnimPlaylistFrames.PlaylistEvent(bh_stateanim_AnimationPlaylistEvent.TRIGGER(eventName)));
												break;
											default:
												try {
													var p2 = this.parseCoordinates();
													anims.push(bh_stateanim_AnimPlaylistFrames.PlaylistEvent(bh_stateanim_AnimationPlaylistEvent.POINT_EVENT(eventName,new h2d_col_IPoint(p2.x,p2.y))));
												} catch( _g38 ) {
													if(((haxe_Exception.caught(_g38).unwrap()) instanceof hxparse_NoMatch)) {
														this.unexpectedError();
													} else {
														throw _g38;
													}
												}
											}
										}
									} else {
										switch(this.peek(0)._hx_index) {
										case 5:case 12:
											this.last = this.token.elt;
											this.token = this.token.next;
											anims.push(bh_stateanim_AnimPlaylistFrames.PlaylistEvent(bh_stateanim_AnimationPlaylistEvent.TRIGGER(eventName)));
											break;
										default:
											try {
												var p3 = this.parseCoordinates();
												anims.push(bh_stateanim_AnimPlaylistFrames.PlaylistEvent(bh_stateanim_AnimationPlaylistEvent.POINT_EVENT(eventName,new h2d_col_IPoint(p3.x,p3.y))));
											} catch( _g39 ) {
												if(((haxe_Exception.caught(_g39).unwrap()) instanceof hxparse_NoMatch)) {
													this.unexpectedError();
												} else {
													throw _g39;
												}
											}
										}
									}
								} else {
									switch(this.peek(0)._hx_index) {
									case 5:case 12:
										this.last = this.token.elt;
										this.token = this.token.next;
										anims.push(bh_stateanim_AnimPlaylistFrames.PlaylistEvent(bh_stateanim_AnimationPlaylistEvent.TRIGGER(eventName)));
										break;
									default:
										try {
											var p4 = this.parseCoordinates();
											anims.push(bh_stateanim_AnimPlaylistFrames.PlaylistEvent(bh_stateanim_AnimationPlaylistEvent.POINT_EVENT(eventName,new h2d_col_IPoint(p4.x,p4.y))));
										} catch( _g40 ) {
											if(((haxe_Exception.caught(_g40).unwrap()) instanceof hxparse_NoMatch)) {
												this.unexpectedError();
											} else {
												throw _g40;
											}
										}
									}
								}
							} else {
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							this.unexpectedError();
						}
						break;
					default:
						this.unexpectedError();
					}
				}
				break;
			case 8:
				this.last = this.token.elt;
				this.token = this.token.next;
				exit = true;
				break;
			case 12:
				this.last = this.token.elt;
				this.token = this.token.next;
				break;
			default:
				this.unexpectedError();
			}
		}
		return anims;
	}
	,parseCoordinates: function() {
		var _g = this.peek(0);
		if(_g._hx_index == 6) {
			var x = _g.s;
			this.last = this.token.elt;
			this.token = this.token.next;
			if(this.peek(0)._hx_index == 3) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var _g = this.peek(0);
				if(_g._hx_index == 6) {
					var y = _g.s;
					this.last = this.token.elt;
					this.token = this.token.next;
					return new bh_base_Point(Std.parseInt(x),Std.parseInt(y));
				} else {
					throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
		} else {
			this.unexpectedError();
		}
		return null;
	}
	,parseAllStates: function(animStates) {
		var _g = this.peek(0);
		if(_g._hx_index == 7) {
			var _g1 = _g.keyword;
			var _g1 = _g.identType;
			var stateName = _g.s;
			this.last = this.token.elt;
			this.token = this.token.next;
			if(this.peek(0)._hx_index == 1) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var list = this.parseList([]);
				if(Object.prototype.hasOwnProperty.call(animStates.h,stateName)) {
					this.syntaxError("State " + stateName + " already defined");
				}
				animStates.h[stateName] = list;
				switch(this.peek(0)._hx_index) {
				case 3:
					this.last = this.token.elt;
					this.token = this.token.next;
					this.parseAllStates(animStates);
					break;
				case 12:
					this.last = this.token.elt;
					this.token = this.token.next;
					break;
				default:
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
			} else {
				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
		} else {
			this.unexpectedError();
		}
		return animStates;
	}
	,parseStates: function(states) {
		while(true) switch(this.peek(0)._hx_index) {
		case 12:
			this.last = this.token.elt;
			this.token = this.token.next;
			break;
		case 14:
			this.last = this.token.elt;
			this.token = this.token.next;
			if(this.peek(0)._hx_index == 1) {
				this.last = this.token.elt;
				this.token = this.token.next;
				var _g = this.peek(0);
				if(_g._hx_index == 7) {
					var _g1 = _g.s;
					var _g2 = _g.keyword;
					switch(_g.identType._hx_index) {
					case 0:case 2:
						var stateName = _g1;
						this.last = this.token.elt;
						this.token = this.token.next;
						if(this.peek(0)._hx_index == 15) {
							this.last = this.token.elt;
							this.token = this.token.next;
							var _g3 = this.peek(0);
							switch(_g3._hx_index) {
							case 6:
								var stateValue = _g3.s;
								this.last = this.token.elt;
								this.token = this.token.next;
								if(this.peek(0)._hx_index == 2) {
									this.last = this.token.elt;
									this.token = this.token.next;
									states.h[stateName] = stateValue;
								} else {
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
								break;
							case 7:
								var _g4 = _g3.s;
								var _g5 = _g3.keyword;
								switch(_g3.identType._hx_index) {
								case 0:case 2:
									var stateValue1 = _g4;
									this.last = this.token.elt;
									this.token = this.token.next;
									if(this.peek(0)._hx_index == 2) {
										this.last = this.token.elt;
										this.token = this.token.next;
										states.h[stateName] = stateValue1;
									} else {
										throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
									}
									break;
								default:
									throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
								}
								break;
							default:
								throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
							}
						} else {
							throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
						}
						break;
					default:
						throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
					}
				} else {
					throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		default:
			return states;
		}
	}
	,parseList: function(list) {
		var _g = this.peek(0);
		switch(_g._hx_index) {
		case 6:
			var ident = _g.s;
			this.last = this.token.elt;
			this.token = this.token.next;
			list.push(ident);
			switch(this.peek(0)._hx_index) {
			case 2:
				this.last = this.token.elt;
				this.token = this.token.next;
				return list;
			case 3:
				this.last = this.token.elt;
				this.token = this.token.next;
				this.parseList(list);
				break;
			default:
				throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
			break;
		case 7:
			var _g1 = _g.keyword;
			var _g1 = _g.identType;
			var ident = _g.s;
			this.last = this.token.elt;
			this.token = this.token.next;
			list.push(ident);
			switch(this.peek(0)._hx_index) {
			case 2:
				this.last = this.token.elt;
				this.token = this.token.next;
				return list;
			case 3:
				this.last = this.token.elt;
				this.token = this.token.next;
				this.parseList(list);
				break;
			default:
				throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
			}
			break;
		default:
			this.unexpectedError();
		}
		return list;
	}
	,parseDuration: function() {
		var _g = this.peek(0);
		switch(_g._hx_index) {
		case 6:
			var duration = _g.s;
			this.last = this.token.elt;
			this.token = this.token.next;
			var _g1 = this.peek(0);
			if(_g1._hx_index == 7) {
				var _g2 = _g1.keyword;
				var _g2 = _g1.identType;
				if(_g1.s == "ms") {
					this.last = this.token.elt;
					this.token = this.token.next;
					var d = Std.parseInt(duration);
					if(d <= 0) {
						return this.syntaxError("duration must be greater than 0");
					}
					return d;
				} else {
					throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
				}
			} else {
				throw haxe_Exception.thrown(new hxparse_Unexpected(this.peek(0),this.stream.curPos()));
			}
			break;
		case 7:
			var _g1 = _g.keyword;
			if(_g.identType._hx_index == 0) {
				var durationStr = _g.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				if(StringTools.endsWith(durationStr,"ms")) {
					var d = Std.parseInt(durationStr.substring(0,durationStr.length - 2));
					if(d <= 0) {
						this.syntaxError("duration must be greater than 0");
					}
					return d;
				} else {
					return this.syntaxError("expected <int>ms got " + durationStr);
				}
			} else {
				return null;
			}
			break;
		default:
			return null;
		}
	}
	,parseListUntilBracket: function() {
		var list = [];
		while(true) {
			var _g = this.peek(0);
			if(_g._hx_index == 7) {
				var _g1 = _g.keyword;
				var _g2 = _g.identType;
				var ident = _g.s;
				this.last = this.token.elt;
				this.token = this.token.next;
				if(list.indexOf(ident) != -1) {
					this.syntaxError("extra point " + ident + " already defined");
				}
				list.push(ident);
				switch(this.peek(0)._hx_index) {
				case 3:
					this.last = this.token.elt;
					this.token = this.token.next;
					break;
				case 10:
					this.last = this.token.elt;
					this.token = this.token.next;
					return list;
				default:
					throw haxe_Exception.thrown(new hxparse_NoMatch(this.stream.curPos(),this.peek(0)));
				}
			} else {
				this.unexpectedError();
			}
		}
	}
	,createStates: function(anims,anim,stateSelector,level) {
		var _gthis = this;
		var replaceState = function(input,stateSelector) {
			var result = input;
			var h = stateSelector.h;
			var _g_h = h;
			var _g_keys = Object.keys(h);
			var _g_length = _g_keys.length;
			var _g_current = 0;
			while(_g_current < _g_length) {
				var key = _g_keys[_g_current++];
				var _g_key = key;
				var _g_value = _g_h[key];
				var key1 = _g_key;
				var value = _g_value;
				result = StringTools.replace(input,"$" + "$" + key1 + "$" + "$",value);
			}
			return result;
		};
		var tileToFrame = function(tile,duration) {
			if(_gthis.center != null) {
				tile.dx = -_gthis.center.x;
				tile.dy = -_gthis.center.y;
			}
			return bh_stateanim_AnimationFrameState.AF_FRAME(new bh_stateanim_AnimationFrame(tile,duration,0,0,Math.ceil(tile.width + tile.x) - Math.floor(tile.x),Math.ceil(tile.height + tile.y) - Math.floor(tile.y)));
		};
		var AFtoFrame = function(f,duration) {
			if(_gthis.center != null) {
				f.tile.dx = f.offsetx - _gthis.center.x;
				f.tile.dy = f.height - f.tile.height - f.offsety - _gthis.center.y;
			}
			return bh_stateanim_AnimationFrameState.AF_FRAME(f.cloneWithDuration(duration));
		};
		var commandsToDebugString = function(anims,markIndex) {
			var buf_b = "";
			var _g = 0;
			var _g1 = anims.length;
			while(_g < _g1) {
				var index = _g++;
				buf_b += Std.string("" + index + ": " + Std.string(anims[index]));
				if(index == markIndex) {
					buf_b += "\t\t\t<----- HERE";
				}
				buf_b += "\n";
			}
			return buf_b;
		};
		var isInfiniteLoop = function(anims,from,to) {
			var _g = from;
			var _g1 = to;
			while(_g < _g1) {
				var index = _g++;
				if(anims[index]._hx_index == 4) {
					return false;
				}
			}
			var _g = anims[to];
			if(_g._hx_index == 1) {
				var destIndex = _g.destIndex;
				var condition = _g.condition;
				switch(condition._hx_index) {
				case 0:
					return true;
				case 1:
					var repeatCount = condition.repeatCount;
					return false;
				case 2:
					return false;
				}
			} else {
				throw haxe_Exception.thrown("expected loop");
			}
		};
		var retVal = [];
		var duration = 1.0 / anim.fps;
		var _g = 0;
		while(_g < anims.length) {
			var frames = anims[_g];
			++_g;
			switch(frames._hx_index) {
			case 0:
				var name = frames.name;
				var overrideDuration = frames.durationMilliseconds;
				var expandedName = replaceState(name,stateSelector);
				var sheet = this.resourceLoader.loadSheet2(this.sheetName);
				if(sheet == null) {
					throw haxe_Exception.thrown("sheet " + this.sheetName + " not found");
				}
				var loadedTiles = sheet.getAnim(expandedName);
				if(loadedTiles == null) {
					throw haxe_Exception.thrown("tiles " + name + "->" + expandedName + " not found");
				}
				var tiles = sheet.getAnim(expandedName);
				var d = overrideDuration == null ? duration : overrideDuration / 1000.0;
				var _g1 = [];
				var _g_current = 0;
				var _g_array = tiles;
				while(_g_current < _g_array.length) {
					var x = _g_array[_g_current++];
					_g1.push(AFtoFrame(x,d));
				}
				retVal = retVal.concat(_g1);
				break;
			case 1:
				var name1 = frames.name;
				var from = frames.from;
				var to = frames.to;
				var overrideDuration1 = frames.durationMilliseconds;
				var sheet1 = this.resourceLoader.loadSheet2(this.sheetName);
				if(sheet1 == null) {
					throw haxe_Exception.thrown("sheet " + this.sheetName + " not found");
				}
				var expandedName1 = replaceState(name1,stateSelector);
				var animTiles = sheet1.getAnim(expandedName1);
				if(animTiles == null) {
					throw haxe_Exception.thrown("tiles " + name1 + "->" + expandedName1 + " not found");
				}
				var d1 = overrideDuration1 == null ? duration : overrideDuration1 / 1000.0;
				var _g2 = 0;
				var _g3 = animTiles.length;
				while(_g2 < _g3) {
					var i = _g2++;
					if((from == null || i >= from) && (to == null || i <= to)) {
						retVal.push(AFtoFrame(animTiles[i],d1));
					}
				}
				break;
			case 2:
				var filename = frames.filename;
				var overrideDuration2 = frames.durationMilliseconds;
				var d2 = overrideDuration2 == null ? duration : overrideDuration2 / 1000.0;
				retVal.push(tileToFrame(this.resourceLoader.loadTile(filename),d2));
				break;
			case 3:
				var anims2 = frames.frames;
				var condition = frames.condition;
				var startIndex = retVal.length;
				var loopStates = this.createStates(anims2,anim,stateSelector,level + 1);
				retVal = retVal.concat(loopStates);
				retVal.push(bh_stateanim_AnimationFrameState.AF_LOOP(startIndex,condition));
				if(isInfiniteLoop(retVal,startIndex,retVal.length - 1)) {
					throw haxe_Exception.thrown("infinite loop detected in " + anim.name + ", states:" + (stateSelector == null ? "null" : haxe_ds_StringMap.stringify(stateSelector.h)) + ", \n" + commandsToDebugString(retVal,retVal.length - 1));
				}
				break;
			case 4:
				var newState = frames.newState;
				if(this.animationNames.indexOf(newState) == -1) {
					throw haxe_Exception.thrown("invalid goto " + newState);
				}
				retVal.push(bh_stateanim_AnimationFrameState.AF_CHAGE_STATE(newState));
				break;
			case 5:
				retVal.push(bh_stateanim_AnimationFrameState.AF_EXITPOINT);
				break;
			case 6:
				var playlistEvent = frames.playlistEvent;
				retVal.push(bh_stateanim_AnimationFrameState.AF_EVENT(playlistEvent));
				break;
			}
		}
		if(anim.loop != null && level == 0) {
			retVal.push(bh_stateanim_AnimationFrameState.AF_LOOP(0,anim.loop));
			if(isInfiniteLoop(retVal,0,retVal.length - 1)) {
				throw haxe_Exception.thrown("infinite loop detected in " + anim.name + ", states:" + (stateSelector == null ? "null" : haxe_ds_StringMap.stringify(stateSelector.h)) + "\n" + commandsToDebugString(retVal,retVal.length - 1));
			}
		}
		return retVal;
	}
	,selectorToHex: function(selector) {
		if(bh_base_MapTools.count(selector) == 0) {
			return "";
		}
		var indexes = new haxe_io_Bytes(new ArrayBuffer(this.definedStatesIndexes.length));
		indexes.fill(0,indexes.length,255);
		var h = selector.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g_key = key;
			var _g_value = _g_h[key];
			var key1 = _g_key;
			var value = _g_value;
			var idx = this.definedStatesIndexes.indexOf(key1);
			if(idx == -1) {
				throw haxe_Exception.thrown("invalid selector key " + key1);
			}
			var value1 = this.definedStates.h[key1].indexOf(value);
			indexes.b[idx] = value1;
		}
		return indexes.toHex();
	}
	,load: function(stateSelector,animSM) {
		var hex = this.selectorToHex(stateSelector);
		if(!Object.prototype.hasOwnProperty.call(this.cache.h,hex)) {
			var cacheArray = [];
			var _g = 0;
			var _g1 = this.animationNames;
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				var anim = bh_stateanim_AnimParser.findAnimation(name,stateSelector,this.definedStates,this.animations);
				if(anim == null) {
					throw haxe_Exception.thrown("null anim " + name);
				}
				var playlist = bh_stateanim_AnimParser.findPlaylist(stateSelector,anim,this.definedStates);
				if(playlist == null) {
					throw haxe_Exception.thrown("null playlist for anim " + name);
				}
				var states = this.createStates(playlist.anims,anim,stateSelector,0);
				var extraPoints = new haxe_ds_StringMap();
				var _g2 = 0;
				var _g3 = this.allowedExtraPoints;
				while(_g2 < _g3.length) {
					var pointName = _g3[_g2];
					++_g2;
					var pt = bh_stateanim_AnimParser.findExtraPoint(pointName,stateSelector,anim,this.definedStates);
					if(pt != null) {
						var value = bh_stateanim_ExtraPointsHelper.toPoint(pt);
						extraPoints.h[pointName] = value;
					}
				}
				cacheArray.push({ name : name, states : states, extraPoints : extraPoints});
			}
			this.cache.h[hex] = cacheArray;
		}
		var cacheEntries = this.cache.h[hex];
		var _g = 0;
		while(_g < cacheEntries.length) {
			var e = cacheEntries[_g];
			++_g;
			animSM.addAnimationState(e.name,e.states,e.extraPoints);
		}
	}
	,createAnimSM: function(stateSelector) {
		var animSM = new bh_stateanim_AnimationSM(stateSelector);
		this.load(stateSelector,animSM);
		return animSM;
	}
	,__class__: bh_stateanim_AnimParser
});
var bh_stateanim_AnimationCommandEvent = $hxEnums["bh.stateanim.AnimationCommandEvent"] = { __ename__:true,__constructs__:null
	,TRIGGER: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"bh.stateanim.AnimationCommandEvent",toString:$estr}; },$_._hx_name="TRIGGER",$_.__params__ = ["data"],$_)
};
bh_stateanim_AnimationCommandEvent.__constructs__ = [bh_stateanim_AnimationCommandEvent.TRIGGER];
bh_stateanim_AnimationCommandEvent.__empty_constructs__ = [];
var bh_stateanim_AnimationPlaylistEvent = $hxEnums["bh.stateanim.AnimationPlaylistEvent"] = { __ename__:true,__constructs__:null
	,TRIGGER: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"bh.stateanim.AnimationPlaylistEvent",toString:$estr}; },$_._hx_name="TRIGGER",$_.__params__ = ["data"],$_)
	,POINT_EVENT: ($_=function(name,point) { return {_hx_index:1,name:name,point:point,__enum__:"bh.stateanim.AnimationPlaylistEvent",toString:$estr}; },$_._hx_name="POINT_EVENT",$_.__params__ = ["name","point"],$_)
	,RANDOM_POINT_EVENT: ($_=function(name,point,randomRadius) { return {_hx_index:2,name:name,point:point,randomRadius:randomRadius,__enum__:"bh.stateanim.AnimationPlaylistEvent",toString:$estr}; },$_._hx_name="RANDOM_POINT_EVENT",$_.__params__ = ["name","point","randomRadius"],$_)
};
bh_stateanim_AnimationPlaylistEvent.__constructs__ = [bh_stateanim_AnimationPlaylistEvent.TRIGGER,bh_stateanim_AnimationPlaylistEvent.POINT_EVENT,bh_stateanim_AnimationPlaylistEvent.RANDOM_POINT_EVENT];
bh_stateanim_AnimationPlaylistEvent.__empty_constructs__ = [];
var bh_stateanim_CommandTrigger = $hxEnums["bh.stateanim.CommandTrigger"] = { __ename__:true,__constructs__:null
	,Queued: {_hx_name:"Queued",_hx_index:0,__enum__:"bh.stateanim.CommandTrigger",toString:$estr}
	,ExecuteNow: {_hx_name:"ExecuteNow",_hx_index:1,__enum__:"bh.stateanim.CommandTrigger",toString:$estr}
	,ExecuteNowAndSkipEvents: {_hx_name:"ExecuteNowAndSkipEvents",_hx_index:2,__enum__:"bh.stateanim.CommandTrigger",toString:$estr}
};
bh_stateanim_CommandTrigger.__constructs__ = [bh_stateanim_CommandTrigger.Queued,bh_stateanim_CommandTrigger.ExecuteNow,bh_stateanim_CommandTrigger.ExecuteNowAndSkipEvents];
bh_stateanim_CommandTrigger.__empty_constructs__ = [bh_stateanim_CommandTrigger.Queued,bh_stateanim_CommandTrigger.ExecuteNow,bh_stateanim_CommandTrigger.ExecuteNowAndSkipEvents];
var bh_stateanim_AnimationEvent = $hxEnums["bh.stateanim.AnimationEvent"] = { __ename__:true,__constructs__:null
	,TRIGGER: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"bh.stateanim.AnimationEvent",toString:$estr}; },$_._hx_name="TRIGGER",$_.__params__ = ["data"],$_)
	,POINT_EVENT: ($_=function(name,point) { return {_hx_index:1,name:name,point:point,__enum__:"bh.stateanim.AnimationEvent",toString:$estr}; },$_._hx_name="POINT_EVENT",$_.__params__ = ["name","point"],$_)
};
bh_stateanim_AnimationEvent.__constructs__ = [bh_stateanim_AnimationEvent.TRIGGER,bh_stateanim_AnimationEvent.POINT_EVENT];
bh_stateanim_AnimationEvent.__empty_constructs__ = [];
var bh_stateanim_AnimationCommand = $hxEnums["bh.stateanim.AnimationCommand"] = { __ename__:true,__constructs__:null
	,Delay: ($_=function(time) { return {_hx_index:0,time:time,__enum__:"bh.stateanim.AnimationCommand",toString:$estr}; },$_._hx_name="Delay",$_.__params__ = ["time"],$_)
	,SwitchState: ($_=function(name) { return {_hx_index:1,name:name,__enum__:"bh.stateanim.AnimationCommand",toString:$estr}; },$_._hx_name="SwitchState",$_.__params__ = ["name"],$_)
	,CommandEvent: ($_=function(event) { return {_hx_index:2,event:event,__enum__:"bh.stateanim.AnimationCommand",toString:$estr}; },$_._hx_name="CommandEvent",$_.__params__ = ["event"],$_)
	,Callback: ($_=function(callback) { return {_hx_index:3,callback:callback,__enum__:"bh.stateanim.AnimationCommand",toString:$estr}; },$_._hx_name="Callback",$_.__params__ = ["callback"],$_)
	,Visible: ($_=function(value) { return {_hx_index:4,value:value,__enum__:"bh.stateanim.AnimationCommand",toString:$estr}; },$_._hx_name="Visible",$_.__params__ = ["value"],$_)
};
bh_stateanim_AnimationCommand.__constructs__ = [bh_stateanim_AnimationCommand.Delay,bh_stateanim_AnimationCommand.SwitchState,bh_stateanim_AnimationCommand.CommandEvent,bh_stateanim_AnimationCommand.Callback,bh_stateanim_AnimationCommand.Visible];
bh_stateanim_AnimationCommand.__empty_constructs__ = [];
var bh_stateanim_AnimationFrame = function(tile,duration,offsetx,offsety,width,height) {
	this.tile = tile;
	this.duration = duration;
	this.offsetx = offsetx;
	this.offsety = offsety;
	this.width = width;
	this.height = height;
};
$hxClasses["bh.stateanim.AnimationFrame"] = bh_stateanim_AnimationFrame;
bh_stateanim_AnimationFrame.__name__ = "bh.stateanim.AnimationFrame";
bh_stateanim_AnimationFrame.prototype = {
	cloneWithDuration: function(newDuration) {
		return new bh_stateanim_AnimationFrame(this.tile,newDuration,this.offsetx,this.offsety,this.width,this.height);
	}
	,cloneWithNewTile: function(newTile) {
		return new bh_stateanim_AnimationFrame(newTile,this.duration,this.offsetx,this.offsety,this.width,this.height);
	}
	,__class__: bh_stateanim_AnimationFrame
};
var bh_stateanim_AnimationSM = function(selector,parent) {
	this.commands = new haxe_ds_List();
	this.animationStates = new haxe_ds_StringMap();
	this.playWhenHidden = false;
	this.speed = 1.0;
	this.paused = false;
	h2d_Drawable.call(this,parent);
	this.elapsedTime = 0;
	this.wait = 0;
	this.currentStateIndex = 0;
	this.currentSelector = selector;
};
$hxClasses["bh.stateanim.AnimationSM"] = bh_stateanim_AnimationSM;
bh_stateanim_AnimationSM.__name__ = "bh.stateanim.AnimationSM";
bh_stateanim_AnimationSM.__super__ = h2d_Drawable;
bh_stateanim_AnimationSM.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.currentFrame != null) {
			var y = -(this.currentFrame.height - this.currentFrame.tile.height) + this.currentFrame.offsety + this.currentFrame.tile.dy;
			this.addBounds(relativeTo,out,this.currentFrame.tile.dx - this.currentFrame.offsetx,y,this.currentFrame.width,this.currentFrame.height);
		}
	}
	,hasCommand: function() {
		if(this.wait <= 0) {
			var cmd = this.commands.first();
			if(cmd == null) {
				return false;
			} else if(cmd._hx_index == 0) {
				var time = cmd.time;
				this.wait += time;
				this.commands.pop();
				return false;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,clearCommands: function(executeEvents) {
		if(executeEvents == null) {
			executeEvents = true;
		}
		if(executeEvents) {
			var _g_head = this.commands.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var command = val;
				switch(command._hx_index) {
				case 0:
					var time = command.time;
					break;
				case 1:
					var name = command.name;
					break;
				case 2:
					var event = command.event;
					this.onCommandEvent(event);
					break;
				case 3:
					var callback = command.callback;
					callback();
					break;
				case 4:
					var value = command.value;
					break;
				}
			}
		}
		this.commands.clear();
		this.wait = 0;
		this.elapsedTime = 0;
	}
	,addCommand: function(command,trigger) {
		switch(trigger._hx_index) {
		case 0:
			this.commands.add(command);
			break;
		case 1:
			this.clearCommands(true);
			this.commands.add(command);
			break;
		case 2:
			this.clearCommands(false);
			this.commands.add(command);
			break;
		}
	}
	,executeCommand: function(cmd) {
		switch(cmd._hx_index) {
		case 0:
			var time = cmd.time;
			if(this.wait <= 0) {
				this.wait = time;
			} else {
				this.wait += time;
			}
			return time <= 0;
		case 1:
			var name = cmd.name;
			this.playAnim(name);
			return false;
		case 2:
			var event = cmd.event;
			this.onCommandEvent(event);
			return true;
		case 3:
			var callback = cmd.callback;
			callback();
			return true;
		case 4:
			var value = cmd.value;
			this.set_visible(value);
			return true;
		}
	}
	,addAnimationState: function(name,states,extraPoints) {
		if(Object.prototype.hasOwnProperty.call(this.animationStates.h,name)) {
			throw haxe_Exception.thrown("animation state " + name + " already exists");
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = states.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(-1);
		}
		var animDesc = { name : name, states : states, statesCounters : _g, extraPoints : extraPoints};
		this.animationStates.h[name] = animDesc;
	}
	,playAnim: function(name,atFrame) {
		var state = this.animationStates.h[name];
		if(state != null) {
			this.current = state;
			if(this.wait < 0) {
				this.wait = 0;
			}
			this.elapsedTime = 0;
			this.paused = false;
			this.currentStateIndex = 0;
			this.currentFrame = null;
			this.handleCurrent(1e-10);
		} else {
			throw haxe_Exception.thrown("unknown animation " + name);
		}
	}
	,isEnd: function() {
		if(this.current == null) {
			return false;
		}
		return this.currentStateIndex == this.current.states.length;
	}
	,handleCurrent: function(delta) {
		if(this.current == null) {
			this.performNextCommand();
		}
		if(this.current == null) {
			return;
		}
		if(this.paused || !this.visible && !this.playWhenHidden) {
			return;
		}
		this.elapsedTime += delta;
		this.wait -= delta < 0 ? 0 : delta;
		var statesCount = 0;
		while(true) {
			if(this.isEnd()) {
				if(this.hasCommand()) {
					this.performNextCommand();
				}
			}
			if(this.currentFrame != null && this.elapsedTime < this.currentFrame.duration) {
				return;
			}
			if(this.currentFrame != null && !this.isEnd()) {
				this.currentStateIndex++;
			}
			if(this.isEnd()) {
				if(this.hasCommand()) {
					this.performNextCommand();
				}
				return;
			}
			var currentState = this.current.states[this.currentStateIndex];
			++statesCount;
			if(statesCount > 50) {
				if(statesCount > 1000) {
					throw haxe_Exception.thrown("more than 1000 states, something is wrong.");
				} else {
					haxe_Log.trace("more than 50 state changes: " + statesCount,{ fileName : "bh/stateanim/AnimationSM.hx", lineNumber : 304, className : "bh.stateanim.AnimationSM", methodName : "handleCurrent"});
				}
			}
			switch(currentState._hx_index) {
			case 0:
				var frame = currentState.frame;
				if(this.currentFrame != null) {
					this.elapsedTime -= frame.duration;
				}
				this.currentFrame = frame;
				if(this.elapsedTime < frame.duration) {
					return;
				}
				break;
			case 1:
				var destIndex = currentState.destIndex;
				var condition = currentState.condition;
				switch(condition._hx_index) {
				case 0:
					this.currentStateIndex = destIndex - 1;
					break;
				case 1:
					var repeatCount = condition.repeatCount;
					var value = this.current.statesCounters[this.currentStateIndex];
					if(value == -1) {
						value = repeatCount;
					}
					if(value > 0) {
						this.current.statesCounters[this.currentStateIndex] = value - 1;
						this.currentStateIndex = destIndex - 1;
					} else {
						this.current.statesCounters[this.currentStateIndex] = repeatCount;
					}
					break;
				case 2:
					if(!this.hasCommand()) {
						this.currentStateIndex = destIndex - 1;
					}
					break;
				}
				break;
			case 2:
				var event = currentState.event;
				switch(event._hx_index) {
				case 0:
					var name = event.data;
					this.onAnimationEvent(bh_stateanim_AnimationEvent.TRIGGER(name));
					break;
				case 1:
					var name1 = event.name;
					var point = event.point;
					this.onAnimationEvent(bh_stateanim_AnimationEvent.POINT_EVENT(name1,point));
					break;
				case 2:
					var name2 = event.name;
					var point1 = event.point;
					var randomRadius = event.randomRadius;
					var randomAngle = Math.random() * 2 * Math.PI;
					var r = Math.random() * randomRadius;
					var randomPoint = new h2d_col_IPoint(point1.x,point1.y);
					randomPoint.x += r * Math.cos(randomAngle) | 0;
					randomPoint.y += r * Math.sin(randomAngle) | 0;
					this.onAnimationEvent(bh_stateanim_AnimationEvent.POINT_EVENT(name2,randomPoint));
					break;
				}
				break;
			case 3:
				var state = currentState.state;
				this.playAnim(state,0);
				return;
			case 4:
				if(this.hasCommand()) {
					this.performNextCommand();
					return;
				}
				break;
			}
		}
	}
	,sync: function(ctx) {
		var animDelta = ctx.elapsedTime * this.speed;
		this.handleCurrent(animDelta);
		h2d_Drawable.prototype.sync.call(this,ctx);
	}
	,draw: function(ctx) {
		if(this.currentFrame != null && this.currentFrame.tile != null) {
			this.emitTile(ctx,this.currentFrame.tile);
		}
	}
	,performNextCommand: function() {
		var readNext;
		do {
			var cmd = this.commands.pop();
			readNext = cmd != null && this.executeCommand(cmd);
		} while(readNext);
	}
	,onCommandEvent: function(event) {
	}
	,onAnimationEvent: function(event) {
	}
	,__class__: bh_stateanim_AnimationSM
});
var bh_stateanim_AnimationFrameState = $hxEnums["bh.stateanim.AnimationFrameState"] = { __ename__:true,__constructs__:null
	,AF_FRAME: ($_=function(frame) { return {_hx_index:0,frame:frame,__enum__:"bh.stateanim.AnimationFrameState",toString:$estr}; },$_._hx_name="AF_FRAME",$_.__params__ = ["frame"],$_)
	,AF_LOOP: ($_=function(destIndex,condition) { return {_hx_index:1,destIndex:destIndex,condition:condition,__enum__:"bh.stateanim.AnimationFrameState",toString:$estr}; },$_._hx_name="AF_LOOP",$_.__params__ = ["destIndex","condition"],$_)
	,AF_EVENT: ($_=function(event) { return {_hx_index:2,event:event,__enum__:"bh.stateanim.AnimationFrameState",toString:$estr}; },$_._hx_name="AF_EVENT",$_.__params__ = ["event"],$_)
	,AF_CHAGE_STATE: ($_=function(state) { return {_hx_index:3,state:state,__enum__:"bh.stateanim.AnimationFrameState",toString:$estr}; },$_._hx_name="AF_CHAGE_STATE",$_.__params__ = ["state"],$_)
	,AF_EXITPOINT: {_hx_name:"AF_EXITPOINT",_hx_index:4,__enum__:"bh.stateanim.AnimationFrameState",toString:$estr}
};
bh_stateanim_AnimationFrameState.__constructs__ = [bh_stateanim_AnimationFrameState.AF_FRAME,bh_stateanim_AnimationFrameState.AF_LOOP,bh_stateanim_AnimationFrameState.AF_EVENT,bh_stateanim_AnimationFrameState.AF_CHAGE_STATE,bh_stateanim_AnimationFrameState.AF_EXITPOINT];
bh_stateanim_AnimationFrameState.__empty_constructs__ = [bh_stateanim_AnimationFrameState.AF_EXITPOINT];
var bh_stateanim_AnimationFrameCondition = $hxEnums["bh.stateanim.AnimationFrameCondition"] = { __ename__:true,__constructs__:null
	,FOREVER: {_hx_name:"FOREVER",_hx_index:0,__enum__:"bh.stateanim.AnimationFrameCondition",toString:$estr}
	,AFC_COUNT: ($_=function(repeatCount) { return {_hx_index:1,repeatCount:repeatCount,__enum__:"bh.stateanim.AnimationFrameCondition",toString:$estr}; },$_._hx_name="AFC_COUNT",$_.__params__ = ["repeatCount"],$_)
	,AFC_UNTIL_COMMAND: {_hx_name:"AFC_UNTIL_COMMAND",_hx_index:2,__enum__:"bh.stateanim.AnimationFrameCondition",toString:$estr}
};
bh_stateanim_AnimationFrameCondition.__constructs__ = [bh_stateanim_AnimationFrameCondition.FOREVER,bh_stateanim_AnimationFrameCondition.AFC_COUNT,bh_stateanim_AnimationFrameCondition.AFC_UNTIL_COMMAND];
bh_stateanim_AnimationFrameCondition.__empty_constructs__ = [bh_stateanim_AnimationFrameCondition.FOREVER,bh_stateanim_AnimationFrameCondition.AFC_UNTIL_COMMAND];
var bh_ui_ControllerEventHandler = function(scene,$window,screenManager) {
	this.scene = scene;
	this.window = $window;
	this.screenManager = screenManager;
	$window.addEventTarget($bind(this,this.handleEvents));
};
$hxClasses["bh.ui.ControllerEventHandler"] = bh_ui_ControllerEventHandler;
bh_ui_ControllerEventHandler.__name__ = "bh.ui.ControllerEventHandler";
bh_ui_ControllerEventHandler.prototype = {
	handleEvents: function(event) {
		var x = this.scene.get_mouseX();
		var y = this.scene.get_mouseY();
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var mousePoint = new h2d_col_PointImpl(x,y);
		var eventWrapper = { sourceEvent : event, mousePoint : mousePoint, scene : this.scene};
		var _g = [];
		var x = $getIterator(this.screenManager.activeScreenControllers);
		while(x.hasNext()) {
			var x1 = x.next();
			_g.push(x1.getController());
		}
		var _g_current = 0;
		var _g_array = _g;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var stage = _g_key;
			var controller = _g_value;
			switch(event.kind._hx_index) {
			case 0:
				controller.handleClick(mousePoint,event.button,false,eventWrapper);
				break;
			case 1:
				controller.handleClick(mousePoint,event.button,true,eventWrapper);
				break;
			case 2:
				controller.handleMove(mousePoint,eventWrapper);
				break;
			case 5:
				controller.handleMouseWheel(mousePoint,event.wheelDelta,eventWrapper);
				break;
			case 8:
				controller.handleKey(event.keyCode,false,mousePoint,eventWrapper);
				break;
			case 9:
				controller.handleKey(event.keyCode,true,mousePoint,eventWrapper);
				break;
			default:
				controller.otherEvent(eventWrapper);
			}
		}
	}
	,__class__: bh_ui_ControllerEventHandler
};
var bh_ui_controllers_UIController = function() { };
$hxClasses["bh.ui.controllers.UIController"] = bh_ui_controllers_UIController;
bh_ui_controllers_UIController.__name__ = "bh.ui.controllers.UIController";
bh_ui_controllers_UIController.__isInterface__ = true;
bh_ui_controllers_UIController.prototype = {
	__class__: bh_ui_controllers_UIController
};
var bh_ui_controllers_UIControllerBase = function(integration) {
	this.exitResponse = null;
	this.currentOver = null;
	this.integration = integration;
	this.controllable = new bh_ui_controllers__$UIControllerBase_ControllableImpl(this);
};
$hxClasses["bh.ui.controllers.UIControllerBase"] = bh_ui_controllers_UIControllerBase;
bh_ui_controllers_UIControllerBase.__name__ = "bh.ui.controllers.UIControllerBase";
bh_ui_controllers_UIControllerBase.__interfaces__ = [bh_ui_controllers_UIController];
bh_ui_controllers_UIControllerBase.prototype = {
	handleEvent: function(element,event,eventPos,eventWrapper) {
		if(element == null) {
			return;
		}
		if(js_Boot.__implements(element,bh_ui_StandardUIElementEvents)) {
			var wrapper = { event : event, eventPos : eventPos, control : this.controllable};
			var draggable = this.controllable.draggable;
			(js_Boot.__cast(element , bh_ui_StandardUIElementEvents)).onEvent(wrapper);
			this.controllable.outsideClick.handle(element);
			if(draggable.start == false && draggable.stop == false) {
				return;
			}
			if(draggable.start && draggable.target == null) {
				draggable.target = element;
			} else if(draggable.stop && draggable.target != null) {
				draggable.target = null;
			} else {
				throw haxe_Exception.thrown("invalid drag state " + Std.string(draggable));
			}
			draggable.reset();
		} else {
			throw haxe_Exception.thrown("unsupported onEvent " + Std.string(element));
		}
	}
	,handleClick: function(mousePoint,button,release,eventWrapper) {
		var element = this.getEventElement(mousePoint);
		var triggered = this.controllable.outsideClick.getTriggered(element);
		var _g = 0;
		while(_g < triggered.length) {
			var value = triggered[_g];
			++_g;
			this.handleEvent(value,release ? bh_ui_UIElementEvents.OnReleaseOutside(button) : bh_ui_UIElementEvents.OnPushOutside(button),mousePoint,eventWrapper);
		}
		if(element == null) {
			return;
		}
		this.handleEvent(element,release ? bh_ui_UIElementEvents.OnRelease(button) : bh_ui_UIElementEvents.OnPush(button),mousePoint,eventWrapper);
	}
	,handleMouseWheel: function(mousePoint,wheelDelta,eventWrapper) {
		var element = this.getEventElement(mousePoint);
		if(element == null) {
			return;
		}
		this.handleEvent(element,bh_ui_UIElementEvents.OnWheel(wheelDelta),mousePoint,eventWrapper);
	}
	,handleMove: function(mousePoint,eventWrapper) {
		this.integration.onMouseMove(mousePoint);
		var element = this.getEventElement(mousePoint);
		if(element != null) {
			this.handleEvent(element,bh_ui_UIElementEvents.OnMouseMove,mousePoint,eventWrapper);
		}
		if(element == this.currentOver) {
			return;
		} else if(element == null && this.currentOver != null) {
			this.handleEvent(this.currentOver,bh_ui_UIElementEvents.OnLeave,mousePoint,eventWrapper);
			this.currentOver = null;
		} else if(element != null) {
			if(this.currentOver != null) {
				this.handleEvent(this.currentOver,bh_ui_UIElementEvents.OnLeave,mousePoint,eventWrapper);
			}
			this.handleEvent(element,bh_ui_UIElementEvents.OnEnter,mousePoint,eventWrapper);
			this.currentOver = element;
		}
	}
	,redrawAndUpdate: function(element,dt) {
		if(js_Boot.__implements(element,bh_ui_UIElementUpdatable)) {
			(js_Boot.__cast(element , bh_ui_UIElementUpdatable)).update(dt);
		}
		if(js_Boot.__implements(element,bh_ui_UIElementSyncRedraw)) {
			var redrawable = js_Boot.__cast(element , bh_ui_UIElementSyncRedraw);
			if(redrawable.requestRedraw) {
				redrawable.doRedraw();
			}
		}
	}
	,update: function(dt) {
		var _g = 0;
		var _g1 = this.integration.getElements(bh_ui_SubElementsType.SETReceiveUpdates);
		while(_g < _g1.length) {
			var element = _g1[_g];
			++_g;
			this.redrawAndUpdate(element,dt);
		}
		if(this.exitResponse != null) {
			var retVal = this.exitResponse;
			this.exitResponse = null;
			return bh_ui_controllers_UIControllerResult.UIControllerFinished(retVal);
		}
		return bh_ui_controllers_UIControllerResult.UIControllerRunning;
	}
	,lifecycleEvent: function(event) {
	}
	,handleKey: function(keyCode,release,mousePoint,eventWrapper) {
		var element = this.getEventElement(mousePoint);
		this.onScreenEvent(bh_ui_UIScreenEvent.UIKeyPress(keyCode,release),null);
		if(element == null) {
			return;
		}
		this.handleEvent(element,bh_ui_UIElementEvents.OnKey(keyCode,release),mousePoint,eventWrapper);
	}
	,otherEvent: function(sourceEvent) {
	}
	,onScreenEvent: function(event,source) {
		this.integration.onScreenEvent(event,source);
	}
	,__class__: bh_ui_controllers_UIControllerBase
};
var bh_ui_DefaultUIController = function(integration) {
	bh_ui_controllers_UIControllerBase.call(this,integration);
};
$hxClasses["bh.ui.DefaultUIController"] = bh_ui_DefaultUIController;
bh_ui_DefaultUIController.__name__ = "bh.ui.DefaultUIController";
bh_ui_DefaultUIController.__super__ = bh_ui_controllers_UIControllerBase;
bh_ui_DefaultUIController.prototype = $extend(bh_ui_controllers_UIControllerBase.prototype,{
	getEventElement: function(pos) {
		if(this.controllable.draggable.target != null) {
			return this.controllable.draggable.target;
		}
		var _g = 0;
		var _g1 = this.integration.getElements(bh_ui_SubElementsType.SETReceiveEvents);
		while(_g < _g1.length) {
			var element = _g1[_g];
			++_g;
			if(element.containsPoint(pos)) {
				return element;
			}
		}
		return null;
	}
	,__class__: bh_ui_DefaultUIController
});
var bh_ui_UIElementItemBuilder = function() { };
$hxClasses["bh.ui.UIElementItemBuilder"] = bh_ui_UIElementItemBuilder;
bh_ui_UIElementItemBuilder.__name__ = "bh.ui.UIElementItemBuilder";
bh_ui_UIElementItemBuilder.__isInterface__ = true;
bh_ui_UIElementItemBuilder.prototype = {
	__class__: bh_ui_UIElementItemBuilder
};
var bh_ui_DefaultUIElementItemBuilder = function(builder,name) {
	this.builder = builder;
	this.name = name;
};
$hxClasses["bh.ui.DefaultUIElementItemBuilder"] = bh_ui_DefaultUIElementItemBuilder;
bh_ui_DefaultUIElementItemBuilder.__name__ = "bh.ui.DefaultUIElementItemBuilder";
bh_ui_DefaultUIElementItemBuilder.__interfaces__ = [bh_ui_UIElementItemBuilder];
bh_ui_DefaultUIElementItemBuilder.create = function(builder,name) {
	return new bh_ui_DefaultUIElementItemBuilder(builder,name);
};
bh_ui_DefaultUIElementItemBuilder.prototype = {
	buildItem: function(index,item,itemWidth,itemHeight) {
		var tmp = this.builder;
		var tmp1 = this.name;
		var _g = new haxe_ds_StringMap();
		_g.h["itemWidth"] = itemWidth;
		_g.h["index"] = index;
		_g.h["title"] = item.name;
		_g.h["tile"] = item.tileName;
		return tmp.buildWithComboParameters(tmp1,_g,["status","selected","disabled"],this.builderParams);
	}
	,__class__: bh_ui_DefaultUIElementItemBuilder
};
var bh_ui_StandardUIElementStates = $hxEnums["bh.ui.StandardUIElementStates"] = { __ename__:true,__constructs__:null
	,SUIPressed: {_hx_name:"SUIPressed",_hx_index:0,__enum__:"bh.ui.StandardUIElementStates",toString:$estr}
	,SUIHover: {_hx_name:"SUIHover",_hx_index:1,__enum__:"bh.ui.StandardUIElementStates",toString:$estr}
	,SUINormal: {_hx_name:"SUINormal",_hx_index:2,__enum__:"bh.ui.StandardUIElementStates",toString:$estr}
};
bh_ui_StandardUIElementStates.__constructs__ = [bh_ui_StandardUIElementStates.SUIPressed,bh_ui_StandardUIElementStates.SUIHover,bh_ui_StandardUIElementStates.SUINormal];
bh_ui_StandardUIElementStates.__empty_constructs__ = [bh_ui_StandardUIElementStates.SUIPressed,bh_ui_StandardUIElementStates.SUIHover,bh_ui_StandardUIElementStates.SUINormal];
var bh_ui_UIElement = function() { };
$hxClasses["bh.ui.UIElement"] = bh_ui_UIElement;
bh_ui_UIElement.__name__ = "bh.ui.UIElement";
bh_ui_UIElement.__isInterface__ = true;
bh_ui_UIElement.prototype = {
	__class__: bh_ui_UIElement
};
var bh_ui_UIElementNumberValue = function() { };
$hxClasses["bh.ui.UIElementNumberValue"] = bh_ui_UIElementNumberValue;
bh_ui_UIElementNumberValue.__name__ = "bh.ui.UIElementNumberValue";
bh_ui_UIElementNumberValue.__isInterface__ = true;
var bh_ui_UIElementListValue = function() { };
$hxClasses["bh.ui.UIElementListValue"] = bh_ui_UIElementListValue;
bh_ui_UIElementListValue.__name__ = "bh.ui.UIElementListValue";
bh_ui_UIElementListValue.__isInterface__ = true;
var bh_ui_Controllable = function() { };
$hxClasses["bh.ui.Controllable"] = bh_ui_Controllable;
bh_ui_Controllable.__name__ = "bh.ui.Controllable";
bh_ui_Controllable.__isInterface__ = true;
bh_ui_Controllable.prototype = {
	__class__: bh_ui_Controllable
};
var bh_ui_DraggableControl = function() { };
$hxClasses["bh.ui.DraggableControl"] = bh_ui_DraggableControl;
bh_ui_DraggableControl.__name__ = "bh.ui.DraggableControl";
bh_ui_DraggableControl.__isInterface__ = true;
bh_ui_DraggableControl.prototype = {
	__class__: bh_ui_DraggableControl
};
var bh_ui_OutsideClickControl = function() { };
$hxClasses["bh.ui.OutsideClickControl"] = bh_ui_OutsideClickControl;
bh_ui_OutsideClickControl.__name__ = "bh.ui.OutsideClickControl";
bh_ui_OutsideClickControl.__isInterface__ = true;
bh_ui_OutsideClickControl.prototype = {
	__class__: bh_ui_OutsideClickControl
};
var bh_ui_UIElementEvents = $hxEnums["bh.ui.UIElementEvents"] = { __ename__:true,__constructs__:null
	,OnPush: ($_=function(button) { return {_hx_index:0,button:button,__enum__:"bh.ui.UIElementEvents",toString:$estr}; },$_._hx_name="OnPush",$_.__params__ = ["button"],$_)
	,OnRelease: ($_=function(button) { return {_hx_index:1,button:button,__enum__:"bh.ui.UIElementEvents",toString:$estr}; },$_._hx_name="OnRelease",$_.__params__ = ["button"],$_)
	,OnPushOutside: ($_=function(button) { return {_hx_index:2,button:button,__enum__:"bh.ui.UIElementEvents",toString:$estr}; },$_._hx_name="OnPushOutside",$_.__params__ = ["button"],$_)
	,OnReleaseOutside: ($_=function(button) { return {_hx_index:3,button:button,__enum__:"bh.ui.UIElementEvents",toString:$estr}; },$_._hx_name="OnReleaseOutside",$_.__params__ = ["button"],$_)
	,OnEnter: {_hx_name:"OnEnter",_hx_index:4,__enum__:"bh.ui.UIElementEvents",toString:$estr}
	,OnLeave: {_hx_name:"OnLeave",_hx_index:5,__enum__:"bh.ui.UIElementEvents",toString:$estr}
	,OnKey: ($_=function(keyCode,release) { return {_hx_index:6,keyCode:keyCode,release:release,__enum__:"bh.ui.UIElementEvents",toString:$estr}; },$_._hx_name="OnKey",$_.__params__ = ["keyCode","release"],$_)
	,OnWheel: ($_=function(wheelDelta) { return {_hx_index:7,wheelDelta:wheelDelta,__enum__:"bh.ui.UIElementEvents",toString:$estr}; },$_._hx_name="OnWheel",$_.__params__ = ["wheelDelta"],$_)
	,OnMouseMove: {_hx_name:"OnMouseMove",_hx_index:8,__enum__:"bh.ui.UIElementEvents",toString:$estr}
};
bh_ui_UIElementEvents.__constructs__ = [bh_ui_UIElementEvents.OnPush,bh_ui_UIElementEvents.OnRelease,bh_ui_UIElementEvents.OnPushOutside,bh_ui_UIElementEvents.OnReleaseOutside,bh_ui_UIElementEvents.OnEnter,bh_ui_UIElementEvents.OnLeave,bh_ui_UIElementEvents.OnKey,bh_ui_UIElementEvents.OnWheel,bh_ui_UIElementEvents.OnMouseMove];
bh_ui_UIElementEvents.__empty_constructs__ = [bh_ui_UIElementEvents.OnEnter,bh_ui_UIElementEvents.OnLeave,bh_ui_UIElementEvents.OnMouseMove];
var bh_ui_StandardUIElementEvents = function() { };
$hxClasses["bh.ui.StandardUIElementEvents"] = bh_ui_StandardUIElementEvents;
bh_ui_StandardUIElementEvents.__name__ = "bh.ui.StandardUIElementEvents";
bh_ui_StandardUIElementEvents.__isInterface__ = true;
bh_ui_StandardUIElementEvents.prototype = {
	__class__: bh_ui_StandardUIElementEvents
};
var bh_ui_ControllerEvents = $hxEnums["bh.ui.ControllerEvents"] = { __ename__:true,__constructs__:null
	,Leaving: {_hx_name:"Leaving",_hx_index:0,__enum__:"bh.ui.ControllerEvents",toString:$estr}
	,Entering: {_hx_name:"Entering",_hx_index:1,__enum__:"bh.ui.ControllerEvents",toString:$estr}
	,OnDialogResult: ($_=function(dialogName,result) { return {_hx_index:2,dialogName:dialogName,result:result,__enum__:"bh.ui.ControllerEvents",toString:$estr}; },$_._hx_name="OnDialogResult",$_.__params__ = ["dialogName","result"],$_)
};
bh_ui_ControllerEvents.__constructs__ = [bh_ui_ControllerEvents.Leaving,bh_ui_ControllerEvents.Entering,bh_ui_ControllerEvents.OnDialogResult];
bh_ui_ControllerEvents.__empty_constructs__ = [bh_ui_ControllerEvents.Leaving,bh_ui_ControllerEvents.Entering];
var bh_ui_UIScreenEvent = $hxEnums["bh.ui.UIScreenEvent"] = { __ename__:true,__constructs__:null
	,UIClick: {_hx_name:"UIClick",_hx_index:0,__enum__:"bh.ui.UIScreenEvent",toString:$estr}
	,UICustomEvent: ($_=function(eventName,data) { return {_hx_index:1,eventName:eventName,data:data,__enum__:"bh.ui.UIScreenEvent",toString:$estr}; },$_._hx_name="UICustomEvent",$_.__params__ = ["eventName","data"],$_)
	,UIToggle: ($_=function(pressed) { return {_hx_index:2,pressed:pressed,__enum__:"bh.ui.UIScreenEvent",toString:$estr}; },$_._hx_name="UIToggle",$_.__params__ = ["pressed"],$_)
	,UIChangeValue: ($_=function(value) { return {_hx_index:3,value:value,__enum__:"bh.ui.UIScreenEvent",toString:$estr}; },$_._hx_name="UIChangeValue",$_.__params__ = ["value"],$_)
	,UIChangeItem: ($_=function(index,items) { return {_hx_index:4,index:index,items:items,__enum__:"bh.ui.UIScreenEvent",toString:$estr}; },$_._hx_name="UIChangeItem",$_.__params__ = ["index","items"],$_)
	,UIKeyPress: ($_=function(keyCode,release) { return {_hx_index:5,keyCode:keyCode,release:release,__enum__:"bh.ui.UIScreenEvent",toString:$estr}; },$_._hx_name="UIKeyPress",$_.__params__ = ["keyCode","release"],$_)
	,UIOnControllerEvent: ($_=function(event) { return {_hx_index:6,event:event,__enum__:"bh.ui.UIScreenEvent",toString:$estr}; },$_._hx_name="UIOnControllerEvent",$_.__params__ = ["event"],$_)
};
bh_ui_UIScreenEvent.__constructs__ = [bh_ui_UIScreenEvent.UIClick,bh_ui_UIScreenEvent.UICustomEvent,bh_ui_UIScreenEvent.UIToggle,bh_ui_UIScreenEvent.UIChangeValue,bh_ui_UIScreenEvent.UIChangeItem,bh_ui_UIScreenEvent.UIKeyPress,bh_ui_UIScreenEvent.UIOnControllerEvent];
bh_ui_UIScreenEvent.__empty_constructs__ = [bh_ui_UIScreenEvent.UIClick];
var bh_ui_UIElementDisablable = function() { };
$hxClasses["bh.ui.UIElementDisablable"] = bh_ui_UIElementDisablable;
bh_ui_UIElementDisablable.__name__ = "bh.ui.UIElementDisablable";
bh_ui_UIElementDisablable.__isInterface__ = true;
var bh_ui_UIElementSelectable = function() { };
$hxClasses["bh.ui.UIElementSelectable"] = bh_ui_UIElementSelectable;
bh_ui_UIElementSelectable.__name__ = "bh.ui.UIElementSelectable";
bh_ui_UIElementSelectable.__isInterface__ = true;
var bh_ui_UIElementUpdatable = function() { };
$hxClasses["bh.ui.UIElementUpdatable"] = bh_ui_UIElementUpdatable;
bh_ui_UIElementUpdatable.__name__ = "bh.ui.UIElementUpdatable";
bh_ui_UIElementUpdatable.__isInterface__ = true;
bh_ui_UIElementUpdatable.prototype = {
	__class__: bh_ui_UIElementUpdatable
};
var bh_ui_UIElementSyncRedraw = function() { };
$hxClasses["bh.ui.UIElementSyncRedraw"] = bh_ui_UIElementSyncRedraw;
bh_ui_UIElementSyncRedraw.__name__ = "bh.ui.UIElementSyncRedraw";
bh_ui_UIElementSyncRedraw.__isInterface__ = true;
bh_ui_UIElementSyncRedraw.prototype = {
	__class__: bh_ui_UIElementSyncRedraw
};
var bh_ui_UIElementCustomAddToLayerResult = $hxEnums["bh.ui.UIElementCustomAddToLayerResult"] = { __ename__:true,__constructs__:null
	,Added: {_hx_name:"Added",_hx_index:0,__enum__:"bh.ui.UIElementCustomAddToLayerResult",toString:$estr}
	,Postponed: {_hx_name:"Postponed",_hx_index:1,__enum__:"bh.ui.UIElementCustomAddToLayerResult",toString:$estr}
};
bh_ui_UIElementCustomAddToLayerResult.__constructs__ = [bh_ui_UIElementCustomAddToLayerResult.Added,bh_ui_UIElementCustomAddToLayerResult.Postponed];
bh_ui_UIElementCustomAddToLayerResult.__empty_constructs__ = [bh_ui_UIElementCustomAddToLayerResult.Added,bh_ui_UIElementCustomAddToLayerResult.Postponed];
var bh_ui_UIElementCustomAddToLayer = function() { };
$hxClasses["bh.ui.UIElementCustomAddToLayer"] = bh_ui_UIElementCustomAddToLayer;
bh_ui_UIElementCustomAddToLayer.__name__ = "bh.ui.UIElementCustomAddToLayer";
bh_ui_UIElementCustomAddToLayer.__isInterface__ = true;
bh_ui_UIElementCustomAddToLayer.prototype = {
	__class__: bh_ui_UIElementCustomAddToLayer
};
var bh_ui_SubElementsType = $hxEnums["bh.ui.SubElementsType"] = { __ename__:true,__constructs__:null
	,SETReceiveUpdates: {_hx_name:"SETReceiveUpdates",_hx_index:0,__enum__:"bh.ui.SubElementsType",toString:$estr}
	,SETReceiveEvents: {_hx_name:"SETReceiveEvents",_hx_index:1,__enum__:"bh.ui.SubElementsType",toString:$estr}
};
bh_ui_SubElementsType.__constructs__ = [bh_ui_SubElementsType.SETReceiveUpdates,bh_ui_SubElementsType.SETReceiveEvents];
bh_ui_SubElementsType.__empty_constructs__ = [bh_ui_SubElementsType.SETReceiveUpdates,bh_ui_SubElementsType.SETReceiveEvents];
var bh_ui_UIElementSubElements = function() { };
$hxClasses["bh.ui.UIElementSubElements"] = bh_ui_UIElementSubElements;
bh_ui_UIElementSubElements.__name__ = "bh.ui.UIElementSubElements";
bh_ui_UIElementSubElements.__isInterface__ = true;
bh_ui_UIElementSubElements.prototype = {
	__class__: bh_ui_UIElementSubElements
};
var bh_ui_UIElementContainer = function(element,object) {
	this.element = element;
	this.object = object;
};
$hxClasses["bh.ui.UIElementContainer"] = bh_ui_UIElementContainer;
bh_ui_UIElementContainer.__name__ = "bh.ui.UIElementContainer";
bh_ui_UIElementContainer.__interfaces__ = [bh_ui_UIElement];
bh_ui_UIElementContainer.prototype = {
	getObject: function() {
		return this.object;
	}
	,containsPoint: function(pos) {
		return false;
	}
	,clear: function() {
	}
	,__class__: bh_ui_UIElementContainer
};
function bh_ui_UIElement_standardUIElementStatusToString(status) {
	switch(status._hx_index) {
	case 0:
		return "pressed";
	case 1:
		return "hover";
	case 2:
		return "normal";
	}
}
var bh_ui_UIStandardMultiAnimButton = function(builder,name,buttonText) {
	this.requestRedraw = true;
	this.disabled = false;
	this.status = bh_ui_StandardUIElementStates.SUINormal;
	var _g = new haxe_ds_StringMap();
	_g.h["buttonText"] = buttonText;
	this.multiResult = builder.buildWithComboParameters(name,_g,["status","disabled"]);
	this.root = new h2d_Object();
};
$hxClasses["bh.ui.UIStandardMultiAnimButton"] = bh_ui_UIStandardMultiAnimButton;
bh_ui_UIStandardMultiAnimButton.__name__ = "bh.ui.UIStandardMultiAnimButton";
bh_ui_UIStandardMultiAnimButton.__interfaces__ = [bh_ui_UIElementSyncRedraw,bh_ui_StandardUIElementEvents,bh_ui_UIElementDisablable,bh_ui_UIElement];
bh_ui_UIStandardMultiAnimButton.create = function(builder,name,buttonText) {
	return new bh_ui_UIStandardMultiAnimButton(builder,name,buttonText);
};
bh_ui_UIStandardMultiAnimButton.prototype = {
	clear: function() {
		this.currentButtonObject = null;
	}
	,set_status: function(value) {
		if(this.status != value) {
			this.status = value;
			this.requestRedraw = true;
		}
		return value;
	}
	,set_disabled: function(value) {
		if(this.disabled != value) {
			this.disabled = value;
			this.requestRedraw = true;
		}
		return value;
	}
	,getObject: function() {
		return this.root;
	}
	,containsPoint: function(pos) {
		var _this = this.getObject().getBounds();
		if(pos.x >= _this.xMin && pos.x < _this.xMax && pos.y >= _this.yMin) {
			return pos.y < _this.yMax;
		} else {
			return false;
		}
	}
	,onEvent: function(wrapper) {
		if(this.disabled) {
			return;
		}
		var _g = wrapper.event;
		switch(_g._hx_index) {
		case 0:
			var button = _g.button;
			this.set_status(bh_ui_StandardUIElementStates.SUIPressed);
			break;
		case 1:
			var button = _g.button;
			this.triggerClicked(wrapper.control);
			this.set_status(bh_ui_StandardUIElementStates.SUINormal);
			break;
		case 2:
			var _g1 = _g.button;
			break;
		case 3:
			var _g1 = _g.button;
			break;
		case 4:
			this.set_status(bh_ui_StandardUIElementStates.SUIHover);
			break;
		case 5:
			this.set_status(bh_ui_StandardUIElementStates.SUINormal);
			break;
		case 6:
			var up = _g.keyCode;
			var key = _g.release;
			break;
		case 7:
			var dir = _g.wheelDelta;
			break;
		case 8:
			break;
		}
	}
	,triggerClicked: function(controllable) {
		this.onClick();
		controllable.pushEvent(bh_ui_UIScreenEvent.UIClick,this);
	}
	,onClick: function() {
	}
	,doRedraw: function() {
		this.requestRedraw = false;
		if(this.currentButtonObject != null) {
			var _this = this.currentButtonObject;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		var result = this.multiResult.findResultByCombo(bh_ui_UIElement_standardUIElementStatusToString(this.status),"" + Std.string(this.disabled));
		this.currentButtonObject = result.object;
		this.root.addChild(result.object);
	}
	,__class__: bh_ui_UIStandardMultiAnimButton
};
var bh_ui_UIStandardMultiCheckbox = function(builder,name,startsChecked) {
	this.ignoreSelectEvents = false;
	this.requestRedraw = true;
	this.selected = false;
	this.disabled = false;
	this.status = bh_ui_StandardUIElementStates.SUINormal;
	this.root = new h2d_Object();
	this.multiResult = builder.buildWithComboParameters(name,new haxe_ds_StringMap(),["status","disabled","checked"]);
	this.set_selected(startsChecked);
};
$hxClasses["bh.ui.UIStandardMultiCheckbox"] = bh_ui_UIStandardMultiCheckbox;
bh_ui_UIStandardMultiCheckbox.__name__ = "bh.ui.UIStandardMultiCheckbox";
bh_ui_UIStandardMultiCheckbox.__interfaces__ = [bh_ui_UIElementSyncRedraw,bh_ui_UIElementNumberValue,bh_ui_StandardUIElementEvents,bh_ui_UIElementSelectable,bh_ui_UIElementDisablable,bh_ui_UIElement];
bh_ui_UIStandardMultiCheckbox.create = function(builder,name,checked) {
	return new bh_ui_UIStandardMultiCheckbox(builder,name,checked);
};
bh_ui_UIStandardMultiCheckbox.prototype = {
	clear: function() {
		this.checkboxObject = null;
	}
	,set_status: function(value) {
		if(this.status != value) {
			this.status = value;
			this.requestRedraw = true;
		}
		return value;
	}
	,set_disabled: function(value) {
		if(this.disabled != value) {
			this.disabled = value;
			this.requestRedraw = true;
		}
		return value;
	}
	,set_selected: function(value) {
		if(this.selected != value) {
			this.selected = value;
			this.requestRedraw = true;
		}
		return value;
	}
	,doRedraw: function() {
		this.requestRedraw = false;
		if(this.checkboxObject != null) {
			var _this = this.checkboxObject;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		var result = this.multiResult.findResultByCombo(bh_ui_UIElement_standardUIElementStatusToString(this.status),"" + Std.string(this.disabled),"" + Std.string(this.selected));
		this.checkboxObject = result.object;
		this.root.addChild(result.object);
	}
	,getObject: function() {
		return this.root;
	}
	,containsPoint: function(pos) {
		var _this = this.getObject().getBounds();
		if(pos.x >= _this.xMin && pos.x < _this.xMax && pos.y >= _this.yMin) {
			return pos.y < _this.yMax;
		} else {
			return false;
		}
	}
	,onEvent: function(wrapper) {
		if(this.disabled) {
			return;
		}
		var _g = wrapper.event;
		switch(_g._hx_index) {
		case 0:
			var button = _g.button;
			if(!this.ignoreSelectEvents) {
				this.set_selected(!this.selected);
				this.set_status(bh_ui_StandardUIElementStates.SUIPressed);
				this.triggerToggle(this.selected,wrapper.control);
			}
			break;
		case 1:
			var button = _g.button;
			this.set_status(bh_ui_StandardUIElementStates.SUINormal);
			break;
		case 2:
			var _g1 = _g.button;
			break;
		case 3:
			var _g1 = _g.button;
			break;
		case 4:
			this.set_status(bh_ui_StandardUIElementStates.SUIHover);
			break;
		case 5:
			this.set_status(bh_ui_StandardUIElementStates.SUINormal);
			break;
		case 6:
			var up = _g.keyCode;
			var key = _g.release;
			break;
		case 7:
			var dir = _g.wheelDelta;
			break;
		case 8:
			break;
		}
	}
	,triggerToggle: function(checked,controllable) {
		this.onToggle(checked);
		this.onInternalToggle(checked,controllable);
		controllable.pushEvent(bh_ui_UIScreenEvent.UIToggle(checked),this);
	}
	,onToggle: function(checked) {
	}
	,onInternalToggle: function(checked,controllable) {
	}
	,__class__: bh_ui_UIStandardMultiCheckbox
};
var bh_ui__$UIMultiAnimDropdown_AnimState = $hxEnums["bh.ui._UIMultiAnimDropdown.AnimState"] = { __ename__:true,__constructs__:null
	,Opening: {_hx_name:"Opening",_hx_index:0,__enum__:"bh.ui._UIMultiAnimDropdown.AnimState",toString:$estr}
	,Closing: {_hx_name:"Closing",_hx_index:1,__enum__:"bh.ui._UIMultiAnimDropdown.AnimState",toString:$estr}
	,Open: {_hx_name:"Open",_hx_index:2,__enum__:"bh.ui._UIMultiAnimDropdown.AnimState",toString:$estr}
	,Closed: {_hx_name:"Closed",_hx_index:3,__enum__:"bh.ui._UIMultiAnimDropdown.AnimState",toString:$estr}
};
bh_ui__$UIMultiAnimDropdown_AnimState.__constructs__ = [bh_ui__$UIMultiAnimDropdown_AnimState.Opening,bh_ui__$UIMultiAnimDropdown_AnimState.Closing,bh_ui__$UIMultiAnimDropdown_AnimState.Open,bh_ui__$UIMultiAnimDropdown_AnimState.Closed];
bh_ui__$UIMultiAnimDropdown_AnimState.__empty_constructs__ = [bh_ui__$UIMultiAnimDropdown_AnimState.Opening,bh_ui__$UIMultiAnimDropdown_AnimState.Closing,bh_ui__$UIMultiAnimDropdown_AnimState.Open,bh_ui__$UIMultiAnimDropdown_AnimState.Closed];
var bh_ui_UIStandardMultiAnimDropdown = function(builder,name,builtPanel,items,initialIndex) {
	if(initialIndex == null) {
		initialIndex = 0;
	}
	this.closeOnOutsideClick = true;
	this.autoCloseOnLeave = true;
	this.autoOpen = true;
	this.currentItemIndex = 0;
	this.items = [];
	this.disabled = false;
	this.transitionTimer = 1.0;
	this.requestRedraw = true;
	this.timerTotal = 0;
	this.timer = 0;
	this.panelStatus = bh_ui__$UIMultiAnimDropdown_AnimState.Closed;
	this.currentMainPart = null;
	this.status = bh_ui_StandardUIElementStates.SUINormal;
	this.builder = builder;
	this.name = name;
	this.root = new h2d_Object();
	this.items = items;
	this.mainPartImages = builder.buildWithComboParameters(name,new haxe_ds_StringMap(),["status","panel"],{ callback : $bind(this,this.callback)});
	if(this.mainPartImages == null) {
		throw haxe_Exception.thrown("could not build combo #" + name);
	}
	this.panelStatus = bh_ui__$UIMultiAnimDropdown_AnimState.Closed;
	this.panel = builtPanel;
	this.panelObject = this.panel.getObject();
	this.panelObject.set_visible(false);
	this.panel.onItemChanged = $bind(this,this.onPanelItemChanged);
	this.set_currentItemIndex(initialIndex);
};
$hxClasses["bh.ui.UIStandardMultiAnimDropdown"] = bh_ui_UIStandardMultiAnimDropdown;
bh_ui_UIStandardMultiAnimDropdown.__name__ = "bh.ui.UIStandardMultiAnimDropdown";
bh_ui_UIStandardMultiAnimDropdown.__interfaces__ = [bh_ui_UIElementCustomAddToLayer,bh_ui_UIElementSubElements,bh_ui_UIElementListValue,bh_ui_UIElementSyncRedraw,bh_ui_StandardUIElementEvents,bh_ui_UIElementUpdatable,bh_ui_UIElementDisablable,bh_ui_UIElement];
bh_ui_UIStandardMultiAnimDropdown.createWithPrebuiltPanel = function(builder,dropdownName,panel,items,initialIndex) {
	if(initialIndex == null) {
		initialIndex = 0;
	}
	return new bh_ui_UIStandardMultiAnimDropdown(builder,dropdownName,panel,items,panel.currentItemIndex);
};
bh_ui_UIStandardMultiAnimDropdown.create = function(builder,dropdownName,panelName,panelListItemName,items,initialIndex) {
	if(initialIndex == null) {
		initialIndex = 0;
	}
	var panel = bh_ui_UIStandardMultiAnimDropdown.buildPanel(builder,panelName,panelListItemName,items,initialIndex);
	return new bh_ui_UIStandardMultiAnimDropdown(builder,dropdownName,panel,items,initialIndex);
};
bh_ui_UIStandardMultiAnimDropdown.buildPanel = function(builder,panelName,panelListItemName,items,initialIndex) {
	return bh_ui_UIMultiAnimScrollableList.create(builder,bh_ui_DefaultUIElementItemBuilder.create(builder,panelListItemName),panelName,120,300,items,0,initialIndex);
};
bh_ui_UIStandardMultiAnimDropdown.prototype = {
	clear: function() {
		this.items = [];
		this.currentMainPart = null;
	}
	,set_currentItemIndex: function(value) {
		if(value < 0 || value >= this.items.length) {
			throw haxe_Exception.thrown("currentItemIndex " + value + " is out of bounds [0.." + this.items.length + "].");
		}
		if(this.currentItemIndex != value) {
			this.currentItemIndex = value;
			this.requestRedraw = true;
			this.mainPartImages.updateAllText("selectedName",this.items[this.currentItemIndex].name);
		}
		return value;
	}
	,isOpen: function() {
		switch(this.panelStatus._hx_index) {
		case 0:case 2:
			return true;
		case 1:case 3:
			return false;
		}
	}
	,callback: function(input) {
		switch(input._hx_index) {
		case 0:
			var name = input.name;
			if(name == "selectedName") {
				return bh_multianim_CallbackResult.CBRString(this.items[this.currentItemIndex].name);
			} else {
				throw haxe_Exception.thrown("unexpected name " + name);
			}
			break;
		case 1:
			var name = input.name;
			var index = input.index;
			if(name == "itemName") {
				return bh_multianim_CallbackResult.CBRString(this.items[index].name);
			} else {
				throw haxe_Exception.thrown("unexpected name " + name);
			}
			break;
		case 2:
			var name = input.name;
			break;
		case 3:
			var name = input.name;
			var index = input.index;
			break;
		}
		return bh_multianim_CallbackResult.CBRNoResult;
	}
	,onPanelItemChanged: function(newIndex,items,wrapper) {
		if(this.currentItemIndex != newIndex) {
			this.set_currentItemIndex(newIndex);
			this.triggerItemChanged(newIndex,wrapper.control);
			if(this.isOpen()) {
				this.startClose();
			}
		}
	}
	,getObject: function() {
		return this.root;
	}
	,containsPoint: function(pos) {
		var _this = this.getObject().getBounds();
		if(!(pos.x >= _this.xMin && pos.x < _this.xMax && pos.y >= _this.yMin && pos.y < _this.yMax)) {
			if(this.isOpen()) {
				return this.panel.containsPoint(pos);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,onEvent: function(wrapper) {
		if(this.disabled) {
			return;
		}
		var tmp;
		if(this.isOpen()) {
			var _this = this.panelObject.getBounds();
			var p = wrapper.eventPos;
			tmp = p.x >= _this.xMin && p.x < _this.xMax && p.y >= _this.yMin && p.y < _this.yMax;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.panel.onEvent(wrapper);
			return;
		}
		var _g = wrapper.event;
		switch(_g._hx_index) {
		case 0:
			var button = _g.button;
			this.set_status(bh_ui_StandardUIElementStates.SUIPressed);
			break;
		case 1:
			var button = _g.button;
			this.set_status(bh_ui_StandardUIElementStates.SUINormal);
			if(!this.isOpen()) {
				this.startOpen();
			} else {
				this.startClose();
			}
			break;
		case 2:
			var _g1 = _g.button;
			this.set_status(bh_ui_StandardUIElementStates.SUINormal);
			if(this.closeOnOutsideClick && this.isOpen()) {
				this.startClose();
			}
			break;
		case 3:
			var _g1 = _g.button;
			this.set_status(bh_ui_StandardUIElementStates.SUINormal);
			if(this.closeOnOutsideClick && this.isOpen()) {
				this.startClose();
			}
			break;
		case 4:
			if(this.autoOpen && !this.isOpen()) {
				this.startOpen();
				if(this.closeOnOutsideClick) {
					wrapper.control.outsideClick.trackOutsideClick(true);
				}
			}
			this.set_status(bh_ui_StandardUIElementStates.SUIHover);
			break;
		case 5:
			if(this.autoCloseOnLeave && this.isOpen()) {
				this.startClose();
			}
			this.set_status(bh_ui_StandardUIElementStates.SUINormal);
			break;
		case 6:
			var up = _g.keyCode;
			var key = _g.release;
			break;
		case 7:
			var dir = _g.wheelDelta;
			break;
		case 8:
			if(!this.isOpen()) {
				return;
			}
			break;
		}
	}
	,doRedraw: function() {
		this.requestRedraw = false;
		if(this.currentMainPart != null) {
			var _this = this.currentMainPart;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		var pStatus;
		switch(this.panelStatus._hx_index) {
		case 0:
			pStatus = "open";
			break;
		case 1:
			pStatus = "closed";
			break;
		case 2:
			pStatus = "open";
			break;
		case 3:
			pStatus = "closed";
			break;
		}
		var currentResult = this.mainPartImages.findResultByCombo(bh_ui_UIElement_standardUIElementStatusToString(this.status),pStatus);
		var updatable = currentResult.getUpdatable("panelPoint");
		this.transitionTimer = currentResult.rootSettings.getFloatOrDefault("transitionTimer",1.0);
		this.currentMainPart = currentResult.object;
		this.root.addChild(this.currentMainPart);
		if(this.panelObject != null) {
			updatable.setObject(new bh_base_PositionLinkObject(this.panelObject));
		}
	}
	,set_status: function(value) {
		this.status = value;
		this.requestRedraw = true;
		return value;
	}
	,startOpen: function() {
		if(this.panelObject == null) {
			return;
		}
		this.panel.set_currentHoverIndex(-1);
		this.panel.set_currentItemIndex(this.currentItemIndex);
		this.panel.set_currentPressedIndex(-1);
		this.panelObject.set_visible(true);
		this.panelObject.alpha = 0;
		this.panelStatus = bh_ui__$UIMultiAnimDropdown_AnimState.Opening;
		this.timer = this.transitionTimer;
		this.timerTotal = this.timer;
	}
	,startClose: function() {
		if(this.panelObject == null) {
			return;
		}
		this.panelObject.alpha = 1.0;
		this.panelStatus = bh_ui__$UIMultiAnimDropdown_AnimState.Closing;
		this.timer = this.transitionTimer;
		this.timerTotal = this.timer;
	}
	,update: function(dt) {
		this.panel.update(dt);
		this.timer -= dt;
		switch(this.panelStatus._hx_index) {
		case 0:
			if(this.panelObject == null) {
				return;
			}
			var f = 1.0 - this.timer / this.timerTotal;
			var min = 0.0;
			var max = 1.0;
			if(max == null) {
				max = 1.;
			}
			if(min == null) {
				min = 0.;
			}
			this.panelObject.alpha = f < min ? min : f > max ? max : f;
			if(this.timer < 0) {
				this.panelObject.alpha = 1.0;
				this.panelStatus = bh_ui__$UIMultiAnimDropdown_AnimState.Open;
			}
			break;
		case 1:
			if(this.panelObject == null) {
				return;
			}
			var f = this.timer / this.timerTotal;
			var min = 0.0;
			var max = 1.0;
			if(max == null) {
				max = 1.;
			}
			if(min == null) {
				min = 0.;
			}
			this.panelObject.alpha = f < min ? min : f > max ? max : f;
			if(this.timer < 0) {
				this.panelStatus = bh_ui__$UIMultiAnimDropdown_AnimState.Closed;
				this.panelObject.set_visible(false);
			}
			break;
		case 2:case 3:
			break;
		}
	}
	,triggerItemChanged: function(newIndex,controllable) {
		this.onItemChanged(newIndex,this.items);
		controllable.pushEvent(bh_ui_UIScreenEvent.UIChangeItem(newIndex,this.items),this);
	}
	,onItemChanged: function(newIndex,items) {
	}
	,getSubElements: function(type) {
		switch(type._hx_index) {
		case 0:
			return [this.panel];
		case 1:
			return [];
		}
	}
	,customAddToLayer: function(requestedLayer,screen,updateMode) {
		if(requestedLayer == null) {
			if(updateMode) {
				throw haxe_Exception.thrown("customAddToLayer update mode had no layer");
			} else {
				return bh_ui_UIElementCustomAddToLayerResult.Postponed;
			}
		}
		if(!updateMode) {
			screen.addObjectToLayer(this.root,requestedLayer);
		}
		var higherLayer = screen.getHigherLayer(requestedLayer);
		screen.addObjectToLayer(this.panel.getObject(),higherLayer);
		return bh_ui_UIElementCustomAddToLayerResult.Added;
	}
	,__class__: bh_ui_UIStandardMultiAnimDropdown
};
var bh_ui_UIMultiAnimRadioButtons = function(builder,radioButtonsBuildName,singleRadioButtonBuilderName,items,selectedIndex) {
	this.allowUnselected = false;
	this.checkboxes = [];
	this.builder = builder;
	this.items = items;
	this.singleRadioButtonBuilderName = singleRadioButtonBuilderName;
	this.selectedIndex = selectedIndex;
	var _g = new haxe_ds_StringMap();
	_g.h["count"] = items.length;
	this.builderResult = builder.buildWithParameters(radioButtonsBuildName,_g,{ callback : $bind(this,this.builderCallback)});
	this.setSelectedIndex(selectedIndex);
};
$hxClasses["bh.ui.UIMultiAnimRadioButtons"] = bh_ui_UIMultiAnimRadioButtons;
bh_ui_UIMultiAnimRadioButtons.__name__ = "bh.ui.UIMultiAnimRadioButtons";
bh_ui_UIMultiAnimRadioButtons.__interfaces__ = [bh_ui_UIElementSubElements,bh_ui_UIElementListValue,bh_ui_StandardUIElementEvents,bh_ui_UIElementDisablable,bh_ui_UIElement];
bh_ui_UIMultiAnimRadioButtons.create = function(builder,radioButtonsBuildName,singleRadioButtonBuilderName,items,selectedIndex) {
	return new bh_ui_UIMultiAnimRadioButtons(builder,radioButtonsBuildName,singleRadioButtonBuilderName,items,selectedIndex);
};
bh_ui_UIMultiAnimRadioButtons.prototype = {
	builderCallback: function(request) {
		switch(request._hx_index) {
		case 1:
			var name = request.name;
			var index = request.index;
			return bh_multianim_CallbackResult.CBRString(this.items[index].name);
		case 3:
			var name = request.name;
			var index = request.index;
			if(name == "checkbox") {
				var c = bh_ui_UIStandardMultiCheckbox.create(this.builder,this.singleRadioButtonBuilderName,false);
				this.checkboxes[index] = c;
				var _g = $bind(this,this.onSingleToggle);
				var index1 = index;
				c.onInternalToggle = function(checked,controllable) {
					_g(index1,checked,controllable);
				};
				return bh_multianim_CallbackResult.CBRObject(c.getObject());
			} else {
				throw haxe_Exception.thrown("invalid callback " + Std.string(request));
			}
			break;
		default:
			throw haxe_Exception.thrown("unsuported callback " + Std.string(request));
		}
	}
	,onSingleToggle: function(index,checked,controllable) {
		if(checked) {
			this.setSelectedIndex(index);
		}
		this.triggerItemChanged(index,controllable);
	}
	,onEvent: function(eventWrapper) {
	}
	,getObject: function() {
		return this.builderResult.object;
	}
	,containsPoint: function(pos) {
		return false;
	}
	,clear: function() {
	}
	,setSelectedIndex: function(idx) {
		this.selectedIndex = idx;
		var _g_current = 0;
		var _g_array = this.checkboxes;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var index = _g_key;
			var checkbox = _g_value;
			if(idx == index) {
				checkbox.set_selected(true);
				checkbox.ignoreSelectEvents = !this.allowUnselected;
			} else {
				checkbox.set_selected(false);
				checkbox.ignoreSelectEvents = false;
			}
		}
	}
	,triggerItemChanged: function(newIndex,controllable) {
		this.onItemChanged(newIndex,this.items);
		controllable.pushEvent(bh_ui_UIScreenEvent.UIChangeItem(newIndex,this.items),this);
	}
	,onItemChanged: function(newIndex,items) {
	}
	,getSubElements: function(type) {
		switch(type._hx_index) {
		case 0:
			return this.checkboxes;
		case 1:
			return this.checkboxes;
		}
	}
	,__class__: bh_ui_UIMultiAnimRadioButtons
};
var bh_ui_UIMultiAnimScrollableList = function(builder,itemBuilder,panelName,width,height,items,topClearance,initialIndex) {
	if(initialIndex == null) {
		initialIndex = 0;
	}
	this.topClearance = 0;
	this.lastClickIndex = -1;
	this.lastClick = 0.;
	this.hoverMode = false;
	this.pressedItem = null;
	this.hoverItem = null;
	this.selectedItem = null;
	this.currentPressedIndex = -1;
	this.currentHoverIndex = -1;
	this.currentItemIndex = 0;
	this.items = [];
	this.itemYPositions = new haxe_ds_IntMap();
	this.displayItems = new haxe_ds_IntMap();
	this.scrollSpeed = 100;
	this.keyScrollingDown = false;
	this.keyScrollingUp = false;
	this.requestRedraw = true;
	this.interactives = [];
	this.scrollbar = null;
	this.panelBuilder = builder;
	this.panelName = panelName;
	this.itemBuilder = itemBuilder;
	this.root = new h2d_Object();
	this.items = items;
	this.width = width;
	this.height = height;
	this.topClearance = topClearance;
	this.mask = new h2d_Mask(width,height);
	this.panelResults = this.buildPanel();
	this.set_currentItemIndex(initialIndex);
	this.buildItems();
};
$hxClasses["bh.ui.UIMultiAnimScrollableList"] = bh_ui_UIMultiAnimScrollableList;
bh_ui_UIMultiAnimScrollableList.__name__ = "bh.ui.UIMultiAnimScrollableList";
bh_ui_UIMultiAnimScrollableList.__interfaces__ = [bh_ui_UIElementListValue,bh_ui_UIElementUpdatable,bh_ui_UIElementSyncRedraw,bh_ui_StandardUIElementEvents,bh_ui_UIElement];
bh_ui_UIMultiAnimScrollableList.create = function(builder,itemBuilder,panelName,width,height,items,topClearance,initialIndex) {
	return new bh_ui_UIMultiAnimScrollableList(builder,itemBuilder,panelName,width,height,items,topClearance,initialIndex);
};
bh_ui_UIMultiAnimScrollableList.prototype = {
	clear: function() {
		this.selectedItem = null;
		this.hoverItem = null;
		this.pressedItem = null;
		this.scrollbar = null;
		this.interactives = [];
	}
	,buildPanel: function() {
		var builtPanel = this.panelBuilder;
		var builtPanel1 = this.panelName;
		var _g = new haxe_ds_StringMap();
		_g.h["width"] = this.width;
		_g.h["height"] = this.height;
		_g.h["topClearance"] = this.topClearance;
		var _g1 = new haxe_ds_StringMap();
		_g1.h["mask"] = bh_multianim_PlaceholderValues.PVObject(this.mask);
		var builtPanel2 = builtPanel.buildWithParameters(builtPanel1,_g,{ placeholderObjects : _g1});
		this.root.removeChildren();
		this.root.addChild(builtPanel2.object);
		return builtPanel2;
	}
	,getBuiltItem: function(multi,state,selected,disabled) {
		return multi.findResultByCombo(state,selected,disabled);
	}
	,buildItems: function() {
		this.mask.removeChildren();
		this.displayItems.h = { };
		this.interactives = [];
		var y = 0.;
		var _g_current = 0;
		var _g_array = this.items;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var index = _g_key;
			var value = _g_value;
			var builtMultiItem = this.itemBuilder.buildItem(index,value,this.width,this.height);
			var result = this.getBuiltItem(builtMultiItem,"normal",false,value.disabled == true);
			var height = result.rootSettings.getFloatOrException("height");
			this.displayItems.h[index] = builtMultiItem;
			this.itemYPositions.h[index] = y;
			this.mask.addChild(result.object);
			var _this = result.object;
			_this.posChanged = true;
			_this.x = 0;
			_this.posChanged = true;
			_this.y = y;
			y += height;
			this.interactives = this.interactives.concat(result.interactives);
		}
		this.totalHeight = y;
		this.mask.height = this.height;
		var a = this.totalHeight;
		var b = this.height;
		var b1 = new h2d_col_Bounds();
		b1.xMin = 0;
		b1.yMin = 0;
		b1.xMax = 0;
		b1.yMax = a < b ? b : a;
		this.mask.scrollBounds = b1;
		this.updateScrollbar();
	}
	,updateScrollbar: function() {
		if(this.scrollbar != null) {
			var _this = this.scrollbar;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		if(this.height < this.totalHeight) {
			var buildResult = this.panelBuilder;
			var _g = new haxe_ds_StringMap();
			_g.h["panelHeight"] = "" + this.height;
			_g.h["scrollableHeight"] = "" + this.totalHeight;
			_g.h["scrollPosition"] = "" + this.mask.scrollY;
			var buildResult1 = buildResult.buildWithParameters("scrollbar",_g);
			this.scrollbar = buildResult1.object;
			this.scrollSpeed = buildResult1.rootSettings.getFloatOrDefault("scrollSpeed",100);
			var objs = this.panelResults.names.h["scrollbar"];
			bh_multianim_MultiAnimParser_toh2dObject(bh_multianim_MultiAnimParser_getBuiltHeapsObject(objs[0])).addChild(this.scrollbar);
		}
	}
	,getObject: function() {
		return this.root;
	}
	,containsPoint: function(pos) {
		var _this = this.getObject().getBounds();
		if(pos.x >= _this.xMin && pos.x < _this.xMax && pos.y >= _this.yMin) {
			return pos.y < _this.yMax;
		} else {
			return false;
		}
	}
	,findInteractiveIndex: function(point) {
		var _g = 0;
		var _g1 = this.interactives;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			var _this = object.getBounds();
			if(point.x >= _this.xMin && point.x < _this.xMax && point.y >= _this.yMin && point.y < _this.yMax) {
				return object;
			}
		}
		return null;
	}
	,parseInteractiveId: function(obj) {
		var _g = obj.multiAnimType;
		var width = _g.width;
		var height = _g.height;
		var identifier = _g.identifier;
		var ident = Std.parseInt(identifier);
		if(ident == null) {
			throw haxe_Exception.thrown("could not parse interactive id " + identifier);
		}
		return ident;
	}
	,doRedraw: function() {
		this.requestRedraw = false;
		if(this.hoverItem != null) {
			var _this = this.hoverItem;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		if(this.selectedItem != null) {
			var _this = this.selectedItem;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		if(this.pressedItem != null) {
			var _this = this.pressedItem;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		var stateName = "normal";
		if(this.currentHoverIndex == this.currentItemIndex) {
			stateName = "hover";
		}
		if(this.currentPressedIndex == this.currentItemIndex) {
			stateName = "pressed";
		}
		var builtMultiItem = this.displayItems.h[this.currentItemIndex];
		if(this.currentItemIndex != -1) {
			this.selectedItem = this.getBuiltItem(builtMultiItem,stateName,true,false).object;
			this.mask.addChild(this.selectedItem);
			var _this = this.selectedItem;
			var v = this.itemYPositions.h[this.currentItemIndex];
			_this.posChanged = true;
			_this.y = v;
		}
		if(this.currentHoverIndex != -1) {
			var builtMultiItem = this.displayItems.h[this.currentHoverIndex];
			this.hoverItem = this.getBuiltItem(builtMultiItem,"hover",false,false).object;
			this.mask.addChild(this.hoverItem);
			var _this = this.hoverItem;
			var v = this.itemYPositions.h[this.currentHoverIndex];
			_this.posChanged = true;
			_this.y = v;
		}
		if(this.currentPressedIndex != -1) {
			var builtMultiItem = this.displayItems.h[this.currentPressedIndex];
			this.pressedItem = this.getBuiltItem(builtMultiItem,"pressed",false,false).object;
			this.mask.addChild(this.pressedItem);
			var _this = this.pressedItem;
			var v = this.itemYPositions.h[this.currentPressedIndex];
			_this.posChanged = true;
			_this.y = v;
		}
	}
	,onEvent: function(wrapper) {
		var time = HxOverrides.now() / 1000;
		var obj = this.findInteractiveIndex(wrapper.eventPos);
		var newIndex = obj == null ? null : this.parseInteractiveId(obj);
		var _g = wrapper.event;
		switch(_g._hx_index) {
		case 0:
			var button = _g.button;
			if(newIndex != null) {
				if(this.items[newIndex].disabled == null || this.items[newIndex].disabled == false) {
					if(time - this.lastClick < 0.3 && this.lastClickIndex == newIndex) {
						this.onItemDoubleClicked(newIndex,this.items,wrapper);
					}
					this.hoverMode = false;
					this.requestRedraw = true;
					this.set_currentPressedIndex(newIndex);
				}
			}
			this.lastClickIndex = newIndex;
			this.lastClick = time;
			break;
		case 1:
			var button = _g.button;
			if(newIndex == this.currentPressedIndex && this.currentItemIndex != newIndex) {
				this.set_currentItemIndex(newIndex);
				this.triggerItemChanged(newIndex,wrapper);
			}
			this.set_currentPressedIndex(-1);
			this.hoverMode = true;
			break;
		case 2:
			var _g1 = _g.button;
			this.set_currentPressedIndex(-1);
			this.hoverMode = true;
			break;
		case 3:
			var _g1 = _g.button;
			this.set_currentPressedIndex(-1);
			this.hoverMode = true;
			break;
		case 4:
			wrapper.control.outsideClick.trackOutsideClick(true);
			break;
		case 5:
			this.set_currentHoverIndex(-1);
			break;
		case 6:
			var key = _g.keyCode;
			var release = _g.release;
			if(key == 38) {
				this.keyScrollingUp = !release;
			}
			if(key == 40) {
				this.keyScrollingDown = !release;
			}
			this.updateScrollbar();
			break;
		case 7:
			var dir = _g.wheelDelta;
			var fh = this.mask;
			fh.set_scrollY(fh.scrollY + dir * 10);
			this.updateScrollbar();
			break;
		case 8:
			if(newIndex != null && newIndex != this.currentHoverIndex) {
				this.set_currentHoverIndex(newIndex);
			}
			break;
		}
	}
	,set_currentPressedIndex: function(value) {
		if(value < -1 || value >= this.items.length) {
			throw haxe_Exception.thrown("currentPressedIndex " + value + " is out of bounds [-1.." + this.items.length + "].");
		}
		if(this.currentPressedIndex != value) {
			this.currentPressedIndex = value;
			this.requestRedraw = true;
		}
		return value;
	}
	,set_currentHoverIndex: function(value) {
		if(value < -1 || value >= this.items.length) {
			throw haxe_Exception.thrown("currentHoverIndex " + value + " is out of bounds [-1.." + this.items.length + "].");
		}
		if(this.currentHoverIndex != value) {
			this.currentHoverIndex = value;
			this.requestRedraw = true;
		}
		return value;
	}
	,set_currentItemIndex: function(value) {
		if(value < -1 || value >= this.items.length) {
			throw haxe_Exception.thrown("currentItemIndex " + value + " is out of bounds [0.." + this.items.length + "].");
		}
		if(this.currentItemIndex != value) {
			this.currentItemIndex = value;
			this.requestRedraw = true;
		}
		return value;
	}
	,update: function(dt) {
		if(this.keyScrollingUp && !this.keyScrollingDown) {
			var fh = this.mask;
			fh.set_scrollY(fh.scrollY - this.scrollSpeed * dt);
			this.updateScrollbar();
		} else if(!this.keyScrollingUp && this.keyScrollingDown) {
			var fh = this.mask;
			fh.set_scrollY(fh.scrollY + this.scrollSpeed * dt);
			this.updateScrollbar();
		}
	}
	,triggerItemChanged: function(newIndex,wrapper) {
		this.onItemChanged(newIndex,this.items,wrapper);
		wrapper.control.pushEvent(bh_ui_UIScreenEvent.UIChangeItem(newIndex,this.items),this);
	}
	,onItemChanged: function(newIndex,items,wrapper) {
	}
	,onItemDoubleClicked: function(newIndex,items,wrapper) {
	}
	,__class__: bh_ui_UIMultiAnimScrollableList
};
var bh_ui_UIStandardMultiAnimSlider = function(builder,name,size,initialValue) {
	this.disabled = false;
	this.requestRedraw = true;
	this.currentResult = null;
	this.status = bh_ui_StandardUIElementStates.SUINormal;
	this.root = new h2d_Object();
	this.builder = builder;
	this.buildName = name;
	this.currentValue = initialValue;
	this.size = size;
};
$hxClasses["bh.ui.UIStandardMultiAnimSlider"] = bh_ui_UIStandardMultiAnimSlider;
bh_ui_UIStandardMultiAnimSlider.__name__ = "bh.ui.UIStandardMultiAnimSlider";
bh_ui_UIStandardMultiAnimSlider.__interfaces__ = [bh_ui_UIElementSyncRedraw,bh_ui_UIElementNumberValue,bh_ui_StandardUIElementEvents,bh_ui_UIElementDisablable,bh_ui_UIElement];
bh_ui_UIStandardMultiAnimSlider.create = function(builder,name,size,initialValue) {
	if(initialValue == null) {
		initialValue = 0;
	}
	return new bh_ui_UIStandardMultiAnimSlider(builder,name,size,initialValue);
};
bh_ui_UIStandardMultiAnimSlider.prototype = {
	clear: function() {
		this.currentResult = null;
		this.builder = null;
	}
	,set_disabled: function(value) {
		if(this.disabled != value) {
			this.disabled = value;
			this.requestRedraw = true;
		}
		return value;
	}
	,set_status: function(value) {
		if(this.status != value) {
			this.status = value;
			this.requestRedraw = true;
		}
		return value;
	}
	,buildNew: function(name,status,value,disabled,size) {
		var result = this.builder;
		var _g = new haxe_ds_StringMap();
		var value1 = bh_ui_UIElement_standardUIElementStatusToString(status);
		_g.h["status"] = value1;
		_g.h["size"] = size;
		_g.h["value"] = value;
		_g.h["disabled"] = "" + (disabled == null ? "null" : "" + disabled);
		var result1 = result.buildWithParameters(name,_g);
		if(result1 == null) {
			throw haxe_Exception.thrown("could not build #" + name + " with status=>" + Std.string(status));
		}
		if(result1.object == null) {
			throw haxe_Exception.thrown("build #" + name + " with status=>" + Std.string(status) + " size=>" + size + ", value=>" + value + ", disabled=>" + (disabled == null ? "null" : "" + disabled) + " returned null object");
		}
		return result1;
	}
	,doRedraw: function() {
		this.requestRedraw = false;
		if(this.currentResult != null && this.currentResult.object != null) {
			var _this = this.currentResult.object;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		this.currentResult = this.buildNew(this.buildName,this.status,this.currentValue,this.disabled,this.size);
		this.root.addChild(this.currentResult.object);
	}
	,getObject: function() {
		return this.root;
	}
	,containsPoint: function(pos) {
		var _this = this.getObject().getBounds();
		if(pos.x >= _this.xMin && pos.x < _this.xMax && pos.y >= _this.yMin) {
			return pos.y < _this.yMax;
		} else {
			return false;
		}
	}
	,calculatePos: function(eventPos) {
		var start = bh_multianim_MultiAnimParser_toh2dObject(bh_multianim_MultiAnimParser_getBuiltHeapsObject(this.currentResult.names.h["start"][0]));
		var _this = eventPos;
		var x = _this.x;
		var y = _this.y;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var localPos = start.globalToLocal(new h2d_col_PointImpl(x,y));
		var end = bh_multianim_MultiAnimParser_toh2dObject(bh_multianim_MultiAnimParser_getBuiltHeapsObject(this.currentResult.names.h["end"][0]));
		var f = localPos.x;
		var min = start.x;
		var max = end.x;
		if(max == null) {
			max = 1.;
		}
		if(min == null) {
			min = 0.;
		}
		var i = f < min ? min : f > max ? max : f;
		return 100.0 * i / (end.x - start.x) | 0;
	}
	,onEvent: function(wrapper) {
		if(this.disabled) {
			return;
		}
		var isDragging = wrapper.control.draggable.isDragging();
		var _g = wrapper.event;
		switch(_g._hx_index) {
		case 0:
			var button = _g.button;
			this.currentValue = this.calculatePos(wrapper.eventPos);
			this.triggerOnChange(this.currentValue,wrapper);
			this.set_status(bh_ui_StandardUIElementStates.SUIPressed);
			if(!isDragging) {
				wrapper.control.draggable.startDrag();
			}
			break;
		case 1:
			var button = _g.button;
			this.set_status(bh_ui_StandardUIElementStates.SUINormal);
			if(isDragging) {
				wrapper.control.draggable.stopDrag();
			}
			break;
		case 2:
			var _g1 = _g.button;
			if(isDragging) {
				wrapper.control.draggable.stopDrag();
			}
			break;
		case 3:
			var _g1 = _g.button;
			if(isDragging) {
				wrapper.control.draggable.stopDrag();
			}
			break;
		case 4:
			this.set_status(bh_ui_StandardUIElementStates.SUIHover);
			break;
		case 5:
			this.set_status(bh_ui_StandardUIElementStates.SUINormal);
			break;
		case 6:
			var up = _g.keyCode;
			var key = _g.release;
			break;
		case 7:
			var dir = _g.wheelDelta;
			break;
		case 8:
			if(isDragging) {
				this.currentValue = this.calculatePos(wrapper.eventPos);
				this.triggerOnChange(this.currentValue,wrapper);
				this.requestRedraw = true;
			}
			break;
		}
	}
	,triggerOnChange: function(value,wrapper) {
		this.onChange(value,wrapper);
		wrapper.control.pushEvent(bh_ui_UIScreenEvent.UIChangeValue(value),this);
	}
	,onChange: function(value,wrapper) {
	}
	,setIntValue: function(v) {
		this.currentValue = v;
		this.requestRedraw = true;
	}
	,__class__: bh_ui_UIStandardMultiAnimSlider
};
var bh_ui_controllers_UIControllerLifecycleEvent = $hxEnums["bh.ui.controllers.UIControllerLifecycleEvent"] = { __ename__:true,__constructs__:null
	,LifecycleControllerStarted: {_hx_name:"LifecycleControllerStarted",_hx_index:0,__enum__:"bh.ui.controllers.UIControllerLifecycleEvent",toString:$estr}
	,LifecycleControllerFinished: {_hx_name:"LifecycleControllerFinished",_hx_index:1,__enum__:"bh.ui.controllers.UIControllerLifecycleEvent",toString:$estr}
};
bh_ui_controllers_UIControllerLifecycleEvent.__constructs__ = [bh_ui_controllers_UIControllerLifecycleEvent.LifecycleControllerStarted,bh_ui_controllers_UIControllerLifecycleEvent.LifecycleControllerFinished];
bh_ui_controllers_UIControllerLifecycleEvent.__empty_constructs__ = [bh_ui_controllers_UIControllerLifecycleEvent.LifecycleControllerStarted,bh_ui_controllers_UIControllerLifecycleEvent.LifecycleControllerFinished];
var bh_ui_controllers_UIControllerResult = $hxEnums["bh.ui.controllers.UIControllerResult"] = { __ename__:true,__constructs__:null
	,UIControllerRunning: {_hx_name:"UIControllerRunning",_hx_index:0,__enum__:"bh.ui.controllers.UIControllerResult",toString:$estr}
	,UIControllerFinished: ($_=function(result) { return {_hx_index:1,result:result,__enum__:"bh.ui.controllers.UIControllerResult",toString:$estr}; },$_._hx_name="UIControllerFinished",$_.__params__ = ["result"],$_)
};
bh_ui_controllers_UIControllerResult.__constructs__ = [bh_ui_controllers_UIControllerResult.UIControllerRunning,bh_ui_controllers_UIControllerResult.UIControllerFinished];
bh_ui_controllers_UIControllerResult.__empty_constructs__ = [bh_ui_controllers_UIControllerResult.UIControllerRunning];
var bh_ui_controllers_UIControllerScreenIntegration = function() { };
$hxClasses["bh.ui.controllers.UIControllerScreenIntegration"] = bh_ui_controllers_UIControllerScreenIntegration;
bh_ui_controllers_UIControllerScreenIntegration.__name__ = "bh.ui.controllers.UIControllerScreenIntegration";
bh_ui_controllers_UIControllerScreenIntegration.__isInterface__ = true;
bh_ui_controllers_UIControllerScreenIntegration.prototype = {
	__class__: bh_ui_controllers_UIControllerScreenIntegration
};
var bh_ui_controllers__$UIControllerBase_DraggableImpl = function() {
	this.stop = false;
	this.start = false;
};
$hxClasses["bh.ui.controllers._UIControllerBase.DraggableImpl"] = bh_ui_controllers__$UIControllerBase_DraggableImpl;
bh_ui_controllers__$UIControllerBase_DraggableImpl.__name__ = "bh.ui.controllers._UIControllerBase.DraggableImpl";
bh_ui_controllers__$UIControllerBase_DraggableImpl.__interfaces__ = [bh_ui_DraggableControl];
bh_ui_controllers__$UIControllerBase_DraggableImpl.prototype = {
	startDrag: function() {
		this.start = true;
	}
	,stopDrag: function() {
		this.stop = true;
	}
	,reset: function() {
		this.start = false;
		this.stop = false;
	}
	,toString: function() {
		return "start:" + Std.string(this.start) + ", stop:" + Std.string(this.stop) + ", target:" + Std.string(this.target);
	}
	,isDragging: function() {
		return this.target != null;
	}
	,__class__: bh_ui_controllers__$UIControllerBase_DraggableImpl
};
var bh_ui_controllers__$UIControllerBase_OutsideClickImpl = function() {
	this.enabledChanged = null;
	this.trackOutsideClickSubscribers = [];
};
$hxClasses["bh.ui.controllers._UIControllerBase.OutsideClickImpl"] = bh_ui_controllers__$UIControllerBase_OutsideClickImpl;
bh_ui_controllers__$UIControllerBase_OutsideClickImpl.__name__ = "bh.ui.controllers._UIControllerBase.OutsideClickImpl";
bh_ui_controllers__$UIControllerBase_OutsideClickImpl.__interfaces__ = [bh_ui_OutsideClickControl];
bh_ui_controllers__$UIControllerBase_OutsideClickImpl.prototype = {
	trackOutsideClick: function(enabled) {
		this.enabledChanged = enabled;
	}
	,handle: function(element) {
		if(this.enabledChanged == null) {
			return;
		} else if(this.enabledChanged && this.trackOutsideClickSubscribers.indexOf(element) == -1) {
			this.trackOutsideClickSubscribers.push(element);
		} else if(this.enabledChanged == false) {
			HxOverrides.remove(this.trackOutsideClickSubscribers,element);
		}
		this.enabledChanged = null;
	}
	,getTriggered: function(notThisElement) {
		if(notThisElement == null) {
			var ret = this.trackOutsideClickSubscribers;
			this.trackOutsideClickSubscribers = [];
			return ret;
		} else if(HxOverrides.remove(this.trackOutsideClickSubscribers,notThisElement)) {
			var ret = this.trackOutsideClickSubscribers;
			this.trackOutsideClickSubscribers = [notThisElement];
			return ret;
		} else {
			var ret = this.trackOutsideClickSubscribers;
			this.trackOutsideClickSubscribers = [];
			return ret;
		}
	}
	,__class__: bh_ui_controllers__$UIControllerBase_OutsideClickImpl
};
var bh_ui_controllers__$UIControllerBase_ControllableImpl = function(controller) {
	this.controller = controller;
	this.draggable = new bh_ui_controllers__$UIControllerBase_DraggableImpl();
	this.outsideClick = new bh_ui_controllers__$UIControllerBase_OutsideClickImpl();
};
$hxClasses["bh.ui.controllers._UIControllerBase.ControllableImpl"] = bh_ui_controllers__$UIControllerBase_ControllableImpl;
bh_ui_controllers__$UIControllerBase_ControllableImpl.__name__ = "bh.ui.controllers._UIControllerBase.ControllableImpl";
bh_ui_controllers__$UIControllerBase_ControllableImpl.__interfaces__ = [bh_ui_Controllable];
bh_ui_controllers__$UIControllerBase_ControllableImpl.prototype = {
	pushEvent: function(event,source) {
		this.controller.onScreenEvent(event,source);
	}
	,__class__: bh_ui_controllers__$UIControllerBase_ControllableImpl
};
var bh_ui_screens__$ScreenManager_ScreenManagerMode = $hxEnums["bh.ui.screens._ScreenManager.ScreenManagerMode"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"bh.ui.screens._ScreenManager.ScreenManagerMode",toString:$estr}
	,Single: ($_=function(single) { return {_hx_index:1,single:single,__enum__:"bh.ui.screens._ScreenManager.ScreenManagerMode",toString:$estr}; },$_._hx_name="Single",$_.__params__ = ["single"],$_)
	,MasterAndSingle: ($_=function(master,single) { return {_hx_index:2,master:master,single:single,__enum__:"bh.ui.screens._ScreenManager.ScreenManagerMode",toString:$estr}; },$_._hx_name="MasterAndSingle",$_.__params__ = ["master","single"],$_)
	,Dialog: ($_=function(dialog,caller,previousMode,dialogName) { return {_hx_index:3,dialog:dialog,caller:caller,previousMode:previousMode,dialogName:dialogName,__enum__:"bh.ui.screens._ScreenManager.ScreenManagerMode",toString:$estr}; },$_._hx_name="Dialog",$_.__params__ = ["dialog","caller","previousMode","dialogName"],$_)
};
bh_ui_screens__$ScreenManager_ScreenManagerMode.__constructs__ = [bh_ui_screens__$ScreenManager_ScreenManagerMode.None,bh_ui_screens__$ScreenManager_ScreenManagerMode.Single,bh_ui_screens__$ScreenManager_ScreenManagerMode.MasterAndSingle,bh_ui_screens__$ScreenManager_ScreenManagerMode.Dialog];
bh_ui_screens__$ScreenManager_ScreenManagerMode.__empty_constructs__ = [bh_ui_screens__$ScreenManager_ScreenManagerMode.None];
var bh_ui_screens_ScreenManager = function(app,loader) {
	this.builders = new haxe_ds_ObjectMap();
	this.configuredScreens = new haxe_ds_StringMap();
	this.activeScreenControllers = [];
	this.activeScreens = [];
	this.mode = bh_ui_screens__$ScreenManager_ScreenManagerMode.None;
	this.app = app;
	var tmp = loader;
	this.loader = tmp != null ? tmp : bh_ui_screens_ScreenManager.createLoader();
	this.window = hxd_Window.getInstance();
	this.handler = new bh_ui_ControllerEventHandler(app.s2d,this.window,this);
};
$hxClasses["bh.ui.screens.ScreenManager"] = bh_ui_screens_ScreenManager;
bh_ui_screens_ScreenManager.__name__ = "bh.ui.screens.ScreenManager";
bh_ui_screens_ScreenManager.createLoader = function() {
	var loader = new bh_base_CachingResourceLoader();
	loader.loadSheet2Impl = function(sheetName) {
		var resourceName = "" + sheetName + ".atlas2";
		if(hxd_Res.get_loader().exists(resourceName)) {
			return bh_base_Atlas2.toAtlas2(hxd_Res.load(resourceName));
		} else {
			var bytes = FileLoader.load(resourceName);
			var resource = hxd_res_Any.fromBytes(resourceName,haxe_io_Bytes.ofData(bytes));
			return bh_base_Atlas2.toAtlas2(resource);
		}
	};
	loader.loadSheetImpl = function(sheetName) {
		var resourceName = "" + sheetName + ".atlas";
		if(hxd_Res.get_loader().exists(resourceName)) {
			return hxd_Res.get_loader().loadCache(resourceName,hxd_res_Atlas);
		} else {
			var bytes = FileLoader.load(resourceName);
			var resource = hxd_res_Any.fromBytes(resourceName,haxe_io_Bytes.ofData(bytes));
			return resource.to(hxd_res_Atlas);
		}
	};
	loader.loadHXDResourceImpl = function(filename) {
		if(hxd_Res.get_loader().exists(filename)) {
			return hxd_Res.load(filename);
		} else {
			var bytes = FileLoader.load(filename);
			return hxd_res_Any.fromBytes(filename,haxe_io_Bytes.ofData(bytes));
		}
	};
	loader.loadAnimSMImpl = function(filename) {
		var bytes = FileLoader.load(filename);
		var byteData = haxe_io_Bytes.ofData(bytes);
		return bh_stateanim_AnimParser.parseFile(byteData,loader);
	};
	loader.loadFontImpl = function(filename) {
		return bh_base_FontManager.getFontByName(filename);
	};
	loader.loadMultiAnimImpl = function(s) {
		var byteData;
		if(hxd_Res.get_loader().exists(s)) {
			var r = hxd_Res.load(s);
			if(r == null) {
				throw haxe_Exception.thrown("failed to load multianim " + s);
			}
			byteData = r.entry.getBytes();
		} else {
			var bytes = FileLoader.load(s);
			byteData = haxe_io_Bytes.ofData(bytes);
		}
		return bh_multianim_MultiAnimBuilder.load(byteData,loader,s);
	};
	return loader;
};
bh_ui_screens_ScreenManager.prototype = {
	onReload: function(resource) {
	}
	,update: function(dt) {
		var _g = 0;
		var _g1 = this.activeScreens;
		while(_g < _g1.length) {
			var screen = _g1[_g];
			++_g;
			var result = screen.getController().update(dt);
			switch(result._hx_index) {
			case 0:
				break;
			case 1:
				var result1 = result.result;
				var _g2 = this.mode;
				if(_g2._hx_index == 3) {
					var dialog = _g2.dialog;
					var caller = _g2.caller;
					var previousMode = _g2.previousMode;
					var dialogName = _g2.dialogName;
					caller.onScreenEvent(bh_ui_UIScreenEvent.UIOnControllerEvent(bh_ui_ControllerEvents.OnDialogResult(dialogName,result1)),null);
					this.updateScreenMode(previousMode);
				} else {
					throw haxe_Exception.thrown("unhandled exit " + Std.string(result1) + " code in " + Std.string(this.mode));
				}
				break;
			}
			screen.update(dt);
		}
	}
	,buildFromResourceName: function(resourceName,enableReload) {
		var resource = this.loader.loadHXDResource(resourceName);
		return this.buildFromResource(resource,enableReload);
	}
	,buildFromResource: function(resource,enableReload) {
		var _gthis = this;
		var built = this.builders.h[resource.__id__];
		if(built != null) {
			return built;
		}
		if(enableReload) {
			resource.watch(function() {
				_gthis.onReload(resource);
			});
		}
		var built = this.loader.loadMultiAnim(resource.entry.get_path());
		if(built == null) {
			throw haxe_Exception.thrown("failed to load multianim " + resource.entry.name);
		}
		haxe_Log.trace("Built " + resource.entry.name + " with reload " + (enableReload == null ? "null" : "" + enableReload),{ fileName : "bh/ui/screens/ScreenManager.hx", lineNumber : 187, className : "bh.ui.screens.ScreenManager", methodName : "buildFromResource"});
		this.builders.set(resource,built);
		return built;
	}
	,reload: function(resource,throwOnError) {
		if(throwOnError == null) {
			throwOnError = true;
		}
		var oldBuilders = this.builders.copy();
		this.builders.h = { __keys__ : { }};
		try {
			var map = oldBuilders;
			var _g_map = map;
			var _g_keys = map.keys();
			while(_g_keys.hasNext()) {
				var key = _g_keys.next();
				var _g_value = _g_map.get(key);
				var _g_key = key;
				var key1 = _g_key;
				var value = _g_value;
				if(resource != null && key1 != resource) {
					continue;
				}
				haxe_Log.trace("rebuild " + Std.string(key1),{ fileName : "bh/ui/screens/ScreenManager.hx", lineNumber : 203, className : "bh.ui.screens.ScreenManager", methodName : "reload"});
				this.buildFromResource(key1,true);
			}
		} catch( _g ) {
			var e = haxe_Exception.caught(_g);
			haxe_Log.trace(e,{ fileName : "bh/ui/screens/ScreenManager.hx", lineNumber : 209, className : "bh.ui.screens.ScreenManager", methodName : "reload"});
			this.loader.clearCache();
			this.builders = oldBuilders;
			if(throwOnError) {
				throw haxe_Exception.thrown(e);
			}
			if(((e) instanceof hxparse_ParserError)) {
				var parserError = js_Boot.__cast(e , hxparse_ParserError);
				return { success : false, error : parserError.toString(), file : parserError.pos.psource, pmin : parserError.pos.pmin, pmax : parserError.pos.pmax};
			}
			return { success : false, error : e.toString(), file : null, pmin : 0, pmax : 0};
		}
		var reloadedScreenNames = [];
		this.loader.clearCache();
		var h = this.configuredScreens.h;
		var _g_h = h;
		var _g_keys = Object.keys(h);
		var _g_length = _g_keys.length;
		var _g_current = 0;
		while(_g_current < _g_length) {
			var key = _g_keys[_g_current++];
			var _g_key = key;
			var _g_value = _g_h[key];
			var name = _g_key;
			var screen = _g_value;
			screen.clear();
			screen.load();
			reloadedScreenNames.push(name);
		}
		this.updateScreenMode(this.mode);
		haxe_Log.trace("reloaded " + reloadedScreenNames.join(","),{ fileName : "bh/ui/screens/ScreenManager.hx", lineNumber : 245, className : "bh.ui.screens.ScreenManager", methodName : "reload"});
		return { success : true, error : null, file : null, pmin : 0, pmax : 0};
	}
	,addScreen: function(name,screen) {
		if(Object.prototype.hasOwnProperty.call(this.configuredScreens.h,name)) {
			throw haxe_Exception.thrown("screen " + name + " already exists");
		}
		this.configuredScreens.h[name] = screen;
		return screen;
	}
	,getScreen: function(screenName) {
		var screen = this.configuredScreens.h[screenName];
		if(screen == null) {
			throw haxe_Exception.thrown("screen " + screenName + " does not exist");
		}
		return screen;
	}
	,updateScreenMode: function(newScreenMode) {
		var _gthis = this;
		var addScreen = function(newScreen,layer) {
			_gthis.app.s2d.add(newScreen.getSceneRoot(),layer);
			_gthis.activeScreens.push(newScreen);
		};
		var removeScreen = function(screen) {
			HxOverrides.remove(_gthis.activeScreens,screen);
			var _this = screen.getSceneRoot();
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		};
		var addedScreens = null;
		var removedScreens = null;
		var overrideActiveScreenControllers = null;
		var layerTop = 6;
		var layerMid = 4;
		var layerBot = 2;
		var _g = this.mode;
		switch(_g._hx_index) {
		case 0:
			switch(newScreenMode._hx_index) {
			case 0:
				break;
			case 1:
				var single = newScreenMode.single;
				var _g1 = new haxe_ds_ObjectMap();
				_g1.set(single,layerMid);
				addedScreens = _g1;
				break;
			case 2:
				var master = newScreenMode.master;
				var single = newScreenMode.single;
				var _g1 = new haxe_ds_ObjectMap();
				_g1.set(master,layerBot);
				_g1.set(single,layerMid);
				addedScreens = _g1;
				break;
			case 3:
				var dialog = newScreenMode.dialog;
				var caller = newScreenMode.caller;
				var previousMode = newScreenMode.previousMode;
				var dialogName = newScreenMode.dialogName;
				var _g1 = new haxe_ds_ObjectMap();
				_g1.set(dialog,layerTop);
				addedScreens = _g1;
				break;
			}
			break;
		case 1:
			var oldSingle = _g.single;
			switch(newScreenMode._hx_index) {
			case 0:
				removedScreens = [oldSingle];
				break;
			case 1:
				var single = newScreenMode.single;
				if(single != oldSingle) {
					removedScreens = [oldSingle];
					var _g1 = new haxe_ds_ObjectMap();
					_g1.set(single,layerMid);
					addedScreens = _g1;
				}
				break;
			case 2:
				var master = newScreenMode.master;
				var single = newScreenMode.single;
				if(single != oldSingle) {
					removedScreens = [oldSingle];
					var _g1 = new haxe_ds_ObjectMap();
					_g1.set(single,layerMid);
					addedScreens = _g1;
				}
				if(master == oldSingle) {
					throw haxe_Exception.thrown("Single -> MasterAndSingle: switching single with master");
				}
				break;
			case 3:
				var dialog = newScreenMode.dialog;
				var caller = newScreenMode.caller;
				var previousMode = newScreenMode.previousMode;
				var dialogName = newScreenMode.dialogName;
				var _g1 = new haxe_ds_ObjectMap();
				_g1.set(dialog,layerTop);
				addedScreens = _g1;
				overrideActiveScreenControllers = [dialog];
				break;
			}
			break;
		case 2:
			var oldMaster = _g.master;
			var oldSingle = _g.single;
			switch(newScreenMode._hx_index) {
			case 0:
				removedScreens = [oldMaster,oldSingle];
				break;
			case 1:
				var single = newScreenMode.single;
				if(oldSingle != single) {
					removedScreens = [oldSingle];
					var _g1 = new haxe_ds_ObjectMap();
					_g1.set(single,layerMid);
					addedScreens = _g1;
				}
				if(single == oldMaster) {
					throw haxe_Exception.thrown("MasterAndSingle -> Single: switching master to single");
				}
				removedScreens.push(oldMaster);
				break;
			case 2:
				var master = newScreenMode.master;
				var single = newScreenMode.single;
				removedScreens = [];
				addedScreens = new haxe_ds_ObjectMap();
				if(oldMaster != master) {
					removedScreens = [oldMaster];
					var _g1 = new haxe_ds_ObjectMap();
					_g1.set(master,layerBot);
					addedScreens = _g1;
				}
				if(oldSingle != single) {
					removedScreens.push(oldSingle);
					addedScreens.set(single,layerMid);
				}
				if(single == oldMaster || master == oldSingle) {
					throw haxe_Exception.thrown("MasterAndSingle -> MasterAndSingle: mismatching master/single");
				}
				break;
			case 3:
				var dialog = newScreenMode.dialog;
				var caller = newScreenMode.caller;
				var previousMode = newScreenMode.previousMode;
				var dialogName = newScreenMode.dialogName;
				var _g1 = new haxe_ds_ObjectMap();
				_g1.set(dialog,layerTop);
				addedScreens = _g1;
				overrideActiveScreenControllers = [dialog,oldMaster];
				break;
			}
			break;
		case 3:
			var oldDialog = _g.dialog;
			var caller = _g.caller;
			var previousMode = _g.previousMode;
			var dialogName = _g.dialogName;
			switch(newScreenMode._hx_index) {
			case 0:
				removedScreens = [oldDialog];
				break;
			case 1:
				var single = newScreenMode.single;
				removedScreens = [oldDialog];
				var _g = new haxe_ds_ObjectMap();
				_g.set(single,layerMid);
				addedScreens = _g;
				break;
			case 2:
				var master = newScreenMode.master;
				var single = newScreenMode.single;
				removedScreens = [oldDialog];
				var _g = new haxe_ds_ObjectMap();
				_g.set(single,layerMid);
				_g.set(master,layerBot);
				addedScreens = _g;
				break;
			case 3:
				var dialog = newScreenMode.dialog;
				var caller = newScreenMode.caller;
				var previousMode = newScreenMode.previousMode;
				var dialogName = newScreenMode.dialogName;
				removedScreens = [oldDialog];
				var _g = new haxe_ds_ObjectMap();
				_g.set(dialog,layerTop);
				addedScreens = _g;
				overrideActiveScreenControllers = [dialog];
				var result = dialog.getController().exitResponse;
				caller.onScreenEvent(bh_ui_UIScreenEvent.UIOnControllerEvent(bh_ui_ControllerEvents.OnDialogResult(dialogName,result)),null);
				removeScreen(dialog);
				break;
			}
			break;
		}
		if(removedScreens != null) {
			var _g = 0;
			while(_g < removedScreens.length) {
				var screen = removedScreens[_g];
				++_g;
				screen.getController().lifecycleEvent(bh_ui_controllers_UIControllerLifecycleEvent.LifecycleControllerFinished);
				HxOverrides.remove(this.activeScreenControllers,screen);
				screen.onScreenEvent(bh_ui_UIScreenEvent.UIOnControllerEvent(bh_ui_ControllerEvents.Leaving),null);
				removeScreen(screen);
			}
		}
		if(addedScreens != null) {
			var map = addedScreens;
			var _g_map = map;
			var _g_keys = map.keys();
			while(_g_keys.hasNext()) {
				var key = _g_keys.next();
				var _g_value = _g_map.get(key);
				var _g_key = key;
				var screen = _g_key;
				var layerIndex = _g_value;
				var controller = screen.getController();
				addScreen(screen,layerIndex);
				screen.onScreenEvent(bh_ui_UIScreenEvent.UIOnControllerEvent(bh_ui_ControllerEvents.Entering),null);
				controller.lifecycleEvent(bh_ui_controllers_UIControllerLifecycleEvent.LifecycleControllerStarted);
				if(overrideActiveScreenControllers == null) {
					this.activeScreenControllers.push(screen);
				}
			}
		}
		if(overrideActiveScreenControllers != null) {
			this.activeScreenControllers = overrideActiveScreenControllers;
		}
		this.mode = newScreenMode;
	}
	,__class__: bh_ui_screens_ScreenManager
};
var bh_ui_screens_LayersEnum = $hxEnums["bh.ui.screens.LayersEnum"] = { __ename__:true,__constructs__:null
	,ModalLayer: {_hx_name:"ModalLayer",_hx_index:0,__enum__:"bh.ui.screens.LayersEnum",toString:$estr}
	,DefaultLayer: {_hx_name:"DefaultLayer",_hx_index:1,__enum__:"bh.ui.screens.LayersEnum",toString:$estr}
	,BackgroundLayer: {_hx_name:"BackgroundLayer",_hx_index:2,__enum__:"bh.ui.screens.LayersEnum",toString:$estr}
	,NamedLayer: ($_=function(name) { return {_hx_index:3,name:name,__enum__:"bh.ui.screens.LayersEnum",toString:$estr}; },$_._hx_name="NamedLayer",$_.__params__ = ["name"],$_)
};
bh_ui_screens_LayersEnum.__constructs__ = [bh_ui_screens_LayersEnum.ModalLayer,bh_ui_screens_LayersEnum.DefaultLayer,bh_ui_screens_LayersEnum.BackgroundLayer,bh_ui_screens_LayersEnum.NamedLayer];
bh_ui_screens_LayersEnum.__empty_constructs__ = [bh_ui_screens_LayersEnum.ModalLayer,bh_ui_screens_LayersEnum.DefaultLayer,bh_ui_screens_LayersEnum.BackgroundLayer];
var bh_ui_screens_UIScreen = function() { };
$hxClasses["bh.ui.screens.UIScreen"] = bh_ui_screens_UIScreen;
bh_ui_screens_UIScreen.__name__ = "bh.ui.screens.UIScreen";
bh_ui_screens_UIScreen.__isInterface__ = true;
bh_ui_screens_UIScreen.prototype = {
	__class__: bh_ui_screens_UIScreen
};
var bh_ui_screens_UIScreenBase = function(screenManager,layers) {
	this.postCustomAddToLayer = new haxe_ds_ObjectMap();
	this.groups = new haxe_ds_StringMap();
	this.controllersStack = [];
	this.elements = [];
	this.root = new h2d_Layers();
	this.screenManager = screenManager;
	if(layers == null) {
		var _g = new haxe_ds_EnumValueMap();
		_g.set(bh_ui_screens_LayersEnum.BackgroundLayer,1);
		_g.set(bh_ui_screens_LayersEnum.DefaultLayer,3);
		_g.set(bh_ui_screens_LayersEnum.ModalLayer,5);
		this.layers = _g;
	} else {
		if(layers.exists(bh_ui_screens_LayersEnum.BackgroundLayer) == false) {
			throw haxe_Exception.thrown("BackgroundLayer not set");
		}
		if(layers.exists(bh_ui_screens_LayersEnum.DefaultLayer) == false) {
			throw haxe_Exception.thrown("DefaultLayer not set");
		}
		if(layers.exists(bh_ui_screens_LayersEnum.ModalLayer) == false) {
			throw haxe_Exception.thrown("ModalLayer not set");
		}
		this.layers = layers;
	}
	this.controllersStack = [new bh_ui_DefaultUIController(this)];
};
$hxClasses["bh.ui.screens.UIScreenBase"] = bh_ui_screens_UIScreenBase;
bh_ui_screens_UIScreenBase.__name__ = "bh.ui.screens.UIScreenBase";
bh_ui_screens_UIScreenBase.__interfaces__ = [bh_ui_controllers_UIControllerScreenIntegration,bh_ui_screens_UIScreen];
bh_ui_screens_UIScreenBase.prototype = {
	get_controller: function() {
		if(this.controllersStack.length == 0) {
			throw haxe_Exception.thrown("no controller in stack");
		}
		return this.controllersStack[this.controllersStack.length - 1];
	}
	,clear: function() {
		var _g = 0;
		var _g1 = this.elements;
		while(_g < _g1.length) {
			var el = _g1[_g];
			++_g;
			this.removeElement(el);
		}
		this.groups.h = Object.create(null);
		this.elements = [];
		this.getSceneRoot().removeChildren();
		this.onClear();
	}
	,onClear: function() {
	}
	,onMouseMove: function(pos) {
	}
	,update: function(dt) {
		this.get_controller().update(dt);
		var map = this.postCustomAddToLayer;
		var _g_map = map;
		var _g_keys = map.keys();
		while(_g_keys.hasNext()) {
			var key = _g_keys.next();
			var _g_value = _g_map.get(key);
			var _g_key = key;
			var obj = _g_key;
			var v = _g_value;
			var insertedLayer = this.findLayerFromObject(obj);
			if(insertedLayer == null) {
				throw haxe_Exception.thrown("could not find layer for object " + Std.string(obj));
			}
			v.customAddToLayer(insertedLayer,this,true);
		}
		this.postCustomAddToLayer.h = { __keys__ : { }};
	}
	,getElements: function(type) {
		var retVal = this.elements.slice();
		var _g = 0;
		var _g1 = this.elements;
		while(_g < _g1.length) {
			var element = _g1[_g];
			++_g;
			if(js_Boot.__implements(element,bh_ui_UIElementSubElements)) {
				var subElements = (js_Boot.__cast(element , bh_ui_UIElementSubElements)).getSubElements(type);
				retVal = retVal.concat(subElements);
			}
		}
		return retVal;
	}
	,getSettings: function(settings,settingName,defaultValue) {
		if(settings == null) {
			return defaultValue;
		}
		var val = settings.h[settingName];
		if(val == null) {
			return defaultValue;
		}
		return val;
	}
	,getIntSettings: function(settings,settingName,defaultValue) {
		if(settings == null) {
			return defaultValue;
		}
		var val = settings.h[settingName];
		if(val == null) {
			return defaultValue;
		}
		var intVal = Std.parseInt(val);
		if(intVal == null) {
			throw haxe_Exception.thrown("could not parse setting \"" + val + "\" as integer");
		}
		return intVal;
	}
	,getBoolSettings: function(settings,settingName,defaultValue) {
		if(settings == null) {
			return defaultValue;
		}
		var val = settings.h[settingName];
		if(val == null) {
			return defaultValue;
		}
		switch(val.toLowerCase()) {
		case "0":case "false":case "no":
			return false;
		case "1":case "true":case "yes":
			return true;
		default:
			throw haxe_Exception.thrown("could not parse setting \"" + val + "\" as bool");
		}
	}
	,validateSettings: function(settings,allowedSettings,elementName) {
		if(settings == null) {
			return;
		}
		var h = settings.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			if(allowedSettings.indexOf(key) == -1) {
				throw haxe_Exception.thrown("Unknown setting \"" + key + "\" for " + elementName);
			}
		}
	}
	,addButton: function(providedBuilder,text,settings) {
		this.validateSettings(settings,["buildName","text"],"button");
		var buttonBuildName = this.getSettings(settings,"buildName","button");
		var buttonText = this.getSettings(settings,"text",text);
		return bh_ui_UIStandardMultiAnimButton.create(providedBuilder,buttonBuildName,buttonText);
	}
	,addSlider: function(providedBuilder,settings,initialValue) {
		if(initialValue == null) {
			initialValue = 0;
		}
		this.validateSettings(settings,["buildName","size"],"slider");
		var sliderBuildName = this.getSettings(settings,"buildName","slider");
		var size = this.getIntSettings(settings,"size",200);
		return bh_ui_UIStandardMultiAnimSlider.create(providedBuilder,sliderBuildName,size,initialValue);
	}
	,addCheckbox: function(providedBuilder,settings,checked) {
		this.validateSettings(settings,["checkboxBuildName","initialValue"],"checkbox");
		var checkboxBuildName = this.getSettings(settings,"checkboxBuildName","checkbox");
		var tmp = checked;
		var checkBoxInitialValue = this.getBoolSettings(settings,"initialValue",tmp != null && tmp);
		return bh_ui_UIStandardMultiCheckbox.create(providedBuilder,checkboxBuildName,checkBoxInitialValue);
	}
	,addRadio: function(providedBuilder,settings,items,vertical,selectedIndex) {
		if(selectedIndex == null) {
			selectedIndex = 0;
		}
		this.validateSettings(settings,["radioBuildName","singleRadioButtonBuilderName"],"radio");
		var radioBuildName = this.getSettings(settings,"radioBuildName",vertical ? "radioButtonsVertical" : "radioButtonsHorizontal");
		var singleRadioButtonBuilderName = this.getSettings(settings,"singleRadioButtonBuilderName","radio");
		return bh_ui_UIMultiAnimRadioButtons.create(providedBuilder,radioBuildName,singleRadioButtonBuilderName,items,0);
	}
	,addCheckboxWithText: function(providedBuilder,settings,label,checked) {
		var _gthis = this;
		this.validateSettings(settings,["buildName","textColor","font"],"checkboxWithText");
		var checkbox;
		var checkboxWithNameBuildName = this.getSettings(settings,"buildName","checkboxWithText");
		var textColor = this.getIntSettings(settings,"textColor",-1);
		var font = this.getSettings(settings,"font","pikzel");
		var factory = function(settings) {
			checkbox = _gthis.addCheckbox(providedBuilder,settings,checked);
			_gthis.addElement(checkbox);
			return checkbox.getObject();
		};
		var providedBuilder1 = providedBuilder;
		var _g = new haxe_ds_StringMap();
		_g.h["textColor"] = textColor;
		_g.h["title"] = label;
		_g.h["font"] = font;
		var _g1 = new haxe_ds_StringMap();
		_g1.h["checkbox"] = bh_multianim_PlaceholderValues.PVFactory(factory);
		var built = providedBuilder1.buildWithParameters(checkboxWithNameBuildName,_g,{ placeholderObjects : _g1});
		return new bh_ui_UIElementContainer(checkbox,built.object);
	}
	,addScrollableList: function(builder,width,height,items,settings,initialIndex) {
		this.validateSettings(settings,["scrollableListBuilder","width","height","topClearance","itemBuilder"],"scrollableList");
		var panelBuildName = this.getSettings(settings,"scrollableListBuilder","list-panel");
		var finalWidth = this.getIntSettings(settings,"width",width);
		var finalHeight = this.getIntSettings(settings,"height",height);
		var topClearance = this.getIntSettings(settings,"topClearance",0);
		var listItemBuilder = this.getSettings(settings,"itemBuilder","list-item-120");
		var itemBuilder = bh_ui_DefaultUIElementItemBuilder.create(builder,listItemBuilder);
		return bh_ui_UIMultiAnimScrollableList.create(builder,itemBuilder,panelBuildName,finalWidth,finalHeight,items,topClearance,initialIndex);
	}
	,addDropdown: function(providedBuilder,items,settings,initialIndex) {
		if(initialIndex == null) {
			initialIndex = 0;
		}
		this.validateSettings(settings,["dropdownBuildName","autoOpen","autoCloseOnLeave","closeOnOutsideClick"],"dropdown");
		var dropdownBuildName = this.getSettings(settings,"dropdownBuildName","dropdown");
		var autoOpen = this.getBoolSettings(settings,"autoOpen",true);
		var autoCloseOnLeave = this.getBoolSettings(settings,"autoCloseOnLeave",true);
		var closeOnOutsideClick = this.getBoolSettings(settings,"closeOnOutsideClick",true);
		var panel = this.addScrollableList(providedBuilder,100,100,items,settings,initialIndex);
		var retVal = bh_ui_UIStandardMultiAnimDropdown.createWithPrebuiltPanel(providedBuilder,dropdownBuildName,panel,items,initialIndex);
		retVal.autoOpen = autoOpen;
		retVal.autoCloseOnLeave = autoCloseOnLeave;
		retVal.closeOnOutsideClick = closeOnOutsideClick;
		return retVal;
	}
	,addObjectToLayer: function(object,layer) {
		if(layer == null) {
			this.getSceneRoot().add(object,this.layers.get(bh_ui_screens_LayersEnum.DefaultLayer));
		} else {
			var idx = this.layers.get(layer);
			if(idx == null) {
				throw haxe_Exception.thrown("layer not found " + Std.string(layer));
			}
			this.getSceneRoot().add(object,idx);
		}
		return object;
	}
	,addObjectToLayerWithIterator: function(object,iterator,layer) {
		this.addObjectToLayer(object,layer);
		if(iterator.hasNext() == false) {
			throw haxe_Exception.thrown("no more iterations");
		}
		var pt = iterator.next();
		object.posChanged = true;
		object.x = pt.x;
		object.posChanged = true;
		object.y = pt.y;
	}
	,addBuilderResult: function(r,layer) {
		this.addObjectToLayer(r.object,layer);
		return r;
	}
	,addElement: function(element,layer) {
		this.elements.push(element);
		if(js_Boot.__implements(element,bh_ui_UIElementCustomAddToLayer)) {
			var customElement = js_Boot.__cast(element , bh_ui_UIElementCustomAddToLayer);
			var result = customElement.customAddToLayer(layer,this,false);
			switch(result._hx_index) {
			case 0:
				return element;
			case 1:
				var this1 = this.postCustomAddToLayer;
				var key = element.getObject();
				if(this1.h.__keys__[key.__id__] != null) {
					throw haxe_Exception.thrown("element already is in postCustomAddToLayer");
				}
				this.postCustomAddToLayer.set(element.getObject(),customElement);
				break;
			}
		}
		if(layer != null) {
			this.addObjectToLayer(element.getObject(),layer);
		}
		return element;
	}
	,getGroup: function(groupName) {
		var group = this.groups.h[groupName];
		if(group == null) {
			throw haxe_Exception.thrown("unknown group " + groupName);
		}
		return group;
	}
	,addElementToGroup: function(groupName,element) {
		var group = this.getGroup(groupName);
		if(group.indexOf(element) != -1) {
			throw haxe_Exception.thrown("element already member of the group");
		}
		group.push(element);
	}
	,removeElement: function(element) {
		var _this = element.getObject();
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		element.clear();
		HxOverrides.remove(this.elements,element);
		return element;
	}
	,addElementWithPos: function(element,x,y,layer) {
		if(layer == null) {
			layer = bh_ui_screens_LayersEnum.DefaultLayer;
		}
		this.addElement(element,layer);
		var _this = element.getObject();
		_this.posChanged = true;
		_this.x = x;
		_this.posChanged = true;
		_this.y = y;
		return element;
	}
	,addElementWithIterator: function(element,iterator,layer,groupName) {
		if(layer == null) {
			layer = bh_ui_screens_LayersEnum.DefaultLayer;
		}
		if(iterator.hasNext() == false) {
			throw haxe_Exception.thrown("no more iterations");
		}
		var pt = iterator.next();
		if(groupName != null) {
			this.addElementToGroup(groupName,element);
		}
		return this.addElementWithPos(element,pt.x,pt.y,layer);
	}
	,getController: function() {
		return this.get_controller();
	}
	,getSceneRoot: function() {
		return this.root;
	}
	,getHigherLayer: function(originalLayer) {
		var currentIndex = this.layers.get(originalLayer);
		if(currentIndex == null) {
			throw haxe_Exception.thrown("layer not found " + Std.string(originalLayer));
		}
		var bestIndex = 999999;
		var bestLayer = originalLayer;
		var map = this.layers;
		var _g_map = map;
		var _g_keys = map.keys();
		while(_g_keys.hasNext()) {
			var key = _g_keys.next();
			var _g_value = _g_map.get(key);
			var _g_key = key;
			var layer = _g_key;
			var layerIndex = _g_value;
			if(layerIndex > currentIndex && layerIndex < bestIndex) {
				bestIndex = layerIndex;
				bestLayer = layer;
			}
		}
		if(bestLayer == originalLayer) {
			throw haxe_Exception.thrown("no higher layer found for " + Std.string(originalLayer));
		}
		return bestLayer;
	}
	,findLayerFromObject: function(obj) {
		var current = obj;
		while(current != null) {
			var layerIndex = this.root.getChildLayer(current);
			current = current.parent;
			if(layerIndex == -1) {
				continue;
			}
			var map = this.layers;
			var _g_map = map;
			var _g_keys = map.keys();
			while(_g_keys.hasNext()) {
				var key = _g_keys.next();
				var _g_value = _g_map.get(key);
				var _g_key = key;
				var enumLayer = _g_key;
				var index = _g_value;
				if(layerIndex == index) {
					return enumLayer;
				}
			}
		}
		throw haxe_Exception.thrown("layer not found for object " + Std.string(obj) + ". layers " + (this.layers == null ? "null" : this.layers.toString()));
	}
	,__class__: bh_ui_screens_UIScreenBase
};
var format_gif_Block = $hxEnums["format.gif.Block"] = { __ename__:true,__constructs__:null
	,BFrame: ($_=function(frame) { return {_hx_index:0,frame:frame,__enum__:"format.gif.Block",toString:$estr}; },$_._hx_name="BFrame",$_.__params__ = ["frame"],$_)
	,BExtension: ($_=function(extension) { return {_hx_index:1,extension:extension,__enum__:"format.gif.Block",toString:$estr}; },$_._hx_name="BExtension",$_.__params__ = ["extension"],$_)
	,BEOF: {_hx_name:"BEOF",_hx_index:2,__enum__:"format.gif.Block",toString:$estr}
};
format_gif_Block.__constructs__ = [format_gif_Block.BFrame,format_gif_Block.BExtension,format_gif_Block.BEOF];
format_gif_Block.__empty_constructs__ = [format_gif_Block.BEOF];
var format_gif_Extension = $hxEnums["format.gif.Extension"] = { __ename__:true,__constructs__:null
	,EGraphicControl: ($_=function(gce) { return {_hx_index:0,gce:gce,__enum__:"format.gif.Extension",toString:$estr}; },$_._hx_name="EGraphicControl",$_.__params__ = ["gce"],$_)
	,EComment: ($_=function(text) { return {_hx_index:1,text:text,__enum__:"format.gif.Extension",toString:$estr}; },$_._hx_name="EComment",$_.__params__ = ["text"],$_)
	,EText: ($_=function(pte) { return {_hx_index:2,pte:pte,__enum__:"format.gif.Extension",toString:$estr}; },$_._hx_name="EText",$_.__params__ = ["pte"],$_)
	,EApplicationExtension: ($_=function(ext) { return {_hx_index:3,ext:ext,__enum__:"format.gif.Extension",toString:$estr}; },$_._hx_name="EApplicationExtension",$_.__params__ = ["ext"],$_)
	,EUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.gif.Extension",toString:$estr}; },$_._hx_name="EUnknown",$_.__params__ = ["id","data"],$_)
};
format_gif_Extension.__constructs__ = [format_gif_Extension.EGraphicControl,format_gif_Extension.EComment,format_gif_Extension.EText,format_gif_Extension.EApplicationExtension,format_gif_Extension.EUnknown];
format_gif_Extension.__empty_constructs__ = [];
var format_gif_ApplicationExtension = $hxEnums["format.gif.ApplicationExtension"] = { __ename__:true,__constructs__:null
	,AENetscapeLooping: ($_=function(loops) { return {_hx_index:0,loops:loops,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_._hx_name="AENetscapeLooping",$_.__params__ = ["loops"],$_)
	,AEUnknown: ($_=function(name,version,data) { return {_hx_index:1,name:name,version:version,data:data,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_._hx_name="AEUnknown",$_.__params__ = ["name","version","data"],$_)
};
format_gif_ApplicationExtension.__constructs__ = [format_gif_ApplicationExtension.AENetscapeLooping,format_gif_ApplicationExtension.AEUnknown];
format_gif_ApplicationExtension.__empty_constructs__ = [];
var format_gif_Version = $hxEnums["format.gif.Version"] = { __ename__:true,__constructs__:null
	,GIF87a: {_hx_name:"GIF87a",_hx_index:0,__enum__:"format.gif.Version",toString:$estr}
	,GIF89a: {_hx_name:"GIF89a",_hx_index:1,__enum__:"format.gif.Version",toString:$estr}
	,Unknown: ($_=function(version) { return {_hx_index:2,version:version,__enum__:"format.gif.Version",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["version"],$_)
};
format_gif_Version.__constructs__ = [format_gif_Version.GIF87a,format_gif_Version.GIF89a,format_gif_Version.Unknown];
format_gif_Version.__empty_constructs__ = [format_gif_Version.GIF87a,format_gif_Version.GIF89a];
var format_gif_DisposalMethod = $hxEnums["format.gif.DisposalMethod"] = { __ename__:true,__constructs__:null
	,UNSPECIFIED: {_hx_name:"UNSPECIFIED",_hx_index:0,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,NO_ACTION: {_hx_name:"NO_ACTION",_hx_index:1,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,FILL_BACKGROUND: {_hx_name:"FILL_BACKGROUND",_hx_index:2,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,RENDER_PREVIOUS: {_hx_name:"RENDER_PREVIOUS",_hx_index:3,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,UNDEFINED: ($_=function(index) { return {_hx_index:4,index:index,__enum__:"format.gif.DisposalMethod",toString:$estr}; },$_._hx_name="UNDEFINED",$_.__params__ = ["index"],$_)
};
format_gif_DisposalMethod.__constructs__ = [format_gif_DisposalMethod.UNSPECIFIED,format_gif_DisposalMethod.NO_ACTION,format_gif_DisposalMethod.FILL_BACKGROUND,format_gif_DisposalMethod.RENDER_PREVIOUS,format_gif_DisposalMethod.UNDEFINED];
format_gif_DisposalMethod.__empty_constructs__ = [format_gif_DisposalMethod.UNSPECIFIED,format_gif_DisposalMethod.NO_ACTION,format_gif_DisposalMethod.FILL_BACKGROUND,format_gif_DisposalMethod.RENDER_PREVIOUS];
var format_gif_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.gif.Reader"] = format_gif_Reader;
format_gif_Reader.__name__ = "format.gif.Reader";
format_gif_Reader.prototype = {
	read: function() {
		var b = 71;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 73;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 70;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var gifVer = this.i.readString(3);
		var version = format_gif_Version.GIF89a;
		switch(gifVer) {
		case "87a":
			version = format_gif_Version.GIF87a;
			break;
		case "89a":
			version = format_gif_Version.GIF89a;
			break;
		default:
			version = format_gif_Version.Unknown(gifVer);
		}
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packedField = this.i.readByte();
		var bgIndex = this.i.readByte();
		var pixelAspectRatio = this.i.readByte();
		if(pixelAspectRatio != 0) {
			pixelAspectRatio = (pixelAspectRatio + 15) / 64;
		} else {
			pixelAspectRatio = 1;
		}
		var lsd = { width : width, height : height, hasGlobalColorTable : (packedField & 128) == 128, colorResolution : (packedField & 112) >>> 4, sorted : (packedField & 8) == 8, globalColorTableSize : 2 << (packedField & 7), backgroundColorIndex : bgIndex, pixelAspectRatio : pixelAspectRatio};
		var gct = null;
		if(lsd.hasGlobalColorTable) {
			gct = this.readColorTable(lsd.globalColorTableSize);
		}
		var blocks = new haxe_ds_List();
		while(true) {
			var b = this.readBlock();
			blocks.add(b);
			if(b == format_gif_Block.BEOF) {
				break;
			}
		}
		return { version : version, logicalScreenDescriptor : lsd, globalColorTable : gct, blocks : blocks};
	}
	,readBlock: function() {
		var blockID = this.i.readByte();
		switch(blockID) {
		case 33:
			return this.readExtension();
		case 44:
			return this.readImage();
		case 59:
			return format_gif_Block.BEOF;
		}
		return format_gif_Block.BEOF;
	}
	,readImage: function() {
		var x = this.i.readUInt16();
		var y = this.i.readUInt16();
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packed = this.i.readByte();
		var localColorTable = (packed & 128) == 128;
		var interlaced = (packed & 64) == 64;
		var sorted = (packed & 32) == 32;
		var localColorTableSize = 2 << (packed & 7);
		var lct = null;
		if(localColorTable) {
			lct = this.readColorTable(localColorTableSize);
		}
		return format_gif_Block.BFrame({ x : x, y : y, width : width, height : height, localColorTable : localColorTable, interlaced : interlaced, sorted : sorted, localColorTableSize : localColorTableSize, pixels : this.readPixels(width,height,interlaced), colorTable : lct});
	}
	,readPixels: function(width,height,interlaced) {
		var input = this.i;
		var pixelsCount = width * height;
		var pixels = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
		var minCodeSize = input.readByte();
		var blockSize = input.readByte() - 1;
		var bits = input.readByte();
		var bitsCount = 8;
		var clearCode = 1 << minCodeSize;
		var eoiCode = clearCode + 1;
		var codeSize = minCodeSize + 1;
		var codeSizeLimit = 1 << codeSize;
		var codeMask = codeSizeLimit - 1;
		var baseDict = [];
		var _g = 0;
		var _g1 = clearCode;
		while(_g < _g1) {
			var i = _g++;
			baseDict[i] = [i];
		}
		var dict = [];
		var dictLen = clearCode + 2;
		var newRecord;
		var i = 0;
		var code = 0;
		var last;
		while(i < pixelsCount) {
			last = code;
			while(bitsCount < codeSize) {
				if(blockSize == 0) {
					break;
				}
				bits |= input.readByte() << bitsCount;
				bitsCount += 8;
				--blockSize;
				if(blockSize == 0) {
					blockSize = input.readByte();
				}
			}
			code = bits & codeMask;
			bits >>= codeSize;
			bitsCount -= codeSize;
			if(code == clearCode) {
				dict = baseDict.slice();
				dictLen = clearCode + 2;
				codeSize = minCodeSize + 1;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
				continue;
			}
			if(code == eoiCode) {
				break;
			}
			if(code < dictLen) {
				if(last != clearCode) {
					newRecord = dict[last].slice();
					newRecord.push(dict[code][0]);
					dict[dictLen++] = newRecord;
				}
			} else {
				if(code != dictLen) {
					throw haxe_Exception.thrown("Invalid LZW code. Excepted: " + dictLen + ", got: " + code);
				}
				newRecord = dict[last].slice();
				newRecord.push(newRecord[0]);
				dict[dictLen++] = newRecord;
			}
			newRecord = dict[code];
			var _g = 0;
			while(_g < newRecord.length) {
				var item = newRecord[_g];
				++_g;
				pixels.b[i++] = item;
			}
			if(dictLen == codeSizeLimit && codeSize < 12) {
				++codeSize;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
			}
		}
		while(blockSize > 0) {
			input.readByte();
			--blockSize;
			if(blockSize == 0) {
				blockSize = input.readByte();
			}
		}
		while(i < pixelsCount) pixels.b[i++] = 0;
		if(interlaced) {
			var buffer = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
			var offset = this.deinterlace(pixels,buffer,8,0,0,width,height);
			offset = this.deinterlace(pixels,buffer,8,4,offset,width,height);
			offset = this.deinterlace(pixels,buffer,4,2,offset,width,height);
			this.deinterlace(pixels,buffer,2,1,offset,width,height);
			pixels = buffer;
		}
		return pixels;
	}
	,deinterlace: function(input,output,step,y,offset,width,height) {
		while(y < height) {
			output.blit(y * width,input,offset,width);
			offset += width;
			y += step;
		}
		return offset;
	}
	,readExtension: function() {
		var subId = this.i.readByte();
		switch(subId) {
		case 1:
			if(this.i.readByte() != 12) {
				throw haxe_Exception.thrown("Incorrect size of Plain Text Extension introducer block.");
			}
			var tmp = this.i.readUInt16();
			var tmp1 = this.i.readUInt16();
			var tmp2 = this.i.readUInt16();
			var tmp3 = this.i.readUInt16();
			var tmp4 = this.i.readByte();
			var tmp5 = this.i.readByte();
			var tmp6 = this.i.readByte();
			var tmp7 = this.i.readByte();
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EText({ textGridX : tmp, textGridY : tmp1, textGridWidth : tmp2, textGridHeight : tmp3, charCellWidth : tmp4, charCellHeight : tmp5, textForegroundColorIndex : tmp6, textBackgroundColorIndex : tmp7, text : bytes.toString()}));
		case 249:
			if(this.i.readByte() != 4) {
				throw haxe_Exception.thrown("Incorrect Graphic Control Extension block size!");
			}
			var packed = this.i.readByte();
			var disposalMethod;
			switch((packed & 28) >> 2) {
			case 0:
				disposalMethod = format_gif_DisposalMethod.UNSPECIFIED;
				break;
			case 1:
				disposalMethod = format_gif_DisposalMethod.NO_ACTION;
				break;
			case 2:
				disposalMethod = format_gif_DisposalMethod.FILL_BACKGROUND;
				break;
			case 3:
				disposalMethod = format_gif_DisposalMethod.RENDER_PREVIOUS;
				break;
			default:
				disposalMethod = format_gif_DisposalMethod.UNDEFINED((packed & 28) >> 2);
			}
			var b = format_gif_Block.BExtension(format_gif_Extension.EGraphicControl({ disposalMethod : disposalMethod, userInput : (packed & 2) == 2, hasTransparentColor : (packed & 1) == 1, delay : this.i.readUInt16(), transparentIndex : this.i.readByte()}));
			this.i.readByte();
			return b;
		case 254:
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EComment(bytes.toString()));
		case 255:
			return this.readApplicationExtension();
		default:
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EUnknown(subId,bytes));
		}
	}
	,readApplicationExtension: function() {
		if(this.i.readByte() != 11) {
			throw haxe_Exception.thrown("Incorrect size of Application Extension introducer block.");
		}
		var name = this.i.readString(8);
		var version = this.i.readString(3);
		var buffer = new haxe_io_BytesOutput();
		var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
		var len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		var data = bytes;
		if(name == "NETSCAPE" && version == "2.0" && data.b[0] == 1) {
			return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AENetscapeLooping(data.b[1] | data.b[2] << 8)));
		}
		return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AEUnknown(name,version,data)));
	}
	,readColorTable: function(size) {
		size *= 3;
		var output = new haxe_io_Bytes(new ArrayBuffer(size));
		var c = 0;
		while(c < size) {
			var v = this.i.readByte();
			output.b[c] = v;
			var v1 = this.i.readByte();
			output.b[c + 1] = v1;
			var v2 = this.i.readByte();
			output.b[c + 2] = v2;
			c += 3;
		}
		return output;
	}
	,__class__: format_gif_Reader
};
var format_gif_Tools = function() { };
$hxClasses["format.gif.Tools"] = format_gif_Tools;
format_gif_Tools.__name__ = "format.gif.Tools";
format_gif_Tools.extractFullBGRA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw haxe_Exception.thrown("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g3 = pixels.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index + 2];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
format_gif_Tools.extractFullRGBA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw haxe_Exception.thrown("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g3 = pixels.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index + 2];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
var format_png_Color = $hxEnums["format.png.Color"] = { __ename__:true,__constructs__:null
	,ColGrey: ($_=function(alpha) { return {_hx_index:0,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_._hx_name="ColGrey",$_.__params__ = ["alpha"],$_)
	,ColTrue: ($_=function(alpha) { return {_hx_index:1,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_._hx_name="ColTrue",$_.__params__ = ["alpha"],$_)
	,ColIndexed: {_hx_name:"ColIndexed",_hx_index:2,__enum__:"format.png.Color",toString:$estr}
};
format_png_Color.__constructs__ = [format_png_Color.ColGrey,format_png_Color.ColTrue,format_png_Color.ColIndexed];
format_png_Color.__empty_constructs__ = [format_png_Color.ColIndexed];
var format_png_Chunk = $hxEnums["format.png.Chunk"] = { __ename__:true,__constructs__:null
	,CEnd: {_hx_name:"CEnd",_hx_index:0,__enum__:"format.png.Chunk",toString:$estr}
	,CHeader: ($_=function(h) { return {_hx_index:1,h:h,__enum__:"format.png.Chunk",toString:$estr}; },$_._hx_name="CHeader",$_.__params__ = ["h"],$_)
	,CData: ($_=function(b) { return {_hx_index:2,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_._hx_name="CData",$_.__params__ = ["b"],$_)
	,CPalette: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_._hx_name="CPalette",$_.__params__ = ["b"],$_)
	,CUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.png.Chunk",toString:$estr}; },$_._hx_name="CUnknown",$_.__params__ = ["id","data"],$_)
};
format_png_Chunk.__constructs__ = [format_png_Chunk.CEnd,format_png_Chunk.CHeader,format_png_Chunk.CData,format_png_Chunk.CPalette,format_png_Chunk.CUnknown];
format_png_Chunk.__empty_constructs__ = [format_png_Chunk.CEnd];
var format_png_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.checkCRC = true;
};
$hxClasses["format.png.Reader"] = format_png_Reader;
format_png_Reader.__name__ = "format.png.Reader";
format_png_Reader.prototype = {
	read: function() {
		var b = 137;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 80;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 78;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 71;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 13;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 10;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 26;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 10;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var l = new haxe_ds_List();
		while(true) {
			var c = this.readChunk();
			l.add(c);
			if(c == format_png_Chunk.CEnd) {
				break;
			}
		}
		return l;
	}
	,readHeader: function(i) {
		i.set_bigEndian(true);
		var width = i.readInt32();
		var height = i.readInt32();
		var colbits = i.readByte();
		var color = i.readByte();
		var color1;
		switch(color) {
		case 0:
			color1 = format_png_Color.ColGrey(false);
			break;
		case 2:
			color1 = format_png_Color.ColTrue(false);
			break;
		case 3:
			color1 = format_png_Color.ColIndexed;
			break;
		case 4:
			color1 = format_png_Color.ColGrey(true);
			break;
		case 6:
			color1 = format_png_Color.ColTrue(true);
			break;
		default:
			throw haxe_Exception.thrown("Unknown color model " + color + ":" + colbits);
		}
		var compress = i.readByte();
		var filter = i.readByte();
		if(compress != 0 || filter != 0) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var interlace = i.readByte();
		if(interlace != 0 && interlace != 1) {
			throw haxe_Exception.thrown("Invalid header");
		}
		return { width : width, height : height, colbits : colbits, color : color1, interlaced : interlace == 1};
	}
	,readChunk: function() {
		var dataLen = this.i.readInt32();
		var id = this.i.readString(4);
		var data = this.i.read(dataLen);
		var crc = this.i.readInt32();
		if(this.checkCRC) {
			var c_crc = -1;
			var tmp = (c_crc ^ HxOverrides.cca(id,0)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,1)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,2)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,3)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var b = data.b.bufferValue;
			var _g = 0;
			var _g1 = data.length;
			while(_g < _g1) {
				var i = _g++;
				var tmp = (c_crc ^ b.bytes[i]) & 255;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				c_crc = c_crc >>> 8 ^ tmp;
			}
			if((c_crc ^ -1) != crc) {
				throw haxe_Exception.thrown("CRC check failure");
			}
		}
		switch(id) {
		case "IDAT":
			return format_png_Chunk.CData(data);
		case "IEND":
			return format_png_Chunk.CEnd;
		case "IHDR":
			return format_png_Chunk.CHeader(this.readHeader(new haxe_io_BytesInput(data)));
		case "PLTE":
			return format_png_Chunk.CPalette(data);
		default:
			return format_png_Chunk.CUnknown(id,data);
		}
	}
	,__class__: format_png_Reader
};
var format_png_Tools = function() { };
$hxClasses["format.png.Tools"] = format_png_Tools;
format_png_Tools.__name__ = "format.png.Tools";
format_png_Tools.getHeader = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 1) {
			var h = c.h;
			return h;
		}
	}
	throw haxe_Exception.thrown("Header not found");
};
format_png_Tools.getPalette = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 3) {
			var b = c.b;
			return b;
		}
	}
	return null;
};
format_png_Tools.extract32 = function(d,bytes,flipY) {
	var h = format_png_Tools.getHeader(d);
	var bgra = bytes == null ? new haxe_io_Bytes(new ArrayBuffer(h.width * h.height * 4)) : bytes;
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 2) {
			var b = c.b;
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw haxe_Exception.thrown("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var lineDelta = 0;
	if(flipY) {
		lineDelta = -h.width * 8;
		w = (h.height - 1) * (h.width * 4);
	}
	var flipY1 = flipY ? -1 : 1;
	var _g = h.color;
	switch(_g._hx_index) {
	case 0:
		var alpha = _g.alpha;
		if(h.colbits != 8) {
			throw haxe_Exception.thrown("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var alphvaIdx = -1;
		if(!alpha) {
			var _g_head = d.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var t = val;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						var data1 = t.data;
						if(data1.length >= 2) {
							alphvaIdx = data1.b[1];
						}
						break;
					}
				}
			}
		}
		var _g1 = 0;
		var _g2 = h.height;
		while(_g1 < _g2) {
			var y = _g1++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g3 = 0;
					var _g4 = width;
					while(_g3 < _g4) {
						var x = _g3++;
						var v = data.b[r++];
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = data.b[r++];
					}
				} else {
					var _g5 = 0;
					var _g6 = width;
					while(_g5 < _g6) {
						var x1 = _g5++;
						var v1 = data.b[r++];
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 1:
				var cv = 0;
				var ca = 0;
				if(alpha) {
					var _g7 = 0;
					var _g8 = width;
					while(_g7 < _g8) {
						var x2 = _g7++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						ca += data.b[r++];
						bgra.b[w++] = ca;
					}
				} else {
					var _g9 = 0;
					var _g10 = width;
					while(_g9 < _g10) {
						var x3 = _g9++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g11 = 0;
					var _g12 = width;
					while(_g11 < _g12) {
						var x4 = _g11++;
						var v2 = data.b[r++] + bgra.b[w - stride];
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						var va = data.b[r++] + bgra.b[w - stride];
						bgra.b[w++] = va;
					}
				} else {
					var _g13 = 0;
					var _g14 = width;
					while(_g13 < _g14) {
						var x5 = _g13++;
						var v3 = data.b[r++] + bgra.b[w - stride];
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 3:
				var cv1 = 0;
				var ca1 = 0;
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g15 = 0;
					var _g16 = width;
					while(_g15 < _g16) {
						var x6 = _g15++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						ca1 = data.b[r++] + (ca1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = ca1;
					}
				} else {
					var _g17 = 0;
					var _g18 = width;
					while(_g17 < _g18) {
						var x7 = _g17++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 4:
				var stride2 = width * 4 * flipY1;
				var cv2 = 0;
				var ca2 = 0;
				if(alpha) {
					var _g19 = 0;
					var _g20 = width;
					while(_g19 < _g20) {
						var x8 = _g19++;
						var b = y == 0 ? 0 : bgra.b[w - stride2];
						var c = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k = cv2 + b - c;
						var pa = k - cv2;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c;
						if(pc < 0) {
							pc = -pc;
						}
						var pos = r++;
						cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b : c) + data.b[pos] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						var b1 = y == 0 ? 0 : bgra.b[w - stride2];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k1 = ca2 + b1 - c1;
						var pa1 = k1 - ca2;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b1;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c1;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						var pos1 = r++;
						ca2 = (pa1 <= pb1 && pa1 <= pc1 ? ca2 : pb1 <= pc1 ? b1 : c1) + data.b[pos1] & 255;
						bgra.b[w++] = ca2;
					}
				} else {
					var _g21 = 0;
					var _g22 = width;
					while(_g21 < _g22) {
						var x9 = _g21++;
						var b2 = y == 0 ? 0 : bgra.b[w - stride2];
						var c2 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k2 = cv2 + b2 - c2;
						var pa2 = k2 - cv2;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b2;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c2;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						var pos2 = r++;
						cv2 = (pa2 <= pb2 && pa2 <= pc2 ? cv2 : pb2 <= pc2 ? b2 : c2) + data.b[pos2] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 1:
		var alpha = _g.alpha;
		if(h.colbits != 8) {
			throw haxe_Exception.thrown("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 4 : 3) * width + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var alphaRed = -1;
		var alphaGreen = -1;
		var alphaBlue = -1;
		if(!alpha) {
			var _g_head = d.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var t = val;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						var data1 = t.data;
						if(data1.length >= 6) {
							alphaRed = data1.b[1];
							alphaGreen = data1.b[3];
							alphaBlue = data1.b[5];
						}
						break;
					}
				}
			}
		}
		var cr = 0;
		var cg = 0;
		var cb = 0;
		var ca = 0;
		var _g = 0;
		var _g1 = h.height;
		while(_g < _g1) {
			var y = _g++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g2 = 0;
					var _g3 = width;
					while(_g2 < _g3) {
						var x = _g2++;
						bgra.b[w++] = data.b[r + 2];
						bgra.b[w++] = data.b[r + 1];
						bgra.b[w++] = data.b[r];
						bgra.b[w++] = data.b[r + 3];
						r += 4;
					}
				} else {
					var _g4 = 0;
					var _g5 = width;
					while(_g4 < _g5) {
						var x1 = _g4++;
						cb = data.b[r + 2];
						bgra.b[w++] = cb;
						cg = data.b[r + 1];
						bgra.b[w++] = cg;
						cr = data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 1:
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				if(alpha) {
					var _g6 = 0;
					var _g7 = width;
					while(_g6 < _g7) {
						var x2 = _g6++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						ca += data.b[r + 3];
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g8 = 0;
					var _g9 = width;
					while(_g8 < _g9) {
						var x3 = _g8++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g10 = 0;
					var _g11 = width;
					while(_g10 < _g11) {
						var x4 = _g10++;
						bgra.b[w] = data.b[r + 2] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r + 1] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r + 3] + bgra.b[w - stride];
						++w;
						r += 4;
					}
				} else {
					var _g12 = 0;
					var _g13 = width;
					while(_g12 < _g13) {
						var x5 = _g12++;
						cb = data.b[r + 2] + bgra.b[w - stride];
						bgra.b[w] = cb;
						++w;
						cg = data.b[r + 1] + bgra.b[w - stride];
						bgra.b[w] = cg;
						++w;
						cr = data.b[r] + bgra.b[w - stride];
						bgra.b[w] = cr;
						++w;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 3:
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g14 = 0;
					var _g15 = width;
					while(_g14 < _g15) {
						var x6 = _g14++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cr;
						ca = data.b[r + 3] + (ca + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g16 = 0;
					var _g17 = width;
					while(_g16 < _g17) {
						var x7 = _g16++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 4:
				var stride2 = width * 4 * flipY1;
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				if(alpha) {
					var _g18 = 0;
					var _g19 = width;
					while(_g18 < _g19) {
						var x8 = _g18++;
						var b = y == 0 ? 0 : bgra.b[w - stride2];
						var c = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k = cb + b - c;
						var pa = k - cb;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c;
						if(pc < 0) {
							pc = -pc;
						}
						cb = (pa <= pb && pa <= pc ? cb : pb <= pc ? b : c) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b1 = y == 0 ? 0 : bgra.b[w - stride2];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k1 = cg + b1 - c1;
						var pa1 = k1 - cg;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b1;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c1;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						cg = (pa1 <= pb1 && pa1 <= pc1 ? cg : pb1 <= pc1 ? b1 : c1) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b2 = y == 0 ? 0 : bgra.b[w - stride2];
						var c2 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k2 = cr + b2 - c2;
						var pa2 = k2 - cr;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b2;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c2;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						cr = (pa2 <= pb2 && pa2 <= pc2 ? cr : pb2 <= pc2 ? b2 : c2) + data.b[r] & 255;
						bgra.b[w++] = cr;
						var b3 = y == 0 ? 0 : bgra.b[w - stride2];
						var c3 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k3 = ca + b3 - c3;
						var pa3 = k3 - ca;
						if(pa3 < 0) {
							pa3 = -pa3;
						}
						var pb3 = k3 - b3;
						if(pb3 < 0) {
							pb3 = -pb3;
						}
						var pc3 = k3 - c3;
						if(pc3 < 0) {
							pc3 = -pc3;
						}
						ca = (pa3 <= pb3 && pa3 <= pc3 ? ca : pb3 <= pc3 ? b3 : c3) + data.b[r + 3] & 255;
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g20 = 0;
					var _g21 = width;
					while(_g20 < _g21) {
						var x9 = _g20++;
						var b4 = y == 0 ? 0 : bgra.b[w - stride2];
						var c4 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k4 = cb + b4 - c4;
						var pa4 = k4 - cb;
						if(pa4 < 0) {
							pa4 = -pa4;
						}
						var pb4 = k4 - b4;
						if(pb4 < 0) {
							pb4 = -pb4;
						}
						var pc4 = k4 - c4;
						if(pc4 < 0) {
							pc4 = -pc4;
						}
						cb = (pa4 <= pb4 && pa4 <= pc4 ? cb : pb4 <= pc4 ? b4 : c4) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b5 = y == 0 ? 0 : bgra.b[w - stride2];
						var c5 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k5 = cg + b5 - c5;
						var pa5 = k5 - cg;
						if(pa5 < 0) {
							pa5 = -pa5;
						}
						var pb5 = k5 - b5;
						if(pb5 < 0) {
							pb5 = -pb5;
						}
						var pc5 = k5 - c5;
						if(pc5 < 0) {
							pc5 = -pc5;
						}
						cg = (pa5 <= pb5 && pa5 <= pc5 ? cg : pb5 <= pc5 ? b5 : c5) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b6 = y == 0 ? 0 : bgra.b[w - stride2];
						var c6 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k6 = cr + b6 - c6;
						var pa6 = k6 - cr;
						if(pa6 < 0) {
							pa6 = -pa6;
						}
						var pb6 = k6 - b6;
						if(pb6 < 0) {
							pb6 = -pb6;
						}
						var pc6 = k6 - c6;
						if(pc6 < 0) {
							pc6 = -pc6;
						}
						cr = (pa6 <= pb6 && pa6 <= pc6 ? cr : pb6 <= pc6 ? b6 : c6) + data.b[r] & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 2:
		var pal = format_png_Tools.getPalette(d);
		if(pal == null) {
			throw haxe_Exception.thrown("PNG Palette is missing");
		}
		var alpha = null;
		var _g_head = d.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var t = val;
			if(t._hx_index == 4) {
				if(t.id == "tRNS") {
					var data1 = t.data;
					alpha = data1;
					break;
				}
			}
		}
		if(alpha != null && alpha.length < 1 << h.colbits) {
			var alpha2 = new haxe_io_Bytes(new ArrayBuffer(1 << h.colbits));
			alpha2.blit(0,alpha,0,alpha.length);
			alpha2.fill(alpha.length,alpha2.length - alpha.length,255);
			alpha = alpha2;
		}
		var width = h.width;
		var stride = Math.ceil(width * h.colbits / 8) + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var rline = stride - 1;
		var _g = 0;
		var _g1 = h.height;
		while(_g < _g1) {
			var y = _g++;
			var f = data.b[r++];
			if(f == 0) {
				r += rline;
				continue;
			}
			switch(f) {
			case 1:
				var c = 0;
				var _g2 = 0;
				var _g3 = width;
				while(_g2 < _g3) {
					var x = _g2++;
					var v = data.b[r];
					c += v;
					data.b[r++] = c & 255;
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : rline + 1;
				var _g4 = 0;
				var _g5 = width;
				while(_g4 < _g5) {
					var x1 = _g4++;
					var v1 = data.b[r];
					data.b[r] = v1 + data.b[r - stride];
					++r;
				}
				break;
			case 3:
				var c1 = 0;
				var stride1 = y == 0 ? 0 : rline + 1;
				var _g6 = 0;
				var _g7 = width;
				while(_g6 < _g7) {
					var x2 = _g6++;
					var v2 = data.b[r];
					c1 = v2 + (c1 + data.b[r - stride1] >> 1) & 255;
					data.b[r++] = c1;
				}
				break;
			case 4:
				var stride2 = rline + 1;
				var c2 = 0;
				var _g8 = 0;
				var _g9 = width;
				while(_g8 < _g9) {
					var x3 = _g8++;
					var v3 = data.b[r];
					var numChannels = 1;
					if(numChannels == null) {
						numChannels = 4;
					}
					var b = y == 0 ? 0 : data.b[r - stride2];
					var c3 = x3 == 0 || y == 0 ? 0 : data.b[r - stride2 - numChannels];
					var k = c2 + b - c3;
					var pa = k - c2;
					if(pa < 0) {
						pa = -pa;
					}
					var pb = k - b;
					if(pb < 0) {
						pb = -pb;
					}
					var pc = k - c3;
					if(pc < 0) {
						pc = -pc;
					}
					c2 = (pa <= pb && pa <= pc ? c2 : pb <= pc ? b : c3) + v3 & 255;
					data.b[r++] = c2;
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
		}
		var r = 0;
		if(h.colbits == 8) {
			var _g = 0;
			var _g1 = h.height;
			while(_g < _g1) {
				var y = _g++;
				++r;
				var _g2 = 0;
				var _g3 = h.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var c = data.b[r++];
					bgra.b[w++] = pal.b[c * 3 + 2];
					bgra.b[w++] = pal.b[c * 3 + 1];
					bgra.b[w++] = pal.b[c * 3];
					bgra.b[w++] = alpha != null ? alpha.b[c] : 255;
				}
				w += lineDelta;
			}
		} else if(h.colbits < 8) {
			var req = h.colbits;
			var mask = (1 << req) - 1;
			var _g = 0;
			var _g1 = h.height;
			while(_g < _g1) {
				var y = _g++;
				++r;
				var bits = 0;
				var nbits = 0;
				var _g2 = 0;
				var _g3 = h.width;
				while(_g2 < _g3) {
					var x = _g2++;
					if(nbits < req) {
						bits = bits << 8 | data.b[r++];
						nbits += 8;
					}
					var c = bits >>> nbits - req & mask;
					nbits -= req;
					bgra.b[w++] = pal.b[c * 3 + 2];
					bgra.b[w++] = pal.b[c * 3 + 1];
					bgra.b[w++] = pal.b[c * 3];
					bgra.b[w++] = alpha != null ? alpha.b[c] : 255;
				}
				w += lineDelta;
			}
		} else {
			throw haxe_Exception.thrown(h.colbits + " indexed bits per pixel not supported");
		}
		break;
	}
	return bgra;
};
format_png_Tools.extract = function(d,output,expandAlpha) {
	if(expandAlpha == null) {
		expandAlpha = false;
	}
	var h = format_png_Tools.getHeader(d);
	var hasAlpha = false;
	var channels;
	var _g = h.color;
	switch(_g._hx_index) {
	case 0:
		var alpha = _g.alpha;
		hasAlpha = alpha;
		channels = alpha ? 2 : 1;
		break;
	case 1:
		var alpha = _g.alpha;
		hasAlpha = alpha;
		channels = alpha ? 4 : 3;
		break;
	case 2:
		throw haxe_Exception.thrown("assert");
	}
	if(expandAlpha && hasAlpha) {
		expandAlpha = false;
	}
	var bpp = h.colbits >> 3;
	var outChannels = expandAlpha ? channels + 1 : channels;
	if(output == null) {
		output = new haxe_io_Bytes(new ArrayBuffer(outChannels * bpp * h.width * h.height));
	}
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 2) {
			var b = c.b;
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw haxe_Exception.thrown("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var width = h.width;
	var ncomps = channels * bpp;
	var upperLine = outChannels * bpp * width;
	var leftPixel = outChannels * bpp;
	if(data.length < h.height * (ncomps * width + 1)) {
		throw haxe_Exception.thrown("Not enough data");
	}
	var _g = [];
	var _g1 = 0;
	var _g2 = ncomps;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(0);
	}
	var tmp = _g;
	var _g = 0;
	var _g1 = h.height;
	while(_g < _g1) {
		var y = _g++;
		var f = data.b[r++];
		if(f != 0 && f != 2) {
			var _g2 = 0;
			var _g3 = ncomps;
			while(_g2 < _g3) {
				var i = _g2++;
				tmp[i] = 0;
			}
		}
		switch(f) {
		case 0:
			var _g4 = 0;
			var _g5 = width;
			while(_g4 < _g5) {
				var x = _g4++;
				var _g6 = 0;
				var _g7 = ncomps;
				while(_g6 < _g7) {
					var i1 = _g6++;
					output.b[w++] = data.b[r++];
				}
				if(expandAlpha) {
					output.b[w++] = 255;
					if(bpp == 2) {
						output.b[w++] = 255;
					}
				}
			}
			break;
		case 1:
			var _g8 = 0;
			var _g9 = width;
			while(_g8 < _g9) {
				var x1 = _g8++;
				var _g10 = 0;
				var _g11 = ncomps;
				while(_g10 < _g11) {
					var i2 = _g10++;
					tmp[i2] += data.b[r++];
					output.b[w++] = tmp[i2];
				}
				if(expandAlpha) {
					output.b[w++] = 255;
					if(bpp == 2) {
						output.b[w++] = 255;
					}
				}
			}
			break;
		case 2:
			var stride = y == 0 ? 0 : upperLine;
			var _g12 = 0;
			var _g13 = width;
			while(_g12 < _g13) {
				var x2 = _g12++;
				var _g14 = 0;
				var _g15 = ncomps;
				while(_g14 < _g15) {
					var i3 = _g14++;
					var v = data.b[r++] + output.b[w - stride];
					output.b[w++] = v;
				}
				if(expandAlpha) {
					output.b[w++] = 255;
					if(bpp == 2) {
						output.b[w++] = 255;
					}
				}
			}
			break;
		case 3:
			var stride1 = y == 0 ? 0 : upperLine;
			var _g16 = 0;
			var _g17 = width;
			while(_g16 < _g17) {
				var x3 = _g16++;
				var _g18 = 0;
				var _g19 = ncomps;
				while(_g18 < _g19) {
					var i4 = _g18++;
					tmp[i4] = data.b[r++] + (tmp[i4] + output.b[w - stride1] >> 1) & 255;
					output.b[w++] = tmp[i4];
				}
				if(expandAlpha) {
					output.b[w++] = 255;
					if(bpp == 2) {
						output.b[w++] = 255;
					}
				}
			}
			break;
		case 4:
			var _g20 = 0;
			var _g21 = width;
			while(_g20 < _g21) {
				var x4 = _g20++;
				var _g22 = 0;
				var _g23 = ncomps;
				while(_g22 < _g23) {
					var i5 = _g22++;
					var prev = tmp[i5];
					var b = y == 0 ? 0 : output.b[w - upperLine];
					var c = x4 == 0 || y == 0 ? 0 : output.b[w - upperLine - leftPixel];
					var k = prev + b - c;
					var pa = k - prev;
					if(pa < 0) {
						pa = -pa;
					}
					var pb = k - b;
					if(pb < 0) {
						pb = -pb;
					}
					var pc = k - c;
					if(pc < 0) {
						pc = -pc;
					}
					var pos = r++;
					tmp[i5] = (pa <= pb && pa <= pc ? prev : pb <= pc ? b : c) + data.b[pos] & 255;
					output.b[w++] = tmp[i5];
				}
				if(expandAlpha) {
					output.b[w++] = 255;
					if(bpp == 2) {
						output.b[w++] = 255;
					}
				}
			}
			break;
		default:
			throw haxe_Exception.thrown("Invalid filter " + f);
		}
	}
	if(h.colbits == 16) {
		var w = 0;
		var _g = 0;
		var _g1 = h.height * width * outChannels;
		while(_g < _g1) {
			var x = _g++;
			var a = output.b[w];
			var b = output.b[w + 1];
			output.b[w++] = b;
			output.b[w++] = a;
		}
	}
	return output;
};
var format_tga_ImageOrigin = $hxEnums["format.tga.ImageOrigin"] = { __ename__:true,__constructs__:null
	,BottomLeft: {_hx_name:"BottomLeft",_hx_index:0,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,BottomRight: {_hx_name:"BottomRight",_hx_index:1,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopLeft: {_hx_name:"TopLeft",_hx_index:2,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopRight: {_hx_name:"TopRight",_hx_index:3,__enum__:"format.tga.ImageOrigin",toString:$estr}
};
format_tga_ImageOrigin.__constructs__ = [format_tga_ImageOrigin.BottomLeft,format_tga_ImageOrigin.BottomRight,format_tga_ImageOrigin.TopLeft,format_tga_ImageOrigin.TopRight];
format_tga_ImageOrigin.__empty_constructs__ = [format_tga_ImageOrigin.BottomLeft,format_tga_ImageOrigin.BottomRight,format_tga_ImageOrigin.TopLeft,format_tga_ImageOrigin.TopRight];
var format_tga_ImageType = $hxEnums["format.tga.ImageType"] = { __ename__:true,__constructs__:null
	,NoImage: {_hx_name:"NoImage",_hx_index:0,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedColorMapped: {_hx_name:"UncompressedColorMapped",_hx_index:1,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedTrueColor: {_hx_name:"UncompressedTrueColor",_hx_index:2,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedBlackAndWhite: {_hx_name:"UncompressedBlackAndWhite",_hx_index:3,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthColorMapped: {_hx_name:"RunLengthColorMapped",_hx_index:4,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthTrueColor: {_hx_name:"RunLengthTrueColor",_hx_index:5,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthBlackAndWhite: {_hx_name:"RunLengthBlackAndWhite",_hx_index:6,__enum__:"format.tga.ImageType",toString:$estr}
	,Unknown: ($_=function(type) { return {_hx_index:7,type:type,__enum__:"format.tga.ImageType",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["type"],$_)
};
format_tga_ImageType.__constructs__ = [format_tga_ImageType.NoImage,format_tga_ImageType.UncompressedColorMapped,format_tga_ImageType.UncompressedTrueColor,format_tga_ImageType.UncompressedBlackAndWhite,format_tga_ImageType.RunLengthColorMapped,format_tga_ImageType.RunLengthTrueColor,format_tga_ImageType.RunLengthBlackAndWhite,format_tga_ImageType.Unknown];
format_tga_ImageType.__empty_constructs__ = [format_tga_ImageType.NoImage,format_tga_ImageType.UncompressedColorMapped,format_tga_ImageType.UncompressedTrueColor,format_tga_ImageType.UncompressedBlackAndWhite,format_tga_ImageType.RunLengthColorMapped,format_tga_ImageType.RunLengthTrueColor,format_tga_ImageType.RunLengthBlackAndWhite];
var format_tga_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.tga.Reader"] = format_tga_Reader;
format_tga_Reader.__name__ = "format.tga.Reader";
format_tga_Reader.prototype = {
	read: function() {
		var idLength = this.i.readByte();
		var header = this.readHeader();
		var id = idLength == 0 ? "" : this.i.readString(idLength);
		var colorMap = this.readColorMapData(header);
		return { header : header, imageId : id, colorMapData : colorMap, imageData : this.readImageData(header,colorMap), developerData : null};
	}
	,readHeader: function() {
		var colorMapType = this.i.readByte();
		var dataType;
		var dataId = this.i.readByte();
		switch(dataId) {
		case 0:
			dataType = format_tga_ImageType.NoImage;
			break;
		case 1:
			dataType = format_tga_ImageType.UncompressedColorMapped;
			break;
		case 2:
			dataType = format_tga_ImageType.UncompressedTrueColor;
			break;
		case 3:
			dataType = format_tga_ImageType.UncompressedBlackAndWhite;
			break;
		case 9:
			dataType = format_tga_ImageType.RunLengthColorMapped;
			break;
		case 10:
			dataType = format_tga_ImageType.RunLengthTrueColor;
			break;
		case 11:
			dataType = format_tga_ImageType.RunLengthBlackAndWhite;
			break;
		default:
			dataType = format_tga_ImageType.Unknown(dataId);
		}
		var colorMapOrigin = this.i.readInt16();
		var colorMapLength = this.i.readInt16();
		var colorMapDepth = this.i.readByte();
		var xOrigin = this.i.readInt16();
		var yOrigin = this.i.readInt16();
		var width = this.i.readInt16();
		var height = this.i.readInt16();
		var depth = this.i.readByte();
		var descriptor = this.i.readByte();
		var origin;
		switch(descriptor & 48) {
		case 16:
			origin = format_tga_ImageOrigin.BottomRight;
			break;
		case 32:
			origin = format_tga_ImageOrigin.TopLeft;
			break;
		case 48:
			origin = format_tga_ImageOrigin.TopRight;
			break;
		default:
			origin = format_tga_ImageOrigin.BottomLeft;
		}
		return { colorMapType : colorMapType, imageType : dataType, colorMapFirstIndex : colorMapOrigin, colorMapLength : colorMapLength, colorMapEntrySize : colorMapDepth, xOrigin : xOrigin, yOrigin : yOrigin, width : width, height : height, bitsPerPixel : depth, alphaChannelBits : descriptor & 15, imageOrigin : origin};
	}
	,readColorMapData: function(header) {
		if(header.colorMapType == 0) {
			return null;
		}
		return this.readPixels(header.colorMapEntrySize,header.colorMapLength,header.alphaChannelBits,false);
	}
	,readImageData: function(header,colorMap) {
		switch(header.imageType._hx_index) {
		case 0:
			return null;
		case 1:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,false);
		case 2:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 3:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 4:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,true);
		case 5:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		case 6:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		default:
			throw haxe_Exception.thrown("Unsupported image data type!");
		}
	}
	,readPixels: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var list = new Array(amount);
		var alpha = alphaChannelBits != 0;
		var bitFieldSize = bitsPerPixel / 3 | 0;
		if(bitFieldSize > 8) {
			bitFieldSize = 8;
		}
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixel2);
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			parsePixel = $bind(this,this.parsePixel3);
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			parsePixel = $bind(this,this.parsePixel4);
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readMono: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var list = new Array(amount);
		var alpha = alphaChannelBits != 0;
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixelGreyAlpha);
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readIndexes: function(bitsPerPixel,amount,colorMap,offset,rle) {
		var list = new Array(amount);
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var i = 0;
			var rleChunk;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = colorMap[offset + readEntry()];
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = colorMap[offset + readEntry()];
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = colorMap[offset + readEntry()];
			}
		}
		return list;
	}
	,parsePixel1: function(value,alpha) {
		return value << 16 | value << 8 | value;
	}
	,parsePixelGreyAlpha: function(value,alpha) {
		return (alpha ? (value & 65280) << 16 : 0) | this.parsePixel1(value & 255,false);
	}
	,parsePixel2: function(value,alpha) {
		return (alpha ? (value & 32768) == 1 ? -16777216 : 0 : 0) | (((value & 31744) >> 10) / 31 * 255 | 0) << 16 | (((value & 992) >> 5) / 31 * 255 | 0) << 8 | ((value & 31) / 31 * 255 | 0);
	}
	,parsePixel3: function(value,alpha) {
		return value;
	}
	,parsePixel4: function(value,alpha) {
		return value;
	}
	,__class__: format_tga_Reader
};
var format_tools_Inflate = function() { };
$hxClasses["format.tools.Inflate"] = format_tools_Inflate;
format_tools_Inflate.__name__ = "format.tools.Inflate";
format_tools_Inflate.run = function(bytes) {
	return haxe_zip_Uncompress.run(bytes);
};
var h2d_BlendMode = $hxEnums["h2d.BlendMode"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h2d.BlendMode",toString:$estr}
	,Alpha: {_hx_name:"Alpha",_hx_index:1,__enum__:"h2d.BlendMode",toString:$estr}
	,Add: {_hx_name:"Add",_hx_index:2,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaAdd: {_hx_name:"AlphaAdd",_hx_index:3,__enum__:"h2d.BlendMode",toString:$estr}
	,SoftAdd: {_hx_name:"SoftAdd",_hx_index:4,__enum__:"h2d.BlendMode",toString:$estr}
	,Multiply: {_hx_name:"Multiply",_hx_index:5,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaMultiply: {_hx_name:"AlphaMultiply",_hx_index:6,__enum__:"h2d.BlendMode",toString:$estr}
	,Erase: {_hx_name:"Erase",_hx_index:7,__enum__:"h2d.BlendMode",toString:$estr}
	,Screen: {_hx_name:"Screen",_hx_index:8,__enum__:"h2d.BlendMode",toString:$estr}
	,Sub: {_hx_name:"Sub",_hx_index:9,__enum__:"h2d.BlendMode",toString:$estr}
	,Max: {_hx_name:"Max",_hx_index:10,__enum__:"h2d.BlendMode",toString:$estr}
	,Min: {_hx_name:"Min",_hx_index:11,__enum__:"h2d.BlendMode",toString:$estr}
};
h2d_BlendMode.__constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.AlphaAdd,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.AlphaMultiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen,h2d_BlendMode.Sub,h2d_BlendMode.Max,h2d_BlendMode.Min];
h2d_BlendMode.__empty_constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.AlphaAdd,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.AlphaMultiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen,h2d_BlendMode.Sub,h2d_BlendMode.Max,h2d_BlendMode.Min];
var h2d_Camera = function(scene) {
	this.followRotation = false;
	this.posChanged = true;
	this.x = 0;
	this.posChanged = true;
	this.y = 0;
	this.posChanged = true;
	this.scaleX = 1;
	this.posChanged = true;
	this.scaleY = 1;
	this.posChanged = true;
	this.rotation = 0;
	this.posChanged = true;
	this.anchorX = 0;
	this.posChanged = true;
	this.anchorY = 0;
	this.viewX = 0;
	this.viewY = 0;
	this.viewW = 1;
	this.viewH = 1;
	this.visible = true;
	if(scene != null) {
		scene.addCamera(this);
	}
};
$hxClasses["h2d.Camera"] = h2d_Camera;
h2d_Camera.__name__ = "h2d.Camera";
h2d_Camera.prototype = {
	layerVisible: function(layer) {
		return true;
	}
	,enter: function(ctx) {
		ctx.pushCamera(this);
		if(this.clipViewport) {
			var old = ctx.inFilter;
			ctx.inFilter = null;
			ctx.pushRenderZone(this.viewX * this.scene.width,this.viewY * this.scene.height,this.viewW * this.scene.width,this.viewH * this.scene.height);
			ctx.inFilter = old;
		}
	}
	,exit: function(ctx) {
		if(this.clipViewport) {
			var old = ctx.inFilter;
			ctx.inFilter = null;
			ctx.popRenderZone();
			ctx.inFilter = old;
		}
		ctx.popCamera();
	}
	,sync: function(ctx,force) {
		if(force == null) {
			force = false;
		}
		if(this.scene == null) {
			return;
		}
		if(this.follow != null) {
			this.posChanged = true;
			this.x = this.follow.absX;
			this.posChanged = true;
			this.y = this.follow.absY;
			if(this.followRotation) {
				this.posChanged = true;
				this.rotation = -this.follow.rotation;
			}
		}
		if(this.posChanged || force) {
			if(this.rotation == 0) {
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				var cr = Math.cos(this.rotation);
				var sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = Math.round(-(this.x * this.matA + this.y * this.matC) + this.scene.width * this.anchorX * this.viewW + this.scene.width * this.viewX);
			this.absY = Math.round(-(this.x * this.matB + this.y * this.matD) + this.scene.height * this.anchorY * this.viewH + this.scene.height * this.viewY);
			this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
			this.posChanged = false;
		}
	}
	,eventToCamera: function(e) {
		var x = (e.relX - this.scene.offsetX) / this.scene.viewportScaleX - this.absX;
		var y = (e.relY - this.scene.offsetY) / this.scene.viewportScaleY - this.absY;
		e.relX = (x * this.matD - y * this.matC) * this.invDet;
		e.relY = (-x * this.matB + y * this.matA) * this.invDet;
	}
	,__class__: h2d_Camera
};
var h2d_FlowAlign = $hxEnums["h2d.FlowAlign"] = { __ename__:true,__constructs__:null
	,Top: {_hx_name:"Top",_hx_index:0,__enum__:"h2d.FlowAlign",toString:$estr}
	,Left: {_hx_name:"Left",_hx_index:1,__enum__:"h2d.FlowAlign",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:2,__enum__:"h2d.FlowAlign",toString:$estr}
	,Middle: {_hx_name:"Middle",_hx_index:3,__enum__:"h2d.FlowAlign",toString:$estr}
	,Bottom: {_hx_name:"Bottom",_hx_index:4,__enum__:"h2d.FlowAlign",toString:$estr}
};
h2d_FlowAlign.__constructs__ = [h2d_FlowAlign.Top,h2d_FlowAlign.Left,h2d_FlowAlign.Right,h2d_FlowAlign.Middle,h2d_FlowAlign.Bottom];
h2d_FlowAlign.__empty_constructs__ = [h2d_FlowAlign.Top,h2d_FlowAlign.Left,h2d_FlowAlign.Right,h2d_FlowAlign.Middle,h2d_FlowAlign.Bottom];
var h2d_FlowLayout = $hxEnums["h2d.FlowLayout"] = { __ename__:true,__constructs__:null
	,Horizontal: {_hx_name:"Horizontal",_hx_index:0,__enum__:"h2d.FlowLayout",toString:$estr}
	,Vertical: {_hx_name:"Vertical",_hx_index:1,__enum__:"h2d.FlowLayout",toString:$estr}
	,Stack: {_hx_name:"Stack",_hx_index:2,__enum__:"h2d.FlowLayout",toString:$estr}
};
h2d_FlowLayout.__constructs__ = [h2d_FlowLayout.Horizontal,h2d_FlowLayout.Vertical,h2d_FlowLayout.Stack];
h2d_FlowLayout.__empty_constructs__ = [h2d_FlowLayout.Horizontal,h2d_FlowLayout.Vertical,h2d_FlowLayout.Stack];
var h2d_FlowOverflow = $hxEnums["h2d.FlowOverflow"] = { __ename__:true,__constructs__:null
	,Expand: {_hx_name:"Expand",_hx_index:0,__enum__:"h2d.FlowOverflow",toString:$estr}
	,Limit: {_hx_name:"Limit",_hx_index:1,__enum__:"h2d.FlowOverflow",toString:$estr}
	,Hidden: {_hx_name:"Hidden",_hx_index:2,__enum__:"h2d.FlowOverflow",toString:$estr}
	,Scroll: {_hx_name:"Scroll",_hx_index:3,__enum__:"h2d.FlowOverflow",toString:$estr}
};
h2d_FlowOverflow.__constructs__ = [h2d_FlowOverflow.Expand,h2d_FlowOverflow.Limit,h2d_FlowOverflow.Hidden,h2d_FlowOverflow.Scroll];
h2d_FlowOverflow.__empty_constructs__ = [h2d_FlowOverflow.Expand,h2d_FlowOverflow.Limit,h2d_FlowOverflow.Hidden,h2d_FlowOverflow.Scroll];
var h2d_FlowProperties = function(elt) {
	this.lineBreak = false;
	this.calculatedHeight = 0;
	this.calculatedWidth = 0;
	this.offsetY = 0;
	this.offsetX = 0;
	this.isAbsolute = false;
	this.paddingBottom = 0;
	this.paddingRight = 0;
	this.paddingTop = 0;
	this.paddingLeft = 0;
	this.elt = elt;
};
$hxClasses["h2d.FlowProperties"] = h2d_FlowProperties;
h2d_FlowProperties.__name__ = "h2d.FlowProperties";
h2d_FlowProperties.prototype = {
	set_isAbsolute: function(a) {
		if(a) {
			this.elt.constraintSize(-1,-1);
			this.isBreak = false;
		}
		return this.isAbsolute = a;
	}
	,__class__: h2d_FlowProperties
};
var h2d_Flow = function(parent) {
	this.realMinHeight = -1;
	this.realMinWidth = -1;
	this.realMaxHeight = -1;
	this.realMaxWidth = -1;
	this.constraintHeight = -1;
	this.constraintWidth = -1;
	this.contentHeight = 0.;
	this.contentWidth = 0.;
	this.calculatedHeight = 0.;
	this.calculatedWidth = 0.;
	this.properties = [];
	this.scrollPosY = 0.;
	this.scrollWheelSpeed = 30.;
	this.fillHeight = false;
	this.fillWidth = false;
	this.reverse = false;
	this.multiline = false;
	this.isInline = true;
	this.layout = h2d_FlowLayout.Horizontal;
	this.borderBottom = 0;
	this.borderTop = 0;
	this.borderRight = 0;
	this.borderLeft = 0;
	this.verticalSpacing = 0;
	this.horizontalSpacing = 0;
	this.paddingBottom = 0;
	this.paddingTop = 0;
	this.paddingRight = 0;
	this.paddingLeft = 0;
	this.overflow = h2d_FlowOverflow.Expand;
	this.needReflow = true;
	this.tmpBounds = new h2d_col_Bounds();
	h2d_Object.call(this,parent);
};
$hxClasses["h2d.Flow"] = h2d_Flow;
h2d_Flow.__name__ = "h2d.Flow";
h2d_Flow.__super__ = h2d_Object;
h2d_Flow.prototype = $extend(h2d_Object.prototype,{
	getProperties: function(e) {
		this.set_needReflow(true);
		return this.properties[this.getChildIndex(e)];
	}
	,set_layout: function(v) {
		if(this.layout == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.layout = v == null ? h2d_FlowLayout.Horizontal : v;
	}
	,set_debug: function(v) {
		if(this.debug == v) {
			return v;
		}
		this.set_needReflow(true);
		if(v) {
			this.debugGraphics = new h2d_Graphics(this);
			this.getProperties(this.debugGraphics).set_isAbsolute(true);
		} else {
			var _this = this.debugGraphics;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.debugGraphics = null;
		}
		return this.debug = v;
	}
	,set_verticalAlign: function(v) {
		if(this.verticalAlign == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.verticalAlign = v;
	}
	,makeScrollBar: function() {
		var bar = new h2d_Flow();
		bar.set_backgroundTile(h2d_Tile.fromColor(0));
		bar.alpha = 0.5;
		return bar;
	}
	,makeScrollBarCursor: function() {
		var cursor = new h2d_Flow();
		cursor.set_minWidth(10);
		cursor.set_minHeight(20);
		cursor.set_backgroundTile(h2d_Tile.fromColor(-1));
		return cursor;
	}
	,set_overflow: function(v) {
		var _gthis = this;
		if(this.overflow == v) {
			return v;
		}
		this.set_needReflow(true);
		if(v == h2d_FlowOverflow.Scroll) {
			this.set_enableInteractive(true);
			if(this.scrollBar == null) {
				var s = this.makeScrollBar();
				this.addChild(s);
				this.scrollBar = s;
				this.scrollBar.set_verticalAlign(h2d_FlowAlign.Top);
				this.scrollBar.set_enableInteractive(true);
				var setCursor = function(e) {
					var cursorY = e.relY - _gthis.scrollBarCursor.minHeight * 0.5;
					if(cursorY < 0) {
						cursorY = 0;
					}
					_gthis.set_scrollPosY(cursorY / (_gthis.scrollBar.minHeight - _gthis.scrollBarCursor.minHeight) * (_gthis.contentHeight - _gthis.get_scrollInnerHeight()));
				};
				var pushed = false;
				this.scrollBar.interactive.set_cursor(hxd_Cursor.Button);
				this.scrollBar.interactive.onPush = function(e) {
					var scene = _gthis.getScene();
					if(scene == null) {
						return;
					}
					_gthis.scrollBar.interactive.startCapture(function(e) {
						switch(e.kind._hx_index) {
						case 0:case 2:
							setCursor(e);
							break;
						case 1:case 10:
							scene.stopCapture();
							break;
						default:
						}
						e.propagate = false;
					});
					setCursor(e);
				};
				var p = this.getProperties(this.scrollBar);
				p.set_isAbsolute(true);
				p.horizontalAlign = h2d_FlowAlign.Right;
				p.verticalAlign = h2d_FlowAlign.Top;
				this.scrollBarCursor = this.makeScrollBarCursor();
				this.scrollBar.addChild(this.scrollBarCursor);
			}
		} else if(this.scrollBar != null) {
			var _this = this.scrollBar;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.scrollBar = null;
			this.scrollBarCursor = null;
		}
		return this.overflow = v;
	}
	,set_needReflow: function(v) {
		if(this.needReflow == v) {
			return v;
		}
		if(v) {
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
		return this.needReflow = v;
	}
	,set_lineHeight: function(v) {
		if(this.lineHeight == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.lineHeight = v;
	}
	,set_colWidth: function(v) {
		if(this.colWidth == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.colWidth = v;
	}
	,set_scrollPosY: function(v) {
		if(this.needReflow) {
			this.reflow();
		}
		if(v < 0) {
			v = 0;
		}
		if(v > this.contentHeight - this.calculatedHeight) {
			v = this.contentHeight - this.calculatedHeight;
		}
		if(this.scrollPosY == v) {
			return v;
		}
		var delta = (v | 0) - (this.scrollPosY | 0);
		var i = 0;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var p = this.properties[i++];
			if(p.isAbsolute) {
				continue;
			}
			c.posChanged = true;
			c.y -= delta;
		}
		this.scrollPosY = v;
		this.updateScrollCursor();
		return v;
	}
	,updateScrollCursor: function() {
		if(this.scrollBarCursor == null) {
			return;
		}
		var prev = this.needReflow;
		var p = this.scrollBar.getProperties(this.scrollBarCursor);
		p.paddingTop = this.scrollPosY * (this.get_scrollInnerHeight() - this.scrollBarCursor.minHeight) / (this.contentHeight - this.calculatedHeight) | 0;
		this.set_needReflow(prev);
	}
	,get_innerWidth: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedWidth - 1e-10) - (this.paddingLeft + this.paddingRight);
	}
	,get_innerHeight: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedHeight - 1e-10) - (this.paddingTop + this.paddingBottom);
	}
	,get_scrollInnerHeight: function() {
		return Math.ceil(this.calculatedHeight - 1e-10) - (this.paddingTop + this.paddingBottom);
	}
	,set_paddingLeft: function(v) {
		if(this.paddingLeft == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingLeft = v;
	}
	,set_paddingRight: function(v) {
		if(this.paddingRight == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingRight = v;
	}
	,set_paddingTop: function(v) {
		if(this.paddingTop == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingTop = v;
	}
	,set_paddingBottom: function(v) {
		if(this.paddingBottom == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingBottom = v;
	}
	,constraintSize: function(width,height) {
		this.constraintWidth = width;
		this.constraintHeight = height;
		this.isConstraint = true;
		this.updateConstraint();
	}
	,onHierarchyMoved: function(parentChanged) {
		h2d_Object.prototype.onHierarchyMoved.call(this,parentChanged);
		this.isConstraint = false;
		this.constraintWidth = -1;
		this.constraintHeight = -1;
		this.updateConstraint();
	}
	,contentChanged: function(s) {
		while(s.parent != this) s = s.parent;
		var p = this.getProperties(s);
		if(p != null && p.isAbsolute) {
			return;
		}
		this.set_needReflow(true);
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.needReflow) {
			this.reflow();
		}
		if(forSize) {
			if(!this.isInline) {
				h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,true);
			}
			if(this.calculatedWidth != 0) {
				if(this.posChanged) {
					this.calcAbsPos();
					var _g = 0;
					var _g1 = this.children;
					while(_g < _g1.length) {
						var c = _g1[_g];
						++_g;
						c.posChanged = true;
					}
					this.posChanged = false;
				}
				this.addBounds(relativeTo,out,0,0,this.calculatedWidth,this.calculatedHeight);
			}
		} else {
			h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
	}
	,addChildAt: function(s,pos) {
		if(this.background != null) {
			++pos;
		}
		if(this.interactive != null) {
			++pos;
		}
		if(this.scrollBar != null && pos == this.children.length) {
			--pos;
		}
		var fp = this.getProperties(s);
		h2d_Object.prototype.addChildAt.call(this,s,pos);
		if(fp == null) {
			fp = new h2d_FlowProperties(s);
		} else {
			HxOverrides.remove(this.properties,fp);
		}
		this.properties.splice(pos,0,fp);
		this.set_needReflow(true);
		s.setParentContainer(this);
	}
	,removeChild: function(s) {
		var index = this.getChildIndex(s);
		h2d_Object.prototype.removeChild.call(this,s);
		if(index >= 0) {
			this.set_needReflow(true);
			this.properties.splice(index,1);
			s.constraintSize(-1,-1);
		}
		if(s != null) {
			if(s == this.background) {
				this.set_backgroundTile(null);
			}
			if(s == this.interactive) {
				this.set_enableInteractive(false);
			}
		}
	}
	,removeChildren: function() {
		var k = 0;
		while(this.children.length > k) {
			var c = this.getChildAt(k);
			if(c == this.background || c == this.interactive || c == this.debugGraphics || c == this.scrollBar) {
				++k;
			} else {
				this.removeChild(c);
			}
		}
	}
	,sync: function(ctx) {
		if(!this.isConstraint && (this.fillWidth || this.fillHeight)) {
			var scene = ctx.scene;
			var cw = this.fillWidth ? scene.width : -1;
			var ch = this.fillHeight ? scene.height : -1;
			if(cw != this.constraintWidth || ch != this.constraintHeight) {
				this.set_needReflow(true);
			}
		}
		if(this.needReflow) {
			this.reflow();
		}
		h2d_Object.prototype.sync.call(this,ctx);
	}
	,drawRec: function(ctx) {
		if(this.overflow == h2d_FlowOverflow.Hidden || this.overflow == h2d_FlowOverflow.Scroll) {
			if(this.posChanged) {
				this.calcAbsPos();
				var _g = 0;
				var _g1 = this.children;
				while(_g < _g1.length) {
					var c = _g1[_g];
					++_g;
					c.posChanged = true;
				}
				this.posChanged = false;
			}
			h2d_Mask.maskWith(ctx,this,Math.ceil(this.calculatedWidth - 1e-10),Math.ceil(this.calculatedHeight - 1e-10),0,0);
			h2d_Object.prototype.drawRec.call(this,ctx);
			h2d_Mask.unmask(ctx);
		} else {
			h2d_Object.prototype.drawRec.call(this,ctx);
		}
	}
	,set_maxWidth: function(w) {
		if(this.maxWidth == w) {
			return w;
		}
		this.maxWidth = w;
		this.updateConstraint();
		return w;
	}
	,set_maxHeight: function(h) {
		if(this.maxHeight == h) {
			return h;
		}
		this.maxHeight = h;
		this.updateConstraint();
		return h;
	}
	,updateConstraint: function() {
		var oldW = this.realMaxWidth;
		var oldH = this.realMaxHeight;
		var tmp;
		if(this.maxWidth == null) {
			tmp = this.constraintWidth;
		} else if(this.constraintWidth < 0) {
			tmp = this.maxWidth;
		} else {
			var a = this.maxWidth;
			var b = this.constraintWidth;
			tmp = a > b ? b : a;
		}
		this.realMaxWidth = tmp;
		var tmp;
		if(this.maxHeight == null) {
			tmp = this.constraintHeight;
		} else if(this.constraintHeight < 0) {
			tmp = this.maxHeight;
		} else {
			var a = this.maxHeight;
			var b = this.constraintHeight;
			tmp = a > b ? b : a;
		}
		this.realMaxHeight = tmp;
		if(this.minWidth != null && this.realMaxWidth < this.minWidth && this.realMaxWidth >= 0) {
			this.realMaxWidth = this.minWidth;
		}
		if(this.minHeight != null && this.realMaxHeight < this.minHeight && this.realMaxWidth >= 0) {
			this.realMaxHeight = this.minHeight;
		}
		if(this.realMaxWidth != oldW || this.realMaxHeight != oldH) {
			this.set_needReflow(true);
		}
		var oldW = this.realMinWidth;
		var oldH = this.realMinHeight;
		var tmp;
		if(this.fillWidth) {
			var a = Math.ceil(this.constraintWidth - 1e-10);
			var b = this.minWidth != null ? this.minWidth : -1;
			tmp = a < b ? b : a;
		} else {
			tmp = this.minWidth != null ? this.minWidth : -1;
		}
		this.realMinWidth = tmp;
		var tmp;
		if(this.fillHeight) {
			var a = Math.ceil(this.constraintHeight - 1e-10);
			var b = this.minHeight != null ? this.minHeight : -1;
			tmp = a < b ? b : a;
		} else {
			tmp = this.minHeight != null ? this.minHeight : -1;
		}
		this.realMinHeight = tmp;
		if(this.realMinWidth != oldW || this.realMinHeight != oldH) {
			this.set_needReflow(true);
		}
	}
	,set_minWidth: function(w) {
		if(this.minWidth == w) {
			return w;
		}
		this.set_needReflow(true);
		this.minWidth = w;
		this.updateConstraint();
		return w;
	}
	,set_minHeight: function(h) {
		if(this.minHeight == h) {
			return h;
		}
		this.set_needReflow(true);
		this.minHeight = h;
		this.updateConstraint();
		return h;
	}
	,set_horizontalSpacing: function(s) {
		if(this.horizontalSpacing == s) {
			return s;
		}
		this.set_needReflow(true);
		return this.horizontalSpacing = s;
	}
	,set_verticalSpacing: function(s) {
		if(this.verticalSpacing == s) {
			return s;
		}
		this.set_needReflow(true);
		return this.verticalSpacing = s;
	}
	,set_enableInteractive: function(b) {
		if(this.enableInteractive == b) {
			return b;
		}
		if(b) {
			if(this.interactive == null) {
				var interactive = new h2d_Interactive(0,0);
				this.addChildAt(interactive,0);
				this.interactive = interactive;
				interactive.set_cursor(hxd_Cursor.Default);
				this.getProperties(interactive).set_isAbsolute(true);
				if(!this.needReflow) {
					interactive.width = this.calculatedWidth;
					interactive.height = this.calculatedHeight;
				}
				interactive.onWheel = $bind(this,this.onMouseWheel);
			}
		} else if(this.interactive != null) {
			var _this = this.interactive;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.interactive = null;
		}
		return this.enableInteractive = b;
	}
	,onMouseWheel: function(e) {
		if(this.overflow == h2d_FlowOverflow.Scroll) {
			this.set_scrollPosY(this.scrollPosY + e.wheelDelta * this.scrollWheelSpeed);
			e.propagate = false;
		}
	}
	,set_backgroundTile: function(t) {
		if(this.backgroundTile == t) {
			return t;
		}
		if(t != null) {
			if(this.background == null) {
				var background = new h2d_ScaleGrid(t,this.borderLeft,this.borderTop,this.borderRight,this.borderBottom);
				this.addChildAt(background,0);
				this.getProperties(background).set_isAbsolute(true);
				this.background = background;
				if(!this.needReflow) {
					background.set_width(Math.ceil(this.calculatedWidth - 1e-10));
					background.set_height(Math.ceil(this.calculatedHeight - 1e-10));
				}
			}
			this.background.tile = t;
		} else if(this.background != null) {
			var _this = this.background;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.background = null;
		}
		return this.backgroundTile = t;
	}
	,onBorderLR: function(p,dir) {
		var tmp = this.horizontalAlign;
		var halign = tmp != null ? tmp : h2d_FlowAlign.Left;
		var tmp = p.horizontalAlign;
		var align = tmp != null ? tmp : halign;
		var ok = true;
		if(align == h2d_FlowAlign.Middle) {
			var _g = 0;
			var _g1 = this.properties;
			while(_g < _g1.length) {
				var p2 = _g1[_g];
				++_g;
				var tmp;
				if(!p2.isAbsolute && p != p2) {
					var tmp1 = p2.horizontalAlign;
					tmp = (tmp1 != null ? tmp1 : halign) == dir;
				} else {
					tmp = false;
				}
				if(tmp) {
					ok = false;
					break;
				}
			}
		} else if(align != dir) {
			var _g = 0;
			var _g1 = this.properties;
			while(_g < _g1.length) {
				var p2 = _g1[_g];
				++_g;
				var tmp;
				if(!p2.isAbsolute && p != p2) {
					var tmp1 = p2.horizontalAlign;
					tmp = (tmp1 != null ? tmp1 : halign) != align;
				} else {
					tmp = false;
				}
				if(tmp) {
					ok = false;
					break;
				}
			}
		}
		if(!ok) {
			return false;
		}
		var isLeft = dir == h2d_FlowAlign.Left;
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = isLeft ? i : this.children.length - 1 - i;
			var p2 = this.properties[this.reverse ? this.children.length - i1 - 1 : i1];
			if(p2 == p) {
				break;
			}
			if(p2.isAbsolute) {
				continue;
			}
			var tmp = p2.horizontalAlign;
			var al = tmp != null ? tmp : halign;
			if(al == align) {
				ok = false;
				break;
			}
		}
		return ok;
	}
	,onBorderTB: function(p,dir) {
		var tmp = this.verticalAlign;
		var valign = tmp != null ? tmp : h2d_FlowAlign.Bottom;
		var tmp = p.verticalAlign;
		var align = tmp != null ? tmp : valign;
		var ok = true;
		if(align == h2d_FlowAlign.Middle) {
			var _g = 0;
			var _g1 = this.properties;
			while(_g < _g1.length) {
				var p2 = _g1[_g];
				++_g;
				var tmp;
				if(!p2.isAbsolute && p != p2) {
					var tmp1 = p2.verticalAlign;
					tmp = (tmp1 != null ? tmp1 : valign) == dir;
				} else {
					tmp = false;
				}
				if(tmp) {
					ok = false;
					break;
				}
			}
		} else if(align != dir) {
			var _g = 0;
			var _g1 = this.properties;
			while(_g < _g1.length) {
				var p2 = _g1[_g];
				++_g;
				var tmp;
				if(!p2.isAbsolute && p != p2) {
					var tmp1 = p2.verticalAlign;
					tmp = (tmp1 != null ? tmp1 : valign) != align;
				} else {
					tmp = false;
				}
				if(tmp) {
					ok = false;
					break;
				}
			}
		}
		if(!ok) {
			return false;
		}
		var isTop = dir == h2d_FlowAlign.Top;
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = isTop ? i : this.children.length - 1 - i;
			var p2 = this.properties[this.reverse ? this.children.length - i1 - 1 : i1];
			if(p2 == p) {
				break;
			}
			if(p2.isAbsolute) {
				continue;
			}
			var tmp = p2.verticalAlign;
			var al = tmp != null ? tmp : valign;
			if(al == align) {
				ok = false;
				break;
			}
		}
		return ok;
	}
	,reflow: function() {
		var _gthis = this;
		this.onBeforeReflow();
		this.syncPos();
		if(!this.isConstraint && (this.fillWidth || this.fillHeight)) {
			var scene = this.getScene();
			var cw = this.fillWidth ? scene.width : -1;
			var ch = this.fillHeight ? scene.height : -1;
			if(cw != this.constraintWidth || ch != this.constraintHeight) {
				this.constraintSize(cw,ch);
				this.isConstraint = false;
			}
		}
		var borderTop = 0;
		var borderBottom = 0;
		var borderLeft = 0;
		var borderRight = 0;
		var tmpBounds = this.tmpBounds;
		if(tmpBounds == null) {
			throw haxe_Exception.thrown("Recursive reflow");
		}
		this.tmpBounds = null;
		var isConstraintWidth = this.realMaxWidth >= 0;
		var isConstraintHeight = this.realMaxHeight >= 0;
		var maxTotWidth = this.realMaxWidth < 0 ? 100000000 : Math.floor(this.realMaxWidth + 1e-10);
		var maxTotHeight = this.realMaxHeight < 0 ? 100000000 : Math.floor(this.realMaxHeight + 1e-10);
		var maxInWidth = maxTotWidth - (this.paddingLeft + this.paddingRight + (borderLeft + borderRight));
		var maxInHeight = maxTotHeight - (this.paddingTop + this.paddingBottom + (borderTop + borderBottom));
		if(this.debug) {
			this.debugGraphics.clear();
		}
		var cw = 0;
		var ch = 0;
		var v = this.paddingLeft;
		var paddingLeft = v == h2d_Flow.PADDING_IGNORE_PARENT ? 0 : v;
		var v = this.paddingRight;
		var paddingRight = v == h2d_Flow.PADDING_IGNORE_PARENT ? 0 : v;
		var v = this.paddingTop;
		var paddingTop = v == h2d_Flow.PADDING_IGNORE_PARENT ? 0 : v;
		var v = this.paddingBottom;
		var paddingBottom = v == h2d_Flow.PADDING_IGNORE_PARENT ? 0 : v;
		switch(this.layout._hx_index) {
		case 0:
			var halign = this.horizontalAlign == null ? h2d_FlowAlign.Left : this.horizontalAlign;
			var valign = this.verticalAlign == null ? h2d_FlowAlign.Bottom : this.verticalAlign;
			var startX = paddingLeft + borderLeft;
			var x = startX;
			var y = paddingTop + borderTop;
			cw = x;
			var maxLineHeight = 0;
			var minLineHeight = this.lineHeight != null ? this.lineHeight : this.realMinHeight >= 0 && !this.multiline ? this.realMinHeight - (paddingTop + paddingBottom + borderTop + borderBottom) : 0;
			var lastIndex = 0;
			var autoWidth = maxInWidth;
			var autoSum = 0.0;
			var first = true;
			var _g = 0;
			var _g1 = _gthis.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute != false) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				if(first) {
					first = false;
				} else {
					autoWidth -= _gthis.horizontalSpacing;
				}
				if(p.autoSizeWidth != null) {
					autoSum += p.autoSizeWidth;
				} else {
					var v = p.paddingTop;
					var v1 = p.paddingBottom;
					var ph = (v == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingTop : v) + (v1 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingBottom : v1);
					var pw;
					pw = 0;
					if(p.paddingLeft != h2d_Flow.PADDING_IGNORE_PARENT) {
						pw += p.paddingLeft;
					} else if(_gthis.onBorderLR(p,h2d_FlowAlign.Left)) {
						pw -= paddingLeft;
					}
					p.calcPadding = pw;
					if(p.paddingRight != h2d_Flow.PADDING_IGNORE_PARENT) {
						pw += p.paddingRight;
					} else if(_gthis.onBorderLR(p,h2d_FlowAlign.Right)) {
						pw -= paddingRight;
					}
					var ccw = -1.;
					var cch = -1.;
					if(p.autoSizeWidth != null && isConstraintWidth) {
						ccw = (Math.floor((p.isAbsolute ? cw * p.autoSizeWidth : autoWidth * p.autoSizeWidth / autoSum) + 1e-10) - pw) / Math.abs(c.scaleX);
					} else if(isConstraintWidth && !p.isAbsolute) {
						ccw = (maxInWidth - pw) / Math.abs(c.scaleX);
					}
					if(p.autoSizeHeight != null && isConstraintHeight) {
						cch = ((p.isAbsolute ? ch * p.autoSizeHeight : (maxLineHeight < minLineHeight ? minLineHeight : maxLineHeight) * p.autoSizeHeight) - ph) / Math.abs(c.scaleY);
					} else if(isConstraintHeight) {
						cch = (maxInHeight - ph) / Math.abs(c.scaleY);
					}
					c.constraintSize(ccw,cch);
					var b = tmpBounds;
					b.xMin = 1e20;
					b.yMin = 1e20;
					b.xMax = -1e20;
					b.yMax = -1e20;
					c.getBoundsRec(_gthis,b,true);
					if(b.xMax <= b.xMin || b.yMax <= b.yMin) {
						if(0 < b.xMin) {
							b.xMin = 0;
						}
						if(0 > b.xMax) {
							b.xMax = 0;
						}
						if(0 < b.yMin) {
							b.yMin = 0;
						}
						if(0 > b.yMax) {
							b.yMax = 0;
						}
					} else {
						var dx = -c.x;
						var dy = -c.y;
						b.xMin += dx;
						b.xMax += dx;
						b.yMin += dy;
						b.yMax += dy;
					}
					var b1 = b;
					p.calculatedWidth = Math.ceil(b1.xMax - 1e-10) + pw;
					p.calculatedHeight = Math.ceil(b1.yMax - 1e-10) + ph;
					if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
						p.calculatedWidth = p.minWidth;
					}
					if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
						p.calculatedHeight = p.minHeight;
					}
					if(p.calculatedHeight > maxLineHeight) {
						maxLineHeight = p.calculatedHeight;
					}
					autoWidth -= p.calculatedWidth;
				}
			}
			var _g = 0;
			var _g1 = _gthis.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute != false) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				if(p.autoSizeWidth != null) {
					var v = p.paddingTop;
					var v1 = p.paddingBottom;
					var ph = (v == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingTop : v) + (v1 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingBottom : v1);
					var pw;
					pw = 0;
					if(p.paddingLeft != h2d_Flow.PADDING_IGNORE_PARENT) {
						pw += p.paddingLeft;
					} else if(_gthis.onBorderLR(p,h2d_FlowAlign.Left)) {
						pw -= paddingLeft;
					}
					p.calcPadding = pw;
					if(p.paddingRight != h2d_Flow.PADDING_IGNORE_PARENT) {
						pw += p.paddingRight;
					} else if(_gthis.onBorderLR(p,h2d_FlowAlign.Right)) {
						pw -= paddingRight;
					}
					var ccw = -1.;
					var cch = -1.;
					if(p.autoSizeWidth != null && isConstraintWidth) {
						ccw = (Math.floor((p.isAbsolute ? cw * p.autoSizeWidth : autoWidth * p.autoSizeWidth / autoSum) + 1e-10) - pw) / Math.abs(c.scaleX);
					} else if(isConstraintWidth && !p.isAbsolute) {
						ccw = (maxInWidth - pw) / Math.abs(c.scaleX);
					}
					if(p.autoSizeHeight != null && isConstraintHeight) {
						cch = ((p.isAbsolute ? ch * p.autoSizeHeight : (maxLineHeight < minLineHeight ? minLineHeight : maxLineHeight) * p.autoSizeHeight) - ph) / Math.abs(c.scaleY);
					} else if(isConstraintHeight) {
						cch = (maxInHeight - ph) / Math.abs(c.scaleY);
					}
					c.constraintSize(ccw,cch);
					var b = tmpBounds;
					b.xMin = 1e20;
					b.yMin = 1e20;
					b.xMax = -1e20;
					b.yMax = -1e20;
					c.getBoundsRec(_gthis,b,true);
					if(b.xMax <= b.xMin || b.yMax <= b.yMin) {
						if(0 < b.xMin) {
							b.xMin = 0;
						}
						if(0 > b.xMax) {
							b.xMax = 0;
						}
						if(0 < b.yMin) {
							b.yMin = 0;
						}
						if(0 > b.yMax) {
							b.yMax = 0;
						}
					} else {
						var dx = -c.x;
						var dy = -c.y;
						b.xMin += dx;
						b.xMax += dx;
						b.yMin += dy;
						b.yMax += dy;
					}
					var b1 = b;
					p.calculatedWidth = Math.ceil(b1.xMax - 1e-10) + pw;
					p.calculatedHeight = Math.ceil(b1.yMax - 1e-10) + ph;
					if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
						p.calculatedWidth = p.minWidth;
					}
					if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
						p.calculatedHeight = p.minHeight;
					}
				}
				var br = false;
				if((_gthis.multiline && x - startX + p.calculatedWidth > maxInWidth || p.lineBreak) && x - startX > 0) {
					br = true;
					if(maxLineHeight < minLineHeight) {
						maxLineHeight = minLineHeight;
					} else if(_gthis.overflow != h2d_FlowOverflow.Expand && minLineHeight != 0) {
						maxLineHeight = minLineHeight;
					}
					var height = maxLineHeight;
					var _g2 = lastIndex;
					var _g3 = i;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var p1 = _gthis.properties[_gthis.reverse ? _gthis.children.length - i1 - 1 : i1];
						if(p1.isAbsolute != false) {
							continue;
						}
						var c1 = _gthis.children[_gthis.reverse ? _gthis.children.length - i1 - 1 : i1];
						if(!c1.visible) {
							continue;
						}
						var a = p1.verticalAlign != null ? p1.verticalAlign : valign;
						var v2 = p1.paddingTop;
						c1.posChanged = true;
						c1.y = y + p1.offsetY + (v2 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingTop : v2);
						if(a != null) {
							switch(a._hx_index) {
							case 3:
								c1.posChanged = true;
								c1.y += (height - p1.calculatedHeight) * 0.5 | 0;
								break;
							case 4:
								c1.posChanged = true;
								c1.y += height - (p1.calculatedHeight | 0);
								break;
							default:
							}
						}
					}
					lastIndex = i;
					y += maxLineHeight + _gthis.verticalSpacing;
					maxLineHeight = 0;
					x = startX;
				}
				p.isBreak = br;
				c.posChanged = true;
				c.x = x + p.offsetY + p.calcPadding;
				x += p.calculatedWidth;
				if(x > cw) {
					cw = x;
				}
				x += _gthis.horizontalSpacing;
				if(p.calculatedHeight > maxLineHeight) {
					maxLineHeight = p.calculatedHeight;
				}
			}
			var maxIndex = this.children.length;
			if(maxLineHeight < minLineHeight) {
				maxLineHeight = minLineHeight;
			} else if(_gthis.overflow != h2d_FlowOverflow.Expand && minLineHeight != 0) {
				maxLineHeight = minLineHeight;
			}
			var height = maxLineHeight;
			var _g = lastIndex;
			var _g1 = maxIndex;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute != false) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var a = p.verticalAlign != null ? p.verticalAlign : valign;
				var v = p.paddingTop;
				c.posChanged = true;
				c.y = y + p.offsetY + (v == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingTop : v);
				if(a != null) {
					switch(a._hx_index) {
					case 3:
						c.posChanged = true;
						c.y += (height - p.calculatedHeight) * 0.5 | 0;
						break;
					case 4:
						c.posChanged = true;
						c.y += height - (p.calculatedHeight | 0);
						break;
					default:
					}
				}
			}
			lastIndex = maxIndex;
			cw += paddingRight + borderRight;
			ch = y + maxLineHeight + paddingBottom + borderBottom;
			if(_gthis.realMinWidth >= 0 && cw < _gthis.realMinWidth) {
				cw = _gthis.realMinWidth;
			}
			if(_gthis.realMinHeight >= 0 && ch < _gthis.realMinHeight) {
				ch = _gthis.realMinHeight;
			}
			var absolute = true;
			if(absolute == null) {
				absolute = false;
			}
			var _g = 0;
			var _g1 = _gthis.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute != absolute) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				if(p.autoSizeWidth != null || p.autoSizeHeight != null || p.horizontalAlign != null || p.verticalAlign != null) {
					var isAbsolute = true;
					if(isAbsolute == null) {
						isAbsolute = false;
					}
					var v = p.paddingTop;
					var v1 = p.paddingBottom;
					var ph = (v == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingTop : v) + (v1 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingBottom : v1);
					var pw;
					if(isAbsolute) {
						var v2 = p.paddingLeft;
						var v3 = p.paddingRight;
						pw = (v2 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingLeft : v2) + (v3 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingRight : v3);
					} else {
						pw = 0;
						if(p.paddingLeft != h2d_Flow.PADDING_IGNORE_PARENT) {
							pw += p.paddingLeft;
						} else if(_gthis.onBorderLR(p,h2d_FlowAlign.Left)) {
							pw -= paddingLeft;
						}
						p.calcPadding = pw;
						if(p.paddingRight != h2d_Flow.PADDING_IGNORE_PARENT) {
							pw += p.paddingRight;
						} else if(_gthis.onBorderLR(p,h2d_FlowAlign.Right)) {
							pw -= paddingRight;
						}
					}
					var ccw = -1.;
					var cch = -1.;
					if(p.autoSizeWidth != null && (isConstraintWidth || isAbsolute)) {
						ccw = (Math.floor((p.isAbsolute ? cw * p.autoSizeWidth : autoWidth * p.autoSizeWidth / autoSum) + 1e-10) - pw) / Math.abs(c.scaleX);
					} else if(isConstraintWidth && !p.isAbsolute) {
						ccw = (maxInWidth - pw) / Math.abs(c.scaleX);
					}
					if(p.autoSizeHeight != null && (isConstraintHeight || isAbsolute)) {
						cch = ((p.isAbsolute ? ch * p.autoSizeHeight : (maxLineHeight < minLineHeight ? minLineHeight : maxLineHeight) * p.autoSizeHeight) - ph) / Math.abs(c.scaleY);
					} else if(isConstraintHeight && !isAbsolute) {
						cch = (maxInHeight - ph) / Math.abs(c.scaleY);
					}
					c.constraintSize(ccw,cch);
					var b = tmpBounds;
					b.xMin = 1e20;
					b.yMin = 1e20;
					b.xMax = -1e20;
					b.yMax = -1e20;
					c.getBoundsRec(_gthis,b,true);
					if(b.xMax <= b.xMin || b.yMax <= b.yMin) {
						if(0 < b.xMin) {
							b.xMin = 0;
						}
						if(0 > b.xMax) {
							b.xMax = 0;
						}
						if(0 < b.yMin) {
							b.yMin = 0;
						}
						if(0 > b.yMax) {
							b.yMax = 0;
						}
					} else {
						var dx = -c.x;
						var dy = -c.y;
						b.xMin += dx;
						b.xMax += dx;
						b.yMin += dy;
						b.yMax += dy;
					}
					var b1 = b;
					p.calculatedWidth = Math.ceil(b1.xMax - 1e-10) + pw;
					p.calculatedHeight = Math.ceil(b1.yMax - 1e-10) + ph;
					if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
						p.calculatedWidth = p.minWidth;
					}
					if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
						p.calculatedHeight = p.minHeight;
					}
				}
			}
			lastIndex = 0;
			maxLineHeight = ch - (paddingTop + borderTop + paddingBottom + borderBottom);
			y = paddingTop + borderTop;
			if(maxLineHeight > maxInHeight && this.overflow != h2d_FlowOverflow.Expand) {
				maxLineHeight = maxInHeight;
			}
			var maxIndex = this.children.length;
			var absolute = true;
			if(absolute == null) {
				absolute = false;
			}
			if(maxLineHeight < minLineHeight) {
				maxLineHeight = minLineHeight;
			} else if(_gthis.overflow != h2d_FlowOverflow.Expand && minLineHeight != 0) {
				maxLineHeight = minLineHeight;
			}
			var height = maxLineHeight;
			var _g = lastIndex;
			var _g1 = maxIndex;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute != absolute) {
					continue;
				}
				if(absolute && p.verticalAlign == null) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var a = p.verticalAlign != null ? p.verticalAlign : valign;
				var v = p.paddingTop;
				c.posChanged = true;
				c.y = y + p.offsetY + (v == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingTop : v);
				if(a != null) {
					switch(a._hx_index) {
					case 3:
						c.posChanged = true;
						c.y += (height - p.calculatedHeight) * 0.5 | 0;
						break;
					case 4:
						c.posChanged = true;
						c.y += height - (p.calculatedHeight | 0);
						break;
					default:
					}
				}
			}
			lastIndex = maxIndex;
			var endX = cw - (paddingRight + borderRight);
			var xmin = startX;
			var xmax = endX;
			var midSpace = 0;
			var curAlign = null;
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = this.properties[this.reverse ? this.children.length - i - 1 : i];
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				if(p.isAbsolute) {
					var v = p.paddingLeft;
					var dx = (v == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingLeft : v) + p.offsetX;
					var _g2 = p.horizontalAlign;
					if(_g2 != null) {
						switch(_g2._hx_index) {
						case 1:
							c.posChanged = true;
							c.x = startX + dx;
							break;
						case 2:
							c.posChanged = true;
							c.x = endX - p.calculatedWidth + dx;
							break;
						case 3:
							c.posChanged = true;
							c.x = startX + ((endX - startX - p.calculatedWidth) * 0.5 | 0) + dx;
							break;
						default:
						}
					}
					continue;
				}
				if(p.isBreak) {
					xmin = startX;
					xmax = endX;
					midSpace = 0;
				}
				var px;
				var align = p.horizontalAlign == null ? halign : p.horizontalAlign;
				if(curAlign != align) {
					curAlign = align;
					midSpace = 0;
				}
				if(align == null) {
					px = xmin;
					xmin += p.calculatedWidth + this.horizontalSpacing;
				} else {
					switch(align._hx_index) {
					case 2:
						if(midSpace == 0) {
							var p1 = p.calculatedWidth;
							var size = 0;
							var _g3 = i + 1;
							var _g4 = _gthis.children.length;
							while(_g3 < _g4) {
								var j = _g3++;
								var p2 = _gthis.properties[_gthis.reverse ? _gthis.children.length - j - 1 : j];
								if(p2.isAbsolute || !_gthis.children[_gthis.reverse ? _gthis.children.length - j - 1 : j].visible) {
									continue;
								}
								if(p2.isBreak) {
									break;
								}
								size += _gthis.horizontalSpacing + p2.calculatedWidth;
							}
							var remSize = p1 + size;
							midSpace = xmax - xmin - remSize;
							xmin += midSpace;
						}
						px = xmin;
						xmin += p.calculatedWidth + this.horizontalSpacing;
						break;
					case 3:
						if(midSpace == 0) {
							var p3 = p.calculatedWidth;
							var size1 = 0;
							var _g5 = i + 1;
							var _g6 = _gthis.children.length;
							while(_g5 < _g6) {
								var j1 = _g5++;
								var p4 = _gthis.properties[_gthis.reverse ? _gthis.children.length - j1 - 1 : j1];
								if(p4.isAbsolute || !_gthis.children[_gthis.reverse ? _gthis.children.length - j1 - 1 : j1].visible) {
									continue;
								}
								if(p4.isBreak) {
									break;
								}
								size1 += _gthis.horizontalSpacing + p4.calculatedWidth;
							}
							var remSize1 = p3 + size1;
							midSpace = (xmax - xmin - remSize1) * 0.5 | 0;
							xmin += midSpace;
						}
						px = xmin;
						xmin += p.calculatedWidth + this.horizontalSpacing;
						break;
					default:
						px = xmin;
						xmin += p.calculatedWidth + this.horizontalSpacing;
					}
				}
				c.posChanged = true;
				c.x = px + p.offsetX + p.calcPadding;
			}
			break;
		case 1:
			var halign = this.horizontalAlign == null ? h2d_FlowAlign.Left : this.horizontalAlign;
			var valign = this.verticalAlign == null ? h2d_FlowAlign.Top : this.verticalAlign;
			var startY = paddingTop + borderTop;
			var y = startY;
			var x = paddingLeft + borderLeft;
			ch = y;
			var maxColWidth = 0;
			var minColWidth = this.colWidth != null ? this.colWidth : this.realMinWidth >= 0 && !this.multiline ? this.realMinWidth - (paddingLeft + paddingRight + borderLeft + borderRight) : 0;
			var lastIndex = 0;
			var autoHeight = maxInHeight;
			var autoSum = 0.0;
			var first = true;
			var _g = 0;
			var _g1 = _gthis.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute != false) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				if(first) {
					first = false;
				} else {
					autoHeight -= _gthis.verticalSpacing;
				}
				if(p.autoSizeHeight != null) {
					autoSum += p.autoSizeHeight;
				} else {
					var v = p.paddingLeft;
					var v1 = p.paddingRight;
					var pw = (v == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingLeft : v) + (v1 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingRight : v1);
					var ph;
					ph = 0;
					if(p.paddingTop != h2d_Flow.PADDING_IGNORE_PARENT) {
						ph += p.paddingTop;
					} else if(_gthis.onBorderTB(p,h2d_FlowAlign.Top)) {
						ph -= paddingTop;
					}
					p.calcPadding = ph;
					if(p.paddingBottom != h2d_Flow.PADDING_IGNORE_PARENT) {
						ph += p.paddingBottom;
					} else if(_gthis.onBorderTB(p,h2d_FlowAlign.Bottom)) {
						ph -= paddingBottom;
					}
					var ccw = -1.;
					var cch = -1.;
					if(p.autoSizeWidth != null) {
						ccw = ((maxColWidth < minColWidth ? minColWidth : maxColWidth) * p.autoSizeWidth - pw) / Math.abs(c.scaleX);
					} else if(isConstraintWidth) {
						ccw = (maxInWidth - pw) / Math.abs(c.scaleX);
					}
					if(p.autoSizeHeight != null) {
						cch = (Math.floor((p.isAbsolute ? ch * p.autoSizeHeight : autoHeight * p.autoSizeHeight / autoSum) + 1e-10) - ph) / Math.abs(c.scaleY);
					} else if(isConstraintHeight) {
						cch = (maxInHeight - ph) / Math.abs(c.scaleY);
					}
					c.constraintSize(ccw,cch);
					var b = tmpBounds;
					b.xMin = 1e20;
					b.yMin = 1e20;
					b.xMax = -1e20;
					b.yMax = -1e20;
					c.getBoundsRec(_gthis,b,true);
					if(b.xMax <= b.xMin || b.yMax <= b.yMin) {
						if(0 < b.xMin) {
							b.xMin = 0;
						}
						if(0 > b.xMax) {
							b.xMax = 0;
						}
						if(0 < b.yMin) {
							b.yMin = 0;
						}
						if(0 > b.yMax) {
							b.yMax = 0;
						}
					} else {
						var dx = -c.x;
						var dy = -c.y;
						b.xMin += dx;
						b.xMax += dx;
						b.yMin += dy;
						b.yMax += dy;
					}
					var b1 = b;
					p.calculatedWidth = Math.ceil(b1.xMax - 1e-10) + pw;
					p.calculatedHeight = Math.ceil(b1.yMax - 1e-10) + ph;
					if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
						p.calculatedWidth = p.minWidth;
					}
					if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
						p.calculatedHeight = p.minHeight;
					}
					if(p.calculatedWidth > maxColWidth) {
						maxColWidth = p.calculatedWidth;
					}
					autoHeight -= p.calculatedHeight;
				}
			}
			var _g = 0;
			var _g1 = _gthis.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute != false) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				if(p.autoSizeHeight != null) {
					var v = p.paddingLeft;
					var v1 = p.paddingRight;
					var pw = (v == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingLeft : v) + (v1 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingRight : v1);
					var ph;
					ph = 0;
					if(p.paddingTop != h2d_Flow.PADDING_IGNORE_PARENT) {
						ph += p.paddingTop;
					} else if(_gthis.onBorderTB(p,h2d_FlowAlign.Top)) {
						ph -= paddingTop;
					}
					p.calcPadding = ph;
					if(p.paddingBottom != h2d_Flow.PADDING_IGNORE_PARENT) {
						ph += p.paddingBottom;
					} else if(_gthis.onBorderTB(p,h2d_FlowAlign.Bottom)) {
						ph -= paddingBottom;
					}
					var ccw = -1.;
					var cch = -1.;
					if(p.autoSizeWidth != null) {
						ccw = ((maxColWidth < minColWidth ? minColWidth : maxColWidth) * p.autoSizeWidth - pw) / Math.abs(c.scaleX);
					} else if(isConstraintWidth) {
						ccw = (maxInWidth - pw) / Math.abs(c.scaleX);
					}
					if(p.autoSizeHeight != null) {
						cch = (Math.floor((p.isAbsolute ? ch * p.autoSizeHeight : autoHeight * p.autoSizeHeight / autoSum) + 1e-10) - ph) / Math.abs(c.scaleY);
					} else if(isConstraintHeight) {
						cch = (maxInHeight - ph) / Math.abs(c.scaleY);
					}
					c.constraintSize(ccw,cch);
					var b = tmpBounds;
					b.xMin = 1e20;
					b.yMin = 1e20;
					b.xMax = -1e20;
					b.yMax = -1e20;
					c.getBoundsRec(_gthis,b,true);
					if(b.xMax <= b.xMin || b.yMax <= b.yMin) {
						if(0 < b.xMin) {
							b.xMin = 0;
						}
						if(0 > b.xMax) {
							b.xMax = 0;
						}
						if(0 < b.yMin) {
							b.yMin = 0;
						}
						if(0 > b.yMax) {
							b.yMax = 0;
						}
					} else {
						var dx = -c.x;
						var dy = -c.y;
						b.xMin += dx;
						b.xMax += dx;
						b.yMin += dy;
						b.yMax += dy;
					}
					var b1 = b;
					p.calculatedWidth = Math.ceil(b1.xMax - 1e-10) + pw;
					p.calculatedHeight = Math.ceil(b1.yMax - 1e-10) + ph;
					if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
						p.calculatedWidth = p.minWidth;
					}
					if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
						p.calculatedHeight = p.minHeight;
					}
				}
				var br = false;
				if((_gthis.multiline && y - startY + p.calculatedHeight > maxInHeight || p.lineBreak) && y - startY > 0) {
					br = true;
					if(maxColWidth < minColWidth) {
						maxColWidth = minColWidth;
					} else if(_gthis.overflow != h2d_FlowOverflow.Expand && minColWidth != 0) {
						maxColWidth = minColWidth;
					}
					var width = maxColWidth;
					var _g2 = lastIndex;
					var _g3 = i;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var p1 = _gthis.properties[_gthis.reverse ? _gthis.children.length - i1 - 1 : i1];
						if(p1.isAbsolute != false) {
							continue;
						}
						var c1 = _gthis.children[_gthis.reverse ? _gthis.children.length - i1 - 1 : i1];
						if(!c1.visible) {
							continue;
						}
						var a = p1.horizontalAlign != null ? p1.horizontalAlign : halign;
						var v2 = p1.paddingLeft;
						c1.posChanged = true;
						c1.x = x + p1.offsetX + (v2 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingLeft : v2);
						if(a != null) {
							switch(a._hx_index) {
							case 2:
								c1.posChanged = true;
								c1.x += width - p1.calculatedWidth;
								break;
							case 3:
								c1.posChanged = true;
								c1.x += (width - p1.calculatedWidth) * 0.5 | 0;
								break;
							default:
							}
						}
					}
					lastIndex = i;
					x += maxColWidth + _gthis.horizontalSpacing;
					maxColWidth = 0;
					y = startY;
				}
				p.isBreak = br;
				c.posChanged = true;
				c.y = y + p.offsetY + p.calcPadding;
				y += p.calculatedHeight;
				if(y > ch) {
					ch = y;
				}
				y += _gthis.verticalSpacing;
				if(p.calculatedWidth > maxColWidth) {
					maxColWidth = p.calculatedWidth;
				}
			}
			var maxIndex = this.children.length;
			if(maxColWidth < minColWidth) {
				maxColWidth = minColWidth;
			} else if(_gthis.overflow != h2d_FlowOverflow.Expand && minColWidth != 0) {
				maxColWidth = minColWidth;
			}
			var width = maxColWidth;
			var _g = lastIndex;
			var _g1 = maxIndex;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute != false) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var a = p.horizontalAlign != null ? p.horizontalAlign : halign;
				var v = p.paddingLeft;
				c.posChanged = true;
				c.x = x + p.offsetX + (v == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingLeft : v);
				if(a != null) {
					switch(a._hx_index) {
					case 2:
						c.posChanged = true;
						c.x += width - p.calculatedWidth;
						break;
					case 3:
						c.posChanged = true;
						c.x += (width - p.calculatedWidth) * 0.5 | 0;
						break;
					default:
					}
				}
			}
			lastIndex = maxIndex;
			ch += paddingBottom + borderBottom;
			cw = x + maxColWidth + paddingRight + borderRight;
			if(_gthis.realMinWidth >= 0 && cw < _gthis.realMinWidth) {
				cw = _gthis.realMinWidth;
			}
			if(_gthis.realMinHeight >= 0 && ch < _gthis.realMinHeight) {
				ch = _gthis.realMinHeight;
			}
			var absolute = true;
			if(absolute == null) {
				absolute = false;
			}
			var _g = 0;
			var _g1 = _gthis.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute != absolute) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				if(p.autoSizeWidth != null || p.autoSizeHeight != null || p.horizontalAlign != null || p.verticalAlign != null) {
					var isAbsolute = true;
					if(isAbsolute == null) {
						isAbsolute = false;
					}
					var v = p.paddingLeft;
					var v1 = p.paddingRight;
					var pw = (v == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingLeft : v) + (v1 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingRight : v1);
					var ph;
					if(isAbsolute) {
						var v2 = p.paddingTop;
						var v3 = p.paddingBottom;
						ph = (v2 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingTop : v2) + (v3 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingBottom : v3);
					} else {
						ph = 0;
						if(p.paddingTop != h2d_Flow.PADDING_IGNORE_PARENT) {
							ph += p.paddingTop;
						} else if(_gthis.onBorderTB(p,h2d_FlowAlign.Top)) {
							ph -= paddingTop;
						}
						p.calcPadding = ph;
						if(p.paddingBottom != h2d_Flow.PADDING_IGNORE_PARENT) {
							ph += p.paddingBottom;
						} else if(_gthis.onBorderTB(p,h2d_FlowAlign.Bottom)) {
							ph -= paddingBottom;
						}
					}
					var ccw = -1.;
					var cch = -1.;
					if(p.autoSizeWidth != null) {
						ccw = ((isAbsolute ? cw * p.autoSizeWidth : (maxColWidth < minColWidth ? minColWidth : maxColWidth) * p.autoSizeWidth) - pw) / Math.abs(c.scaleX);
					} else if(isConstraintWidth && !isAbsolute) {
						ccw = (maxInWidth - pw) / Math.abs(c.scaleX);
					}
					if(p.autoSizeHeight != null) {
						cch = (Math.floor((p.isAbsolute ? ch * p.autoSizeHeight : autoHeight * p.autoSizeHeight / autoSum) + 1e-10) - ph) / Math.abs(c.scaleY);
					} else if(isConstraintHeight && !isAbsolute) {
						cch = (maxInHeight - ph) / Math.abs(c.scaleY);
					}
					c.constraintSize(ccw,cch);
					var b = tmpBounds;
					b.xMin = 1e20;
					b.yMin = 1e20;
					b.xMax = -1e20;
					b.yMax = -1e20;
					c.getBoundsRec(_gthis,b,true);
					if(b.xMax <= b.xMin || b.yMax <= b.yMin) {
						if(0 < b.xMin) {
							b.xMin = 0;
						}
						if(0 > b.xMax) {
							b.xMax = 0;
						}
						if(0 < b.yMin) {
							b.yMin = 0;
						}
						if(0 > b.yMax) {
							b.yMax = 0;
						}
					} else {
						var dx = -c.x;
						var dy = -c.y;
						b.xMin += dx;
						b.xMax += dx;
						b.yMin += dy;
						b.yMax += dy;
					}
					var b1 = b;
					p.calculatedWidth = Math.ceil(b1.xMax - 1e-10) + pw;
					p.calculatedHeight = Math.ceil(b1.yMax - 1e-10) + ph;
					if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
						p.calculatedWidth = p.minWidth;
					}
					if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
						p.calculatedHeight = p.minHeight;
					}
				}
			}
			lastIndex = 0;
			maxColWidth = cw - (paddingLeft + paddingRight + borderLeft + borderRight);
			x = paddingLeft + borderLeft;
			if(maxColWidth > maxInWidth && this.overflow != h2d_FlowOverflow.Expand) {
				maxColWidth = maxInWidth;
			}
			var maxIndex = this.children.length;
			var absolute = true;
			if(absolute == null) {
				absolute = false;
			}
			if(maxColWidth < minColWidth) {
				maxColWidth = minColWidth;
			} else if(_gthis.overflow != h2d_FlowOverflow.Expand && minColWidth != 0) {
				maxColWidth = minColWidth;
			}
			var width = maxColWidth;
			var _g = lastIndex;
			var _g1 = maxIndex;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute != absolute) {
					continue;
				}
				if(absolute && p.horizontalAlign == null) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var a = p.horizontalAlign != null ? p.horizontalAlign : halign;
				var v = p.paddingLeft;
				c.posChanged = true;
				c.x = x + p.offsetX + (v == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingLeft : v);
				if(a != null) {
					switch(a._hx_index) {
					case 2:
						c.posChanged = true;
						c.x += width - p.calculatedWidth;
						break;
					case 3:
						c.posChanged = true;
						c.x += (width - p.calculatedWidth) * 0.5 | 0;
						break;
					default:
					}
				}
			}
			lastIndex = maxIndex;
			var endY = ch - (paddingBottom + borderBottom);
			var ymin = startY;
			var ymax = endY;
			var midSpace = 0;
			var curAlign = null;
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = this.properties[this.reverse ? this.children.length - i - 1 : i];
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				if(p.isAbsolute) {
					var v = p.paddingTop;
					var dy = (v == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingTop : v) + p.offsetY;
					var _g2 = p.verticalAlign;
					if(_g2 != null) {
						switch(_g2._hx_index) {
						case 0:
							c.posChanged = true;
							c.y = startY + dy;
							break;
						case 3:
							c.posChanged = true;
							c.y = startY + ((endY - startY - p.calculatedHeight) * 0.5 | 0) + dy;
							break;
						case 4:
							c.posChanged = true;
							c.y = endY - p.calculatedHeight + dy;
							break;
						default:
						}
					}
					continue;
				}
				if(p.isBreak) {
					ymin = startY;
					ymax = endY;
					midSpace = 0;
				}
				var py;
				var align = p.verticalAlign == null ? valign : p.verticalAlign;
				if(curAlign != align) {
					curAlign = align;
					midSpace = 0;
				}
				if(align == null) {
					py = ymin;
					ymin += p.calculatedHeight + this.verticalSpacing;
				} else {
					switch(align._hx_index) {
					case 3:
						if(midSpace == 0) {
							var p1 = p.calculatedHeight;
							var size = 0;
							var _g3 = i + 1;
							var _g4 = _gthis.children.length;
							while(_g3 < _g4) {
								var j = _g3++;
								var p2 = _gthis.properties[_gthis.reverse ? _gthis.children.length - j - 1 : j];
								if(p2.isAbsolute || !_gthis.children[_gthis.reverse ? _gthis.children.length - j - 1 : j].visible) {
									continue;
								}
								if(p2.isBreak) {
									break;
								}
								size += _gthis.verticalSpacing + p2.calculatedHeight;
							}
							var remSize = p1 + size;
							midSpace = (ymax - ymin - remSize) * 0.5 | 0;
							ymin += midSpace;
						}
						py = ymin;
						ymin += p.calculatedHeight + this.verticalSpacing;
						break;
					case 4:
						if(midSpace == 0) {
							var p3 = p.calculatedHeight;
							var size1 = 0;
							var _g5 = i + 1;
							var _g6 = _gthis.children.length;
							while(_g5 < _g6) {
								var j1 = _g5++;
								var p4 = _gthis.properties[_gthis.reverse ? _gthis.children.length - j1 - 1 : j1];
								if(p4.isAbsolute || !_gthis.children[_gthis.reverse ? _gthis.children.length - j1 - 1 : j1].visible) {
									continue;
								}
								if(p4.isBreak) {
									break;
								}
								size1 += _gthis.verticalSpacing + p4.calculatedHeight;
							}
							var remSize1 = p3 + size1;
							midSpace = ymax - ymin - remSize1;
							ymin += midSpace;
						}
						py = ymin;
						ymin += p.calculatedHeight + this.verticalSpacing;
						break;
					default:
						py = ymin;
						ymin += p.calculatedHeight + this.verticalSpacing;
					}
				}
				c.posChanged = true;
				c.y = py + p.offsetY + p.calcPadding;
			}
			break;
		case 2:
			var halign = this.horizontalAlign == null ? h2d_FlowAlign.Left : this.horizontalAlign;
			var valign = this.verticalAlign == null ? h2d_FlowAlign.Top : this.verticalAlign;
			var maxChildW = 0;
			var maxChildH = 0;
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var p = this.properties[this.reverse ? this.children.length - i - 1 : i];
				var isAbs = p.isAbsolute;
				if(isAbs && p.verticalAlign == null && p.horizontalAlign == null) {
					continue;
				}
				var v = p.paddingLeft;
				var v1 = p.paddingRight;
				var pw = (v == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingLeft : v) + (v1 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingRight : v1);
				var v2 = p.paddingTop;
				var v3 = p.paddingBottom;
				var ph = (v2 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingTop : v2) + (v3 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingBottom : v3);
				if(!isAbs) {
					c.constraintSize(isConstraintWidth ? (maxInWidth - pw) / Math.abs(c.scaleX) : -1,isConstraintHeight ? (maxInHeight - ph) / Math.abs(c.scaleY) : -1);
				}
				var b = tmpBounds;
				b.xMin = 1e20;
				b.yMin = 1e20;
				b.xMax = -1e20;
				b.yMax = -1e20;
				c.getBoundsRec(_gthis,b,true);
				if(b.xMax <= b.xMin || b.yMax <= b.yMin) {
					if(0 < b.xMin) {
						b.xMin = 0;
					}
					if(0 > b.xMax) {
						b.xMax = 0;
					}
					if(0 < b.yMin) {
						b.yMin = 0;
					}
					if(0 > b.yMax) {
						b.yMax = 0;
					}
				} else {
					var dx = -c.x;
					var dy = -c.y;
					b.xMin += dx;
					b.xMax += dx;
					b.yMin += dy;
					b.yMax += dy;
				}
				var b1 = b;
				p.calculatedWidth = Math.ceil(b1.xMax - 1e-10) + pw;
				p.calculatedHeight = Math.ceil(b1.yMax - 1e-10) + ph;
				if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
					p.calculatedWidth = p.minWidth;
				}
				if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
					p.calculatedHeight = p.minHeight;
				}
				if(isAbs) {
					continue;
				}
				if(p.calculatedWidth > maxChildW) {
					maxChildW = p.calculatedWidth;
				}
				if(p.calculatedHeight > maxChildH) {
					maxChildH = p.calculatedHeight;
				}
			}
			var xmin = paddingLeft + borderLeft;
			var ymin = paddingTop + borderTop;
			var xmax;
			if(this.realMaxWidth > 0 && this.overflow != h2d_FlowOverflow.Expand) {
				xmax = Math.floor(this.realMaxWidth - (paddingRight + borderRight) + 1e-10);
			} else {
				var a = xmin + maxChildW;
				var b = this.realMinWidth - (paddingRight + borderRight);
				xmax = a < b ? b : a;
			}
			var ymax;
			if(this.realMaxWidth > 0 && this.overflow != h2d_FlowOverflow.Expand) {
				ymax = Math.floor(this.realMaxHeight - (paddingBottom + borderBottom) + 1e-10);
			} else {
				var a = ymin + maxChildH;
				var b = this.realMinHeight - (paddingBottom + borderBottom);
				ymax = a < b ? b : a;
			}
			cw = xmax + paddingRight + borderRight;
			ch = ymax + paddingBottom + borderBottom;
			if(_gthis.realMinWidth >= 0 && cw < _gthis.realMinWidth) {
				cw = _gthis.realMinWidth;
			}
			if(_gthis.realMinHeight >= 0 && ch < _gthis.realMinHeight) {
				ch = _gthis.realMinHeight;
			}
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var p = this.properties[this.reverse ? this.children.length - i - 1 : i];
				var isAbs = p.isAbsolute;
				if(isAbs && p.verticalAlign == null && p.horizontalAlign == null) {
					continue;
				}
				var valign1 = p.verticalAlign == null ? valign : p.verticalAlign;
				var halign1 = p.horizontalAlign == null ? halign : p.horizontalAlign;
				var px;
				if(halign1 == null) {
					px = xmin;
				} else {
					switch(halign1._hx_index) {
					case 2:
						px = xmax - p.calculatedWidth;
						break;
					case 3:
						px = xmin + ((xmax - xmin - p.calculatedWidth) * 0.5 | 0);
						break;
					default:
						px = xmin;
					}
				}
				var py;
				if(valign1 == null) {
					py = ymin;
				} else {
					switch(valign1._hx_index) {
					case 3:
						py = ymin + ((ymax - ymin - p.calculatedHeight) * 0.5 | 0);
						break;
					case 4:
						py = ymax - p.calculatedHeight;
						break;
					default:
						py = ymin;
					}
				}
				if(!isAbs || p.horizontalAlign != null) {
					var v = p.paddingLeft;
					c.posChanged = true;
					c.x = px + p.offsetX + (v == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingLeft : v);
				}
				if(!isAbs || p.verticalAlign != null) {
					var v1 = p.paddingTop;
					c.posChanged = true;
					c.y = py + p.offsetY + (v1 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingTop : v1);
				}
			}
			break;
		}
		this.contentWidth = cw;
		this.contentHeight = ch;
		if(this.overflow != h2d_FlowOverflow.Expand) {
			if(isConstraintWidth && cw > maxTotWidth) {
				cw = maxTotWidth;
			}
			if(isConstraintHeight && ch > maxTotHeight) {
				ch = maxTotHeight;
			}
		}
		if(this.interactive != null) {
			this.interactive.width = cw;
			this.interactive.height = ch;
		}
		if(this.background != null) {
			this.background.set_width(Math.ceil(cw - 1e-10));
			this.background.set_height(Math.ceil(ch - 1e-10));
		}
		this.calculatedWidth = cw;
		this.calculatedHeight = ch;
		if(this.scrollPosY != 0) {
			var maxScroll = this.contentHeight - this.calculatedHeight | 0;
			if(maxScroll < 0) {
				maxScroll = 0;
			}
			if(this.scrollPosY > maxScroll) {
				this.scrollPosY = maxScroll;
			}
			var i = 0;
			var sy = this.scrollPosY | 0;
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var p = this.properties[i++];
				if(p.isAbsolute) {
					continue;
				}
				c.posChanged = true;
				c.y -= sy;
			}
		}
		if(this.scrollBar != null) {
			if(this.contentHeight <= this.calculatedHeight) {
				this.scrollBar.set_visible(false);
			} else {
				this.scrollBar.set_visible(true);
				this.scrollBar.set_minHeight(this.get_scrollInnerHeight());
				var tmp = this.scrollBarCursor;
				var b = this.get_scrollInnerHeight() * (1 - (this.contentHeight - this.get_scrollInnerHeight()) / this.contentHeight) | 0;
				tmp.set_minHeight(1 < b ? b : 1);
				this.updateScrollCursor();
			}
		}
		this.set_needReflow(false);
		if(this.overflow == h2d_FlowOverflow.Scroll || this.overflow == h2d_FlowOverflow.Hidden) {
			this.posChanged = true;
		}
		if(this.debug) {
			if(this.debugGraphics != this.children[this.children.length - 1]) {
				this.addChild(this.debugGraphics);
				this.set_needReflow(false);
			}
			if(paddingLeft != 0 || paddingRight != 0 || paddingTop != 0 || paddingBottom != 0) {
				this.debugGraphics.lineStyle(1,65280);
				this.debugGraphics.drawRect(paddingLeft,paddingTop,this.get_innerWidth(),this.get_innerHeight());
			}
			this.debugGraphics.lineStyle(1,33023);
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = this.properties[this.reverse ? this.children.length - i - 1 : i];
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute || !c.visible) {
					continue;
				}
				var v = p.paddingLeft;
				var v1 = p.paddingTop;
				this.debugGraphics.drawRect(c.x - p.offsetX - (v == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingLeft : v),c.y - p.offsetY - (v1 == h2d_Flow.PADDING_IGNORE_PARENT ? -paddingTop : v1),p.calculatedWidth,p.calculatedHeight);
			}
			this.debugGraphics.lineStyle(1,16711680);
			this.debugGraphics.drawRect(0,0,cw,ch);
		}
		this.tmpBounds = tmpBounds;
		this.onAfterReflow();
	}
	,onBeforeReflow: function() {
	}
	,onAfterReflow: function() {
	}
	,__class__: h2d_Flow
});
var h2d_Kerning = function(c,o) {
	this.prevChar = c;
	this.offset = o;
};
$hxClasses["h2d.Kerning"] = h2d_Kerning;
h2d_Kerning.__name__ = "h2d.Kerning";
h2d_Kerning.prototype = {
	__class__: h2d_Kerning
};
var h2d_FontChar = function(t,w) {
	this.t = t;
	this.width = w;
};
$hxClasses["h2d.FontChar"] = h2d_FontChar;
h2d_FontChar.__name__ = "h2d.FontChar";
h2d_FontChar.prototype = {
	addKerning: function(prevChar,offset) {
		var k = new h2d_Kerning(prevChar,offset);
		k.next = this.kerning;
		this.kerning = k;
	}
	,getKerningOffset: function(prevChar) {
		var k = this.kerning;
		while(k != null) {
			if(k.prevChar == prevChar) {
				return k.offset;
			}
			k = k.next;
		}
		return 0;
	}
	,__class__: h2d_FontChar
};
var h2d_FontType = $hxEnums["h2d.FontType"] = { __ename__:true,__constructs__:null
	,BitmapFont: {_hx_name:"BitmapFont",_hx_index:0,__enum__:"h2d.FontType",toString:$estr}
	,SignedDistanceField: ($_=function(channel,alphaCutoff,smoothing) { return {_hx_index:1,channel:channel,alphaCutoff:alphaCutoff,smoothing:smoothing,__enum__:"h2d.FontType",toString:$estr}; },$_._hx_name="SignedDistanceField",$_.__params__ = ["channel","alphaCutoff","smoothing"],$_)
};
h2d_FontType.__constructs__ = [h2d_FontType.BitmapFont,h2d_FontType.SignedDistanceField];
h2d_FontType.__empty_constructs__ = [h2d_FontType.BitmapFont];
var h2d_Font = function(name,size,type) {
	this.name = name;
	this.size = size;
	this.initSize = size;
	this.glyphs = new haxe_ds_IntMap();
	this.defaultChar = this.nullChar = new h2d_FontChar(new h2d_Tile(null,0,0,0,0),0);
	this.charset = hxd_Charset.getDefault();
	if(name != null) {
		this.tilePath = haxe_io_Path.withExtension(name,"png");
	}
	if(type == null) {
		this.type = h2d_FontType.BitmapFont;
	} else {
		this.type = type;
	}
};
$hxClasses["h2d.Font"] = h2d_Font;
h2d_Font.__name__ = "h2d.Font";
h2d_Font.prototype = {
	resizeTo: function(size) {
		var ratio = size / this.size;
		var c = this.glyphs.iterator();
		while(c.hasNext()) {
			var c1 = c.next();
			c1.width *= ratio;
			c1.t.scaleToSize(c1.t.width * ratio,c1.t.height * ratio);
			c1.t.dx *= ratio;
			c1.t.dy *= ratio;
			var k = c1.kerning;
			while(k != null) {
				k.offset *= ratio;
				k = k.next;
			}
		}
		this.lineHeight = Math.ceil(this.lineHeight * ratio);
		this.baseLine = Math.ceil(this.baseLine * ratio);
		this.size = size;
	}
	,calcBaseLine: function() {
		var padding = 0;
		var space = this.glyphs.h[32];
		if(space != null) {
			padding = space.t.height * .5;
		}
		var a = this.glyphs.h[65];
		if(a == null) {
			a = this.glyphs.h[97];
		}
		if(a == null) {
			a = this.glyphs.h[48];
		}
		if(a == null) {
			return this.lineHeight - 2 - padding;
		}
		return a.t.dy + a.t.height - padding;
	}
	,__class__: h2d_Font
};
var h2d_GPoint = function() {
};
$hxClasses["h2d.GPoint"] = h2d_GPoint;
h2d_GPoint.__name__ = "h2d.GPoint";
h2d_GPoint.prototype = {
	load: function(x,y,r,g,b,a) {
		this.x = x;
		this.y = y;
		this.r = r;
		this.g = g;
		this.b = b;
		this.a = a;
	}
	,__class__: h2d_GPoint
};
var h3d_prim_Primitive = function() {
	this.refCount = 0;
};
$hxClasses["h3d.prim.Primitive"] = h3d_prim_Primitive;
h3d_prim_Primitive.__name__ = "h3d.prim.Primitive";
h3d_prim_Primitive.prototype = {
	triCount: function() {
		if(this.indexes != null) {
			return this.indexes.vertices / 3 | 0;
		} else if(this.buffer == null) {
			return 0;
		} else {
			return this.buffer.vertices / 3 | 0;
		}
	}
	,getBounds: function() {
		throw haxe_Exception.thrown("not implemented for " + Std.string(this));
	}
	,incref: function() {
		this.refCount++;
	}
	,decref: function() {
		this.refCount--;
		if(this.refCount <= 0) {
			this.refCount = 0;
			this.dispose();
		}
	}
	,alloc: function(engine) {
		throw haxe_Exception.thrown("not implemented");
	}
	,selectMaterial: function(material,lod) {
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(engine);
		}
		if(this.indexes == null) {
			var b = this.buffer;
			engine.renderBuffer(b,engine.mem.getTriIndexes(b.vertices),3,0,-1);
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__.split(".").pop();
	}
	,lodCount: function() {
		return 1;
	}
	,screenRatioToLod: function(screenRatio) {
		return 0;
	}
	,__class__: h3d_prim_Primitive
};
var h2d__$Graphics_GraphicsContent = function() {
	h3d_prim_Primitive.call(this);
	this.buffers = [];
	this.state = new h2d_impl_BatchDrawState();
	this.allocPos = hxd_impl_AllocPos.make();
};
$hxClasses["h2d._Graphics.GraphicsContent"] = h2d__$Graphics_GraphicsContent;
h2d__$Graphics_GraphicsContent.__name__ = "h2d._Graphics.GraphicsContent";
h2d__$Graphics_GraphicsContent.__super__ = h3d_prim_Primitive;
h2d__$Graphics_GraphicsContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	setTile: function(tile) {
		if(tile != null) {
			this.state.setTexture(tile.innerTex);
		}
	}
	,next: function() {
		var nvect = this.tmp.pos >> 3;
		if(nvect < 32768) {
			return false;
		}
		this.buffers.push({ buf : this.tmp, idx : this.index, vbuf : null, ibuf : null, state : this.state});
		this.tmp = hxd__$FloatBuffer_Float32Expand._new(0);
		this.index = new Array(0);
		var tex = this.state.tail.texture;
		this.state = new h2d_impl_BatchDrawState();
		this.state.setTexture(tex);
		h3d_prim_Primitive.prototype.dispose.call(this);
		return true;
	}
	,alloc: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		var alloc = hxd_impl_Allocator.get();
		this.buffer = alloc.ofFloats(this.tmp,hxd_BufferFormat.get_XY_UV_RGBA());
		this.buffer.allocPos = this.allocPos;
		this.indexes = alloc.ofIndexes(this.index);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf == null || b.vbuf.vbuf == null) {
				b.vbuf = alloc.ofFloats(b.buf,hxd_BufferFormat.get_XY_UV_RGBA());
			}
			if(b.ibuf == null || b.ibuf.vbuf == null) {
				b.ibuf = alloc.ofIndexes(b.idx);
			}
		}
		this.bufferDirty = false;
		this.indexDirty = false;
	}
	,doRender: function(ctx) {
		if(this.index.length == 0) {
			return;
		}
		this.flush();
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.state.drawIndexed(ctx,b.vbuf,b.ibuf);
		}
		this.state.drawIndexed(ctx,this.buffer,this.indexes);
	}
	,flush: function() {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(h3d_Engine.CURRENT);
		} else {
			var allocator = hxd_impl_Allocator.get();
			if(this.bufferDirty) {
				allocator.disposeBuffer(this.buffer);
				this.buffer = allocator.ofFloats(this.tmp,hxd_BufferFormat.get_XY_UV_RGBA());
				this.bufferDirty = false;
			}
			if(this.indexDirty) {
				allocator.disposeIndexBuffer(this.indexes);
				this.indexes = allocator.ofIndexes(this.index);
				this.indexDirty = false;
			}
		}
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf != null) {
				hxd_impl_Allocator.get().disposeBuffer(b.vbuf);
			}
			if(b.ibuf != null) {
				hxd_impl_Allocator.get().disposeIndexBuffer(b.ibuf);
			}
			b.vbuf = null;
			b.ibuf = null;
			b.state.clear();
		}
		if(this.buffer != null) {
			hxd_impl_Allocator.get().disposeBuffer(this.buffer);
			this.buffer = null;
		}
		if(this.indexes != null) {
			hxd_impl_Allocator.get().disposeIndexBuffer(this.indexes);
			this.indexes = null;
		}
		this.state.clear();
		h3d_prim_Primitive.prototype.dispose.call(this);
	}
	,clear: function() {
		this.dispose();
		this.tmp = hxd__$FloatBuffer_Float32Expand._new(0);
		this.index = new Array(0);
		this.buffers = [];
	}
	,__class__: h2d__$Graphics_GraphicsContent
});
var h2d_Graphics = function(parent) {
	this.bevel = 0.25;
	this.my = 0.;
	this.mx = 0.;
	this.md = 1.;
	this.mc = 0.;
	this.mb = 0.;
	this.ma = 1.;
	h2d_Drawable.call(this,parent);
	this.content = new h2d__$Graphics_GraphicsContent();
	this.tile = h2d_Tile.fromColor(16777215);
	this.clear();
};
$hxClasses["h2d.Graphics"] = h2d_Graphics;
h2d_Graphics.__name__ = "h2d.Graphics";
h2d_Graphics.__super__ = h2d_Drawable;
h2d_Graphics.prototype = $extend(h2d_Drawable.prototype,{
	onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		this.clear();
	}
	,clear: function() {
		this.content.clear();
		this.tmpPoints = [];
		this.pindex = 0;
		this.lineSize = 0;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.yMax = -Infinity;
		this.xMax = -Infinity;
		this.xMinSize = Infinity;
		this.yMinSize = Infinity;
		this.yMaxSize = -Infinity;
		this.xMaxSize = -Infinity;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			if(forSize) {
				this.addBounds(relativeTo,out,this.xMinSize,this.yMinSize,this.xMaxSize - this.xMinSize,this.yMaxSize - this.yMinSize);
			} else {
				this.addBounds(relativeTo,out,this.xMin,this.yMin,this.xMax - this.xMin,this.yMax - this.yMin);
			}
		}
	}
	,isConvex: function(points) {
		var first = true;
		var sign = false;
		var _g = 0;
		var _g1 = points.length;
		while(_g < _g1) {
			var i = _g++;
			var p1 = points[i];
			var p2 = points[(i + 1) % points.length];
			var p3 = points[(i + 2) % points.length];
			var s = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;
			if(first) {
				first = false;
				sign = s;
			} else if(sign != s) {
				return false;
			}
		}
		return true;
	}
	,flushLine: function(start) {
		var pts = this.tmpPoints;
		var last = pts.length - 1;
		var prev = pts[last];
		var p = pts[0];
		this.content.setTile(h2d_Tile.fromColor(16777215));
		var closed = p.x == prev.x && p.y == prev.y;
		var count = pts.length;
		if(!closed) {
			var prevLast = pts[last - 1];
			if(prevLast == null) {
				prevLast = p;
			}
			var gp = new h2d_GPoint();
			gp.load(prev.x * 2 - prevLast.x,prev.y * 2 - prevLast.y,0,0,0,0);
			pts.push(gp);
			var pNext = pts[1];
			if(pNext == null) {
				pNext = p;
			}
			var gp = new h2d_GPoint();
			gp.load(p.x * 2 - pNext.x,p.y * 2 - pNext.y,0,0,0,0);
			prev = gp;
		} else if(p != prev) {
			--count;
			--last;
			prev = pts[last];
		}
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var next = pts[(i + 1) % pts.length];
			var nx1 = prev.y - p.y;
			var ny1 = p.x - prev.x;
			var ns1 = 1. / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			var nx2 = p.y - next.y;
			var ny2 = next.x - p.x;
			var ns2 = 1. / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			var nx = nx1 * ns1 + nx2 * ns2;
			var ny = ny1 * ns1 + ny2 * ns2;
			var ns = 1. / Math.sqrt(nx * nx + ny * ny);
			nx *= ns;
			ny *= ns;
			var size = nx * nx1 * ns1 + ny * ny1 * ns1;
			if(size < 0.1) {
				size = 0.1;
			}
			var d = this.lineSize * 0.5 / size;
			nx *= d;
			ny *= d;
			if(size > this.bevel) {
				var _this = this.content;
				var x = p.x + nx;
				var y = p.y + ny;
				var r = p.r;
				var g = p.g;
				var b = p.b;
				var a = p.a;
				var this1 = _this.tmp;
				if(this1.pos == this1.array.length) {
					var newSize = this1.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(this1.array);
					this1.array = newArray;
				}
				this1.array[this1.pos++] = x;
				var this2 = _this.tmp;
				if(this2.pos == this2.array.length) {
					var newSize1 = this2.array.length << 1;
					if(newSize1 < 128) {
						newSize1 = 128;
					}
					var newArray1 = new Float32Array(newSize1);
					newArray1.set(this2.array);
					this2.array = newArray1;
				}
				this2.array[this2.pos++] = y;
				var this3 = _this.tmp;
				if(this3.pos == this3.array.length) {
					var newSize2 = this3.array.length << 1;
					if(newSize2 < 128) {
						newSize2 = 128;
					}
					var newArray2 = new Float32Array(newSize2);
					newArray2.set(this3.array);
					this3.array = newArray2;
				}
				this3.array[this3.pos++] = 0;
				var this4 = _this.tmp;
				if(this4.pos == this4.array.length) {
					var newSize3 = this4.array.length << 1;
					if(newSize3 < 128) {
						newSize3 = 128;
					}
					var newArray3 = new Float32Array(newSize3);
					newArray3.set(this4.array);
					this4.array = newArray3;
				}
				this4.array[this4.pos++] = 0;
				var this5 = _this.tmp;
				if(this5.pos == this5.array.length) {
					var newSize4 = this5.array.length << 1;
					if(newSize4 < 128) {
						newSize4 = 128;
					}
					var newArray4 = new Float32Array(newSize4);
					newArray4.set(this5.array);
					this5.array = newArray4;
				}
				this5.array[this5.pos++] = r;
				var this6 = _this.tmp;
				if(this6.pos == this6.array.length) {
					var newSize5 = this6.array.length << 1;
					if(newSize5 < 128) {
						newSize5 = 128;
					}
					var newArray5 = new Float32Array(newSize5);
					newArray5.set(this6.array);
					this6.array = newArray5;
				}
				this6.array[this6.pos++] = g;
				var this7 = _this.tmp;
				if(this7.pos == this7.array.length) {
					var newSize6 = this7.array.length << 1;
					if(newSize6 < 128) {
						newSize6 = 128;
					}
					var newArray6 = new Float32Array(newSize6);
					newArray6.set(this7.array);
					this7.array = newArray6;
				}
				this7.array[this7.pos++] = b;
				var this8 = _this.tmp;
				if(this8.pos == this8.array.length) {
					var newSize7 = this8.array.length << 1;
					if(newSize7 < 128) {
						newSize7 = 128;
					}
					var newArray7 = new Float32Array(newSize7);
					newArray7.set(this8.array);
					this8.array = newArray7;
				}
				this8.array[this8.pos++] = a;
				_this.bufferDirty = true;
				var _this1 = this.content;
				var x1 = p.x - nx;
				var y1 = p.y - ny;
				var r1 = p.r;
				var g1 = p.g;
				var b1 = p.b;
				var a1 = p.a;
				var this9 = _this1.tmp;
				if(this9.pos == this9.array.length) {
					var newSize8 = this9.array.length << 1;
					if(newSize8 < 128) {
						newSize8 = 128;
					}
					var newArray8 = new Float32Array(newSize8);
					newArray8.set(this9.array);
					this9.array = newArray8;
				}
				this9.array[this9.pos++] = x1;
				var this10 = _this1.tmp;
				if(this10.pos == this10.array.length) {
					var newSize9 = this10.array.length << 1;
					if(newSize9 < 128) {
						newSize9 = 128;
					}
					var newArray9 = new Float32Array(newSize9);
					newArray9.set(this10.array);
					this10.array = newArray9;
				}
				this10.array[this10.pos++] = y1;
				var this11 = _this1.tmp;
				if(this11.pos == this11.array.length) {
					var newSize10 = this11.array.length << 1;
					if(newSize10 < 128) {
						newSize10 = 128;
					}
					var newArray10 = new Float32Array(newSize10);
					newArray10.set(this11.array);
					this11.array = newArray10;
				}
				this11.array[this11.pos++] = 0;
				var this12 = _this1.tmp;
				if(this12.pos == this12.array.length) {
					var newSize11 = this12.array.length << 1;
					if(newSize11 < 128) {
						newSize11 = 128;
					}
					var newArray11 = new Float32Array(newSize11);
					newArray11.set(this12.array);
					this12.array = newArray11;
				}
				this12.array[this12.pos++] = 0;
				var this13 = _this1.tmp;
				if(this13.pos == this13.array.length) {
					var newSize12 = this13.array.length << 1;
					if(newSize12 < 128) {
						newSize12 = 128;
					}
					var newArray12 = new Float32Array(newSize12);
					newArray12.set(this13.array);
					this13.array = newArray12;
				}
				this13.array[this13.pos++] = r1;
				var this14 = _this1.tmp;
				if(this14.pos == this14.array.length) {
					var newSize13 = this14.array.length << 1;
					if(newSize13 < 128) {
						newSize13 = 128;
					}
					var newArray13 = new Float32Array(newSize13);
					newArray13.set(this14.array);
					this14.array = newArray13;
				}
				this14.array[this14.pos++] = g1;
				var this15 = _this1.tmp;
				if(this15.pos == this15.array.length) {
					var newSize14 = this15.array.length << 1;
					if(newSize14 < 128) {
						newSize14 = 128;
					}
					var newArray14 = new Float32Array(newSize14);
					newArray14.set(this15.array);
					this15.array = newArray14;
				}
				this15.array[this15.pos++] = b1;
				var this16 = _this1.tmp;
				if(this16.pos == this16.array.length) {
					var newSize15 = this16.array.length << 1;
					if(newSize15 < 128) {
						newSize15 = 128;
					}
					var newArray15 = new Float32Array(newSize15);
					newArray15.set(this16.array);
					this16.array = newArray15;
				}
				this16.array[this16.pos++] = a1;
				_this1.bufferDirty = true;
				var pnext = i == last ? start : this.pindex + 2;
				if(i < count - 1 || closed) {
					var _this2 = this.content;
					_this2.index.push(this.pindex);
					var _this3 = _this2.state;
					_this3.tail.count += 1;
					_this3.totalCount += 1;
					_this2.indexDirty = true;
					var _this4 = this.content;
					_this4.index.push(this.pindex + 1);
					var _this5 = _this4.state;
					_this5.tail.count += 1;
					_this5.totalCount += 1;
					_this4.indexDirty = true;
					var _this6 = this.content;
					_this6.index.push(pnext);
					var _this7 = _this6.state;
					_this7.tail.count += 1;
					_this7.totalCount += 1;
					_this6.indexDirty = true;
					var _this8 = this.content;
					_this8.index.push(this.pindex + 1);
					var _this9 = _this8.state;
					_this9.tail.count += 1;
					_this9.totalCount += 1;
					_this8.indexDirty = true;
					var _this10 = this.content;
					_this10.index.push(pnext);
					var _this11 = _this10.state;
					_this11.tail.count += 1;
					_this11.totalCount += 1;
					_this10.indexDirty = true;
					var _this12 = this.content;
					_this12.index.push(pnext + 1);
					var _this13 = _this12.state;
					_this13.tail.count += 1;
					_this13.totalCount += 1;
					_this12.indexDirty = true;
				}
				this.pindex += 2;
			} else {
				var n0x = next.x - p.x;
				var n0y = next.y - p.y;
				var sign = n0x * nx + n0y * ny;
				var nnx = -ny;
				var nny = nx;
				var size1 = nnx * nx1 * ns1 + nny * ny1 * ns1;
				var d1 = this.lineSize * 0.5 / size1;
				nnx *= d1;
				nny *= d1;
				var pnext1 = i == last ? start : this.pindex + 3;
				if(sign > 0) {
					var _this14 = this.content;
					var x2 = p.x + nx;
					var y2 = p.y + ny;
					var r2 = p.r;
					var g2 = p.g;
					var b2 = p.b;
					var a2 = p.a;
					var this17 = _this14.tmp;
					if(this17.pos == this17.array.length) {
						var newSize16 = this17.array.length << 1;
						if(newSize16 < 128) {
							newSize16 = 128;
						}
						var newArray16 = new Float32Array(newSize16);
						newArray16.set(this17.array);
						this17.array = newArray16;
					}
					this17.array[this17.pos++] = x2;
					var this18 = _this14.tmp;
					if(this18.pos == this18.array.length) {
						var newSize17 = this18.array.length << 1;
						if(newSize17 < 128) {
							newSize17 = 128;
						}
						var newArray17 = new Float32Array(newSize17);
						newArray17.set(this18.array);
						this18.array = newArray17;
					}
					this18.array[this18.pos++] = y2;
					var this19 = _this14.tmp;
					if(this19.pos == this19.array.length) {
						var newSize18 = this19.array.length << 1;
						if(newSize18 < 128) {
							newSize18 = 128;
						}
						var newArray18 = new Float32Array(newSize18);
						newArray18.set(this19.array);
						this19.array = newArray18;
					}
					this19.array[this19.pos++] = 0;
					var this20 = _this14.tmp;
					if(this20.pos == this20.array.length) {
						var newSize19 = this20.array.length << 1;
						if(newSize19 < 128) {
							newSize19 = 128;
						}
						var newArray19 = new Float32Array(newSize19);
						newArray19.set(this20.array);
						this20.array = newArray19;
					}
					this20.array[this20.pos++] = 0;
					var this21 = _this14.tmp;
					if(this21.pos == this21.array.length) {
						var newSize20 = this21.array.length << 1;
						if(newSize20 < 128) {
							newSize20 = 128;
						}
						var newArray20 = new Float32Array(newSize20);
						newArray20.set(this21.array);
						this21.array = newArray20;
					}
					this21.array[this21.pos++] = r2;
					var this22 = _this14.tmp;
					if(this22.pos == this22.array.length) {
						var newSize21 = this22.array.length << 1;
						if(newSize21 < 128) {
							newSize21 = 128;
						}
						var newArray21 = new Float32Array(newSize21);
						newArray21.set(this22.array);
						this22.array = newArray21;
					}
					this22.array[this22.pos++] = g2;
					var this23 = _this14.tmp;
					if(this23.pos == this23.array.length) {
						var newSize22 = this23.array.length << 1;
						if(newSize22 < 128) {
							newSize22 = 128;
						}
						var newArray22 = new Float32Array(newSize22);
						newArray22.set(this23.array);
						this23.array = newArray22;
					}
					this23.array[this23.pos++] = b2;
					var this24 = _this14.tmp;
					if(this24.pos == this24.array.length) {
						var newSize23 = this24.array.length << 1;
						if(newSize23 < 128) {
							newSize23 = 128;
						}
						var newArray23 = new Float32Array(newSize23);
						newArray23.set(this24.array);
						this24.array = newArray23;
					}
					this24.array[this24.pos++] = a2;
					_this14.bufferDirty = true;
					var _this15 = this.content;
					var x3 = p.x - nnx;
					var y3 = p.y - nny;
					var r3 = p.r;
					var g3 = p.g;
					var b3 = p.b;
					var a3 = p.a;
					var this25 = _this15.tmp;
					if(this25.pos == this25.array.length) {
						var newSize24 = this25.array.length << 1;
						if(newSize24 < 128) {
							newSize24 = 128;
						}
						var newArray24 = new Float32Array(newSize24);
						newArray24.set(this25.array);
						this25.array = newArray24;
					}
					this25.array[this25.pos++] = x3;
					var this26 = _this15.tmp;
					if(this26.pos == this26.array.length) {
						var newSize25 = this26.array.length << 1;
						if(newSize25 < 128) {
							newSize25 = 128;
						}
						var newArray25 = new Float32Array(newSize25);
						newArray25.set(this26.array);
						this26.array = newArray25;
					}
					this26.array[this26.pos++] = y3;
					var this27 = _this15.tmp;
					if(this27.pos == this27.array.length) {
						var newSize26 = this27.array.length << 1;
						if(newSize26 < 128) {
							newSize26 = 128;
						}
						var newArray26 = new Float32Array(newSize26);
						newArray26.set(this27.array);
						this27.array = newArray26;
					}
					this27.array[this27.pos++] = 0;
					var this28 = _this15.tmp;
					if(this28.pos == this28.array.length) {
						var newSize27 = this28.array.length << 1;
						if(newSize27 < 128) {
							newSize27 = 128;
						}
						var newArray27 = new Float32Array(newSize27);
						newArray27.set(this28.array);
						this28.array = newArray27;
					}
					this28.array[this28.pos++] = 0;
					var this29 = _this15.tmp;
					if(this29.pos == this29.array.length) {
						var newSize28 = this29.array.length << 1;
						if(newSize28 < 128) {
							newSize28 = 128;
						}
						var newArray28 = new Float32Array(newSize28);
						newArray28.set(this29.array);
						this29.array = newArray28;
					}
					this29.array[this29.pos++] = r3;
					var this30 = _this15.tmp;
					if(this30.pos == this30.array.length) {
						var newSize29 = this30.array.length << 1;
						if(newSize29 < 128) {
							newSize29 = 128;
						}
						var newArray29 = new Float32Array(newSize29);
						newArray29.set(this30.array);
						this30.array = newArray29;
					}
					this30.array[this30.pos++] = g3;
					var this31 = _this15.tmp;
					if(this31.pos == this31.array.length) {
						var newSize30 = this31.array.length << 1;
						if(newSize30 < 128) {
							newSize30 = 128;
						}
						var newArray30 = new Float32Array(newSize30);
						newArray30.set(this31.array);
						this31.array = newArray30;
					}
					this31.array[this31.pos++] = b3;
					var this32 = _this15.tmp;
					if(this32.pos == this32.array.length) {
						var newSize31 = this32.array.length << 1;
						if(newSize31 < 128) {
							newSize31 = 128;
						}
						var newArray31 = new Float32Array(newSize31);
						newArray31.set(this32.array);
						this32.array = newArray31;
					}
					this32.array[this32.pos++] = a3;
					_this15.bufferDirty = true;
					var _this16 = this.content;
					var x4 = p.x + nnx;
					var y4 = p.y + nny;
					var r4 = p.r;
					var g4 = p.g;
					var b4 = p.b;
					var a4 = p.a;
					var this33 = _this16.tmp;
					if(this33.pos == this33.array.length) {
						var newSize32 = this33.array.length << 1;
						if(newSize32 < 128) {
							newSize32 = 128;
						}
						var newArray32 = new Float32Array(newSize32);
						newArray32.set(this33.array);
						this33.array = newArray32;
					}
					this33.array[this33.pos++] = x4;
					var this34 = _this16.tmp;
					if(this34.pos == this34.array.length) {
						var newSize33 = this34.array.length << 1;
						if(newSize33 < 128) {
							newSize33 = 128;
						}
						var newArray33 = new Float32Array(newSize33);
						newArray33.set(this34.array);
						this34.array = newArray33;
					}
					this34.array[this34.pos++] = y4;
					var this35 = _this16.tmp;
					if(this35.pos == this35.array.length) {
						var newSize34 = this35.array.length << 1;
						if(newSize34 < 128) {
							newSize34 = 128;
						}
						var newArray34 = new Float32Array(newSize34);
						newArray34.set(this35.array);
						this35.array = newArray34;
					}
					this35.array[this35.pos++] = 0;
					var this36 = _this16.tmp;
					if(this36.pos == this36.array.length) {
						var newSize35 = this36.array.length << 1;
						if(newSize35 < 128) {
							newSize35 = 128;
						}
						var newArray35 = new Float32Array(newSize35);
						newArray35.set(this36.array);
						this36.array = newArray35;
					}
					this36.array[this36.pos++] = 0;
					var this37 = _this16.tmp;
					if(this37.pos == this37.array.length) {
						var newSize36 = this37.array.length << 1;
						if(newSize36 < 128) {
							newSize36 = 128;
						}
						var newArray36 = new Float32Array(newSize36);
						newArray36.set(this37.array);
						this37.array = newArray36;
					}
					this37.array[this37.pos++] = r4;
					var this38 = _this16.tmp;
					if(this38.pos == this38.array.length) {
						var newSize37 = this38.array.length << 1;
						if(newSize37 < 128) {
							newSize37 = 128;
						}
						var newArray37 = new Float32Array(newSize37);
						newArray37.set(this38.array);
						this38.array = newArray37;
					}
					this38.array[this38.pos++] = g4;
					var this39 = _this16.tmp;
					if(this39.pos == this39.array.length) {
						var newSize38 = this39.array.length << 1;
						if(newSize38 < 128) {
							newSize38 = 128;
						}
						var newArray38 = new Float32Array(newSize38);
						newArray38.set(this39.array);
						this39.array = newArray38;
					}
					this39.array[this39.pos++] = b4;
					var this40 = _this16.tmp;
					if(this40.pos == this40.array.length) {
						var newSize39 = this40.array.length << 1;
						if(newSize39 < 128) {
							newSize39 = 128;
						}
						var newArray39 = new Float32Array(newSize39);
						newArray39.set(this40.array);
						this40.array = newArray39;
					}
					this40.array[this40.pos++] = a4;
					_this16.bufferDirty = true;
					var _this17 = this.content;
					_this17.index.push(this.pindex);
					var _this18 = _this17.state;
					_this18.tail.count += 1;
					_this18.totalCount += 1;
					_this17.indexDirty = true;
					var _this19 = this.content;
					_this19.index.push(pnext1);
					var _this20 = _this19.state;
					_this20.tail.count += 1;
					_this20.totalCount += 1;
					_this19.indexDirty = true;
					var _this21 = this.content;
					_this21.index.push(this.pindex + 2);
					var _this22 = _this21.state;
					_this22.tail.count += 1;
					_this22.totalCount += 1;
					_this21.indexDirty = true;
					var _this23 = this.content;
					_this23.index.push(this.pindex + 2);
					var _this24 = _this23.state;
					_this24.tail.count += 1;
					_this24.totalCount += 1;
					_this23.indexDirty = true;
					var _this25 = this.content;
					_this25.index.push(pnext1);
					var _this26 = _this25.state;
					_this26.tail.count += 1;
					_this26.totalCount += 1;
					_this25.indexDirty = true;
					var _this27 = this.content;
					_this27.index.push(pnext1 + 1);
					var _this28 = _this27.state;
					_this28.tail.count += 1;
					_this28.totalCount += 1;
					_this27.indexDirty = true;
				} else {
					var _this29 = this.content;
					var x5 = p.x + nnx;
					var y5 = p.y + nny;
					var r5 = p.r;
					var g5 = p.g;
					var b5 = p.b;
					var a5 = p.a;
					var this41 = _this29.tmp;
					if(this41.pos == this41.array.length) {
						var newSize40 = this41.array.length << 1;
						if(newSize40 < 128) {
							newSize40 = 128;
						}
						var newArray40 = new Float32Array(newSize40);
						newArray40.set(this41.array);
						this41.array = newArray40;
					}
					this41.array[this41.pos++] = x5;
					var this42 = _this29.tmp;
					if(this42.pos == this42.array.length) {
						var newSize41 = this42.array.length << 1;
						if(newSize41 < 128) {
							newSize41 = 128;
						}
						var newArray41 = new Float32Array(newSize41);
						newArray41.set(this42.array);
						this42.array = newArray41;
					}
					this42.array[this42.pos++] = y5;
					var this43 = _this29.tmp;
					if(this43.pos == this43.array.length) {
						var newSize42 = this43.array.length << 1;
						if(newSize42 < 128) {
							newSize42 = 128;
						}
						var newArray42 = new Float32Array(newSize42);
						newArray42.set(this43.array);
						this43.array = newArray42;
					}
					this43.array[this43.pos++] = 0;
					var this44 = _this29.tmp;
					if(this44.pos == this44.array.length) {
						var newSize43 = this44.array.length << 1;
						if(newSize43 < 128) {
							newSize43 = 128;
						}
						var newArray43 = new Float32Array(newSize43);
						newArray43.set(this44.array);
						this44.array = newArray43;
					}
					this44.array[this44.pos++] = 0;
					var this45 = _this29.tmp;
					if(this45.pos == this45.array.length) {
						var newSize44 = this45.array.length << 1;
						if(newSize44 < 128) {
							newSize44 = 128;
						}
						var newArray44 = new Float32Array(newSize44);
						newArray44.set(this45.array);
						this45.array = newArray44;
					}
					this45.array[this45.pos++] = r5;
					var this46 = _this29.tmp;
					if(this46.pos == this46.array.length) {
						var newSize45 = this46.array.length << 1;
						if(newSize45 < 128) {
							newSize45 = 128;
						}
						var newArray45 = new Float32Array(newSize45);
						newArray45.set(this46.array);
						this46.array = newArray45;
					}
					this46.array[this46.pos++] = g5;
					var this47 = _this29.tmp;
					if(this47.pos == this47.array.length) {
						var newSize46 = this47.array.length << 1;
						if(newSize46 < 128) {
							newSize46 = 128;
						}
						var newArray46 = new Float32Array(newSize46);
						newArray46.set(this47.array);
						this47.array = newArray46;
					}
					this47.array[this47.pos++] = b5;
					var this48 = _this29.tmp;
					if(this48.pos == this48.array.length) {
						var newSize47 = this48.array.length << 1;
						if(newSize47 < 128) {
							newSize47 = 128;
						}
						var newArray47 = new Float32Array(newSize47);
						newArray47.set(this48.array);
						this48.array = newArray47;
					}
					this48.array[this48.pos++] = a5;
					_this29.bufferDirty = true;
					var _this30 = this.content;
					var x6 = p.x - nx;
					var y6 = p.y - ny;
					var r6 = p.r;
					var g6 = p.g;
					var b6 = p.b;
					var a6 = p.a;
					var this49 = _this30.tmp;
					if(this49.pos == this49.array.length) {
						var newSize48 = this49.array.length << 1;
						if(newSize48 < 128) {
							newSize48 = 128;
						}
						var newArray48 = new Float32Array(newSize48);
						newArray48.set(this49.array);
						this49.array = newArray48;
					}
					this49.array[this49.pos++] = x6;
					var this50 = _this30.tmp;
					if(this50.pos == this50.array.length) {
						var newSize49 = this50.array.length << 1;
						if(newSize49 < 128) {
							newSize49 = 128;
						}
						var newArray49 = new Float32Array(newSize49);
						newArray49.set(this50.array);
						this50.array = newArray49;
					}
					this50.array[this50.pos++] = y6;
					var this51 = _this30.tmp;
					if(this51.pos == this51.array.length) {
						var newSize50 = this51.array.length << 1;
						if(newSize50 < 128) {
							newSize50 = 128;
						}
						var newArray50 = new Float32Array(newSize50);
						newArray50.set(this51.array);
						this51.array = newArray50;
					}
					this51.array[this51.pos++] = 0;
					var this52 = _this30.tmp;
					if(this52.pos == this52.array.length) {
						var newSize51 = this52.array.length << 1;
						if(newSize51 < 128) {
							newSize51 = 128;
						}
						var newArray51 = new Float32Array(newSize51);
						newArray51.set(this52.array);
						this52.array = newArray51;
					}
					this52.array[this52.pos++] = 0;
					var this53 = _this30.tmp;
					if(this53.pos == this53.array.length) {
						var newSize52 = this53.array.length << 1;
						if(newSize52 < 128) {
							newSize52 = 128;
						}
						var newArray52 = new Float32Array(newSize52);
						newArray52.set(this53.array);
						this53.array = newArray52;
					}
					this53.array[this53.pos++] = r6;
					var this54 = _this30.tmp;
					if(this54.pos == this54.array.length) {
						var newSize53 = this54.array.length << 1;
						if(newSize53 < 128) {
							newSize53 = 128;
						}
						var newArray53 = new Float32Array(newSize53);
						newArray53.set(this54.array);
						this54.array = newArray53;
					}
					this54.array[this54.pos++] = g6;
					var this55 = _this30.tmp;
					if(this55.pos == this55.array.length) {
						var newSize54 = this55.array.length << 1;
						if(newSize54 < 128) {
							newSize54 = 128;
						}
						var newArray54 = new Float32Array(newSize54);
						newArray54.set(this55.array);
						this55.array = newArray54;
					}
					this55.array[this55.pos++] = b6;
					var this56 = _this30.tmp;
					if(this56.pos == this56.array.length) {
						var newSize55 = this56.array.length << 1;
						if(newSize55 < 128) {
							newSize55 = 128;
						}
						var newArray55 = new Float32Array(newSize55);
						newArray55.set(this56.array);
						this56.array = newArray55;
					}
					this56.array[this56.pos++] = a6;
					_this30.bufferDirty = true;
					var _this31 = this.content;
					var x7 = p.x - nnx;
					var y7 = p.y - nny;
					var r7 = p.r;
					var g7 = p.g;
					var b7 = p.b;
					var a7 = p.a;
					var this57 = _this31.tmp;
					if(this57.pos == this57.array.length) {
						var newSize56 = this57.array.length << 1;
						if(newSize56 < 128) {
							newSize56 = 128;
						}
						var newArray56 = new Float32Array(newSize56);
						newArray56.set(this57.array);
						this57.array = newArray56;
					}
					this57.array[this57.pos++] = x7;
					var this58 = _this31.tmp;
					if(this58.pos == this58.array.length) {
						var newSize57 = this58.array.length << 1;
						if(newSize57 < 128) {
							newSize57 = 128;
						}
						var newArray57 = new Float32Array(newSize57);
						newArray57.set(this58.array);
						this58.array = newArray57;
					}
					this58.array[this58.pos++] = y7;
					var this59 = _this31.tmp;
					if(this59.pos == this59.array.length) {
						var newSize58 = this59.array.length << 1;
						if(newSize58 < 128) {
							newSize58 = 128;
						}
						var newArray58 = new Float32Array(newSize58);
						newArray58.set(this59.array);
						this59.array = newArray58;
					}
					this59.array[this59.pos++] = 0;
					var this60 = _this31.tmp;
					if(this60.pos == this60.array.length) {
						var newSize59 = this60.array.length << 1;
						if(newSize59 < 128) {
							newSize59 = 128;
						}
						var newArray59 = new Float32Array(newSize59);
						newArray59.set(this60.array);
						this60.array = newArray59;
					}
					this60.array[this60.pos++] = 0;
					var this61 = _this31.tmp;
					if(this61.pos == this61.array.length) {
						var newSize60 = this61.array.length << 1;
						if(newSize60 < 128) {
							newSize60 = 128;
						}
						var newArray60 = new Float32Array(newSize60);
						newArray60.set(this61.array);
						this61.array = newArray60;
					}
					this61.array[this61.pos++] = r7;
					var this62 = _this31.tmp;
					if(this62.pos == this62.array.length) {
						var newSize61 = this62.array.length << 1;
						if(newSize61 < 128) {
							newSize61 = 128;
						}
						var newArray61 = new Float32Array(newSize61);
						newArray61.set(this62.array);
						this62.array = newArray61;
					}
					this62.array[this62.pos++] = g7;
					var this63 = _this31.tmp;
					if(this63.pos == this63.array.length) {
						var newSize62 = this63.array.length << 1;
						if(newSize62 < 128) {
							newSize62 = 128;
						}
						var newArray62 = new Float32Array(newSize62);
						newArray62.set(this63.array);
						this63.array = newArray62;
					}
					this63.array[this63.pos++] = b7;
					var this64 = _this31.tmp;
					if(this64.pos == this64.array.length) {
						var newSize63 = this64.array.length << 1;
						if(newSize63 < 128) {
							newSize63 = 128;
						}
						var newArray63 = new Float32Array(newSize63);
						newArray63.set(this64.array);
						this64.array = newArray63;
					}
					this64.array[this64.pos++] = a7;
					_this31.bufferDirty = true;
					var _this32 = this.content;
					_this32.index.push(this.pindex + 1);
					var _this33 = _this32.state;
					_this33.tail.count += 1;
					_this33.totalCount += 1;
					_this32.indexDirty = true;
					var _this34 = this.content;
					_this34.index.push(pnext1);
					var _this35 = _this34.state;
					_this35.tail.count += 1;
					_this35.totalCount += 1;
					_this34.indexDirty = true;
					var _this36 = this.content;
					_this36.index.push(this.pindex + 2);
					var _this37 = _this36.state;
					_this37.tail.count += 1;
					_this37.totalCount += 1;
					_this36.indexDirty = true;
					var _this38 = this.content;
					_this38.index.push(this.pindex + 1);
					var _this39 = _this38.state;
					_this39.tail.count += 1;
					_this39.totalCount += 1;
					_this38.indexDirty = true;
					var _this40 = this.content;
					_this40.index.push(pnext1);
					var _this41 = _this40.state;
					_this41.tail.count += 1;
					_this41.totalCount += 1;
					_this40.indexDirty = true;
					var _this42 = this.content;
					_this42.index.push(pnext1 + 1);
					var _this43 = _this42.state;
					_this43.tail.count += 1;
					_this43.totalCount += 1;
					_this42.indexDirty = true;
				}
				var _this44 = this.content;
				_this44.index.push(this.pindex);
				var _this45 = _this44.state;
				_this45.tail.count += 1;
				_this45.totalCount += 1;
				_this44.indexDirty = true;
				var _this46 = this.content;
				_this46.index.push(this.pindex + 1);
				var _this47 = _this46.state;
				_this47.tail.count += 1;
				_this47.totalCount += 1;
				_this46.indexDirty = true;
				var _this48 = this.content;
				_this48.index.push(this.pindex + 2);
				var _this49 = _this48.state;
				_this49.tail.count += 1;
				_this49.totalCount += 1;
				_this48.indexDirty = true;
				this.pindex += 3;
			}
			prev = p;
			p = next;
		}
		this.content.setTile(this.tile);
	}
	,flushFill: function(i0) {
		if(this.tmpPoints.length < 3) {
			return;
		}
		var pts = this.tmpPoints;
		var p0 = pts[0];
		var p1 = pts[pts.length - 1];
		var last = null;
		var tmp;
		var f = p0.x - p1.x;
		if((f < 0 ? -f : f) < 1e-9) {
			var f = p0.y - p1.y;
			tmp = (f < 0 ? -f : f) < 1e-9;
		} else {
			tmp = false;
		}
		if(tmp) {
			last = pts.pop();
		}
		if(this.isConvex(pts)) {
			var _g = 1;
			var _g1 = pts.length - 1;
			while(_g < _g1) {
				var i = _g++;
				var _this = this.content;
				_this.index.push(i0);
				var _this1 = _this.state;
				_this1.tail.count += 1;
				_this1.totalCount += 1;
				_this.indexDirty = true;
				var _this2 = this.content;
				_this2.index.push(i0 + i);
				var _this3 = _this2.state;
				_this3.tail.count += 1;
				_this3.totalCount += 1;
				_this2.indexDirty = true;
				var _this4 = this.content;
				_this4.index.push(i0 + i + 1);
				var _this5 = _this4.state;
				_this5.tail.count += 1;
				_this5.totalCount += 1;
				_this4.indexDirty = true;
			}
		} else {
			var ear = h2d_Graphics.EARCUT;
			if(ear == null) {
				ear = new hxd_earcut_Earcut();
				h2d_Graphics.EARCUT = ear;
			}
			var _g = 0;
			var _g1 = ear.triangulate_h2d_GPoint(pts);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				var _this = this.content;
				_this.index.push(i + i0);
				var _this1 = _this.state;
				_this1.tail.count += 1;
				_this1.totalCount += 1;
				_this.indexDirty = true;
			}
		}
		if(last != null) {
			pts.push(last);
		}
	}
	,flush: function() {
		if(this.tmpPoints.length == 0) {
			return;
		}
		if(this.doFill) {
			this.flushFill(this.pindex);
			this.pindex += this.tmpPoints.length;
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		if(this.lineSize > 0) {
			this.flushLine(this.pindex);
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		this.tmpPoints = [];
	}
	,lineStyle: function(size,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		if(size == null) {
			size = 0;
		}
		this.flush();
		this.lineSize = size;
		this.lineA = alpha;
		this.lineR = (color >> 16 & 255) / 255.;
		this.lineG = (color >> 8 & 255) / 255.;
		this.lineB = (color & 255) / 255.;
	}
	,drawRect: function(x,y,w,h) {
		this.flush();
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		var x1 = x + w;
		this.addVertex(x1,y,this.curR,this.curG,this.curB,this.curA,x1 * this.ma + y * this.mc + this.mx,x1 * this.mb + y * this.md + this.my);
		var x1 = x + w;
		var y1 = y + h;
		this.addVertex(x1,y1,this.curR,this.curG,this.curB,this.curA,x1 * this.ma + y1 * this.mc + this.mx,x1 * this.mb + y1 * this.md + this.my);
		var y1 = y + h;
		this.addVertex(x,y1,this.curR,this.curG,this.curB,this.curA,x * this.ma + y1 * this.mc + this.mx,x * this.mb + y1 * this.md + this.my);
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		var e = 0.01;
		this.tmpPoints[0].x += e;
		this.tmpPoints[0].y += e;
		this.tmpPoints[1].y += e;
		this.tmpPoints[3].x += e;
		this.tmpPoints[4].x += e;
		this.tmpPoints[4].y += e;
		this.flush();
	}
	,addVertex: function(x,y,r,g,b,a,u,v) {
		if(v == null) {
			v = 0.;
		}
		if(u == null) {
			u = 0.;
		}
		var half = this.lineSize / 2.0;
		if(x - half < this.xMin) {
			this.xMin = x - half;
		}
		if(y - half < this.yMin) {
			this.yMin = y - half;
		}
		if(x + half > this.xMax) {
			this.xMax = x + half;
		}
		if(y + half > this.yMax) {
			this.yMax = y + half;
		}
		if(x < this.xMinSize) {
			this.xMinSize = x;
		}
		if(y < this.yMinSize) {
			this.yMinSize = y;
		}
		if(x > this.xMaxSize) {
			this.xMaxSize = x;
		}
		if(y > this.yMaxSize) {
			this.yMaxSize = y;
		}
		if(this.doFill) {
			var _this = this.content;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = x;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = y;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = u;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = v;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = r;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = g;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = b;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = a;
			_this.bufferDirty = true;
		}
		var gp = new h2d_GPoint();
		gp.load(x,y,this.lineR,this.lineG,this.lineB,this.lineA);
		this.tmpPoints.push(gp);
	}
	,draw: function(ctx) {
		if(!ctx.beginDrawBatchState(this)) {
			return;
		}
		this.content.doRender(ctx);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		this.flush();
		this.content.flush();
	}
	,__class__: h2d_Graphics
});
var h2d_LineHeightMode = $hxEnums["h2d.LineHeightMode"] = { __ename__:true,__constructs__:null
	,Accurate: {_hx_name:"Accurate",_hx_index:0,__enum__:"h2d.LineHeightMode",toString:$estr}
	,TextOnly: {_hx_name:"TextOnly",_hx_index:1,__enum__:"h2d.LineHeightMode",toString:$estr}
	,Constant: {_hx_name:"Constant",_hx_index:2,__enum__:"h2d.LineHeightMode",toString:$estr}
};
h2d_LineHeightMode.__constructs__ = [h2d_LineHeightMode.Accurate,h2d_LineHeightMode.TextOnly,h2d_LineHeightMode.Constant];
h2d_LineHeightMode.__empty_constructs__ = [h2d_LineHeightMode.Accurate,h2d_LineHeightMode.TextOnly,h2d_LineHeightMode.Constant];
var h2d_ImageVerticalAlign = $hxEnums["h2d.ImageVerticalAlign"] = { __ename__:true,__constructs__:null
	,Top: {_hx_name:"Top",_hx_index:0,__enum__:"h2d.ImageVerticalAlign",toString:$estr}
	,Bottom: {_hx_name:"Bottom",_hx_index:1,__enum__:"h2d.ImageVerticalAlign",toString:$estr}
	,Middle: {_hx_name:"Middle",_hx_index:2,__enum__:"h2d.ImageVerticalAlign",toString:$estr}
};
h2d_ImageVerticalAlign.__constructs__ = [h2d_ImageVerticalAlign.Top,h2d_ImageVerticalAlign.Bottom,h2d_ImageVerticalAlign.Middle];
h2d_ImageVerticalAlign.__empty_constructs__ = [h2d_ImageVerticalAlign.Top,h2d_ImageVerticalAlign.Bottom,h2d_ImageVerticalAlign.Middle];
var h2d_Text = function(font,parent) {
	this.realMaxWidth = -1;
	this.constraintWidth = -1;
	this.lineBreak = true;
	this.lineSpacing = 0;
	this.letterSpacing = 0;
	h2d_Drawable.call(this,parent);
	this.set_font(font);
	this.set_textAlign(h2d_Align.Left);
	this.set_text("");
	this.currentText = "";
	this.set_textColor(16777215);
};
$hxClasses["h2d.Text"] = h2d_Text;
h2d_Text.__name__ = "h2d.Text";
h2d_Text.__super__ = h2d_Drawable;
h2d_Text.prototype = $extend(h2d_Drawable.prototype,{
	set_font: function(font) {
		if(this.font == font) {
			return font;
		}
		this.font = font;
		if(font != null) {
			var _g = font.type;
			switch(_g._hx_index) {
			case 0:
				if(this.sdfShader != null) {
					this.removeShader(this.sdfShader);
					this.sdfShader = null;
				}
				break;
			case 1:
				var channel = _g.channel;
				var alphaCutoff = _g.alphaCutoff;
				var smoothing = _g.smoothing;
				if(this.sdfShader == null) {
					this.sdfShader = new h3d_shader_SignedDistanceField();
					this.addShader(this.sdfShader);
				}
				if(this.smooth == null) {
					this.smooth = true;
				}
				this.sdfShader.alphaCutoff__ = alphaCutoff;
				this.sdfShader.smoothing__ = smoothing;
				var _this = this.sdfShader;
				_this.constModified = true;
				_this.channel__ = channel;
				var _this = this.sdfShader;
				_this.constModified = true;
				_this.autoSmoothing__ = smoothing == -1;
				break;
			}
		}
		if(this.glyphs != null) {
			var _this = this.glyphs;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		this.glyphs = new h2d_TileGroup(font == null ? null : font.tile,this);
		this.glyphs.set_visible(false);
		this.rebuild();
		return font;
	}
	,set_textAlign: function(a) {
		if(this.textAlign == a) {
			return a;
		}
		this.textAlign = a;
		this.rebuild();
		return a;
	}
	,set_letterSpacing: function(s) {
		if(this.letterSpacing == s) {
			return s;
		}
		this.letterSpacing = s;
		this.rebuild();
		return s;
	}
	,set_lineSpacing: function(s) {
		if(this.lineSpacing == s) {
			return s;
		}
		this.lineSpacing = s;
		this.rebuild();
		return s;
	}
	,set_lineBreak: function(b) {
		if(this.lineBreak == b) {
			return b;
		}
		this.lineBreak = b;
		this.rebuild();
		return b;
	}
	,constraintSize: function(width,height) {
		this.constraintWidth = width;
		this.updateConstraint();
	}
	,onAdd: function() {
		h2d_Drawable.prototype.onAdd.call(this);
		this.rebuild();
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(this.needsRebuild) {
			this.initGlyphs(this.currentText);
		}
	}
	,draw: function(ctx) {
		if(this.glyphs == null) {
			this.emitTile(ctx,h2d_Tile.fromColor(16711935,16,16));
			return;
		}
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(this.needsRebuild) {
			this.initGlyphs(this.currentText);
		}
		if(this.dropShadow != null) {
			var oldX = this.absX;
			var oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			var oldR = this.color.x;
			var oldG = this.color.y;
			var oldB = this.color.z;
			var oldA = this.color.w;
			var _this = this.color;
			var c = this.dropShadow.color;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
			this.color.w = this.dropShadow.alpha * oldA;
			this.glyphs.drawWith(ctx,this);
			this.absX = oldX;
			this.absY = oldY;
			var _this = this.color;
			var x = oldR;
			var y = oldG;
			var z = oldB;
			var w = oldA;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		this.glyphs.drawWith(ctx,this);
	}
	,set_text: function(t) {
		var t1 = t == null ? "null" : t;
		if(t1 == this.text) {
			return t1;
		}
		this.text = t1;
		this.textChanged = true;
		this.validateText();
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return t1;
	}
	,validateText: function() {
	}
	,rebuild: function() {
		this.calcDone = false;
		this.needsRebuild = true;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,splitRawText: function(text,leftMargin,afterData,font,sizes,prevChar) {
		if(prevChar == null) {
			prevChar = -1;
		}
		if(afterData == null) {
			afterData = 0.;
		}
		if(leftMargin == null) {
			leftMargin = 0.;
		}
		var tmp = prevChar;
		var prevChar = tmp != null ? tmp : -1;
		var maxWidth = this.realMaxWidth;
		if(maxWidth < 0) {
			if(sizes == null) {
				return text;
			} else {
				maxWidth = Infinity;
			}
		}
		if(font == null) {
			font = this.font;
		}
		var lines = [];
		var restPos = 0;
		var x = leftMargin;
		var wLastSep = 0.;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var cc = text.charCodeAt(i);
			var c = font.glyphs.h[cc];
			if(c == null) {
				c = font.charset.resolveChar(cc,font.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
				}
			}
			var e = c;
			var newline = cc == 10;
			var esize = e.width + e.getKerningOffset(prevChar);
			var isComplement = i < text.length - 1 && font.charset.isComplementChar(text.charCodeAt(i + 1));
			if(font.charset.isBreakChar(cc) && !isComplement) {
				if(lines.length == 0 && leftMargin > 0 && x > maxWidth) {
					lines.push("");
					if(sizes != null) {
						sizes.push(leftMargin);
					}
					x -= leftMargin;
				}
				var size = x + esize + this.letterSpacing;
				var k = i + 1;
				var max = text.length;
				var prevChar1 = cc;
				var breakFound = false;
				while(size <= maxWidth && k < max) {
					var cc1 = text.charCodeAt(k++);
					if(this.lineBreak && (font.charset.isSpace(cc1) || cc1 == 10)) {
						breakFound = true;
						break;
					}
					var c1 = font.glyphs.h[cc1];
					if(c1 == null) {
						c1 = font.charset.resolveChar(cc1,font.glyphs);
						if(c1 == null) {
							c1 = cc1 == 13 || cc1 == 10 ? font.nullChar : font.defaultChar;
						}
					}
					var e1 = c1;
					size += e1.width + this.letterSpacing + e1.getKerningOffset(prevChar1);
					prevChar1 = cc1;
					if(font.charset.isBreakChar(cc1)) {
						if(k >= text.length) {
							break;
						}
						var nc = text.charCodeAt(k);
						if(!font.charset.isComplementChar(nc)) {
							break;
						}
					}
				}
				if(this.lineBreak && (size > maxWidth || !breakFound && size + afterData > maxWidth)) {
					newline = true;
					if(font.charset.isSpace(cc)) {
						lines.push(HxOverrides.substr(text,restPos,i - restPos));
						e = null;
					} else {
						lines.push(HxOverrides.substr(text,restPos,i + 1 - restPos));
					}
					restPos = i + 1;
				} else {
					wLastSep = size;
				}
			} else if(x + esize + this.letterSpacing - wLastSep > maxWidth) {
				newline = true;
				lines.push(HxOverrides.substr(text,restPos,i - restPos));
				restPos = i + 1;
			}
			if(e != null && cc != 10) {
				x += esize + this.letterSpacing;
			}
			if(newline) {
				if(sizes != null) {
					sizes.push(x);
				}
				x = 0;
				wLastSep = 0.;
				prevChar = -1;
			} else {
				prevChar = cc;
			}
		}
		if(restPos < text.length) {
			if(lines.length == 0 && leftMargin > 0 && x + afterData - this.letterSpacing > maxWidth) {
				lines.push("");
				if(sizes != null) {
					sizes.push(leftMargin);
				}
				x -= leftMargin;
			}
			lines.push(HxOverrides.substr(text,restPos,text.length - restPos));
			if(sizes != null) {
				sizes.push(x);
			}
		}
		return lines.join("\n");
	}
	,initGlyphs: function(text,rebuild) {
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
		}
		var x = 0.;
		var y = 0.;
		var xMax = 0.;
		var xMin = 0.;
		var yMin = 0.;
		var yMax = 0.;
		var prevChar = -1;
		var linei = 0;
		var align = this.textAlign;
		var lines = [];
		var dl = this.font.lineHeight + this.lineSpacing;
		var t = this.splitRawText(text,0,0,null,lines);
		var _g = 0;
		while(_g < lines.length) {
			var lw = lines[_g];
			++_g;
			if(lw > x) {
				x = lw;
			}
		}
		this.calcWidth = x;
		switch(align._hx_index) {
		case 0:
			x = 0;
			break;
		case 1:case 2:case 3:case 4:
			var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.realMaxWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
			var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
			var _g = 0;
			var _g1 = lines.length;
			while(_g < _g1) {
				var i = _g++;
				lines[i] = Math.floor((max - lines[i]) * k);
			}
			x = lines[0];
			xMin = x;
			break;
		}
		var _g = 0;
		var _g1 = t.length;
		while(_g < _g1) {
			var i = _g++;
			var cc = t.charCodeAt(i);
			var _this = this.font;
			var c = _this.glyphs.h[cc];
			if(c == null) {
				c = _this.charset.resolveChar(cc,_this.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? _this.nullChar : _this.defaultChar;
				}
			}
			var e = c;
			var offs = e.getKerningOffset(prevChar);
			var esize = e.width + offs;
			if(cc == 10) {
				if(x > xMax) {
					xMax = x;
				}
				switch(align._hx_index) {
				case 0:
					x = 0;
					break;
				case 1:case 2:case 3:case 4:
					x = lines[++linei];
					if(x < xMin) {
						xMin = x;
					}
					break;
				}
				y += dl;
				prevChar = -1;
			} else {
				if(e != null) {
					if(rebuild) {
						var _this1 = this.glyphs;
						_this1.content.add(x + offs,y,_this1.curColor.x,_this1.curColor.y,_this1.curColor.z,_this1.curColor.w,e.t);
					}
					if(y == 0 && e.t.dy < yMin) {
						yMin = e.t.dy;
					}
					var ty = y + e.t.dy + e.t.height;
					if(ty > yMax) {
						yMax = ty;
					}
					x += esize + this.letterSpacing;
				}
				prevChar = cc;
			}
		}
		if(x > xMax) {
			xMax = x;
		}
		this.calcXMin = xMin;
		this.calcYMin = yMin;
		this.calcWidth = xMax - xMin;
		this.calcHeight = yMax - yMin;
		this.calcSizeHeight = y + (this.font.baseLine > 0 ? this.font.baseLine : this.font.lineHeight);
		this.calcDone = true;
		if(rebuild) {
			this.needsRebuild = false;
		}
	}
	,get_textHeight: function() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		if(this.font.baseLine == 0) {
			return this.calcSizeHeight;
		} else {
			return this.calcSizeHeight - this.font.baseLine + this.font.lineHeight;
		}
	}
	,set_maxWidth: function(w) {
		if(this.maxWidth == w) {
			return w;
		}
		this.maxWidth = w;
		this.updateConstraint();
		return w;
	}
	,updateConstraint: function() {
		var old = this.realMaxWidth;
		if(this.maxWidth == null) {
			this.realMaxWidth = this.constraintWidth;
		} else if(this.constraintWidth < 0) {
			this.realMaxWidth = this.maxWidth;
		} else {
			var a = this.maxWidth;
			var b = this.constraintWidth;
			this.realMaxWidth = a > b ? b : a;
		}
		if(this.realMaxWidth != old) {
			this.rebuild();
		}
	}
	,set_textColor: function(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		var a = this.color.w;
		var _this = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.color.w = a;
		return c;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		var x;
		var y;
		var w;
		var h;
		if(forSize) {
			x = this.calcXMin;
			y = 0.;
			w = this.calcWidth;
			h = this.calcSizeHeight;
		} else {
			x = this.calcXMin;
			y = this.calcYMin;
			w = this.calcWidth;
			h = this.calcHeight;
		}
		this.addBounds(relativeTo,out,x,y,w,h);
	}
	,__class__: h2d_Text
});
var h2d_HtmlText = function(font,parent) {
	this.elements = [];
	this.imageVerticalAlign = h2d_ImageVerticalAlign.Bottom;
	this.lineHeightMode = h2d_LineHeightMode.Accurate;
	this.imageSpacing = 1;
	this.propagateInteractiveNode = false;
	this.condenseWhite = true;
	h2d_Text.call(this,font,parent);
};
$hxClasses["h2d.HtmlText"] = h2d_HtmlText;
h2d_HtmlText.__name__ = "h2d.HtmlText";
h2d_HtmlText.defaultLoadImage = function(url) {
	return null;
};
h2d_HtmlText.defaultLoadFont = function(name) {
	return null;
};
h2d_HtmlText.defaultFormatText = function(text) {
	return text;
};
h2d_HtmlText.__super__ = h2d_Text;
h2d_HtmlText.prototype = $extend(h2d_Text.prototype,{
	draw: function(ctx) {
		if(this.dropShadow != null) {
			var oldX = this.absX;
			var oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			if(this.dropMatrix == null) {
				this.dropMatrix = new h3d_shader_ColorMatrix();
				this.addShader(this.dropMatrix);
			}
			var _this = this.dropMatrix;
			_this.constModified = true;
			_this.enabled__ = true;
			var m = this.dropMatrix.matrix__;
			m.zero();
			m._41 = (this.dropShadow.color >> 16 & 255) / 255;
			m._42 = (this.dropShadow.color >> 8 & 255) / 255;
			m._43 = (this.dropShadow.color & 255) / 255;
			m._44 = this.dropShadow.alpha;
			this.glyphs.drawWith(ctx,this);
			var _this = this.dropMatrix;
			_this.constModified = true;
			_this.enabled__ = false;
			this.absX = oldX;
			this.absY = oldY;
		} else {
			this.removeShader(this.dropMatrix);
			this.dropMatrix = null;
		}
		this.glyphs.drawWith(ctx,this);
	}
	,loadImage: function(url) {
		return h2d_HtmlText.defaultLoadImage(url);
	}
	,loadFont: function(name) {
		var f = h2d_HtmlText.defaultLoadFont(name);
		if(f == null) {
			return this.font;
		} else {
			return f;
		}
	}
	,onHyperlink: function(url) {
	}
	,onOverHyperlink: function(url) {
	}
	,onOutHyperlink: function(url) {
	}
	,formatText: function(text) {
		return h2d_HtmlText.defaultFormatText(text);
	}
	,set_text: function(t) {
		h2d_Text.prototype.set_text.call(this,this.formatText(t));
		return t;
	}
	,parseText: function(text) {
		try {
			return Xml.parse(text);
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			throw haxe_Exception.thrown("Could not parse " + text + " (" + Std.string(e) + ")");
		}
	}
	,validateText: function() {
		this.textXml = this.parseText(this.text);
		this.validateNodes(this.textXml);
	}
	,resolveHtmlTag: function(name) {
		if(this.htmlTags != null) {
			var t = this.htmlTags.h[name];
			if(t != null) {
				return t;
			}
		}
		if(h2d_HtmlText.defaultHtmlTags != null) {
			var t = h2d_HtmlText.defaultHtmlTags.h[name];
			if(t != null) {
				return t;
			}
		}
		return null;
	}
	,validateNodes: function(xml) {
		switch(xml.nodeType) {
		case 0:
			if(xml.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
			}
			var nodeName = xml.nodeName.toLowerCase();
			var t = this.resolveHtmlTag(nodeName);
			if((t != null ? t.font : null) != null) {
				this.loadFont(t.font);
			}
			switch(nodeName) {
			case "b":case "bold":
				if((t != null ? t.font : null) == null) {
					this.loadFont("bold");
				}
				break;
			case "font":
				if(xml.exists("face")) {
					this.loadFont(xml.get("face"));
				}
				break;
			case "img":
				this.loadImage(xml.get("src"));
				break;
			case "i":case "italic":
				if((t != null ? t.font : null) == null) {
					this.loadFont("italic");
				}
				break;
			default:
			}
			if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
			}
			var _g_current = 0;
			var _g_array = xml.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.validateNodes(child);
			}
			break;
		case 6:
			if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
			}
			var _g_current = 0;
			var _g_array = xml.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.validateNodes(child);
			}
			break;
		default:
		}
	}
	,initGlyphs: function(text,rebuild) {
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
			var _g = 0;
			var _g1 = this.elements;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(e != null && e.parent != null) {
					e.parent.removeChild(e);
				}
			}
			this.elements = [];
		}
		this.glyphs.setDefaultColor(this.textColor);
		var doc;
		if(this.textXml == null) {
			doc = this.parseText(text);
		} else {
			doc = this.textXml;
		}
		this.yPos = 0;
		this.xMax = 0;
		this.xMin = Infinity;
		this.sizePos = 0;
		this.calcYMin = 0;
		var metrics = [{ width : 0, height : this.font.lineHeight, baseLine : this.font.baseLine}];
		this.prevChar = -1;
		this.newLine = true;
		var splitNode = { node : null, pos : 0, font : this.font, prevChar : -1, width : 0, height : 0, baseLine : 0};
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (doc.nodeType == null ? "null" : XmlType.toString(doc.nodeType)));
		}
		var _g_current = 0;
		var _g_array = doc.children;
		while(_g_current < _g_array.length) {
			var e = _g_array[_g_current++];
			this.buildSizes(e,this.font,metrics,splitNode);
		}
		var max = 0.;
		var _g = 0;
		while(_g < metrics.length) {
			var info = metrics[_g];
			++_g;
			if(info.width > max) {
				max = info.width;
			}
		}
		this.calcWidth = max;
		this.prevChar = -1;
		this.newLine = true;
		var align = this.textAlign;
		var size = metrics[0].width;
		switch(align._hx_index) {
		case 0:
			this.xPos = 0;
			if(this.xMin > 0) {
				this.xMin = 0;
			}
			break;
		case 1:case 2:case 3:case 4:
			var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.calcWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
			var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
			this.xPos = Math.floor((max - size) * k);
			if(this.xPos < this.xMin) {
				this.xMin = this.xPos;
			}
			break;
		}
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (doc.nodeType == null ? "null" : XmlType.toString(doc.nodeType)));
		}
		var _g_current = 0;
		var _g_array = doc.children;
		while(_g_current < _g_array.length) {
			var e = _g_array[_g_current++];
			this.addNode(e,this.font,this.textAlign,rebuild,metrics);
		}
		if(this.xPos > this.xMax) {
			this.xMax = this.xPos;
		}
		this.textXml = null;
		var y = this.yPos;
		this.calcXMin = this.xMin;
		this.calcWidth = this.xMax - this.xMin;
		this.calcHeight = y + metrics[this.sizePos].height - this.calcYMin;
		this.calcSizeHeight = y + metrics[this.sizePos].baseLine;
		this.calcDone = true;
		if(rebuild) {
			this.needsRebuild = false;
		}
	}
	,buildSizes: function(e,font,metrics,splitNode) {
		var _gthis = this;
		var wordSplit = function() {
			var fnt = splitNode.font;
			var _this = splitNode.node;
			if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
			}
			var str = _this.nodeValue;
			var info = metrics[metrics.length - 1];
			var w = info.width;
			var cc = str.charCodeAt(splitNode.pos);
			info.width = splitNode.width;
			info.height = splitNode.height;
			info.baseLine = splitNode.baseLine;
			var c = fnt.glyphs.h[cc];
			if(c == null) {
				c = fnt.charset.resolveChar(cc,fnt.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? fnt.nullChar : fnt.defaultChar;
				}
			}
			var char = c;
			if(_gthis.lineBreak && fnt.charset.isSpace(cc)) {
				w -= splitNode.width + _gthis.letterSpacing + char.width + char.getKerningOffset(splitNode.prevChar);
				var _this = splitNode.node;
				var v = HxOverrides.substr(str,0,splitNode.pos) + "\n" + HxOverrides.substr(str,splitNode.pos + 1,null);
				if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
				}
				_this.nodeValue = v;
			} else {
				w -= splitNode.width + _gthis.letterSpacing + char.getKerningOffset(splitNode.prevChar);
				var _this = splitNode.node;
				var v = HxOverrides.substr(str,0,splitNode.pos + 1) + "\n" + HxOverrides.substr(str,splitNode.pos + 1,null);
				if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
				}
				_this.nodeValue = v;
			}
			splitNode.node = null;
			return w;
		};
		if(e.nodeType == Xml.Element) {
			if(e.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
			}
			var nodeName = e.nodeName.toLowerCase();
			var tag = this.resolveHtmlTag(nodeName);
			if((tag != null ? tag.font : null) != null) {
				font = this.loadFont(tag.font);
			}
			switch(nodeName) {
			case "b":case "bold":
				if((tag != null ? tag.font : null) == null) {
					font = this.loadFont("bold");
				}
				break;
			case "br":
				var fontInfo = _gthis.lineHeightMode == h2d_LineHeightMode.Constant ? _gthis.font : font;
				metrics.push({ width : 0, height : fontInfo.lineHeight, baseLine : fontInfo.baseLine});
				splitNode.node = null;
				_gthis.newLine = true;
				_gthis.prevChar = -1;
				break;
			case "font":
				var a = e.attributes();
				while(a.hasNext()) {
					var a1 = a.next();
					var v = e.get(a1);
					if(a1.toLowerCase() == "face") {
						font = this.loadFont(v);
					}
				}
				break;
			case "img":
				var i = this.loadImage(e.get("src"));
				if(i == null) {
					i = h2d_Tile.fromColor(16711935,8,8);
				}
				var size = metrics[metrics.length - 1].width + i.width + this.imageSpacing;
				if(this.realMaxWidth >= 0 && size > this.realMaxWidth && metrics[metrics.length - 1].width > 0) {
					if(splitNode.node != null) {
						size = wordSplit() + i.width + this.imageSpacing;
						var info = metrics[metrics.length - 1];
						if(this.lineHeightMode._hx_index == 0) {
							var grow = i.height - i.dy - info.baseLine;
							var h = info.height;
							var bl = info.baseLine;
							if(grow > 0) {
								h += grow;
								bl += grow;
							}
							metrics.push({ width : size, height : Math.max(h,bl + i.dy), baseLine : bl});
						} else {
							metrics.push({ width : size, height : info.height, baseLine : info.baseLine});
						}
					}
				} else {
					var info = metrics[metrics.length - 1];
					info.width = size;
					if(this.lineHeightMode == h2d_LineHeightMode.Accurate) {
						var grow = i.height - i.dy - info.baseLine;
						if(grow > 0) {
							switch(this.imageVerticalAlign._hx_index) {
							case 0:
								info.height += grow;
								break;
							case 1:
								info.baseLine += grow;
								info.height += grow;
								break;
							case 2:
								info.height += grow;
								info.baseLine += grow / 2 | 0;
								break;
							}
						}
						grow = info.baseLine + i.dy;
						if(info.height < grow) {
							info.height = grow;
						}
					}
				}
				this.newLine = false;
				this.prevChar = -1;
				break;
			case "i":case "italic":
				if((tag != null ? tag.font : null) == null) {
					font = this.loadFont("italic");
				}
				break;
			case "p":
				if(!this.newLine) {
					var fontInfo = _gthis.lineHeightMode == h2d_LineHeightMode.Constant ? _gthis.font : font;
					metrics.push({ width : 0, height : fontInfo.lineHeight, baseLine : fontInfo.baseLine});
					splitNode.node = null;
					_gthis.newLine = true;
					_gthis.prevChar = -1;
				}
				break;
			default:
			}
			if(e.nodeType != Xml.Document && e.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
			}
			var _g_current = 0;
			var _g_array = e.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.buildSizes(child,font,metrics,splitNode);
			}
			if(nodeName == "p") {
				if(!this.newLine) {
					var fontInfo = _gthis.lineHeightMode == h2d_LineHeightMode.Constant ? _gthis.font : font;
					metrics.push({ width : 0, height : fontInfo.lineHeight, baseLine : fontInfo.baseLine});
					splitNode.node = null;
					_gthis.newLine = true;
					_gthis.prevChar = -1;
				}
			}
		} else {
			if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
			}
			if(e.nodeValue.length != 0) {
				this.newLine = false;
				if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
				}
				var text = this.htmlToText(e.nodeValue);
				var fontInfo = _gthis.lineHeightMode == h2d_LineHeightMode.Constant ? _gthis.font : font;
				var info = metrics.pop();
				var leftMargin = info.width;
				var maxWidth = this.realMaxWidth < 0 ? Infinity : this.realMaxWidth;
				var textSplit = [];
				var restPos = 0;
				var x = leftMargin;
				var breakChars = 0;
				var _g = 0;
				var _g1 = text.length;
				while(_g < _g1) {
					var i = _g++;
					var cc = text.charCodeAt(i);
					var c = font.glyphs.h[cc];
					if(c == null) {
						c = font.charset.resolveChar(cc,font.glyphs);
						if(c == null) {
							c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
						}
					}
					var g = c;
					var newline = cc == 10;
					var esize = g.width + g.getKerningOffset(this.prevChar);
					var isComplement = i < text.length - 1 && font.charset.isComplementChar(text.charCodeAt(i + 1));
					if(font.charset.isBreakChar(cc) && !isComplement) {
						if(x > maxWidth && textSplit.length == 0 && splitNode.node != null) {
							metrics.push({ width : x, height : info.height, baseLine : info.baseLine});
							x = wordSplit();
						}
						var size = x + esize + this.letterSpacing;
						var k = i + 1;
						var max = text.length;
						var prevChar = cc;
						while(size <= maxWidth && k < max) {
							var cc1 = text.charCodeAt(k++);
							if(this.lineBreak && (font.charset.isSpace(cc1) || cc1 == 10)) {
								break;
							}
							var c1 = font.glyphs.h[cc1];
							if(c1 == null) {
								c1 = font.charset.resolveChar(cc1,font.glyphs);
								if(c1 == null) {
									c1 = cc1 == 13 || cc1 == 10 ? font.nullChar : font.defaultChar;
								}
							}
							var e1 = c1;
							size += e1.width + this.letterSpacing + e1.getKerningOffset(prevChar);
							prevChar = cc1;
							if(font.charset.isBreakChar(cc1)) {
								if(k >= text.length) {
									break;
								}
								var nc = text.charCodeAt(k);
								if(!font.charset.isComplementChar(nc)) {
									break;
								}
							}
						}
						if(this.lineBreak && size > maxWidth && i != max - 1) {
							newline = true;
							if(font.charset.isSpace(cc)) {
								textSplit.push(HxOverrides.substr(text,restPos,i - restPos));
								g = null;
							} else {
								textSplit.push(HxOverrides.substr(text,restPos,i + 1 - restPos));
								++breakChars;
							}
							splitNode.node = null;
							restPos = i + 1;
						} else {
							splitNode.node = e;
							splitNode.pos = i + breakChars;
							splitNode.prevChar = this.prevChar;
							splitNode.width = x;
							splitNode.height = info.height;
							splitNode.baseLine = info.baseLine;
							splitNode.font = font;
						}
					}
					if(g != null && cc != 10) {
						x += esize + this.letterSpacing;
					}
					if(newline) {
						metrics.push({ width : x, height : info.height, baseLine : info.baseLine});
						info.height = fontInfo.lineHeight;
						info.baseLine = fontInfo.baseLine;
						x = 0;
						this.prevChar = -1;
						this.newLine = true;
					} else {
						this.prevChar = cc;
						this.newLine = false;
					}
				}
				if(restPos < text.length) {
					if(x > maxWidth) {
						if(splitNode.node != null && splitNode.node != e) {
							metrics.push({ width : x, height : info.height, baseLine : info.baseLine});
							x = wordSplit();
						}
					}
					textSplit.push(HxOverrides.substr(text,restPos,null));
					metrics.push({ width : x, height : info.height, baseLine : info.baseLine});
				}
				if(this.newLine || metrics.length == 0) {
					metrics.push({ width : 0, height : fontInfo.lineHeight, baseLine : fontInfo.baseLine});
					textSplit.push("");
				}
				var v = textSplit.join("\n");
				if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
				}
				e.nodeValue = v;
			}
		}
	}
	,htmlToText: function(t) {
		if(this.condenseWhite) {
			t = t.replace(h2d_HtmlText.REG_SPACES.r," ");
		}
		return t;
	}
	,addNode: function(e,font,align,rebuild,metrics) {
		var _gthis = this;
		var createInteractive = function() {
			if(_gthis.aHrefs == null || _gthis.aHrefs.length == 0) {
				return;
			}
			_gthis.aInteractive = new h2d_Interactive(0,metrics[_gthis.sizePos].baseLine,_gthis);
			_gthis.aInteractive.propagateEvents = _gthis.propagateInteractiveNode;
			var href = _gthis.aHrefs[_gthis.aHrefs.length - 1];
			_gthis.aInteractive.onClick = function(event) {
				_gthis.onHyperlink(href);
			};
			_gthis.aInteractive.onOver = function(event) {
				_gthis.onOverHyperlink(href);
			};
			_gthis.aInteractive.onOut = function(event) {
				_gthis.onOutHyperlink(href);
			};
			var _this = _gthis.aInteractive;
			var v = _gthis.xPos;
			_this.posChanged = true;
			_this.x = v;
			var _this = _gthis.aInteractive;
			var v = _gthis.yPos;
			_this.posChanged = true;
			_this.y = v;
			_gthis.elements.push(_gthis.aInteractive);
		};
		if(e.nodeType == Xml.Element) {
			var prevColor = null;
			var prevGlyphs = null;
			var oldAlign = align;
			if(e.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
			}
			var nodeName = e.nodeName.toLowerCase();
			var tag = this.resolveHtmlTag(nodeName);
			if(tag != null) {
				if(tag.font != null) {
					font = _gthis.loadFont(tag.font);
					if(prevGlyphs == null) {
						prevGlyphs = _gthis.glyphs;
					}
					var prev = _gthis.glyphs;
					_gthis.glyphs = new h2d_TileGroup(font == null ? null : font.tile,_gthis);
					if(font != null) {
						var _g = font.type;
						if(_g._hx_index == 1) {
							var channel = _g.channel;
							var alphaCutoff = _g.alphaCutoff;
							var smoothing = _g.smoothing;
							var shader = new h3d_shader_SignedDistanceField();
							shader.constModified = true;
							shader.channel__ = channel;
							shader.alphaCutoff__ = alphaCutoff;
							shader.smoothing__ = smoothing;
							shader.constModified = true;
							shader.autoSmoothing__ = smoothing == -1;
							_gthis.glyphs.smooth = _gthis.smooth;
							_gthis.glyphs.addShader(shader);
						}
					}
					var _this = _gthis.glyphs.curColor;
					var v = prev.curColor;
					_this.x = v.x;
					_this.y = v.y;
					_this.z = v.z;
					_this.w = v.w;
					_gthis.elements.push(_gthis.glyphs);
				}
				if(tag.color != null) {
					if(prevColor == null) {
						var _this = this.glyphs.curColor;
						var x = _this.x;
						var y = _this.y;
						var z = _this.z;
						var w = _this.w;
						if(w == null) {
							w = 1.;
						}
						if(z == null) {
							z = 0.;
						}
						if(y == null) {
							y = 0.;
						}
						if(x == null) {
							x = 0.;
						}
						prevColor = new h3d_Vector4Impl(x,y,z,w);
					}
					this.glyphs.setDefaultColor(tag.color);
				}
			}
			switch(nodeName) {
			case "a":
				if(e.exists("href")) {
					if(_gthis.aInteractive != null) {
						_gthis.aInteractive.width = _gthis.xPos - _gthis.aInteractive.x;
						_gthis.aInteractive = null;
					}
					if(this.aHrefs == null) {
						this.aHrefs = [];
					}
					this.aHrefs.push(e.get("href"));
					createInteractive();
				}
				break;
			case "b":case "bold":
				if((tag != null ? tag.font : null) == null) {
					font = _gthis.loadFont("bold");
					if(prevGlyphs == null) {
						prevGlyphs = _gthis.glyphs;
					}
					var prev = _gthis.glyphs;
					_gthis.glyphs = new h2d_TileGroup(font == null ? null : font.tile,_gthis);
					if(font != null) {
						var _g = font.type;
						if(_g._hx_index == 1) {
							var channel = _g.channel;
							var alphaCutoff = _g.alphaCutoff;
							var smoothing = _g.smoothing;
							var shader = new h3d_shader_SignedDistanceField();
							shader.constModified = true;
							shader.channel__ = channel;
							shader.alphaCutoff__ = alphaCutoff;
							shader.smoothing__ = smoothing;
							shader.constModified = true;
							shader.autoSmoothing__ = smoothing == -1;
							_gthis.glyphs.smooth = _gthis.smooth;
							_gthis.glyphs.addShader(shader);
						}
					}
					var _this = _gthis.glyphs.curColor;
					var v = prev.curColor;
					_this.x = v.x;
					_this.y = v.y;
					_this.z = v.z;
					_this.w = v.w;
					_gthis.elements.push(_gthis.glyphs);
				}
				break;
			case "br":
				if(_gthis.aInteractive != null) {
					_gthis.aInteractive.width = _gthis.xPos - _gthis.aInteractive.x;
					_gthis.aInteractive = null;
				}
				if(_gthis.xPos > _gthis.xMax) {
					_gthis.xMax = _gthis.xPos;
				}
				_gthis.yPos += metrics[_gthis.sizePos].height + _gthis.lineSpacing;
				var size = metrics[++_gthis.sizePos].width;
				switch(align._hx_index) {
				case 0:
					_gthis.xPos = 0;
					if(_gthis.xMin > 0) {
						_gthis.xMin = 0;
					}
					break;
				case 1:case 2:case 3:case 4:
					var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(_gthis.calcWidth) : _gthis.calcWidth < 0 ? 0 : Math.ceil(_gthis.realMaxWidth);
					var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
					_gthis.xPos = Math.floor((max - size) * k);
					if(_gthis.xPos < _gthis.xMin) {
						_gthis.xMin = _gthis.xPos;
					}
					break;
				}
				createInteractive();
				this.newLine = true;
				this.prevChar = -1;
				break;
			case "font":
				var a = e.attributes();
				while(a.hasNext()) {
					var a1 = a.next();
					var v = e.get(a1);
					switch(a1.toLowerCase()) {
					case "color":
						if(prevColor == null) {
							var _this = this.glyphs.curColor;
							var x = _this.x;
							var y = _this.y;
							var z = _this.z;
							var w = _this.w;
							if(w == null) {
								w = 1.;
							}
							if(z == null) {
								z = 0.;
							}
							if(y == null) {
								y = 0.;
							}
							if(x == null) {
								x = 0.;
							}
							prevColor = new h3d_Vector4Impl(x,y,z,w);
						}
						if(v.length == 4 && v.charCodeAt(0) == 35) {
							v = "#" + v.charAt(1) + v.charAt(1) + v.charAt(2) + v.charAt(2) + v.charAt(3) + v.charAt(3);
						}
						this.glyphs.setDefaultColor(Std.parseInt("0x" + HxOverrides.substr(v,1,null)));
						break;
					case "face":
						font = _gthis.loadFont(v);
						if(prevGlyphs == null) {
							prevGlyphs = _gthis.glyphs;
						}
						var prev = _gthis.glyphs;
						_gthis.glyphs = new h2d_TileGroup(font == null ? null : font.tile,_gthis);
						if(font != null) {
							var _g = font.type;
							if(_g._hx_index == 1) {
								var channel = _g.channel;
								var alphaCutoff = _g.alphaCutoff;
								var smoothing = _g.smoothing;
								var shader = new h3d_shader_SignedDistanceField();
								shader.constModified = true;
								shader.channel__ = channel;
								shader.alphaCutoff__ = alphaCutoff;
								shader.smoothing__ = smoothing;
								shader.constModified = true;
								shader.autoSmoothing__ = smoothing == -1;
								_gthis.glyphs.smooth = _gthis.smooth;
								_gthis.glyphs.addShader(shader);
							}
						}
						var _this1 = _gthis.glyphs.curColor;
						var v1 = prev.curColor;
						_this1.x = v1.x;
						_this1.y = v1.y;
						_this1.z = v1.z;
						_this1.w = v1.w;
						_gthis.elements.push(_gthis.glyphs);
						break;
					case "opacity":
						if(prevColor == null) {
							var _this2 = this.glyphs.curColor;
							var x1 = _this2.x;
							var y1 = _this2.y;
							var z1 = _this2.z;
							var w1 = _this2.w;
							if(w1 == null) {
								w1 = 1.;
							}
							if(z1 == null) {
								z1 = 0.;
							}
							if(y1 == null) {
								y1 = 0.;
							}
							if(x1 == null) {
								x1 = 0.;
							}
							prevColor = new h3d_Vector4Impl(x1,y1,z1,w1);
						}
						this.glyphs.curColor.w *= parseFloat(v);
						break;
					default:
					}
				}
				break;
			case "img":
				var i = this.loadImage(e.get("src"));
				if(i == null) {
					i = h2d_Tile.fromColor(16711935,8,8);
				}
				var py = this.yPos;
				switch(this.imageVerticalAlign._hx_index) {
				case 0:
					break;
				case 1:
					py += metrics[this.sizePos].baseLine - i.height;
					break;
				case 2:
					py += metrics[this.sizePos].baseLine - i.height / 2;
					break;
				}
				if(py + i.dy < this.calcYMin) {
					this.calcYMin = py + i.dy;
				}
				if(rebuild) {
					var b = new h2d_Bitmap(i,this);
					b.posChanged = true;
					b.x = this.xPos;
					b.posChanged = true;
					b.y = py;
					this.elements.push(b);
				}
				this.newLine = false;
				this.prevChar = -1;
				this.xPos += i.width + this.imageSpacing;
				break;
			case "i":case "italic":
				if((tag != null ? tag.font : null) == null) {
					font = _gthis.loadFont("italic");
					if(prevGlyphs == null) {
						prevGlyphs = _gthis.glyphs;
					}
					var prev = _gthis.glyphs;
					_gthis.glyphs = new h2d_TileGroup(font == null ? null : font.tile,_gthis);
					if(font != null) {
						var _g = font.type;
						if(_g._hx_index == 1) {
							var channel = _g.channel;
							var alphaCutoff = _g.alphaCutoff;
							var smoothing = _g.smoothing;
							var shader = new h3d_shader_SignedDistanceField();
							shader.constModified = true;
							shader.channel__ = channel;
							shader.alphaCutoff__ = alphaCutoff;
							shader.smoothing__ = smoothing;
							shader.constModified = true;
							shader.autoSmoothing__ = smoothing == -1;
							_gthis.glyphs.smooth = _gthis.smooth;
							_gthis.glyphs.addShader(shader);
						}
					}
					var _this = _gthis.glyphs.curColor;
					var v = prev.curColor;
					_this.x = v.x;
					_this.y = v.y;
					_this.z = v.z;
					_this.w = v.w;
					_gthis.elements.push(_gthis.glyphs);
				}
				break;
			case "p":
				var a = e.attributes();
				while(a.hasNext()) {
					var a1 = a.next();
					if(a1.toLowerCase() == "align") {
						var v = e.get(a1);
						if(v != null) {
							switch(v.toLowerCase()) {
							case "center":
								align = h2d_Align.Center;
								break;
							case "left":
								align = h2d_Align.Left;
								break;
							case "multiline-center":
								align = h2d_Align.MultilineCenter;
								break;
							case "multiline-right":
								align = h2d_Align.MultilineRight;
								break;
							case "right":
								align = h2d_Align.Right;
								break;
							}
						}
					}
				}
				if(!this.newLine) {
					if(_gthis.aInteractive != null) {
						_gthis.aInteractive.width = _gthis.xPos - _gthis.aInteractive.x;
						_gthis.aInteractive = null;
					}
					if(_gthis.xPos > _gthis.xMax) {
						_gthis.xMax = _gthis.xPos;
					}
					_gthis.yPos += metrics[_gthis.sizePos].height + _gthis.lineSpacing;
					var size = metrics[++_gthis.sizePos].width;
					switch(align._hx_index) {
					case 0:
						_gthis.xPos = 0;
						if(_gthis.xMin > 0) {
							_gthis.xMin = 0;
						}
						break;
					case 1:case 2:case 3:case 4:
						var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(_gthis.calcWidth) : _gthis.calcWidth < 0 ? 0 : Math.ceil(_gthis.realMaxWidth);
						var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
						_gthis.xPos = Math.floor((max - size) * k);
						if(_gthis.xPos < _gthis.xMin) {
							_gthis.xMin = _gthis.xPos;
						}
						break;
					}
					createInteractive();
					this.newLine = true;
					this.prevChar = -1;
				} else {
					var size = metrics[this.sizePos].width;
					switch(align._hx_index) {
					case 0:
						this.xPos = 0;
						if(this.xMin > 0) {
							this.xMin = 0;
						}
						break;
					case 1:case 2:case 3:case 4:
						var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.calcWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
						var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
						this.xPos = Math.floor((max - size) * k);
						if(this.xPos < this.xMin) {
							this.xMin = this.xPos;
						}
						break;
					}
				}
				break;
			default:
			}
			if(e.nodeType != Xml.Document && e.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
			}
			var _g_current = 0;
			var _g_array = e.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.addNode(child,font,align,rebuild,metrics);
			}
			align = oldAlign;
			switch(nodeName) {
			case "a":
				if(this.aHrefs.length > 0) {
					if(_gthis.aInteractive != null) {
						_gthis.aInteractive.width = _gthis.xPos - _gthis.aInteractive.x;
						_gthis.aInteractive = null;
					}
					this.aHrefs.pop();
					createInteractive();
				}
				break;
			case "p":
				if(this.newLine) {
					var size = metrics[this.sizePos].width;
					switch(align._hx_index) {
					case 0:
						this.xPos = 0;
						if(this.xMin > 0) {
							this.xMin = 0;
						}
						break;
					case 1:case 2:case 3:case 4:
						var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.calcWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
						var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
						this.xPos = Math.floor((max - size) * k);
						if(this.xPos < this.xMin) {
							this.xMin = this.xPos;
						}
						break;
					}
				} else if(this.sizePos < metrics.length - 2 || metrics[this.sizePos + 1].width != 0) {
					if(_gthis.aInteractive != null) {
						_gthis.aInteractive.width = _gthis.xPos - _gthis.aInteractive.x;
						_gthis.aInteractive = null;
					}
					if(_gthis.xPos > _gthis.xMax) {
						_gthis.xMax = _gthis.xPos;
					}
					_gthis.yPos += metrics[_gthis.sizePos].height + _gthis.lineSpacing;
					var size = metrics[++_gthis.sizePos].width;
					switch(align._hx_index) {
					case 0:
						_gthis.xPos = 0;
						if(_gthis.xMin > 0) {
							_gthis.xMin = 0;
						}
						break;
					case 1:case 2:case 3:case 4:
						var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(_gthis.calcWidth) : _gthis.calcWidth < 0 ? 0 : Math.ceil(_gthis.realMaxWidth);
						var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
						_gthis.xPos = Math.floor((max - size) * k);
						if(_gthis.xPos < _gthis.xMin) {
							_gthis.xMin = _gthis.xPos;
						}
						break;
					}
					createInteractive();
					this.newLine = true;
					this.prevChar = -1;
				}
				break;
			default:
			}
			if(prevGlyphs != null) {
				this.glyphs = prevGlyphs;
			}
			if(prevColor != null) {
				var _this = this.glyphs.curColor;
				_this.x = prevColor.x;
				_this.y = prevColor.y;
				_this.z = prevColor.z;
				_this.w = prevColor.w;
			}
		} else {
			if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
			}
			if(e.nodeValue.length != 0) {
				this.newLine = false;
				if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (e.nodeType == null ? "null" : XmlType.toString(e.nodeType)));
				}
				var t = e.nodeValue;
				var dy = metrics[this.sizePos].baseLine - font.baseLine;
				var _g = 0;
				var _g1 = t.length;
				while(_g < _g1) {
					var i = _g++;
					var cc = t.charCodeAt(i);
					if(cc == 10) {
						if(_gthis.aInteractive != null) {
							_gthis.aInteractive.width = _gthis.xPos - _gthis.aInteractive.x;
							_gthis.aInteractive = null;
						}
						if(_gthis.xPos > _gthis.xMax) {
							_gthis.xMax = _gthis.xPos;
						}
						_gthis.yPos += metrics[_gthis.sizePos].height + _gthis.lineSpacing;
						var size = metrics[++_gthis.sizePos].width;
						switch(align._hx_index) {
						case 0:
							_gthis.xPos = 0;
							if(_gthis.xMin > 0) {
								_gthis.xMin = 0;
							}
							break;
						case 1:case 2:case 3:case 4:
							var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(_gthis.calcWidth) : _gthis.calcWidth < 0 ? 0 : Math.ceil(_gthis.realMaxWidth);
							var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
							_gthis.xPos = Math.floor((max - size) * k);
							if(_gthis.xPos < _gthis.xMin) {
								_gthis.xMin = _gthis.xPos;
							}
							break;
						}
						createInteractive();
						dy = metrics[this.sizePos].baseLine - font.baseLine;
						this.prevChar = -1;
						continue;
					} else {
						var c = font.glyphs.h[cc];
						if(c == null) {
							c = font.charset.resolveChar(cc,font.glyphs);
							if(c == null) {
								c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
							}
						}
						var fc = c;
						if(fc != null) {
							this.xPos += fc.getKerningOffset(this.prevChar);
							if(rebuild) {
								var _this = this.glyphs;
								_this.content.add(this.xPos,this.yPos + dy,_this.curColor.x,_this.curColor.y,_this.curColor.z,_this.curColor.w,fc.t);
							}
							if(this.yPos == 0 && fc.t.dy + dy < this.calcYMin) {
								this.calcYMin = fc.t.dy + dy;
							}
							this.xPos += fc.width + this.letterSpacing;
						}
						this.prevChar = cc;
					}
				}
			}
		}
	}
	,set_textColor: function(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		this.rebuild();
		return c;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(forSize) {
			var _g = 0;
			var _g1 = this.elements;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(((i) instanceof h2d_Bitmap) || ((i) instanceof h2d_Interactive)) {
					i.set_visible(false);
				}
			}
		}
		h2d_Text.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(forSize) {
			var _g = 0;
			var _g1 = this.elements;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				i.set_visible(true);
			}
		}
	}
	,__class__: h2d_HtmlText
});
var hxd_Interactive = function() { };
$hxClasses["hxd.Interactive"] = hxd_Interactive;
hxd_Interactive.__name__ = "hxd.Interactive";
hxd_Interactive.__isInterface__ = true;
hxd_Interactive.prototype = {
	__class__: hxd_Interactive
};
var h2d_Interactive = function(width,height,parent,shape) {
	this.shapeY = 0;
	this.shapeX = 0;
	this.lastClickFrame = -1;
	this.mouseDownButton = -1;
	this.allowMultiClick = false;
	this.enableRightButton = false;
	this.propagateEvents = false;
	this.cancelEvents = false;
	this.cursor = hxd_Cursor.Button;
	h2d_Object.call(this,parent);
	this.width = width;
	this.height = height;
	this.shape = shape;
};
$hxClasses["h2d.Interactive"] = h2d_Interactive;
h2d_Interactive.__name__ = "h2d.Interactive";
h2d_Interactive.__interfaces__ = [hxd_Interactive];
h2d_Interactive.__super__ = h2d_Object;
h2d_Interactive.prototype = $extend(h2d_Object.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		h2d_Object.prototype.onAdd.call(this);
	}
	,draw: function(ctx) {
		this.maskedBounds = ctx.getCurrentRenderZone(this.maskedBounds);
		if(this.backgroundColor != null) {
			this.emitTile(ctx,h2d_Tile.fromColor(this.backgroundColor,this.width | 0,this.height | 0,(this.backgroundColor >>> 24) / 255));
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.backgroundColor != null || forSize) {
			this.addBounds(relativeTo,out,0,0,this.width | 0,this.height | 0);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		h2d_Object.prototype.onHierarchyMoved.call(this,parentChanged);
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = this.getScene();
			if(this.scene != null) {
				this.scene.addEventTarget(this);
			}
		}
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this,true);
			this.scene = null;
		}
		h2d_Object.prototype.onRemove.call(this);
	}
	,checkBounds: function(e) {
		switch(e.kind._hx_index) {
		case 4:case 6:case 7:case 10:
			return false;
		default:
			return true;
		}
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.maskedBounds != null && this.checkBounds(e)) {
			var x = e.relX;
			var y = e.relY;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var pt = new h2d_col_PointImpl(x,y);
			this.localToGlobal(pt);
			if(pt.x < this.maskedBounds.xMin || pt.y < this.maskedBounds.yMin || pt.x > this.maskedBounds.xMax || pt.y > this.maskedBounds.yMax) {
				e.cancel = true;
				return;
			}
		}
		if(this.shape == null && this.isEllipse && this.checkBounds(e)) {
			var cx = this.width * 0.5;
			var cy = this.height * 0.5;
			var dx = (e.relX - cx) / cx;
			var dy = (e.relY - cy) / cy;
			if(dx * dx + dy * dy > 1) {
				e.cancel = true;
				return;
			}
		}
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
				if(e.cancel) {
					this.mouseDownButton = -1;
				}
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				var frame = hxd_Timer.frameCount;
				if(this.mouseDownButton == e.button && (this.lastClickFrame != frame || this.allowMultiClick)) {
					this.onClick(e);
					this.lastClickFrame = frame;
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			e.propagate = true;
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,calcAbsPos: function() {
		h2d_Object.prototype.calcAbsPos.call(this);
		this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,eventToLocal: function(e) {
		var i = this;
		var dx = e.relX - i.absX;
		var dy = e.relY - i.absY;
		e.relX = (dx * i.matD - dy * i.matC) * i.invDet;
		e.relY = (-dx * i.matB + dy * i.matA) * i.invDet;
	}
	,startCapture: function(callb,onCancel,touchId) {
		var _gthis = this;
		this.scene.startCapture(function(event) {
			var x = event.relX;
			var y = event.relY;
			_gthis.eventToLocal(event);
			callb(event);
			event.relX = x;
			event.relY = y;
		},onCancel,touchId);
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h2d_Interactive
});
var h2d_Layers = function(parent) {
	h2d_Object.call(this,parent);
	this.layersIndexes = [];
	this.layerCount = 0;
};
$hxClasses["h2d.Layers"] = h2d_Layers;
h2d_Layers.__name__ = "h2d.Layers";
h2d_Layers.__super__ = h2d_Object;
h2d_Layers.prototype = $extend(h2d_Object.prototype,{
	addChild: function(s) {
		this.add(s,-1);
	}
	,add: function(s,layer,index) {
		if(index == null) {
			index = -1;
		}
		if(layer == null) {
			layer = -1;
		}
		if(s.parent == this) {
			var old = s.allocated;
			s.allocated = false;
			this.removeChild(s);
			s.allocated = old;
		}
		if(layer == -1) {
			layer = this.layerCount == 0 ? 0 : this.layerCount - 1;
		}
		while(layer >= this.layerCount) this.layersIndexes[this.layerCount++] = this.children.length;
		if(index != -1) {
			if(layer == 0) {
				var b = this.layersIndexes[layer];
				var b1 = index > b ? b : index;
				h2d_Object.prototype.addChildAt.call(this,s,0 < b1 ? b1 : 0);
			} else if(index < 0) {
				h2d_Object.prototype.addChildAt.call(this,s,this.layersIndexes[layer - 1]);
			} else {
				var a = this.layersIndexes[layer - 1] + index;
				var b = this.layersIndexes[layer];
				h2d_Object.prototype.addChildAt.call(this,s,a > b ? b : a);
			}
		} else {
			h2d_Object.prototype.addChildAt.call(this,s,this.layersIndexes[layer]);
		}
		var _g = layer;
		var _g1 = this.layerCount;
		while(_g < _g1) {
			var i = _g++;
			this.layersIndexes[i]++;
		}
	}
	,addChildAt: function(s,index) {
		this.add(s,-1,index);
	}
	,removeChild: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				this.children.splice(i,1);
				if(s.allocated) {
					s.onRemove();
				}
				s.parent = null;
				s.posChanged = true;
				if(s.parentContainer != null) {
					s.setParentContainer(null);
				}
				var k = this.layerCount - 1;
				while(k >= 0 && this.layersIndexes[k] > i) {
					this.layersIndexes[k]--;
					--k;
				}
				if(this.parentContainer != null) {
					this.parentContainer.contentChanged(this);
				}
				break;
			}
		}
	}
	,getChildLayer: function(s) {
		if(s.parent != this) {
			return -1;
		}
		var index = this.children.indexOf(s);
		var _g = 0;
		var _g1 = this.layerCount;
		while(_g < _g1) {
			var i = _g++;
			if(this.layersIndexes[i] > index) {
				return i;
			}
		}
		return -1;
	}
	,__class__: h2d_Layers
});
var h2d_Mask = function(width,height,parent) {
	this.scrollY = 0;
	this.scrollX = 0;
	h2d_Object.call(this,parent);
	this.width = width;
	this.height = height;
};
$hxClasses["h2d.Mask"] = h2d_Mask;
h2d_Mask.__name__ = "h2d.Mask";
h2d_Mask.maskWith = function(ctx,object,width,height,scrollX,scrollY) {
	if(scrollY == null) {
		scrollY = 0;
	}
	if(scrollX == null) {
		scrollX = 0;
	}
	var x1 = object.absX + scrollX;
	var y1 = object.absY + scrollY;
	var x2 = width * object.matA + height * object.matC + x1;
	var y2 = width * object.matB + height * object.matD + y1;
	var tmp;
	if(x1 > x2) {
		tmp = x1;
		x1 = x2;
		x2 = tmp;
	}
	if(y1 > y2) {
		tmp = y1;
		y1 = y2;
		y2 = tmp;
	}
	ctx.clipRenderZone(x1,y1,x2 - x1,y2 - y1);
};
h2d_Mask.unmask = function(ctx) {
	ctx.popRenderZone();
};
h2d_Mask.__super__ = h2d_Object;
h2d_Mask.prototype = $extend(h2d_Object.prototype,{
	set_scrollY: function(v) {
		if(this.scrollBounds != null) {
			var min = this.scrollBounds.yMin;
			var max = this.scrollBounds.yMax - this.height;
			if(max == null) {
				max = 1.;
			}
			if(min == null) {
				min = 0.;
			}
			if(v < min) {
				v = min;
			} else if(v > max) {
				v = max;
			}
		}
		this.posChanged = true;
		return this.scrollY = v;
	}
	,calcAbsPos: function() {
		h2d_Object.prototype.calcAbsPos.call(this);
		this.absX -= this.scrollX;
		this.absY -= this.scrollY;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		var xMin = out.xMin;
		var yMin = out.yMin;
		var xMax = out.xMax;
		var yMax = out.yMax;
		out.xMin = 1e20;
		out.yMin = 1e20;
		out.xMax = -1e20;
		out.yMax = -1e20;
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		this.addBounds(relativeTo,out,this.scrollX,this.scrollY,this.width,this.height);
		var bxMin = out.xMin;
		var byMin = out.yMin;
		var bxMax = out.xMax;
		var byMax = out.yMax;
		out.xMin = xMin;
		out.xMax = xMax;
		out.yMin = yMin;
		out.yMax = yMax;
		h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(out.xMin < bxMin) {
			out.xMin = xMin > bxMin ? bxMin : xMin;
		}
		if(out.yMin < byMin) {
			out.yMin = yMin > byMin ? byMin : yMin;
		}
		if(out.xMax > bxMax) {
			out.xMax = xMax < bxMax ? bxMax : xMax;
		}
		if(out.yMax > byMax) {
			out.yMax = yMax < byMax ? byMax : yMax;
		}
	}
	,drawRec: function(ctx) {
		h2d_Mask.maskWith(ctx,this,this.width,this.height,this.scrollX,this.scrollY);
		h2d_Object.prototype.drawRec.call(this,ctx);
		h2d_Mask.unmask(ctx);
	}
	,__class__: h2d_Mask
});
var h3d_impl_RenderContext = function() {
	this.shaderBuffers = new h3d_shader_Buffers();
	this.engine = h3d_Engine.CURRENT;
	this.frame = 0;
	this.time = 0.;
	this.elapsedTime = 1. / hxd_System.getDefaultFrameRate();
	this.textures = new h3d_impl_TextureCache();
	this.globals = new hxsl_Globals();
};
$hxClasses["h3d.impl.RenderContext"] = h3d_impl_RenderContext;
h3d_impl_RenderContext.__name__ = "h3d.impl.RenderContext";
h3d_impl_RenderContext.get = function() {
	return h3d_impl_RenderContext.inst;
};
h3d_impl_RenderContext.prototype = {
	setCurrent: function() {
		h3d_impl_RenderContext.inst = this;
	}
	,clearCurrent: function() {
		if(h3d_impl_RenderContext.inst == this) {
			h3d_impl_RenderContext.inst = null;
		} else {
			throw haxe_Exception.thrown("Context has changed");
		}
	}
	,fillRec: function(v,type,out,pos) {
		switch(type._hx_index) {
		case 1:
			out[pos] = v;
			return 1;
		case 3:
			out[pos] = v;
			return 1;
		case 5:
			var _g = type.size;
			var _g1 = type.t;
			if(_g == 4) {
				var v1 = v;
				out[pos++] = v1.x;
				out[pos++] = v1.y;
				out[pos++] = v1.z;
				out[pos++] = v1.w;
				return 4;
			} else {
				var n = _g;
				var v1 = v;
				out[pos++] = v1.x;
				out[pos++] = v1.y;
				if(n == 3) {
					out[pos++] = v1.z;
				}
				return n;
			}
			break;
		case 6:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = 0;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = 0;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = 0;
			return 12;
		case 7:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = m._41;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = m._42;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = m._43;
			out[pos++] = m._14;
			out[pos++] = m._24;
			out[pos++] = m._34;
			out[pos++] = m._44;
			return 16;
		case 8:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = m._41;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = m._42;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = m._43;
			return 12;
		case 13:
			var vl = type.vl;
			var tot = 0;
			var _g = 0;
			while(_g < vl.length) {
				var vv = vl[_g];
				++_g;
				tot += this.fillRec(Reflect.field(v,vv.name),vv.type,out,pos + tot);
			}
			return tot;
		case 15:
			var _g = type.t;
			var _g1 = type.size;
			switch(_g._hx_index) {
			case 3:
				if(_g1._hx_index == 0) {
					var len = _g1.v;
					var v1 = v;
					var size = 0;
					var count = v1.length < len ? v1.length : len;
					var _g2 = 0;
					var _g3 = count;
					while(_g2 < _g3) {
						var i = _g2++;
						out[pos++] = v1[i];
					}
					return len;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			case 5:
				if(_g.size == 4) {
					if(_g.t._hx_index == 1) {
						if(_g1._hx_index == 0) {
							var len = _g1.v;
							var v1 = v;
							var _g2 = 0;
							var _g3 = len;
							while(_g2 < _g3) {
								var i = _g2++;
								var n = v1[i];
								if(n == null) {
									break;
								}
								out[pos++] = n.x;
								out[pos++] = n.y;
								out[pos++] = n.z;
								out[pos++] = n.w;
							}
							return len * 4;
						} else {
							throw haxe_Exception.thrown("assert " + Std.string(type));
						}
					} else if(_g1._hx_index == 0) {
						var t = _g;
						var len = _g1.v;
						var v1 = v;
						var size = 0;
						var _g2 = 0;
						var _g3 = len;
						while(_g2 < _g3) {
							var i = _g2++;
							var n = v1[i];
							if(n == null) {
								break;
							}
							size = this.fillRec(n,t,out,pos);
							pos += size;
						}
						return len * size;
					} else {
						throw haxe_Exception.thrown("assert " + Std.string(type));
					}
				} else if(_g1._hx_index == 0) {
					var t = _g;
					var len = _g1.v;
					var v1 = v;
					var size = 0;
					var _g2 = 0;
					var _g3 = len;
					while(_g2 < _g3) {
						var i = _g2++;
						var n = v1[i];
						if(n == null) {
							break;
						}
						size = this.fillRec(n,t,out,pos);
						pos += size;
					}
					return len * size;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			case 8:
				if(_g1._hx_index == 0) {
					var len = _g1.v;
					var v1 = v;
					var _g2 = 0;
					var _g3 = len;
					while(_g2 < _g3) {
						var i = _g2++;
						var m = v1[i];
						if(m == null) {
							break;
						}
						out[pos++] = m._11;
						out[pos++] = m._21;
						out[pos++] = m._31;
						out[pos++] = m._41;
						out[pos++] = m._12;
						out[pos++] = m._22;
						out[pos++] = m._32;
						out[pos++] = m._42;
						out[pos++] = m._13;
						out[pos++] = m._23;
						out[pos++] = m._33;
						out[pos++] = m._43;
					}
					return len * 12;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			default:
				if(_g1._hx_index == 0) {
					var t = _g;
					var len = _g1.v;
					var v1 = v;
					var size = 0;
					var _g = 0;
					var _g1 = len;
					while(_g < _g1) {
						var i = _g++;
						var n = v1[i];
						if(n == null) {
							break;
						}
						size = this.fillRec(n,t,out,pos);
						pos += size;
					}
					return len * size;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
			}
			break;
		default:
			throw haxe_Exception.thrown("assert " + Std.string(type));
		}
	}
	,shaderInfo: function(shaders,path) {
		var name = path.split(".").pop();
		while(shaders != null) {
			var inst = shaders.s.instance;
			var _g = 0;
			var _g1 = inst.shader.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.name == name) {
					return shaders.s.toString();
				}
			}
			shaders = shaders.next;
		}
		return "(not found)";
	}
	,fillGlobals: function(buf,s) {
		var _gthis = this;
		var g = s.vertex.globals;
		var ptr = buf.vertex.globals;
		while(g != null) {
			var v = _gthis.globals.map.h[g.gid];
			if(v == null) {
				throw haxe_Exception.thrown("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,ptr,g.pos);
			g = g.next;
		}
		if(s.fragment != null) {
			var g = s.fragment.globals;
			var ptr = buf.fragment.globals;
			while(g != null) {
				var v = _gthis.globals.map.h[g.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + g.path);
				}
				_gthis.fillRec(v,g.type,ptr,g.pos);
				g = g.next;
			}
		}
	}
	,fillParams: function(buf,s,shaders,compute) {
		if(compute == null) {
			compute = false;
		}
		var _gthis = this;
		var curInstance = -1;
		var curInstanceValue = null;
		var buf1 = buf.vertex;
		var s1 = s.vertex;
		var p = s1.params;
		var ptr = buf1.params;
		while(p != null) {
			var v;
			if(p.perObjectGlobal == null) {
				switch(p.type._hx_index) {
				case 1:case 3:
					var index = p.instance;
					var i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						if(compute) {
							++index;
						}
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr[p.pos] = i.getParamFloatValue(p.index);
					p = p.next;
					continue;
				default:
				}
				var index1 = p.instance;
				var v1;
				if(curInstance == index1) {
					v1 = curInstanceValue;
				} else {
					var si1 = shaders;
					curInstance = index1;
					if(compute) {
						++index1;
					}
					while(--index1 > 0) si1 = si1.next;
					curInstanceValue = si1.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p.index);
				if(v == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
				}
			} else if(p.perObjectGlobal != null) {
				var v2 = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v2 == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var v3;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					v3 = true;
				} else {
					v3 = false;
				}
				v = v3 ? v2.texture : v2;
			} else {
				var index2 = p.instance;
				var v4;
				if(curInstance == index2) {
					v4 = curInstanceValue;
				} else {
					var si2 = shaders;
					curInstance = index2;
					if(compute) {
						++index2;
					}
					while(--index2 > 0) si2 = si2.next;
					curInstanceValue = si2.s;
					v4 = curInstanceValue;
				}
				var v5 = v4.getParamValue(p.index);
				if(v5 == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				v = v5;
			}
			_gthis.fillRec(v,p.type,ptr,p.pos);
			p = p.next;
		}
		var tid = 0;
		var p = s1.textures;
		while(p != null) {
			var opt = !h3d_impl_RenderContext.STRICT;
			if(opt == null) {
				opt = false;
			}
			var t;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var t1;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					t1 = true;
				} else {
					t1 = false;
				}
				t = t1 ? v.texture : v;
			} else {
				var index = p.instance;
				var v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					var si = shaders;
					curInstance = index;
					if(compute) {
						++index;
					}
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				var v2 = v1.getParamValue(p.index);
				if(v2 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				t = v2;
			}
			if(p.pos < 0) {
				var arr = t;
				var _g2 = 0;
				var _g3 = -p.pos;
				while(_g2 < _g3) {
					var i = _g2++;
					buf1.tex[tid++] = arr[i];
				}
			} else {
				buf1.tex[tid++] = t;
			}
			p = p.next;
		}
		var p = s1.buffers;
		var bid = 0;
		while(p != null) {
			var opt = !h3d_impl_RenderContext.STRICT;
			if(opt == null) {
				opt = false;
			}
			var b;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var b1;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					b1 = true;
				} else {
					b1 = false;
				}
				b = b1 ? v.texture : v;
			} else {
				var index = p.instance;
				var v1;
				if(curInstance == index) {
					v1 = curInstanceValue;
				} else {
					var si = shaders;
					curInstance = index;
					if(compute) {
						++index;
					}
					while(--index > 0) si = si.next;
					curInstanceValue = si.s;
					v1 = curInstanceValue;
				}
				var v2 = v1.getParamValue(p.index);
				if(v2 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
				}
				b = v2;
			}
			buf1.buffers[bid++] = b;
			p = p.next;
		}
		if(s.fragment != null) {
			var buf1 = buf.fragment;
			var s1 = s.fragment;
			var p = s1.params;
			var ptr = buf1.params;
			while(p != null) {
				var v;
				if(p.perObjectGlobal == null) {
					switch(p.type._hx_index) {
					case 1:case 3:
						var index = p.instance;
						var i;
						if(curInstance == index) {
							i = curInstanceValue;
						} else {
							var si = shaders;
							curInstance = index;
							if(compute) {
								++index;
							}
							while(--index > 0) si = si.next;
							curInstanceValue = si.s;
							i = curInstanceValue;
						}
						ptr[p.pos] = i.getParamFloatValue(p.index);
						p = p.next;
						continue;
					default:
					}
					var index1 = p.instance;
					var v1;
					if(curInstance == index1) {
						v1 = curInstanceValue;
					} else {
						var si1 = shaders;
						curInstance = index1;
						if(compute) {
							++index1;
						}
						while(--index1 > 0) si1 = si1.next;
						curInstanceValue = si1.s;
						v1 = curInstanceValue;
					}
					v = v1.getParamValue(p.index);
					if(v == null) {
						throw haxe_Exception.thrown("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
					}
				} else if(p.perObjectGlobal != null) {
					var v2 = _gthis.globals.map.h[p.perObjectGlobal.gid];
					if(v2 == null) {
						throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
					}
					var _g = p.type;
					var v3;
					if(_g._hx_index == 17) {
						var _g1 = _g.size;
						v3 = true;
					} else {
						v3 = false;
					}
					v = v3 ? v2.texture : v2;
				} else {
					var index2 = p.instance;
					var v4;
					if(curInstance == index2) {
						v4 = curInstanceValue;
					} else {
						var si2 = shaders;
						curInstance = index2;
						if(compute) {
							++index2;
						}
						while(--index2 > 0) si2 = si2.next;
						curInstanceValue = si2.s;
						v4 = curInstanceValue;
					}
					var v5 = v4.getParamValue(p.index);
					if(v5 == null) {
						throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
					}
					v = v5;
				}
				_gthis.fillRec(v,p.type,ptr,p.pos);
				p = p.next;
			}
			var tid = 0;
			var p = s1.textures;
			while(p != null) {
				var opt = !h3d_impl_RenderContext.STRICT;
				if(opt == null) {
					opt = false;
				}
				var t;
				if(p.perObjectGlobal != null) {
					var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
					if(v == null) {
						throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
					}
					var _g = p.type;
					var t1;
					if(_g._hx_index == 17) {
						var _g1 = _g.size;
						t1 = true;
					} else {
						t1 = false;
					}
					t = t1 ? v.texture : v;
				} else {
					var index = p.instance;
					var v1;
					if(curInstance == index) {
						v1 = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						if(compute) {
							++index;
						}
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						v1 = curInstanceValue;
					}
					var v2 = v1.getParamValue(p.index);
					if(v2 == null && !opt) {
						throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
					}
					t = v2;
				}
				if(p.pos < 0) {
					var arr = t;
					var _g2 = 0;
					var _g3 = -p.pos;
					while(_g2 < _g3) {
						var i = _g2++;
						buf1.tex[tid++] = arr[i];
					}
				} else {
					buf1.tex[tid++] = t;
				}
				p = p.next;
			}
			var p = s1.buffers;
			var bid = 0;
			while(p != null) {
				var opt = !h3d_impl_RenderContext.STRICT;
				if(opt == null) {
					opt = false;
				}
				var b;
				if(p.perObjectGlobal != null) {
					var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
					if(v == null) {
						throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
					}
					var _g = p.type;
					var b1;
					if(_g._hx_index == 17) {
						var _g1 = _g.size;
						b1 = true;
					} else {
						b1 = false;
					}
					b = b1 ? v.texture : v;
				} else {
					var index = p.instance;
					var v1;
					if(curInstance == index) {
						v1 = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						if(compute) {
							++index;
						}
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						v1 = curInstanceValue;
					}
					var v2 = v1.getParamValue(p.index);
					if(v2 == null && !opt) {
						throw haxe_Exception.thrown("Missing param value " + Std.string(shaders.s) + "." + p.name);
					}
					b = v2;
				}
				buf1.buffers[bid++] = b;
				p = p.next;
			}
		}
	}
	,__class__: h3d_impl_RenderContext
};
var h2d_RenderContext = function(scene) {
	this.renderZoneIndex = 0;
	this.renderZoneStack = [];
	this.currentCamera = null;
	this.tmpBounds = new h2d_col_Bounds();
	this.defaultSmooth = false;
	this.globalAlpha = 1.;
	h3d_impl_RenderContext.call(this);
	this.scene = scene;
	this.bufPos = 0;
	this.output = new h3d_pass_OutputShader();
	this.pass = new h3d_mat_Pass("",null);
	this.pass.depth(true,h3d_mat_Compare.Always);
	this.pass.set_culling(h3d_mat_Face.None);
	this.baseShader = new h3d_shader_Base2d();
	this.baseShader.setPriority(100);
	this.baseShader.zValue__ = 0.;
	this.baseShaderList = new hxsl_ShaderList(this.baseShader);
	this.targetsStack = [];
	this.targetsStackIndex = 0;
	this.cameraStack = [];
	this.cameraStackIndex = 0;
	this.filterStack = [];
	this.filterStackIndex = 0;
};
$hxClasses["h2d.RenderContext"] = h2d_RenderContext;
h2d_RenderContext.__name__ = "h2d.RenderContext";
h2d_RenderContext.__super__ = h3d_impl_RenderContext;
h2d_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	begin: function() {
		this.texture = null;
		this.currentObj = null;
		this.bufPos = 0;
		this.stride = 0;
		this.viewA = this.scene.viewportA;
		this.viewB = 0;
		this.viewC = 0;
		this.viewD = this.scene.viewportD;
		this.viewX = this.scene.viewportX;
		this.viewY = this.scene.viewportY;
		this.setCurrent();
		this.targetFlipY = this.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) ? -1 : 1;
		this.baseFlipY = this.engine.getCurrentTarget() != null ? this.targetFlipY : 1;
		this.inFilter = null;
		this.globals.set("time",this.time);
		this.globals.set("global.time",this.time);
		var _this = this.baseShader;
		_this.constModified = true;
		_this.pixelAlign__ = false;
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / this.engine.width;
		var y = 0.5 / this.engine.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		var _this = this.baseShader.viewportA__;
		var x = this.scene.viewportA;
		var y = 0;
		var z = this.scene.viewportX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.viewportB__;
		var x = 0;
		var y = this.scene.viewportD * -this.baseFlipY;
		var z = this.scene.viewportY * -this.baseFlipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.filterMatrixA__;
		var x = 1;
		var y = 0;
		var z = 0;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.filterMatrixB__;
		var x = 0;
		var y = 1;
		var z = 0;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		this.baseShaderList.next = null;
		this.initShaders(this.baseShaderList);
		this.engine.selectMaterial(this.pass);
		this.textures.begin();
	}
	,initShaders: function(shaders) {
		this.needInitShaders = false;
		this.currentShaders = shaders;
		this.compiledShader = this.output.compileShaders(this.globals,shaders);
		var buffers = this.shaderBuffers;
		var s = this.compiledShader;
		buffers.vertex.grow(s.vertex);
		if(s.fragment != null) {
			buffers.fragment.grow(s.fragment);
		}
		this.fillGlobals(buffers,this.compiledShader);
		this.engine.selectShader(this.compiledShader);
		this.engine.uploadShaderBuffers(buffers,0);
	}
	,end: function() {
		this.texture = null;
		this.currentObj = null;
		this.baseShaderList.next = null;
		this.clearCurrent();
		if(this.targetsStackIndex != 0) {
			throw haxe_Exception.thrown("Missing popTarget()");
		}
		if(this.cameraStackIndex != 0) {
			throw haxe_Exception.thrown("Missing popCamera()");
		}
	}
	,pushCamera: function(cam) {
		var entry = this.cameraStack[this.cameraStackIndex++];
		if(entry == null) {
			entry = { va : 0, vb : 0, vc : 0, vd : 0, vx : 0, vy : 0, camera : null};
			this.cameraStack.push(entry);
		}
		var tmpA = this.viewA;
		var tmpB = this.viewB;
		var tmpC = this.viewC;
		var tmpD = this.viewD;
		entry.va = tmpA;
		entry.vb = tmpB;
		entry.vc = tmpC;
		entry.vd = tmpD;
		entry.vx = this.viewX;
		entry.vy = this.viewY;
		entry.camera = this.currentCamera;
		this.currentCamera = cam;
		this.viewA = cam.matA * tmpA + cam.matB * tmpC;
		this.viewB = cam.matA * tmpB + cam.matB * tmpD;
		this.viewC = cam.matC * tmpA + cam.matD * tmpC;
		this.viewD = cam.matC * tmpB + cam.matD * tmpD;
		this.viewX = cam.absX * tmpA + cam.absY * tmpC + this.viewX;
		this.viewY = cam.absX * tmpB + cam.absY * tmpD + this.viewY;
		var flipY = this.curTarget != null ? -this.targetFlipY : -this.baseFlipY;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * flipY;
		var y = this.viewD * flipY;
		var z = this.viewY * flipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
	}
	,popCamera: function() {
		if(this.cameraStackIndex == 0) {
			throw haxe_Exception.thrown("Too many popCamera()");
		}
		var inf = this.cameraStack[--this.cameraStackIndex];
		this.viewA = inf.va;
		this.viewB = inf.vb;
		this.viewC = inf.vc;
		this.viewD = inf.vd;
		this.viewX = inf.vx;
		this.viewY = inf.vy;
		this.currentCamera = inf.camera;
		inf.camera = null;
		var flipY = this.curTarget != null ? -this.targetFlipY : -this.baseFlipY;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * flipY;
		var y = this.viewD * flipY;
		var z = this.viewY * flipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
	}
	,pushFilter: function(spr) {
		if(this.filterStack.length == 0 && this.onEnterFilter != null) {
			if(!this.onEnterFilter(spr)) {
				return false;
			}
		}
		this.inFilter = this.filterStack[this.filterStackIndex++];
		if(this.inFilter == null) {
			this.inFilter = { spr : null, scaleX : 1, scaleY : 1};
			this.filterStack.push(this.inFilter);
		}
		this.inFilter.spr = spr;
		this.inFilter.scaleX = 1;
		this.inFilter.scaleY = 1;
		return true;
	}
	,setFilterScale: function(scaleX,scaleY) {
		if(this.inFilter != null) {
			this.inFilter.scaleX = scaleX;
			this.inFilter.scaleY = scaleY;
		}
	}
	,popFilter: function() {
		this.inFilter.spr = null;
		this.filterStackIndex--;
		if(this.filterStackIndex > 0) {
			this.inFilter = this.filterStack[this.filterStackIndex - 1];
		} else {
			this.inFilter = null;
			if(this.onLeaveFilter != null) {
				this.onLeaveFilter(this.filterStack[this.filterStackIndex].spr);
			}
		}
	}
	,pushTarget: function(t,startX,startY,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(startY == null) {
			startY = 0;
		}
		if(startX == null) {
			startX = 0;
		}
		this.engine.pushTarget(t);
		this.initShaders(this.baseShaderList);
		var entry = this.targetsStack[this.targetsStackIndex++];
		if(entry == null) {
			entry = { t : null, va : 0, vb : 0, vc : 0, vd : 0, vx : 0, vy : 0, hasRZ : false, rzX : 0, rzY : 0, rzW : 0, rzH : 0};
			this.targetsStack.push(entry);
		}
		entry.t = this.curTarget;
		entry.va = this.viewA;
		entry.vb = this.viewB;
		entry.vc = this.viewC;
		entry.vd = this.viewD;
		entry.vx = this.viewX;
		entry.vy = this.viewY;
		entry.hasRZ = this.hasRenderZone;
		entry.rzX = this.renderX;
		entry.rzY = this.renderY;
		entry.rzW = this.renderW;
		entry.rzH = this.renderH;
		if(width < 0) {
			width = t == null ? this.scene.width : t.width;
		}
		if(height < 0) {
			height = t == null ? this.scene.height : t.height;
		}
		this.viewA = 2 / width;
		this.viewB = 0;
		this.viewC = 0;
		this.viewD = 2 / height;
		this.viewX = -1 - startX * this.viewA;
		this.viewY = -1 - startY * this.viewD;
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / (t == null ? this.engine.width : t.width);
		var y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * -this.targetFlipY;
		var y = this.viewD * -this.targetFlipY;
		var z = this.viewY * -this.targetFlipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		this.curTarget = t;
		this.currentBlend = null;
		if(this.hasRenderZone) {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,popTarget: function() {
		if(this.targetsStackIndex <= 0) {
			throw haxe_Exception.thrown("Too many popTarget()");
		}
		this.engine.popTarget();
		var tinf = this.targetsStack[--this.targetsStackIndex];
		var t = this.curTarget = tinf.t;
		this.viewA = tinf.va;
		this.viewB = tinf.vb;
		this.viewC = tinf.vc;
		this.viewD = tinf.vd;
		this.viewX = tinf.vx;
		this.viewY = tinf.vy;
		var flipY = t == null ? -this.baseFlipY : -this.targetFlipY;
		this.initShaders(this.baseShaderList);
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / (t == null ? this.engine.width : t.width);
		var y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * flipY;
		var y = this.viewD * flipY;
		var z = this.viewY * flipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		if(tinf.hasRZ) {
			this.setRZ(tinf.rzX,tinf.rzY,tinf.rzW,tinf.rzH);
		}
	}
	,pushRenderZone: function(x,y,w,h) {
		var inf = this.renderZoneStack[this.renderZoneIndex++];
		if(inf == null) {
			inf = { hasRZ : this.hasRenderZone, x : this.renderX, y : this.renderY, w : this.renderW, h : this.renderH};
			this.renderZoneStack[this.renderZoneIndex - 1] = inf;
		} else if(this.hasRenderZone) {
			inf.hasRZ = true;
			inf.x = this.renderX;
			inf.y = this.renderY;
			inf.w = this.renderW;
			inf.h = this.renderH;
		} else {
			inf.hasRZ = false;
		}
		this.setRZ(x,y,w,h);
	}
	,popRenderZone: function() {
		if(this.renderZoneIndex == 0) {
			throw haxe_Exception.thrown("Too many popRenderZone()");
		}
		var inf = this.renderZoneStack[--this.renderZoneIndex];
		if(inf.hasRZ) {
			this.setRZ(inf.x,inf.y,inf.w,inf.h);
		} else {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,getCurrentRenderZone: function(bounds) {
		if(!this.hasRenderZone) {
			return null;
		}
		if(bounds == null) {
			bounds = new h2d_col_Bounds();
		}
		var x = this.renderX;
		var y = this.renderY;
		bounds.xMin = x;
		bounds.yMin = y;
		bounds.xMax = x + this.renderW;
		bounds.yMax = y + this.renderH;
		return bounds;
	}
	,clipRenderZone: function(x,y,w,h) {
		if(!this.hasRenderZone) {
			this.pushRenderZone(x,y,w,h);
			return;
		}
		var x2 = Math.min(x + w,this.renderX + this.renderW);
		var y2 = Math.min(y + h,this.renderY + this.renderH);
		x = Math.max(x,this.renderX);
		y = Math.max(y,this.renderY);
		if(x2 < x) {
			x2 = x;
		}
		if(y2 < y) {
			y2 = y;
		}
		this.pushRenderZone(x,y,x2 - x,y2 - y);
	}
	,setRZ: function(x,y,w,h) {
		this.hasRenderZone = true;
		this.renderX = x;
		this.renderY = y;
		this.renderW = w;
		this.renderH = h;
		var scaleX = this.scene.viewportA * this.engine.width / 2;
		var scaleY = this.scene.viewportD * this.engine.height / 2;
		if(this.inFilter != null) {
			var fa = this.baseShader.filterMatrixA__;
			var fb = this.baseShader.filterMatrixB__;
			var x2 = x + w;
			var y2 = y + h;
			var rx1 = x * fa.x + y * fa.y + fa.z;
			var ry1 = x * fb.x + y * fb.y + fb.z;
			var rx2 = x2 * fa.x + y2 * fa.y + fa.z;
			var ry2 = x2 * fb.x + y2 * fb.y + fb.z;
			x = rx1;
			y = ry1;
			w = rx2 - rx1;
			h = ry2 - ry1;
		}
		this.engine.setRenderZone(x * scaleX + (this.scene.viewportX + 1) * (this.engine.width / 2) + 1e-10 | 0,y * scaleY + (this.scene.viewportY + 1) * (this.engine.height / 2) + 1e-10 | 0,w * scaleX + 1e-10 | 0,h * scaleY + 1e-10 | 0);
	}
	,drawScene: function() {
		this.scene.drawRec(this);
	}
	,beforeDraw: function() {
		if(this.texture == null) {
			this.texture = h3d_mat_Texture.fromColor(16711935);
		}
		this.baseShader.texture__ = this.texture;
		this.texture.set_filter((this.currentObj.smooth == null ? this.defaultSmooth : this.currentObj.smooth) ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		this.texture.set_wrap(this.currentObj.tileWrap && (this.currentObj.filter == null || this.inFilter != null) ? h3d_mat_Wrap.Repeat : h3d_mat_Wrap.Clamp);
		var blend = this.currentObj.blendMode;
		if(this.inFilter != null && this.inFilter.spr == this.currentObj && blend == h2d_BlendMode.Erase) {
			blend = h2d_BlendMode.Add;
		}
		if(this.inFilterBlend != null) {
			blend = this.inFilterBlend;
		}
		if(blend != this.currentBlend) {
			this.currentBlend = blend;
			this.pass.setBlendMode(blend);
			if(blend == h2d_BlendMode.Alpha || blend == h2d_BlendMode.Add) {
				this.pass.set_blendAlphaSrc(h3d_mat_Blend.One);
				if(this.inFilterBlend != null) {
					this.pass.set_blendSrc(h3d_mat_Blend.One);
				}
			}
		}
		var buffers = this.shaderBuffers;
		this.fillParams(buffers,this.compiledShader,this.currentShaders);
		this.engine.selectMaterial(this.pass);
		this.engine.uploadShaderBuffers(buffers,1);
		this.engine.uploadShaderBuffers(buffers,2);
		this.engine.uploadShaderBuffers(buffers,3);
	}
	,beginDrawBatchState: function(obj) {
		if(!this.beginDraw(obj,null,true)) {
			return false;
		}
		if(this.inFilter != null && this.inFilter.spr == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this = this.baseShader.color__;
			var x = this.globalAlpha;
			var y = this.globalAlpha;
			var z = this.globalAlpha;
			var w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		var _this = this.baseShader.absoluteMatrixA__;
		var x = obj.matA;
		var y = obj.matC;
		var z = obj.absX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.absoluteMatrixB__;
		var x = obj.matB;
		var y = obj.matD;
		var z = obj.absY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		return true;
	}
	,drawTile: function(obj,tile) {
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(this.inFilter != null) {
			var f1 = this.baseShader.filterMatrixA__;
			var f2 = this.baseShader.filterMatrixB__;
			var tmpA = obj.matA * f1.x + obj.matB * f1.y;
			var tmpB = obj.matA * f2.x + obj.matB * f2.y;
			var tmpC = obj.matC * f1.x + obj.matD * f1.y;
			var tmpD = obj.matC * f2.x + obj.matD * f2.y;
			var tmpX = obj.absX * f1.x + obj.absY * f1.y + f1.z;
			var tmpY = obj.absX * f2.x + obj.absY * f2.y + f2.z;
			matA = tmpA * this.viewA + tmpB * this.viewC;
			matB = tmpA * this.viewB + tmpB * this.viewD;
			matC = tmpC * this.viewA + tmpD * this.viewC;
			matD = tmpC * this.viewB + tmpD * this.viewD;
			absX = tmpX * this.viewA + tmpY * this.viewC + this.viewX;
			absY = tmpX * this.viewB + tmpY * this.viewD + this.viewY;
		} else {
			matA = obj.matA * this.viewA + obj.matB * this.viewC;
			matB = obj.matA * this.viewB + obj.matB * this.viewD;
			matC = obj.matC * this.viewA + obj.matD * this.viewC;
			matD = obj.matC * this.viewB + obj.matD * this.viewD;
			absX = obj.absX * this.viewA + obj.absY * this.viewC + this.viewX;
			absY = obj.absX * this.viewB + obj.absY * this.viewD + this.viewY;
		}
		if(matB == 0 && matC == 0) {
			var tx = tile.dx + tile.width * 0.5;
			var ty = tile.dy + tile.height * 0.5;
			var a = matA < 0 ? -matA : matA;
			var b = matD < 0 ? -matD : matD;
			var tr = (tile.width > tile.height ? tile.width : tile.height) * 1.5 * (a < b ? b : a);
			var cx = absX + tx * matA;
			var cy = absY + ty * matD;
			if(cx + tr < -1 || cx - tr > 1 || cy + tr < -1 || cy - tr > 1) {
				return false;
			}
		} else {
			var xMin = 1e20;
			var yMin = 1e20;
			var xMax = -1e20;
			var yMax = -1e20;
			var hw = tile.width * 0.5;
			var hh = tile.height * 0.5;
			var px = tile.dx * matA + tile.dy * matC;
			var py = tile.dx * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var px = (x + tile.dx) * matA + tile.dy * matC;
			var py = (x + tile.dx) * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var y = tile.height;
			var px = tile.dx * matA + (y + tile.dy) * matC;
			var py = tile.dx * matB + (y + tile.dy) * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var y = tile.height;
			var px = (x + tile.dx) * matA + (y + tile.dy) * matC;
			var py = (x + tile.dx) * matB + (y + tile.dy) * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			if(absX + xMax < -1 || absY + yMax < -1 || absX + xMin > 1 || absY + yMin > 1) {
				return false;
			}
		}
		if(!this.beginDraw(obj,tile.innerTex,true,true)) {
			return false;
		}
		if(this.inFilter != null && this.inFilter.spr == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this = this.baseShader.color__;
			var x = this.globalAlpha;
			var y = this.globalAlpha;
			var z = this.globalAlpha;
			var w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		var _this = this.baseShader.absoluteMatrixA__;
		var x = tile.width * obj.matA;
		var y = tile.height * obj.matC;
		var z = obj.absX + tile.dx * obj.matA + tile.dy * obj.matC;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.absoluteMatrixB__;
		var x = tile.width * obj.matB;
		var y = tile.height * obj.matD;
		var z = obj.absY + tile.dx * obj.matB + tile.dy * obj.matD;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		var _this = this.baseShader.uvPos__;
		var x = tile.u;
		var y = tile.v;
		var z = tile.u2 - tile.u;
		var w = tile.v2 - tile.v;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = w;
		this.beforeDraw();
		if(this.fixedBuffer == null || this.fixedBuffer.vbuf == null) {
			this.fixedBuffer = new h3d_Buffer(4,hxd_BufferFormat.get_XY_UV_RGBA());
			var k = hxd__$FloatBuffer_Float32Expand._new(0);
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			this.fixedBuffer.uploadFloats(k,0,4);
		}
		var _this = this.engine;
		var b = this.fixedBuffer;
		_this.renderBuffer(b,_this.mem.getQuadIndexes(b.vertices),2,0,-1);
		return true;
	}
	,beginDraw: function(obj,texture,isRelative,hasUVPos) {
		if(hasUVPos == null) {
			hasUVPos = false;
		}
		if(this.onBeginDraw != null && !this.onBeginDraw(obj)) {
			return false;
		}
		var stride = 8;
		var shaderChanged = this.needInitShaders;
		var paramsChanged = false;
		var objShaders = obj.shaders;
		var curShaders = this.currentShaders.next;
		while(objShaders != null && curShaders != null) {
			var s = objShaders.s;
			var t = curShaders.s;
			objShaders = objShaders.next;
			curShaders = curShaders.next;
			var prevInst = t.instance;
			if(s != t) {
				paramsChanged = true;
			}
			s.updateConstants(this.globals);
			if(s.instance != prevInst) {
				shaderChanged = true;
			}
		}
		if(objShaders != null || curShaders != null || this.baseShader.isRelative__ != isRelative || this.baseShader.hasUVPos__ != hasUVPos || this.baseShader.killAlpha__ != this.killAlpha) {
			shaderChanged = true;
		}
		if(shaderChanged) {
			var _this = this.baseShader;
			_this.constModified = true;
			_this.hasUVPos__ = hasUVPos;
			var _this = this.baseShader;
			_this.constModified = true;
			_this.isRelative__ = isRelative;
			var _this = this.baseShader;
			_this.constModified = true;
			_this.killAlpha__ = this.killAlpha;
			this.baseShader.updateConstants(this.globals);
			this.baseShaderList.next = obj.shaders;
			this.initShaders(this.baseShaderList);
		} else if(paramsChanged) {
			if(this.currentShaders != this.baseShaderList) {
				throw haxe_Exception.thrown("!");
			}
			this.currentShaders.next = obj.shaders;
		}
		this.texture = texture;
		this.stride = stride;
		this.currentObj = obj;
		return true;
	}
	,setCurrent: function() {
		h3d_impl_RenderContext.prototype.setCurrent.call(this);
		this.needInitShaders = true;
	}
	,__class__: h2d_RenderContext
});
var h2d_TileGroup = function(t,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = t;
	this.rangeMin = this.rangeMax = -1;
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.curColor = new h3d_Vector4Impl(x,y,z,w);
	this.content = new h2d_TileLayerContent();
};
$hxClasses["h2d.TileGroup"] = h2d_TileGroup;
h2d_TileGroup.__name__ = "h2d.TileGroup";
h2d_TileGroup.__super__ = h2d_Drawable;
h2d_TileGroup.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		this.addBounds(relativeTo,out,this.content.xMin,this.content.yMin,this.content.xMax - this.content.xMin,this.content.yMax - this.content.yMin);
	}
	,clear: function() {
		this.content.clear();
	}
	,onRemove: function() {
		this.content.dispose();
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,setDefaultColor: function(rgb,alpha) {
		if(alpha == null) {
			alpha = 1.0;
		}
		this.curColor.x = (rgb >> 16 & 255) / 255;
		this.curColor.y = (rgb >> 8 & 255) / 255;
		this.curColor.z = (rgb & 255) / 255;
		this.curColor.w = alpha;
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.visible) {
			var _this = this.content;
			if(_this.buffer == null || _this.buffer.vbuf == null) {
				_this.alloc(h3d_Engine.CURRENT);
			}
		}
	}
	,drawWith: function(ctx,obj) {
		var max = this.content.triCount();
		if(max == 0) {
			return;
		}
		if(!ctx.beginDrawBatchState(obj)) {
			return;
		}
		var min = this.rangeMin < 0 ? 0 : this.rangeMin * 2;
		if(this.rangeMax > 0 && this.rangeMax < max * 2) {
			max = this.rangeMax * 2;
		}
		var _this = this.content;
		if(_this.buffer == null || _this.buffer.vbuf == null) {
			_this.alloc(h3d_Engine.CURRENT);
		}
		_this.state.drawQuads(ctx,_this.buffer,min,max - min);
	}
	,__class__: h2d_TileGroup
});
var h2d_ScaleGrid = function(tile,borderL,borderT,borderR,borderB,parent) {
	this.currentScaleY = 1.;
	this.currentScaleX = 1.;
	this.borderScale = 1.0;
	h2d_TileGroup.call(this,tile,parent);
	this.set_borderLeft(borderL);
	this.set_borderRight(borderR != null ? borderR : borderL);
	this.set_borderTop(borderT);
	this.set_borderBottom(borderB != null ? borderB : borderT);
	this.set_width(tile.width);
	this.set_height(tile.height);
};
$hxClasses["h2d.ScaleGrid"] = h2d_ScaleGrid;
h2d_ScaleGrid.__name__ = "h2d.ScaleGrid";
h2d_ScaleGrid.__super__ = h2d_TileGroup;
h2d_ScaleGrid.prototype = $extend(h2d_TileGroup.prototype,{
	set_tileBorders: function(b) {
		if(this.tileBorders == b) {
			return b;
		}
		this.tileBorders = b;
		this.clear();
		return b;
	}
	,set_tileCenter: function(b) {
		if(this.tileCenter == b) {
			return b;
		}
		this.tileCenter = b;
		this.clear();
		return b;
	}
	,set_ignoreScale: function(b) {
		if(this.ignoreScale == b) {
			return b;
		}
		this.ignoreScale = b;
		this.clear();
		return b;
	}
	,set_width: function(w) {
		if(this.width == w) {
			return w;
		}
		this.width = w;
		this.clear();
		return w;
	}
	,set_height: function(h) {
		if(this.height == h) {
			return h;
		}
		this.height = h;
		this.clear();
		return h;
	}
	,set_borderTop: function(top) {
		if(this.borderTop == top) {
			return top;
		}
		this.borderTop = top;
		this.clear();
		return top;
	}
	,set_borderBottom: function(bot) {
		if(this.borderBottom == bot) {
			return bot;
		}
		this.borderBottom = bot;
		this.clear();
		return bot;
	}
	,set_borderLeft: function(left) {
		if(this.borderLeft == left) {
			return left;
		}
		this.borderLeft = left;
		this.clear();
		return left;
	}
	,set_borderRight: function(right) {
		if(this.borderRight == right) {
			return right;
		}
		this.borderRight = right;
		this.clear();
		return right;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		this.checkUpdate();
		h2d_TileGroup.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null && this.tile.width == 1 && this.tile.height == 1) {
			this.addBounds(relativeTo,out,0,0,this.width,this.height);
		}
	}
	,checkUpdate: function() {
		var needUpdate = false;
		if(this.ignoreScale) {
			this.syncPos();
			var _this_a = 1;
			var _this_b = 0;
			var _this_c = 0;
			var _this_d = 1;
			var _this_x = 0;
			var _this_y = 0;
			_this_a = this.matA;
			_this_b = this.matB;
			_this_c = this.matC;
			_this_d = this.matD;
			_this_x = this.absX;
			_this_y = this.absY;
			var x = 0.;
			var y = 0.;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var s_x = x;
			var s_y = y;
			s_x = Math.sqrt(_this_a * _this_a + _this_b * _this_b);
			s_y = Math.sqrt(_this_c * _this_c + _this_d * _this_d);
			if(_this_a * _this_d - _this_b * _this_c < 0) {
				s_x *= -1;
				s_y *= -1;
			}
			if(this.currentScaleX != s_x || this.currentScaleY != s_y) {
				needUpdate = true;
				this.currentScaleX = s_x;
				this.currentScaleY = s_y;
			}
		}
		if(this.content.isEmpty() || this.tile != this.contentTile) {
			this.contentTile = this.tile;
			needUpdate = true;
		}
		if(needUpdate) {
			this.clear();
			this.updateContent();
		}
	}
	,updateContent: function() {
		if(this.tile != null && this.tile.width == 1 && this.tile.height == 1) {
			return;
		}
		var bt = this.borderTop;
		var bb = this.borderBottom;
		var bl = this.borderLeft;
		var br = this.borderRight;
		var unscaledBl = bl * this.borderScale;
		var unscaledBr = br * this.borderScale;
		var unscaledBt = bt * this.borderScale;
		var unscaledBb = bb * this.borderScale;
		var invScaleX = 1.;
		var invScaleY = 1.;
		if(this.ignoreScale) {
			this.syncPos();
			var _this_a = 1;
			var _this_b = 0;
			var _this_c = 0;
			var _this_d = 1;
			var _this_x = 0;
			var _this_y = 0;
			_this_a = this.matA;
			_this_b = this.matB;
			_this_c = this.matC;
			_this_d = this.matD;
			_this_x = this.absX;
			_this_y = this.absY;
			var x = 0.;
			var y = 0.;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var s_x = x;
			var s_y = y;
			s_x = Math.sqrt(_this_a * _this_a + _this_b * _this_b);
			s_y = Math.sqrt(_this_c * _this_c + _this_d * _this_d);
			if(_this_a * _this_d - _this_b * _this_c < 0) {
				s_x *= -1;
				s_y *= -1;
			}
			if(s_x == 0. || s_y == 0.) {
				return;
			}
			invScaleX /= s_x;
			invScaleY /= s_y;
			unscaledBl *= invScaleX;
			unscaledBr *= invScaleX;
			unscaledBt *= invScaleY;
			unscaledBb *= invScaleY;
		}
		var t = this.tile.sub(0,0,bl,bt);
		t.scaleToSize(unscaledBl,unscaledBt);
		var color = this.curColor;
		this.content.add(0,0,color.x,color.y,color.z,color.w,t);
		t = this.tile.sub(this.tile.width - br,0,br,bt);
		t.scaleToSize(unscaledBr,unscaledBt);
		var color = this.curColor;
		this.content.add(this.width - unscaledBr,0,color.x,color.y,color.z,color.w,t);
		t = this.tile.sub(0,this.tile.height - bb,bl,bb);
		t.scaleToSize(unscaledBl,unscaledBb);
		var color = this.curColor;
		this.content.add(0,this.height - unscaledBb,color.x,color.y,color.z,color.w,t);
		t = this.tile.sub(this.tile.width - br,this.tile.height - bb,br,bb);
		t.scaleToSize(unscaledBr,unscaledBb);
		var color = this.curColor;
		this.content.add(this.width - unscaledBr,this.height - unscaledBb,color.x,color.y,color.z,color.w,t);
		var innerTileWidth = this.tile.width - (br + bl);
		var innerTileHeight = this.tile.height - (bb + bt);
		var innerWidth = this.width - (unscaledBl + unscaledBr);
		var innerHeight = this.height - (unscaledBt + unscaledBb);
		if(!this.tileBorders) {
			var t = this.tile.sub(bl,0,innerTileWidth,bt);
			t.scaleToSize(innerWidth,unscaledBt);
			var color = this.curColor;
			this.content.add(unscaledBl,0,color.x,color.y,color.z,color.w,t);
			var t = this.tile.sub(bl,this.tile.height - bb,innerTileWidth,bb);
			t.scaleToSize(innerWidth,unscaledBb);
			var color = this.curColor;
			this.content.add(unscaledBl,innerHeight + unscaledBt,color.x,color.y,color.z,color.w,t);
			var t = this.tile.sub(0,bt,bl,innerTileHeight);
			t.scaleToSize(unscaledBl,innerHeight);
			var color = this.curColor;
			this.content.add(0,unscaledBt,color.x,color.y,color.z,color.w,t);
			var t = this.tile.sub(this.tile.width - br,bt,br,innerTileHeight);
			t.scaleToSize(unscaledBr,innerHeight);
			var color = this.curColor;
			this.content.add(innerWidth + unscaledBl,unscaledBt,color.x,color.y,color.z,color.w,t);
		} else {
			var unscaledInnerTileWidth = innerTileWidth * invScaleX;
			var unscaledInnerTileHeight = innerTileHeight * invScaleY;
			var rw = innerWidth / unscaledInnerTileWidth | 0;
			var _g = 0;
			var _g1 = rw;
			while(_g < _g1) {
				var x = _g++;
				var t = this.tile.sub(bl,0,innerTileWidth,bt);
				t.scaleToSize(unscaledInnerTileWidth,unscaledBt);
				var color = this.curColor;
				this.content.add(unscaledBl + x * unscaledInnerTileWidth,0,color.x,color.y,color.z,color.w,t);
				t = this.tile.sub(bl,this.tile.height - bb,innerTileWidth,bb);
				t.scaleToSize(unscaledInnerTileWidth,unscaledBb);
				var color1 = this.curColor;
				this.content.add(unscaledBl + x * unscaledInnerTileWidth,this.height - unscaledBb,color1.x,color1.y,color1.z,color1.w,t);
			}
			var dx = innerWidth - rw * unscaledInnerTileWidth;
			if(dx > 0) {
				var t = this.tile.sub(bl,0,dx / invScaleX,bt);
				t.scaleToSize(dx,unscaledBt);
				var color = this.curColor;
				this.content.add(unscaledBl + rw * unscaledInnerTileWidth,0,color.x,color.y,color.z,color.w,t);
				t = this.tile.sub(bl,this.tile.height - bb,dx / invScaleX,bb);
				t.scaleToSize(dx,unscaledBb);
				var color = this.curColor;
				this.content.add(unscaledBl + rw * unscaledInnerTileWidth,this.height - unscaledBb,color.x,color.y,color.z,color.w,t);
			}
			var rh = innerHeight / unscaledInnerTileHeight | 0;
			var _g = 0;
			var _g1 = rh;
			while(_g < _g1) {
				var y = _g++;
				var t = this.tile.sub(0,bt,bl,innerTileHeight);
				t.scaleToSize(unscaledBl,unscaledInnerTileHeight);
				var color = this.curColor;
				this.content.add(0,unscaledBt + y * unscaledInnerTileHeight,color.x,color.y,color.z,color.w,t);
				t = this.tile.sub(this.tile.width - br,bt,br,innerTileHeight);
				t.scaleToSize(unscaledBr,unscaledInnerTileHeight);
				var color1 = this.curColor;
				this.content.add(this.width - unscaledBr,unscaledBt + y * unscaledInnerTileHeight,color1.x,color1.y,color1.z,color1.w,t);
			}
			var dy = innerHeight - rh * unscaledInnerTileHeight;
			if(dy > 0) {
				var t = this.tile.sub(0,bt,bl,dy / invScaleY);
				t.scaleToSize(unscaledBl,dy);
				var color = this.curColor;
				this.content.add(0,bt + rh * unscaledInnerTileHeight,color.x,color.y,color.z,color.w,t);
				t = this.tile.sub(this.tile.width - br,bt,br,dy / invScaleY);
				t.scaleToSize(unscaledBr,dy);
				var color = this.curColor;
				this.content.add(this.width - unscaledBr,unscaledBt + rh * unscaledInnerTileHeight,color.x,color.y,color.z,color.w,t);
			}
		}
		if(!this.tileCenter) {
			var t = this.tile.sub(bl,bt,innerTileWidth,innerTileHeight);
			t.scaleToSize(this.width - (unscaledBr + unscaledBl),this.height - (unscaledBt + unscaledBb));
			var color = this.curColor;
			this.content.add(unscaledBl,unscaledBt,color.x,color.y,color.z,color.w,t);
		} else {
			var unscaledInnerTileWidth = innerTileWidth * invScaleX;
			var unscaledInnerTileHeight = innerTileHeight * invScaleY;
			var rw = (this.width - (unscaledBr + unscaledBl)) / unscaledInnerTileWidth | 0;
			var rh = innerHeight / unscaledInnerTileHeight | 0;
			var _g = 0;
			var _g1 = rh;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g3 = rw;
				while(_g2 < _g3) {
					var x = _g2++;
					var t = this.tile.sub(bl,bt,unscaledInnerTileWidth,unscaledInnerTileHeight);
					var color = this.curColor;
					this.content.add(unscaledBl + x * unscaledInnerTileWidth,unscaledBt + y * unscaledInnerTileHeight,color.x,color.y,color.z,color.w,t);
				}
			}
			var dx = innerWidth - rw * unscaledInnerTileWidth;
			if(dx > 0) {
				var _g = 0;
				var _g1 = rh;
				while(_g < _g1) {
					var y = _g++;
					var t = this.tile.sub(bl,bt,dx,unscaledInnerTileHeight);
					var color = this.curColor;
					this.content.add(unscaledBl + rw * unscaledInnerTileWidth,unscaledBt + y * unscaledInnerTileHeight,color.x,color.y,color.z,color.w,t);
				}
			}
			var dy = innerHeight - rh * unscaledInnerTileHeight;
			if(dy > 0) {
				var _g = 0;
				var _g1 = rw;
				while(_g < _g1) {
					var x = _g++;
					var t = this.tile.sub(bl,bt,unscaledInnerTileWidth,dy);
					var color = this.curColor;
					this.content.add(unscaledBl + x * unscaledInnerTileWidth,unscaledBt + rh * unscaledInnerTileHeight,color.x,color.y,color.z,color.w,t);
				}
			}
			if(dx > 0 && dy > 0) {
				var t = this.tile.sub(bl,bt,dx,dy);
				var color = this.curColor;
				this.content.add(unscaledBl + rw * unscaledInnerTileWidth,unscaledBt + rh * unscaledInnerTileHeight,color.x,color.y,color.z,color.w,t);
			}
		}
	}
	,draw: function(ctx) {
		if(this.tile != null && this.tile.width == 1 && this.tile.height == 1) {
			var ow = this.tile.width;
			var oh = this.tile.height;
			this.tile.width = this.width;
			this.tile.height = this.height;
			this.emitTile(ctx,this.tile);
			this.tile.width = ow;
			this.tile.height = oh;
			return;
		}
		h2d_TileGroup.prototype.draw.call(this,ctx);
	}
	,sync: function(ctx) {
		this.checkUpdate();
		h2d_TileGroup.prototype.sync.call(this,ctx);
	}
	,__class__: h2d_ScaleGrid
});
var h2d_ScaleModeAlign = $hxEnums["h2d.ScaleModeAlign"] = { __ename__:true,__constructs__:null
	,Left: {_hx_name:"Left",_hx_index:0,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:1,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Center: {_hx_name:"Center",_hx_index:2,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Top: {_hx_name:"Top",_hx_index:3,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Bottom: {_hx_name:"Bottom",_hx_index:4,__enum__:"h2d.ScaleModeAlign",toString:$estr}
};
h2d_ScaleModeAlign.__constructs__ = [h2d_ScaleModeAlign.Left,h2d_ScaleModeAlign.Right,h2d_ScaleModeAlign.Center,h2d_ScaleModeAlign.Top,h2d_ScaleModeAlign.Bottom];
h2d_ScaleModeAlign.__empty_constructs__ = [h2d_ScaleModeAlign.Left,h2d_ScaleModeAlign.Right,h2d_ScaleModeAlign.Center,h2d_ScaleModeAlign.Top,h2d_ScaleModeAlign.Bottom];
var h2d_ScaleMode = $hxEnums["h2d.ScaleMode"] = { __ename__:true,__constructs__:null
	,Resize: {_hx_name:"Resize",_hx_index:0,__enum__:"h2d.ScaleMode",toString:$estr}
	,Stretch: ($_=function(width,height) { return {_hx_index:1,width:width,height:height,__enum__:"h2d.ScaleMode",toString:$estr}; },$_._hx_name="Stretch",$_.__params__ = ["width","height"],$_)
	,LetterBox: ($_=function(width,height,integerScale,horizontalAlign,verticalAlign) { return {_hx_index:2,width:width,height:height,integerScale:integerScale,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_._hx_name="LetterBox",$_.__params__ = ["width","height","integerScale","horizontalAlign","verticalAlign"],$_)
	,Fixed: ($_=function(width,height,zoom,horizontalAlign,verticalAlign) { return {_hx_index:3,width:width,height:height,zoom:zoom,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_._hx_name="Fixed",$_.__params__ = ["width","height","zoom","horizontalAlign","verticalAlign"],$_)
	,Zoom: ($_=function(level) { return {_hx_index:4,level:level,__enum__:"h2d.ScaleMode",toString:$estr}; },$_._hx_name="Zoom",$_.__params__ = ["level"],$_)
	,AutoZoom: ($_=function(minWidth,minHeight,integerScaling) { return {_hx_index:5,minWidth:minWidth,minHeight:minHeight,integerScaling:integerScaling,__enum__:"h2d.ScaleMode",toString:$estr}; },$_._hx_name="AutoZoom",$_.__params__ = ["minWidth","minHeight","integerScaling"],$_)
};
h2d_ScaleMode.__constructs__ = [h2d_ScaleMode.Resize,h2d_ScaleMode.Stretch,h2d_ScaleMode.LetterBox,h2d_ScaleMode.Fixed,h2d_ScaleMode.Zoom,h2d_ScaleMode.AutoZoom];
h2d_ScaleMode.__empty_constructs__ = [h2d_ScaleMode.Resize];
var hxd_InteractiveScene = function() { };
$hxClasses["hxd.InteractiveScene"] = hxd_InteractiveScene;
hxd_InteractiveScene.__name__ = "hxd.InteractiveScene";
hxd_InteractiveScene.__isInterface__ = true;
hxd_InteractiveScene.prototype = {
	__class__: hxd_InteractiveScene
};
var h2d_Scene = function() {
	this.scaleMode = h2d_ScaleMode.Resize;
	h2d_Layers.call(this,null);
	var e = h3d_Engine.CURRENT;
	this.ctx = new h2d_RenderContext(this);
	this._cameras = [];
	new h2d_Camera(this);
	this.set_interactiveCamera(this._cameras[0]);
	this.width = e.width;
	this.height = e.height;
	this.viewportA = 2 / e.width;
	this.viewportD = 2 / e.height;
	this.viewportX = -1;
	this.viewportY = -1;
	this.viewportScaleX = 1;
	this.viewportScaleY = 1;
	this.offsetX = 0;
	this.offsetY = 0;
	this.interactive = [];
	this.eventListeners = [];
	this.shapePoint = new h2d_col_PointImpl(0.,0.);
	this.window = hxd_Window.getInstance();
	this.posChanged = true;
};
$hxClasses["h2d.Scene"] = h2d_Scene;
h2d_Scene.__name__ = "h2d.Scene";
h2d_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h2d_Scene.__super__ = h2d_Layers;
h2d_Scene.prototype = $extend(h2d_Layers.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,set_scaleMode: function(v) {
		this.scaleMode = v;
		this.checkResize();
		return v;
	}
	,set_interactiveCamera: function(cam) {
		if(cam == null) {
			throw haxe_Exception.thrown("Interactive cammera cannot be null!");
		}
		if(cam.scene != this) {
			this.addCamera(cam);
		}
		return this.interactiveCamera = cam;
	}
	,addCamera: function(cam,pos) {
		if(cam.scene != null) {
			cam.scene.removeCamera(cam);
		}
		cam.scene = this;
		cam.posChanged = true;
		if(pos != null) {
			this._cameras.splice(pos,0,cam);
		} else {
			this._cameras.push(cam);
		}
	}
	,removeCamera: function(cam) {
		if(cam == this.interactiveCamera) {
			throw haxe_Exception.thrown("Current interactive Camera cannot be removed from camera list!");
		}
		cam.scene = null;
		HxOverrides.remove(this._cameras,cam);
	}
	,checkResize: function() {
		var _gthis = this;
		var engine = h3d_Engine.CURRENT;
		if(engine == null) {
			return;
		}
		var _g = this.scaleMode;
		switch(_g._hx_index) {
		case 0:
			var w = engine.width;
			var h = engine.height;
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = 1;
			_gthis.viewportScaleY = 1;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 1:
			var _width = _g.width;
			var _height = _g.height;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = engine.width / _width;
			_gthis.viewportScaleY = engine.height / _height;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 2:
			var _width = _g.width;
			var _height = _g.height;
			var integerScale = _g.integerScale;
			var horizontalAlign = _g.horizontalAlign;
			var verticalAlign = _g.verticalAlign;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			var a = engine.width / _width;
			var b = engine.height / _height;
			var zoom = a > b ? b : a;
			if(integerScale) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			var horizontal = horizontalAlign;
			var vertical = verticalAlign;
			_gthis.viewportA = zoom * 2 / engine.width;
			_gthis.viewportD = zoom * 2 / engine.height;
			_gthis.viewportScaleX = zoom;
			_gthis.viewportScaleY = zoom;
			if(horizontal == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.viewportX = -1;
				_gthis.offsetX = 0;
				break;
			case 1:
				_gthis.viewportX = 1 - _gthis.width * _gthis.viewportA;
				_gthis.offsetX = engine.width - _gthis.width * zoom;
				break;
			default:
				_gthis.viewportX = Math.floor((engine.width - _gthis.width * zoom) / (zoom * 2)) * _gthis.viewportA - 1.;
				_gthis.offsetX = Math.floor((engine.width - _gthis.width * zoom) / 2);
			}
			if(vertical == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.viewportY = -1;
				_gthis.offsetY = 0;
				break;
			case 4:
				_gthis.viewportY = 1 - _gthis.height * _gthis.viewportD;
				_gthis.offsetY = engine.height - _gthis.height * zoom;
				break;
			default:
				_gthis.viewportY = Math.floor((engine.height - _gthis.height * zoom) / (zoom * 2)) * _gthis.viewportD - 1.;
				_gthis.offsetY = Math.floor((engine.height - _gthis.height * zoom) / 2);
			}
			break;
		case 3:
			var _width = _g.width;
			var _height = _g.height;
			var zoom = _g.zoom;
			var horizontalAlign = _g.horizontalAlign;
			var verticalAlign = _g.verticalAlign;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			var horizontal = horizontalAlign;
			var vertical = verticalAlign;
			_gthis.viewportA = zoom * 2 / engine.width;
			_gthis.viewportD = zoom * 2 / engine.height;
			_gthis.viewportScaleX = zoom;
			_gthis.viewportScaleY = zoom;
			if(horizontal == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.viewportX = -1;
				_gthis.offsetX = 0;
				break;
			case 1:
				_gthis.viewportX = 1 - _gthis.width * _gthis.viewportA;
				_gthis.offsetX = engine.width - _gthis.width * zoom;
				break;
			default:
				_gthis.viewportX = Math.floor((engine.width - _gthis.width * zoom) / (zoom * 2)) * _gthis.viewportA - 1.;
				_gthis.offsetX = Math.floor((engine.width - _gthis.width * zoom) / 2);
			}
			if(vertical == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.viewportY = -1;
				_gthis.offsetY = 0;
				break;
			case 4:
				_gthis.viewportY = 1 - _gthis.height * _gthis.viewportD;
				_gthis.offsetY = engine.height - _gthis.height * zoom;
				break;
			default:
				_gthis.viewportY = Math.floor((engine.height - _gthis.height * zoom) / (zoom * 2)) * _gthis.viewportD - 1.;
				_gthis.offsetY = Math.floor((engine.height - _gthis.height * zoom) / 2);
			}
			break;
		case 4:
			var level = _g.level;
			var w = Math.ceil(engine.width / level);
			var h = Math.ceil(engine.height / level);
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = level;
			_gthis.viewportScaleY = level;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 5:
			var minWidth = _g.minWidth;
			var minHeight = _g.minHeight;
			var integerScaling = _g.integerScaling;
			var a = engine.width / minWidth;
			var b = engine.height / minHeight;
			var zoom = a > b ? b : a;
			if(integerScaling) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			var w = Math.ceil(engine.width / zoom);
			var h = Math.ceil(engine.height / zoom);
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = zoom;
			_gthis.viewportScaleY = zoom;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		}
	}
	,get_mouseX: function() {
		this.syncPos();
		var mx = this.window.get_mouseX();
		var _this = this.interactiveCamera;
		var mx = this.window.get_mouseX();
		var my = this.window.get_mouseY();
		var dx = (((mx - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matD - ((my - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matC) * _this.invDet - this.absX;
		if(this.matC == 0) {
			return dx / this.matA;
		}
		var my = this.window.get_mouseY();
		var _this = this.interactiveCamera;
		var mx = this.window.get_mouseX();
		var my = this.window.get_mouseY();
		var dy = (-((mx - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matB + ((my - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matA) * _this.invDet - this.absY;
		return (dx * this.matD - dy * this.matC) / (this.matA * this.matD - this.matB * this.matC);
	}
	,get_mouseY: function() {
		this.syncPos();
		var my = this.window.get_mouseY();
		var _this = this.interactiveCamera;
		var mx = this.window.get_mouseX();
		var my = this.window.get_mouseY();
		var dy = (-((mx - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matB + ((my - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matA) * _this.invDet - this.absY;
		if(this.matB == 0) {
			return dy / this.matD;
		}
		var mx = this.window.get_mouseX();
		var _this = this.interactiveCamera;
		var mx = this.window.get_mouseX();
		var my = this.window.get_mouseY();
		var dx = (((mx - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matD - ((my - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matC) * _this.invDet - this.absX;
		return (dy * this.matA - dx * this.matB) / (this.matA * this.matD - this.matB * this.matC);
	}
	,dispatchListeners: function(event) {
		this.screenToViewport(event);
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,isInteractiveVisible: function(i) {
		var s = i;
		while(s != this) {
			if(s == null || !s.visible) {
				return false;
			}
			s = s.parent;
		}
		return true;
	}
	,screenToViewport: function(e) {
		this.interactiveCamera.eventToCamera(e);
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		this.screenToViewport(event);
		var dx = event.relX - i.absX;
		var dy = event.relY - i.absY;
		var rx = (dx * i.matD - dy * i.matC) * i.invDet;
		var ry = (dy * i.matA - dx * i.matB) * i.invDet;
		event.relX = rx;
		event.relY = ry;
		i.handleEvent(event);
	}
	,handleEvent: function(event,last) {
		this.screenToViewport(event);
		var ex = event.relX;
		var ey = event.relY;
		if(ex < 0 || ey < 0 || ex >= this.width || ey >= this.height) {
			return null;
		}
		var index = last == null ? 0 : this.interactive.indexOf(last) + 1;
		var pt = this.shapePoint;
		var _g = index;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var idx = _g++;
			var i = this.interactive[idx];
			if(i == null) {
				break;
			}
			if(i.invDet == 0) {
				continue;
			}
			var dx = ex - i.absX;
			var dy = ey - i.absY;
			var rx = (dx * i.matD - dy * i.matC) * i.invDet;
			var ry = (dy * i.matA - dx * i.matB) * i.invDet;
			if(i.shape != null) {
				var _this = pt;
				var x = rx + i.shapeX;
				var y = ry + i.shapeY;
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				if(!i.shape.contains(pt)) {
					continue;
				}
			} else if(ry < 0 || rx < 0 || rx >= i.width || ry >= i.height) {
				continue;
			}
			var visible = true;
			var p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			event.relX = rx;
			event.relY = ry;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			return i;
		}
		return null;
	}
	,startCapture: function(onEvent,onCancel,touchId) {
		var _gthis = this;
		this.events.startCapture(function(e) {
			_gthis.screenToViewport(e);
			onEvent(e);
		},onCancel,touchId);
	}
	,stopCapture: function() {
		this.events.stopCapture();
	}
	,addEventTarget: function(i) {
		var i1 = i;
		var lv = 0;
		while(i1 != null) {
			i1 = i1.parent;
			++lv;
		}
		var level = lv;
		var _g = 0;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var index = _g++;
			var i1 = i;
			var i2 = this.interactive[index];
			var lv1 = level;
			var i3 = i2;
			var lv = 0;
			while(i3 != null) {
				i3 = i3.parent;
				++lv;
			}
			var lv2 = lv;
			var p1 = i1;
			var p2 = i2;
			while(lv1 > lv2) {
				i1 = p1;
				p1 = p1.parent;
				--lv1;
			}
			while(lv2 > lv1) {
				i2 = p2;
				p2 = p2.parent;
				--lv2;
			}
			while(p1 != p2) {
				i1 = p1;
				p1 = p1.parent;
				i2 = p2;
				p2 = p2.parent;
			}
			var id = -1;
			var _g2 = 0;
			var _g3 = p1.children.length;
			while(_g2 < _g3) {
				var k = _g2++;
				if(p1.children[k] == i1) {
					id = k;
					break;
				}
			}
			var tmp = id;
			var id1 = -1;
			var _g4 = 0;
			var _g5 = p2.children.length;
			while(_g4 < _g5) {
				var k1 = _g4++;
				if(p2.children[k1] == i2) {
					id1 = k1;
					break;
				}
			}
			if(tmp > id1) {
				this.interactive.splice(index,0,i);
				return;
			}
		}
		this.interactive.push(i);
	}
	,removeEventTarget: function(i,notify) {
		if(notify == null) {
			notify = false;
		}
		HxOverrides.remove(this.interactive,i);
		if(notify && this.events != null) {
			this.events.onRemove(i);
		}
	}
	,setElapsedTime: function(v) {
		this.ctx.elapsedTime = v;
	}
	,render: function(engine) {
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.mark("s2d");
		this.sync(this.ctx);
		if(this.children.length != 0) {
			this.ctx.begin();
			this.ctx.drawScene();
			this.ctx.end();
		}
		this.mark("vsync");
	}
	,mark: function(name) {
	}
	,sync: function(ctx) {
		var forceCamSync = this.posChanged;
		if(!this.allocated) {
			this.onAdd();
		}
		h2d_Layers.prototype.sync.call(this,ctx);
		var _g = 0;
		var _g1 = this._cameras;
		while(_g < _g1.length) {
			var cam = _g1[_g];
			++_g;
			cam.sync(ctx,forceCamSync);
		}
	}
	,clipBounds: function(ctx,bounds,scaleX,scaleY) {
		if(scaleY == null) {
			scaleY = 1.;
		}
		if(scaleX == null) {
			scaleX = 1.;
		}
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(ctx.inFilter != null) {
			var f1 = ctx.baseShader.filterMatrixA__;
			var f2 = ctx.baseShader.filterMatrixB__;
			var tmpA = this.matA * f1.x + this.matB * f1.y;
			var tmpB = this.matA * f2.x + this.matB * f2.y;
			var tmpC = this.matC * f1.x + this.matD * f1.y;
			var tmpD = this.matC * f2.x + this.matD * f2.y;
			var tmpX = this.absX * f1.x + this.absY * f1.y + f1.z;
			var tmpY = this.absX * f2.x + this.absY * f2.y + f2.z;
			matA = (tmpA * ctx.viewA + tmpB * ctx.viewC) / scaleX;
			matB = (tmpA * ctx.viewB + tmpB * ctx.viewD) / scaleY;
			matC = (tmpC * ctx.viewA + tmpD * ctx.viewC) / scaleX;
			matD = (tmpC * ctx.viewB + tmpD * ctx.viewD) / scaleY;
			absX = tmpX * ctx.viewA + tmpY * ctx.viewC + ctx.viewX;
			absY = tmpX * ctx.viewB + tmpY * ctx.viewD + ctx.viewY;
		} else {
			matA = (this.matA * ctx.viewA + this.matB * ctx.viewC) / scaleX;
			matB = (this.matA * ctx.viewB + this.matB * ctx.viewD) / scaleY;
			matC = (this.matC * ctx.viewA + this.matD * ctx.viewC) / scaleX;
			matD = (this.matC * ctx.viewB + this.matD * ctx.viewD) / scaleY;
			absX = this.absX * ctx.viewA + this.absY * ctx.viewC + ctx.viewX;
			absY = this.absX * ctx.viewB + this.absY * ctx.viewD + ctx.viewY;
		}
		var invDet = 1 / (matA * matD - matB * matC);
		bounds.xMin = ((-1 - absX) * matD + (absY + 1) * matC) * invDet;
		bounds.yMin = ((absX + 1) * matB + (-1 - absY) * matA) * invDet;
		bounds.xMax = ((1 - absX) * matD + (absY - 1) * matC) * invDet;
		bounds.yMax = ((absX - 1) * matB + (1 - absY) * matA) * invDet;
	}
	,drawContent: function(ctx) {
		if(ctx.front2back) {
			var _g = 0;
			var _g1 = this._cameras;
			while(_g < _g1.length) {
				var cam = _g1[_g];
				++_g;
				if(!cam.visible) {
					continue;
				}
				var i = this.children.length;
				var l = this.layerCount;
				cam.enter(ctx);
				while(l-- > 0) {
					var top = l == 0 ? 0 : this.layersIndexes[l - 1];
					if(cam.layerVisible(l)) {
						while(i >= top) this.children[i--].drawRec(ctx);
					} else {
						i = top - 1;
					}
				}
				cam.exit(ctx);
			}
			this.draw(ctx);
		} else {
			this.draw(ctx);
			var _g = 0;
			var _g1 = this._cameras;
			while(_g < _g1.length) {
				var cam = _g1[_g];
				++_g;
				if(!cam.visible) {
					continue;
				}
				var i = 0;
				var l = 0;
				cam.enter(ctx);
				while(l < this.layerCount) {
					var top = this.layersIndexes[l++];
					if(cam.layerVisible(l - 1)) {
						while(i < top) this.children[i++].drawRec(ctx);
					} else {
						i = top;
					}
				}
				cam.exit(ctx);
			}
		}
	}
	,onAdd: function() {
		this.checkResize();
		h2d_Layers.prototype.onAdd.call(this);
		this.window.addResizeEvent($bind(this,this.checkResize));
	}
	,onRemove: function() {
		h2d_Layers.prototype.onRemove.call(this);
		this.window.removeResizeEvent($bind(this,this.checkResize));
	}
	,__class__: h2d_Scene
});
var h2d_SpriteBatch = function(t,parent) {
	this.hasUpdate = false;
	this.hasRotationScale = false;
	h2d_Drawable.call(this,parent);
	this.tile = t;
	this.state = new h2d_impl_BatchDrawState();
};
$hxClasses["h2d.SpriteBatch"] = h2d_SpriteBatch;
h2d_SpriteBatch.__name__ = "h2d.SpriteBatch";
h2d_SpriteBatch.__super__ = h2d_Drawable;
h2d_SpriteBatch.prototype = $extend(h2d_Drawable.prototype,{
	add: function(e,before) {
		if(before == null) {
			before = false;
		}
		e.batch = this;
		if(this.first == null) {
			this.first = this.last = e;
			e.prev = e.next = null;
		} else if(before) {
			e.prev = null;
			e.next = this.first;
			this.first.prev = e;
			this.first = e;
		} else {
			this.last.next = e;
			e.prev = this.last;
			e.next = null;
			this.last = e;
		}
		return e;
	}
	,clear: function() {
		this.first = this.last = null;
		this.flush();
	}
	,'delete': function(e) {
		if(e.prev == null) {
			if(this.first == e) {
				this.first = e.next;
			}
		} else {
			e.prev.next = e.next;
		}
		if(e.next == null) {
			if(this.last == e) {
				this.last = e.prev;
			}
		} else {
			e.next.prev = e.prev;
		}
		e.batch = null;
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.hasUpdate) {
			var e = this.first;
			while(e != null) {
				if(!e.update(ctx.elapsedTime)) {
					e.remove();
				}
				e = e.next;
			}
		}
		this.flush();
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		var e = this.first;
		while(e != null) {
			var t = e.t;
			if(this.hasRotationScale) {
				var ca = Math.cos(e.rotation);
				var sa = Math.sin(e.rotation);
				var hx = t.width;
				var hy = t.height;
				var px = t.dx * e.scaleX;
				var py = t.dy * e.scaleY;
				var x = px * ca - py * sa + e.x;
				var y = py * ca + px * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px1 = (t.dx + hx) * e.scaleX;
				var py1 = t.dy * e.scaleY;
				x = px1 * ca - py1 * sa + e.x;
				y = py1 * ca + px1 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px2 = t.dx * e.scaleX;
				var py2 = (t.dy + hy) * e.scaleY;
				x = px2 * ca - py2 * sa + e.x;
				y = py2 * ca + px2 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px3 = (t.dx + hx) * e.scaleX;
				var py3 = (t.dy + hy) * e.scaleY;
				x = px3 * ca - py3 * sa + e.x;
				y = py3 * ca + px3 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
			} else {
				this.addBounds(relativeTo,out,e.x + t.dx,e.y + t.dy,t.width,t.height);
			}
			e = e.next;
		}
	}
	,flush: function() {
		if(this.first == null) {
			return;
		}
		if(this.tmpBuf == null) {
			this.tmpBuf = hxd__$FloatBuffer_Float32Expand._new(0);
		}
		var pos = 0;
		var e = this.first;
		var tmp = this.tmpBuf;
		var bufferVertices = 0;
		this.state.clear();
		while(e != null) {
			if(!e.visible) {
				e = e.next;
				continue;
			}
			var t = e.t;
			if(t != null) {
				this.state.setTexture(t.innerTex);
			}
			var _this = this.state;
			_this.tail.count += 4;
			_this.totalCount += 4;
			var _g = tmp.pos;
			var _g1 = pos + 32;
			while(_g < _g1) {
				var i = _g++;
				if(tmp.pos == tmp.array.length) {
					var newSize = tmp.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(tmp.array);
					tmp.array = newArray;
				}
				tmp.array[tmp.pos++] = 0.;
			}
			if(this.hasRotationScale) {
				var ca = Math.cos(e.rotation);
				var sa = Math.sin(e.rotation);
				var hx = t.width;
				var hy = t.height;
				var px = t.dx * e.scaleX;
				var py = t.dy * e.scaleY;
				tmp.array[pos++] = px * ca - py * sa + e.x;
				tmp.array[pos++] = py * ca + px * sa + e.y;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px1 = (t.dx + hx) * e.scaleX;
				var py1 = t.dy * e.scaleY;
				tmp.array[pos++] = px1 * ca - py1 * sa + e.x;
				tmp.array[pos++] = py1 * ca + px1 * sa + e.y;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px2 = t.dx * e.scaleX;
				var py2 = (t.dy + hy) * e.scaleY;
				tmp.array[pos++] = px2 * ca - py2 * sa + e.x;
				tmp.array[pos++] = py2 * ca + px2 * sa + e.y;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px3 = (t.dx + hx) * e.scaleX;
				var py3 = (t.dy + hy) * e.scaleY;
				tmp.array[pos++] = px3 * ca - py3 * sa + e.x;
				tmp.array[pos++] = py3 * ca + px3 * sa + e.y;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
			} else {
				var sx = e.x + t.dx;
				var sy = e.y + t.dy;
				tmp.array[pos++] = sx;
				tmp.array[pos++] = sy;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx + t.width + 0.1;
				tmp.array[pos++] = sy;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx;
				tmp.array[pos++] = sy + t.height + 0.1;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx + t.width + 0.1;
				tmp.array[pos++] = sy + t.height + 0.1;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
			}
			e = e.next;
		}
		bufferVertices = pos >> 3;
		if(this.buffer != null && this.buffer.vbuf != null) {
			if(this.buffer.vertices >= bufferVertices) {
				this.buffer.uploadFloats(this.tmpBuf,0,bufferVertices);
				return;
			}
			this.buffer.dispose();
			this.buffer = null;
		}
		this.empty = bufferVertices == 0;
		if(bufferVertices > 0) {
			this.buffer = h3d_Buffer.ofSubFloats(this.tmpBuf,bufferVertices,hxd_BufferFormat.get_XY_UV_RGBA(),[h3d_BufferFlag.Dynamic]);
		}
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,drawWith: function(ctx,obj) {
		if(this.first == null || this.buffer == null || this.buffer.vbuf == null || this.empty) {
			return;
		}
		if(!ctx.beginDrawBatchState(obj)) {
			return;
		}
		var engine = ctx.engine;
		this.state.drawQuads(ctx,this.buffer);
	}
	,onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		this.state.clear();
	}
	,__class__: h2d_SpriteBatch
});
var h2d_Align = $hxEnums["h2d.Align"] = { __ename__:true,__constructs__:null
	,Left: {_hx_name:"Left",_hx_index:0,__enum__:"h2d.Align",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:1,__enum__:"h2d.Align",toString:$estr}
	,Center: {_hx_name:"Center",_hx_index:2,__enum__:"h2d.Align",toString:$estr}
	,MultilineRight: {_hx_name:"MultilineRight",_hx_index:3,__enum__:"h2d.Align",toString:$estr}
	,MultilineCenter: {_hx_name:"MultilineCenter",_hx_index:4,__enum__:"h2d.Align",toString:$estr}
};
h2d_Align.__constructs__ = [h2d_Align.Left,h2d_Align.Right,h2d_Align.Center,h2d_Align.MultilineRight,h2d_Align.MultilineCenter];
h2d_Align.__empty_constructs__ = [h2d_Align.Left,h2d_Align.Right,h2d_Align.Center,h2d_Align.MultilineRight,h2d_Align.MultilineCenter];
var h2d_Tile = function(tex,x,y,w,h,dx,dy) {
	if(dy == null) {
		dy = 0;
	}
	if(dx == null) {
		dx = 0;
	}
	this.innerTex = tex;
	this.x = x;
	this.y = y;
	this.width = w;
	this.height = h;
	this.dx = dx;
	this.dy = dy;
	if(tex != null) {
		this.setTexture(tex);
	}
};
$hxClasses["h2d.Tile"] = h2d_Tile;
h2d_Tile.__name__ = "h2d.Tile";
h2d_Tile.fromColor = function(color,width,height,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	var t = new h2d_Tile(h3d_mat_Texture.fromColor(color,alpha),0,0,1,1);
	t.width = width;
	t.height = height;
	return t;
};
h2d_Tile.fromTexture = function(t) {
	return new h2d_Tile(t,0,0,t.width,t.height);
};
h2d_Tile.fromPixels = function(pixels) {
	var pix2 = pixels.makeSquare(true);
	var t = h3d_mat_Texture.fromPixels(pix2,h3d_mat_Texture.nativeFormat);
	if(pix2 != pixels) {
		pix2.dispose();
	}
	return new h2d_Tile(t,0,0,pixels.width,pixels.height);
};
h2d_Tile.prototype = {
	setTexture: function(tex) {
		this.innerTex = tex;
		if(tex != null) {
			this.u = this.x / tex.width;
			this.v = this.y / tex.height;
			this.u2 = (this.x + this.width) / tex.width;
			this.v2 = (this.y + this.height) / tex.height;
		}
	}
	,sub: function(x,y,w,h,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		return new h2d_Tile(this.innerTex,this.x + x,this.y + y,w,h,dx,dy);
	}
	,center: function() {
		return this.sub(0,0,this.width,this.height,-(this.width * .5),-(this.height * .5));
	}
	,scaleToSize: function(w,h) {
		this.width = w;
		this.height = h;
	}
	,clone: function() {
		var t = new h2d_Tile(null,this.x,this.y,this.width,this.height,this.dx,this.dy);
		t.innerTex = this.innerTex;
		t.u = this.u;
		t.u2 = this.u2;
		t.v = this.v;
		t.v2 = this.v2;
		return t;
	}
	,__class__: h2d_Tile
};
var h2d_TileLayerContent = function() {
	this.useAllocatorLimit = 1024;
	h3d_prim_Primitive.call(this);
	this.state = new h2d_impl_BatchDrawState();
	this.clear();
};
$hxClasses["h2d.TileLayerContent"] = h2d_TileLayerContent;
h2d_TileLayerContent.__name__ = "h2d.TileLayerContent";
h2d_TileLayerContent.__super__ = h3d_prim_Primitive;
h2d_TileLayerContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	clear: function() {
		this.tmp = hxd__$FloatBuffer_Float32Expand._new(0);
		if(this.buffer != null) {
			if(this.buffer.vertices * 8 < this.useAllocatorLimit) {
				hxd_impl_Allocator.get().disposeBuffer(this.buffer);
			} else {
				this.buffer.dispose();
			}
		}
		this.buffer = null;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.xMax = -Infinity;
		this.yMax = -Infinity;
		this.state.clear();
	}
	,isEmpty: function() {
		return this.triCount() == 0;
	}
	,triCount: function() {
		if(this.buffer == null) {
			return this.tmp.pos >> 4;
		} else {
			return this.buffer.vertices >> 1;
		}
	}
	,add: function(x,y,r,g,b,a,t) {
		var sx = x + t.dx;
		var sy = y + t.dy;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sy;
		var this1 = this.tmp;
		var v = t.u;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var this1 = this.tmp;
		var v = sx + t.width;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sy;
		var this1 = this.tmp;
		var v = t.u2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		var this1 = this.tmp;
		var v = sy + t.height;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.u;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var this1 = this.tmp;
		var v = sx + t.width;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = sy + t.height;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.u2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var x1 = x + t.dx;
		var y1 = y + t.dy;
		if(x1 < this.xMin) {
			this.xMin = x1;
		}
		if(y1 < this.yMin) {
			this.yMin = y1;
		}
		x1 += t.width;
		y1 += t.height;
		if(x1 > this.xMax) {
			this.xMax = x1;
		}
		if(y1 > this.yMax) {
			this.yMax = y1;
		}
		if(t != null) {
			this.state.setTexture(t.innerTex);
		}
		var _this = this.state;
		_this.tail.count += 4;
		_this.totalCount += 4;
	}
	,addTransform: function(x,y,sx,sy,r,c,t) {
		var _gthis = this;
		var ca = Math.cos(r);
		var sa = Math.sin(r);
		var hx = t.width;
		var hy = t.height;
		var dx = t.dx * sx;
		var dy = t.dy * sy;
		var px = dx * ca - dy * sa + x;
		var py = dy * ca + dx * sa + y;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = px;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = py;
		var this1 = this.tmp;
		var v = t.u;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.x;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.y;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.z;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.w;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		if(px < _gthis.xMin) {
			_gthis.xMin = px;
		}
		if(py < _gthis.yMin) {
			_gthis.yMin = py;
		}
		if(px > _gthis.xMax) {
			_gthis.xMax = px;
		}
		if(py > _gthis.yMax) {
			_gthis.yMax = py;
		}
		var dx = (t.dx + hx) * sx;
		var dy = t.dy * sy;
		var px = dx * ca - dy * sa + x;
		var py = dy * ca + dx * sa + y;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = px;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = py;
		var this1 = this.tmp;
		var v = t.u2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.x;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.y;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.z;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.w;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		if(px < _gthis.xMin) {
			_gthis.xMin = px;
		}
		if(py < _gthis.yMin) {
			_gthis.yMin = py;
		}
		if(px > _gthis.xMax) {
			_gthis.xMax = px;
		}
		if(py > _gthis.yMax) {
			_gthis.yMax = py;
		}
		var dx = t.dx * sx;
		var dy = (t.dy + hy) * sy;
		var px = dx * ca - dy * sa + x;
		var py = dy * ca + dx * sa + y;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = px;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = py;
		var this1 = this.tmp;
		var v = t.u;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.x;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.y;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.z;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.w;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		if(px < _gthis.xMin) {
			_gthis.xMin = px;
		}
		if(py < _gthis.yMin) {
			_gthis.yMin = py;
		}
		if(px > _gthis.xMax) {
			_gthis.xMax = px;
		}
		if(py > _gthis.yMax) {
			_gthis.yMax = py;
		}
		var dx = (t.dx + hx) * sx;
		var dy = (t.dy + hy) * sy;
		var px = dx * ca - dy * sa + x;
		var py = dy * ca + dx * sa + y;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = px;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = py;
		var this1 = this.tmp;
		var v = t.u2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.x;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.y;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.z;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = c.w;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		if(px < _gthis.xMin) {
			_gthis.xMin = px;
		}
		if(py < _gthis.yMin) {
			_gthis.yMin = py;
		}
		if(px > _gthis.xMax) {
			_gthis.xMax = px;
		}
		if(py > _gthis.yMax) {
			_gthis.yMax = py;
		}
		if(t != null) {
			this.state.setTexture(t.innerTex);
		}
		var _this = this.state;
		_this.tail.count += 4;
		_this.totalCount += 4;
	}
	,alloc: function(engine) {
		if(this.tmp == null) {
			this.clear();
		}
		if(this.tmp.pos > 0) {
			this.buffer = this.tmp.pos < this.useAllocatorLimit ? hxd_impl_Allocator.get().ofFloats(this.tmp,hxd_BufferFormat.get_XY_UV_RGBA()) : h3d_Buffer.ofFloats(this.tmp,hxd_BufferFormat.get_XY_UV_RGBA());
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			if(this.buffer.vertices * 8 < this.useAllocatorLimit) {
				hxd_impl_Allocator.get().disposeBuffer(this.buffer);
			} else {
				this.buffer.dispose();
			}
			this.buffer = null;
		}
		h3d_prim_Primitive.prototype.dispose.call(this);
	}
	,__class__: h2d_TileLayerContent
});
var h2d_col_Collider = function() { };
$hxClasses["h2d.col.Collider"] = h2d_col_Collider;
h2d_col_Collider.__name__ = "h2d.col.Collider";
h2d_col_Collider.prototype = {
	__class__: h2d_col_Collider
};
var h2d_col_Bounds = function() {
	this.xMin = 1e20;
	this.yMin = 1e20;
	this.xMax = -1e20;
	this.yMax = -1e20;
};
$hxClasses["h2d.col.Bounds"] = h2d_col_Bounds;
h2d_col_Bounds.__name__ = "h2d.col.Bounds";
h2d_col_Bounds.__super__ = h2d_col_Collider;
h2d_col_Bounds.prototype = $extend(h2d_col_Collider.prototype,{
	contains: function(p) {
		if(p.x >= this.xMin && p.x < this.xMax && p.y >= this.yMin) {
			return p.y < this.yMax;
		} else {
			return false;
		}
	}
	,__class__: h2d_col_Bounds
});
var h2d_col_IPoint = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["h2d.col.IPoint"] = h2d_col_IPoint;
h2d_col_IPoint.__name__ = "h2d.col.IPoint";
h2d_col_IPoint.prototype = {
	__class__: h2d_col_IPoint
};
var h2d_col_Matrix = function() {
	this.a = 1;
	this.b = 0;
	this.c = 0;
	this.d = 1;
	this.x = 0;
	this.y = 0;
};
$hxClasses["h2d.col.Matrix"] = h2d_col_Matrix;
h2d_col_Matrix.__name__ = "h2d.col.Matrix";
h2d_col_Matrix.prototype = {
	__class__: h2d_col_Matrix
};
var h2d_filter_Blur = function(radius,gain,quality,linear) {
	if(linear == null) {
		linear = 0.;
	}
	if(quality == null) {
		quality = 1.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	h2d_filter_Filter.call(this);
	this.pass = new h3d_pass_Blur(radius,gain,linear,quality);
};
$hxClasses["h2d.filter.Blur"] = h2d_filter_Blur;
h2d_filter_Blur.__name__ = "h2d.filter.Blur";
h2d_filter_Blur.__super__ = h2d_filter_Filter;
h2d_filter_Blur.prototype = $extend(h2d_filter_Filter.prototype,{
	sync: function(ctx,s) {
		this.boundsExtend = Math.ceil(this.pass.radius) * 2;
	}
	,draw: function(ctx,t) {
		var out = t.innerTex;
		var old = out.filter;
		out.set_filter(h3d_mat_Filter.Linear);
		this.pass.apply(ctx,out);
		out.set_filter(old);
		return t;
	}
	,__class__: h2d_filter_Blur
});
var h2d_filter_ColorMatrix = function(m) {
	h2d_filter_Filter.call(this);
	this.pass = new h3d_pass_ColorMatrix(m);
	var _this = this.pass.shader;
	_this.constModified = true;
	_this.useAlpha__ = true;
};
$hxClasses["h2d.filter.ColorMatrix"] = h2d_filter_ColorMatrix;
h2d_filter_ColorMatrix.__name__ = "h2d.filter.ColorMatrix";
h2d_filter_ColorMatrix.__super__ = h2d_filter_Filter;
h2d_filter_ColorMatrix.prototype = $extend(h2d_filter_Filter.prototype,{
	draw: function(ctx,t) {
		var tout = ctx.textures.allocTileTarget("colorMatrixOut",t);
		this.pass.apply(t.innerTex,tout);
		return h2d_Tile.fromTexture(tout);
	}
	,__class__: h2d_filter_ColorMatrix
});
var h2d_filter_Glow = function(color,alpha,radius,gain,quality,smoothColor) {
	if(smoothColor == null) {
		smoothColor = false;
	}
	if(quality == null) {
		quality = 1.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	if(alpha == null) {
		alpha = 1.;
	}
	if(color == null) {
		color = 16777215;
	}
	h2d_filter_Blur.call(this,radius,gain,quality);
	this.color = color;
	this.alpha = alpha;
	this.smoothColor = smoothColor;
	var _this = this.pass.shader;
	_this.constModified = true;
	_this.hasFixedColor__ = true;
};
$hxClasses["h2d.filter.Glow"] = h2d_filter_Glow;
h2d_filter_Glow.__name__ = "h2d.filter.Glow";
h2d_filter_Glow.__super__ = h2d_filter_Blur;
h2d_filter_Glow.prototype = $extend(h2d_filter_Blur.prototype,{
	setParams: function() {
		var _this = this.pass.shader.fixedColor__;
		var c = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.pass.shader.fixedColor__.w = this.smoothColor ? this.alpha * 1.5 : this.alpha;
		var _this = this.pass.shader;
		_this.constModified = true;
		_this.smoothFixedColor__ = this.smoothColor;
	}
	,draw: function(ctx,t) {
		this.setParams();
		var tex = t.innerTex;
		var old = tex.filter;
		var save = ctx.textures.allocTileTarget("glowSave",t);
		h3d_pass_Copy.run(tex,save,h2d_BlendMode.None);
		tex.set_filter(h3d_mat_Filter.Linear);
		this.pass.apply(ctx,tex);
		tex.set_filter(old);
		if(this.knockout) {
			h3d_pass_Copy.run(save,tex,h2d_BlendMode.Erase);
		} else {
			h3d_pass_Copy.run(save,tex,h2d_BlendMode.Alpha);
		}
		return t;
	}
	,__class__: h2d_filter_Glow
});
var h2d_filter_DropShadow = function(distance,angle,color,alpha,radius,gain,quality,smoothColor) {
	if(smoothColor == null) {
		smoothColor = false;
	}
	if(quality == null) {
		quality = 1.;
	}
	if(gain == null) {
		gain = 1;
	}
	if(radius == null) {
		radius = 1.;
	}
	if(alpha == null) {
		alpha = 1.;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 0.785;
	}
	if(distance == null) {
		distance = 4.;
	}
	this.alphaPass = new h3d_mat_Pass("");
	h2d_filter_Glow.call(this,color,alpha,radius,gain,quality,smoothColor);
	this.distance = distance;
	this.angle = angle;
	this.alphaPass.addShader(new h3d_shader_UVDelta());
};
$hxClasses["h2d.filter.DropShadow"] = h2d_filter_DropShadow;
h2d_filter_DropShadow.__name__ = "h2d.filter.DropShadow";
h2d_filter_DropShadow.__super__ = h2d_filter_Glow;
h2d_filter_DropShadow.prototype = $extend(h2d_filter_Glow.prototype,{
	sync: function(ctx,s) {
		h2d_filter_Glow.prototype.sync.call(this,ctx,s);
		var f = Math.cos(this.angle) * this.distance;
		var a = f < 0 ? -f : f;
		var f = Math.sin(this.angle) * this.distance;
		var b = f < 0 ? -f : f;
		this.boundsExtend += a < b ? b : a;
	}
	,draw: function(ctx,t) {
		this.setParams();
		var save = ctx.textures.allocTileTarget("glowSave",t);
		h3d_pass_Copy.run(t.innerTex,save,h2d_BlendMode.None);
		this.pass.apply(ctx,save);
		var dx = Math.round(Math.cos(this.angle) * this.distance);
		var dy = Math.round(Math.sin(this.angle) * this.distance);
		var _this = this.alphaPass.getShader(h3d_shader_UVDelta).uvDelta__;
		var x = dx / t.width;
		var y = dy / t.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		h3d_pass_Copy.run(t.innerTex,save,h2d_BlendMode.Alpha,this.alphaPass);
		var ret = h2d_Tile.fromTexture(save);
		ret.dx = dx;
		ret.dy = dy;
		return ret;
	}
	,__class__: h2d_filter_DropShadow
});
var h2d_filter_Group = function(filters) {
	h2d_filter_Filter.call(this);
	this.filters = filters == null ? [] : filters;
};
$hxClasses["h2d.filter.Group"] = h2d_filter_Group;
h2d_filter_Group.__name__ = "h2d.filter.Group";
h2d_filter_Group.__super__ = h2d_filter_Filter;
h2d_filter_Group.prototype = $extend(h2d_filter_Filter.prototype,{
	get_enable: function() {
		if(!this.enable) {
			return false;
		}
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(this.enable) {
				return true;
			}
		}
		return false;
	}
	,add: function(f) {
		this.filters.push(f);
	}
	,bind: function(s) {
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f.get_enable()) {
				f.bind(s);
			}
		}
	}
	,unbind: function(s) {
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f.get_enable()) {
				f.unbind(s);
			}
		}
	}
	,sync: function(ctx,s) {
		this.autoBounds = true;
		this.boundsExtend = 0;
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(!f.get_enable()) {
				continue;
			}
			f.sync(ctx,s);
			if(f.boundsExtend > 0) {
				this.boundsExtend += f.boundsExtend;
			}
			if(!f.autoBounds) {
				this.autoBounds = false;
			}
		}
	}
	,getBounds: function(s,bounds,scale) {
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f.get_enable() && !f.autoBounds) {
				f.getBounds(s,bounds,scale);
			}
		}
	}
	,draw: function(ctx,input) {
		var xMin = input.dx;
		var yMin = input.dy;
		var start = input;
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(!f.get_enable()) {
				continue;
			}
			var prev = input;
			input = f.draw(ctx,input);
			if(input == null) {
				return null;
			}
			if(input != prev) {
				input.dx += xMin;
				input.dy += yMin;
			}
		}
		if(start != input) {
			input.dx -= xMin;
			input.dy -= yMin;
		}
		return input;
	}
	,__class__: h2d_filter_Group
});
var h2d_filter_Outline = function(size,color,quality,multiplyAlpha) {
	if(multiplyAlpha == null) {
		multiplyAlpha = true;
	}
	if(quality == null) {
		quality = 0.3;
	}
	if(color == null) {
		color = 0;
	}
	if(size == null) {
		size = 4.0;
	}
	h2d_filter_Filter.call(this);
	this.pass = new h3d_pass_Outline(size,color,quality,multiplyAlpha);
};
$hxClasses["h2d.filter.Outline"] = h2d_filter_Outline;
h2d_filter_Outline.__name__ = "h2d.filter.Outline";
h2d_filter_Outline.__super__ = h2d_filter_Filter;
h2d_filter_Outline.prototype = $extend(h2d_filter_Filter.prototype,{
	sync: function(ctx,s) {
		this.boundsExtend = this.pass.size * 2;
	}
	,draw: function(ctx,t) {
		var out = t.innerTex;
		var old = out.filter;
		out.set_filter(h3d_mat_Filter.Linear);
		this.pass.apply(ctx,out);
		out.set_filter(old);
		return t;
	}
	,__class__: h2d_filter_Outline
});
var h2d_filter_Shader = function(shader,textureParam) {
	if(textureParam == null) {
		textureParam = "texture";
	}
	h2d_filter_Filter.call(this);
	var found = false;
	var _g = 0;
	var _g1 = shader.shader.data.vars;
	while(_g < _g1.length) {
		var v = _g1[_g];
		++_g;
		if(v.name == textureParam) {
			found = true;
			break;
		}
	}
	if(!found) {
		throw haxe_Exception.thrown("Shader does not have '" + textureParam + "' variable");
	}
	this.textureParam = textureParam;
	this.pass = new h3d_pass_ScreenFx(shader);
};
$hxClasses["h2d.filter.Shader"] = h2d_filter_Shader;
h2d_filter_Shader.__name__ = "h2d.filter.Shader";
h2d_filter_Shader.__super__ = h2d_filter_Filter;
h2d_filter_Shader.prototype = $extend(h2d_filter_Filter.prototype,{
	get_shader: function() {
		return this.pass.shader;
	}
	,draw: function(ctx,t) {
		var out = ctx.textures.allocTileTarget("shaderTmp",t);
		ctx.engine.pushTarget(out);
		this.get_shader()[this.textureParam + "__"] = t.innerTex;
		if(this.nearest) {
			t.innerTex.set_filter(h3d_mat_Filter.Nearest);
		}
		this.pass.render();
		ctx.engine.popTarget();
		return h2d_Tile.fromTexture(out);
	}
	,__class__: h2d_filter_Shader
});
var h2d_impl_BatchDrawState = function() {
	this.head = this.tail = new h2d_impl__$BatchDrawState_StateEntry(null);
	this.totalCount = 0;
};
$hxClasses["h2d.impl.BatchDrawState"] = h2d_impl_BatchDrawState;
h2d_impl_BatchDrawState.__name__ = "h2d.impl.BatchDrawState";
h2d_impl_BatchDrawState.prototype = {
	setTexture: function(texture) {
		if(texture != null) {
			if(this.tail.texture == null) {
				this.tail.texture = texture;
			} else if(this.tail.texture != texture) {
				var cur = this.tail;
				if(cur.count == 0) {
					cur.set(texture);
				} else if(cur.next == null) {
					cur.next = this.tail = new h2d_impl__$BatchDrawState_StateEntry(texture);
				} else {
					this.tail = cur.next.set(texture);
				}
			}
		}
	}
	,clear: function() {
		var state = this.head;
		do {
			state.texture = null;
			state = state.next;
		} while(state != null);
		this.tail = this.head;
		this.tail.count = 0;
		this.totalCount = 0;
	}
	,drawQuads: function(ctx,buffer,offset,length) {
		if(length == null) {
			length = -1;
		}
		if(offset == null) {
			offset = 0;
		}
		var state = this.head;
		var last = this.tail.next;
		var engine = ctx.engine;
		var stateLen;
		if(offset == 0 && length == -1) {
			do {
				ctx.texture = state.texture;
				ctx.beforeDraw();
				stateLen = state.count >> 1;
				var start = offset;
				var max = stateLen;
				if(max == null) {
					max = -1;
				}
				if(start == null) {
					start = 0;
				}
				engine.renderBuffer(buffer,engine.mem.getQuadIndexes(buffer.vertices),2,start,max);
				offset += stateLen;
				state = state.next;
			} while(state != last);
		} else {
			if(length == -1) {
				length = (this.totalCount >> 1) - offset;
			}
			var caret = 0;
			do {
				stateLen = state.count >> 1;
				if(caret + stateLen >= offset) {
					var stateMin = offset >= caret ? offset : caret;
					var stateLen1 = length > stateLen ? stateLen : length;
					ctx.texture = state.texture;
					ctx.beforeDraw();
					var start = stateMin;
					var max = stateLen1;
					if(max == null) {
						max = -1;
					}
					if(start == null) {
						start = 0;
					}
					engine.renderBuffer(buffer,engine.mem.getQuadIndexes(buffer.vertices),2,start,max);
					length -= stateLen1;
					if(length == 0) {
						break;
					}
				}
				caret += stateLen;
				state = state.next;
			} while(state != last);
		}
	}
	,drawIndexed: function(ctx,buffer,indices,offset,length) {
		if(length == null) {
			length = -1;
		}
		if(offset == null) {
			offset = 0;
		}
		var state = this.head;
		var last = this.tail.next;
		var engine = ctx.engine;
		var stateLen;
		if(offset == 0 && length == -1) {
			do {
				ctx.texture = state.texture;
				ctx.beforeDraw();
				stateLen = state.count / 3 | 0;
				engine.renderIndexed(buffer,indices,offset,stateLen);
				offset += stateLen;
				state = state.next;
			} while(state != last);
		} else {
			if(length == -1) {
				length = this.totalCount / 3 | 0;
			}
			var caret = 0;
			do {
				stateLen = state.count / 3 | 0;
				if(caret + stateLen >= offset) {
					var stateMin = offset >= caret ? offset : caret;
					var stateLen1 = length > stateLen ? stateLen : length;
					ctx.texture = state.texture;
					ctx.beforeDraw();
					engine.renderIndexed(buffer,indices,stateMin,stateLen1);
					length -= stateLen1;
					if(length == 0) {
						break;
					}
				}
				caret += stateLen;
				state = state.next;
			} while(state != last);
		}
	}
	,__class__: h2d_impl_BatchDrawState
};
var h2d_impl__$BatchDrawState_StateEntry = function(texture) {
	this.texture = texture;
	this.count = 0;
};
$hxClasses["h2d.impl._BatchDrawState.StateEntry"] = h2d_impl__$BatchDrawState_StateEntry;
h2d_impl__$BatchDrawState_StateEntry.__name__ = "h2d.impl._BatchDrawState.StateEntry";
h2d_impl__$BatchDrawState_StateEntry.prototype = {
	set: function(texture) {
		this.texture = texture;
		this.count = 0;
		return this;
	}
	,__class__: h2d_impl__$BatchDrawState_StateEntry
};
var h3d_BufferFlag = $hxEnums["h3d.BufferFlag"] = { __ename__:true,__constructs__:null
	,Dynamic: {_hx_name:"Dynamic",_hx_index:0,__enum__:"h3d.BufferFlag",toString:$estr}
	,NoAlloc: {_hx_name:"NoAlloc",_hx_index:1,__enum__:"h3d.BufferFlag",toString:$estr}
	,UniformBuffer: {_hx_name:"UniformBuffer",_hx_index:2,__enum__:"h3d.BufferFlag",toString:$estr}
	,ReadWriteBuffer: {_hx_name:"ReadWriteBuffer",_hx_index:3,__enum__:"h3d.BufferFlag",toString:$estr}
	,IndexBuffer: {_hx_name:"IndexBuffer",_hx_index:4,__enum__:"h3d.BufferFlag",toString:$estr}
};
h3d_BufferFlag.__constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.NoAlloc,h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.ReadWriteBuffer,h3d_BufferFlag.IndexBuffer];
h3d_BufferFlag.__empty_constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.NoAlloc,h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.ReadWriteBuffer,h3d_BufferFlag.IndexBuffer];
var h3d_Buffer = function(vertices,format,flags) {
	this.id = h3d_Buffer.GUID++;
	this.vertices = vertices;
	this.format = format;
	this.flags = 0;
	this.allocPos = hxd_impl_AllocPos.make();
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	this.engine = h3d_Engine.CURRENT;
	if((this.flags & 1 << h3d_BufferFlag.NoAlloc._hx_index) == 0) {
		this.engine.mem.allocBuffer(this);
	}
};
$hxClasses["h3d.Buffer"] = h3d_Buffer;
h3d_Buffer.__name__ = "h3d.Buffer";
h3d_Buffer.ofFloats = function(v,format,flags) {
	var nvert = Math.ceil(v.pos / format.stride);
	var b = new h3d_Buffer(nvert,format,flags);
	b.uploadFloats(v,0,nvert);
	return b;
};
h3d_Buffer.ofSubFloats = function(v,vertices,format,flags) {
	var b = new h3d_Buffer(vertices,format,flags);
	b.uploadFloats(v,0,vertices);
	return b;
};
h3d_Buffer.prototype = {
	dispose: function() {
		if(this.vbuf != null) {
			this.engine.mem.freeBuffer(this);
			this.vbuf = null;
		}
	}
	,uploadFloats: function(buf,bufPos,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		if(startVertice < 0 || vertices < 0 || startVertice + vertices > this.vertices) {
			throw haxe_Exception.thrown("Invalid vertices count");
		}
		if(vertices == 0) {
			return;
		}
		if(this.format.hasLowPrecision) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(vertices * this.format.strideBytes));
			var bytesPos = 0;
			var index = bufPos;
			var inputs_current = 0;
			var inputs_array = this.format.inputs;
			var _g = 0;
			var _g1 = vertices;
			while(_g < _g1) {
				var _ = _g++;
				inputs_current = 0;
				while(inputs_current < inputs_array.length) {
					var input = inputs_array[inputs_current++];
					var this1 = input.type;
					var elementCount = this1 == js_Boot.__cast(9 , Int) ? 1 : this1;
					var step = 0;
					switch(input.precision) {
					case 0:
						var _g2 = 0;
						var _g3 = elementCount;
						while(_g2 < _g3) {
							var i = _g2++;
							bytes.setFloat(bytesPos + step,buf.array[index++]);
							step += 4;
						}
						break;
					case 1:
						var _g4 = 0;
						var _g5 = elementCount;
						while(_g4 < _g5) {
							var i1 = _g4++;
							var f = hxd_BufferFormat.float32to16(buf.array[index++]);
							bytes.setUInt16(bytesPos + step,f);
							step += 2;
						}
						break;
					case 2:
						var _g6 = 0;
						var _g7 = elementCount;
						while(_g6 < _g7) {
							var i2 = _g6++;
							var f1 = hxd_BufferFormat.float32toU8(buf.array[index++]);
							bytes.b[bytesPos + step] = f1;
							++step;
						}
						break;
					case 3:
						var _g8 = 0;
						var _g9 = elementCount;
						while(_g8 < _g9) {
							var i3 = _g8++;
							var f2 = hxd_BufferFormat.float32toS8(buf.array[index++]);
							bytes.b[bytesPos + step] = f2;
							++step;
						}
						break;
					}
					var this2 = input.type;
					bytesPos += (this2 == js_Boot.__cast(9 , Int) ? 1 : this2) * hxd_Precision.SIZES[input.precision];
					if((bytesPos & 3) != 0) {
						bytesPos += 4 - (bytesPos & 3);
					}
				}
			}
			this.uploadBytes(bytes,0,vertices);
			return;
		}
		this.engine.driver.uploadBufferData(this,startVertice,vertices,buf,bufPos);
	}
	,uploadBytes: function(data,dataPos,vertices) {
		if(vertices < 0 || vertices > this.vertices) {
			throw haxe_Exception.thrown("Invalid vertices count");
		}
		if(vertices == 0) {
			return;
		}
		this.engine.driver.uploadBufferBytes(this,0,vertices,data,dataPos);
	}
	,__class__: h3d_Buffer
};
var h3d_Camera = function(fovY,zoom,screenRatio,zNear,zFar,rightHanded) {
	if(rightHanded == null) {
		rightHanded = false;
	}
	if(zFar == null) {
		zFar = 4000.;
	}
	if(zNear == null) {
		zNear = 0.02;
	}
	if(screenRatio == null) {
		screenRatio = 1.333333;
	}
	if(zoom == null) {
		zoom = 1.;
	}
	if(fovY == null) {
		fovY = 25.;
	}
	this.jitterOffsetY = 0.;
	this.jitterOffsetX = 0.;
	this.viewY = 0.;
	this.viewX = 0.;
	this.fovY = fovY;
	this.zoom = zoom;
	this.screenRatio = screenRatio;
	this.zNear = zNear;
	this.zFar = zFar;
	this.rightHanded = rightHanded;
	var x = 2;
	var y = 3;
	var z = 4;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.pos = new h3d_VectorImpl(x,y,z);
	var x = 0;
	var y = 0;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.up = new h3d_VectorImpl(x,y,z);
	var x = 0;
	var y = 0;
	var z = 0;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.target = new h3d_VectorImpl(x,y,z);
	this.m = new h3d_MatrixImpl();
	this.mcam = new h3d_MatrixImpl();
	this.mproj = new h3d_MatrixImpl();
	this.frustum = new h3d_col_Frustum();
	this.update();
};
$hxClasses["h3d.Camera"] = h3d_Camera;
h3d_Camera.__name__ = "h3d.Camera";
h3d_Camera.prototype = {
	getInverseViewProj: function() {
		if(this.minv == null) {
			this.minv = new h3d_MatrixImpl();
		}
		if(this.needInv) {
			this.minv.initInverse(this.m);
			this.needInv = false;
		}
		return this.minv;
	}
	,getInverseView: function() {
		if(this.mcamInv == null) {
			this.mcamInv = new h3d_MatrixImpl();
			this.mcamInv._44 = 0;
		}
		if(this.mcamInv._44 == 0) {
			this.mcamInv.initInverse(this.mcam);
		}
		return this.mcamInv;
	}
	,calcDirections: function() {
		var this1 = this.target;
		var v = this.pos;
		var x = this1.x - v.x;
		var y = this1.y - v.y;
		var z = this1.z - v.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x = x1;
		var _this_y = y1;
		var _this_z = z1;
		var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		var x = _this_x * k;
		var y = _this_y * k;
		var z = _this_z * k;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x = x1;
		var _this_y = y1;
		var _this_z = z1;
		var _this = this.up;
		var x = _this.y * _this_z - _this.z * _this_y;
		var y = _this.z * _this_x - _this.x * _this_z;
		var z = _this.x * _this_y - _this.y * _this_x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x1 = x1;
		var _this_y1 = y1;
		var _this_z1 = z1;
		var k = _this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		var x = _this_x1 * k;
		var y = _this_y1 * k;
		var z = _this_z1 * k;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var cameraRight_x = x1;
		var cameraRight_y = y1;
		var cameraRight_z = z1;
		var x = _this_y * cameraRight_z - _this_z * cameraRight_y;
		var y = _this_z * cameraRight_x - _this_x * cameraRight_z;
		var z = _this_x * cameraRight_y - _this_y * cameraRight_x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var cameraUp_x = x1;
		var cameraUp_y = y1;
		var cameraUp_z = z1;
		this.directions._11 = _this_x;
		this.directions._12 = _this_y;
		this.directions._13 = _this_z;
		this.directions._21 = cameraRight_x;
		this.directions._22 = cameraRight_y;
		this.directions._23 = cameraRight_z;
		this.directions._31 = cameraUp_x;
		this.directions._32 = cameraUp_y;
		this.directions._33 = cameraUp_z;
		this.directions._44 = 1;
	}
	,unproject: function(screenX,screenY,camZ) {
		var x = screenX;
		var y = screenY;
		var z = camZ;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p = new h3d_VectorImpl(x,y,z);
		var _this = p;
		var m = this.getInverseViewProj();
		var px = _this.x * m._11 + _this.y * m._21 + _this.z * m._31 + m._41;
		var py = _this.x * m._12 + _this.y * m._22 + _this.z * m._32 + m._42;
		var pz = _this.x * m._13 + _this.y * m._23 + _this.z * m._33 + m._43;
		var iw = 1 / (_this.x * m._14 + _this.y * m._24 + _this.z * m._34 + m._44);
		_this.x = px * iw;
		_this.y = py * iw;
		_this.z = pz * iw;
		return p;
	}
	,update: function() {
		if(this.follow != null) {
			var fpos = this.follow.pos.localToGlobal();
			var ftarget = this.follow.target.localToGlobal();
			var _this = this.pos;
			var x = fpos.x;
			var y = fpos.y;
			var z = fpos.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			var _this = this.target;
			var x = ftarget.x;
			var y = ftarget.y;
			var z = ftarget.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			if(this.follow.pos.name != null) {
				var p = this.follow.pos;
				while(p != null) {
					if(p.currentAnimation != null) {
						var v = p.currentAnimation.getPropValue(this.follow.pos.name,"FOVY");
						if(v != null) {
							this.fovY = v;
							break;
						}
					}
					p = p.parent;
				}
			}
		}
		this.makeCameraMatrix(this.mcam);
		this.makeFrustumMatrix(this.mproj);
		this.m.multiply(this.mcam,this.mproj);
		this.needInv = true;
		if(this.mcamInv != null) {
			this.mcamInv._44 = 0;
		}
		if(this.mprojInv != null) {
			this.mprojInv._44 = 0;
		}
		if(this.directions != null) {
			this.directions._44 = 0;
		}
		this.frustum.loadMatrix(this.m);
	}
	,makeCameraMatrix: function(m) {
		var this1 = this.target;
		var v = this.pos;
		var x = this1.x - v.x;
		var y = this1.y - v.y;
		var z = this1.z - v.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x = x1;
		var _this_y = y1;
		var _this_z = z1;
		if(this.rightHanded) {
			_this_x *= -1;
			_this_y *= -1;
			_this_z *= -1;
		}
		var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this_x *= k;
		_this_y *= k;
		_this_z *= k;
		var _this = this.up;
		var x = _this.y * _this_z - _this.z * _this_y;
		var y = _this.z * _this_x - _this.x * _this_z;
		var z = _this.x * _this_y - _this.y * _this_x;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x1 = x1;
		var _this_y1 = y1;
		var _this_z1 = z1;
		var k = _this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1;
		if(k < 1e-20) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this_x1 *= k;
		_this_y1 *= k;
		_this_z1 *= k;
		if(Math.sqrt(_this_x1 * _this_x1 + _this_y1 * _this_y1 + _this_z1 * _this_z1) == 0) {
			_this_x1 = _this_y;
			_this_y1 = _this_z;
			_this_z1 = _this_x;
		}
		var x = _this_y * _this_z1 - _this_z * _this_y1;
		var y = _this_z * _this_x1 - _this_x * _this_z1;
		var z = _this_x * _this_y1 - _this_y * _this_x1;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var _this_x2 = x1;
		var _this_y2 = y1;
		var _this_z2 = z1;
		m._11 = _this_x1;
		m._12 = _this_x2;
		m._13 = _this_x;
		m._14 = 0;
		m._21 = _this_y1;
		m._22 = _this_y2;
		m._23 = _this_y;
		m._24 = 0;
		m._31 = _this_z1;
		m._32 = _this_z2;
		m._33 = _this_z;
		m._34 = 0;
		var v = this.pos;
		m._41 = -(_this_x1 * v.x + _this_y1 * v.y + _this_z1 * v.z);
		var v = this.pos;
		m._42 = -(_this_x2 * v.x + _this_y2 * v.y + _this_z2 * v.z);
		var v = this.pos;
		m._43 = -(_this_x * v.x + _this_y * v.y + _this_z * v.z);
		m._44 = 1;
	}
	,makeFrustumMatrix: function(m) {
		m.zero();
		var bounds = this.orthoBounds;
		if(bounds != null) {
			var w = 1 / (bounds.xMax - bounds.xMin);
			var h = 1 / (bounds.yMax - bounds.yMin);
			var d = 1 / (bounds.zMax - bounds.zMin);
			m._11 = 2 * w;
			m._22 = 2 * h;
			m._33 = d;
			m._41 = -(bounds.xMin + bounds.xMax) * w;
			m._42 = -(bounds.yMin + bounds.yMax) * h;
			m._43 = -bounds.zMin * d;
			m._44 = 1;
		} else {
			var degToRad = Math.PI / 180;
			var halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
			var scale = this.zoom / Math.tan(halfFovX);
			m._11 = scale;
			m._22 = scale * this.screenRatio;
			m._33 = this.zFar / (this.zFar - this.zNear);
			m._34 = 1;
			m._43 = -(this.zNear * this.zFar) / (this.zFar - this.zNear);
			m._31 = this.jitterOffsetX;
			m._32 = this.jitterOffsetY;
		}
		m._11 += this.viewX * m._14;
		m._21 += this.viewX * m._24;
		m._31 += this.viewX * m._34;
		m._41 += this.viewX * m._44;
		m._12 += this.viewY * m._14;
		m._22 += this.viewY * m._24;
		m._32 += this.viewY * m._34;
		m._42 += this.viewY * m._44;
		if(this.rightHanded) {
			m._33 *= -1;
			m._34 *= -1;
		}
	}
	,distanceToDepth: function(dist) {
		var min = this.zNear;
		var max = this.zFar;
		if(max == null) {
			max = 1.;
		}
		if(min == null) {
			min = 0.;
		}
		return ((this.zFar + this.zNear - 2.0 * this.zNear * this.zFar / (dist < min ? min : dist > max ? max : dist)) / (this.zFar - this.zNear) + 1.0) / 2.0;
	}
	,__class__: h3d_Camera
};
var h3d__$Engine_TargetTmp = function(t,n,l,m,db) {
	this.t = t;
	this.next = n;
	this.layer = l;
	this.mipLevel = m;
	this.depthBinding = db;
};
$hxClasses["h3d._Engine.TargetTmp"] = h3d__$Engine_TargetTmp;
h3d__$Engine_TargetTmp.__name__ = "h3d._Engine.TargetTmp";
h3d__$Engine_TargetTmp.prototype = {
	__class__: h3d__$Engine_TargetTmp
};
var h3d_DepthBinding = $hxEnums["h3d.DepthBinding"] = { __ename__:true,__constructs__:null
	,ReadWrite: {_hx_name:"ReadWrite",_hx_index:0,__enum__:"h3d.DepthBinding",toString:$estr}
	,ReadOnly: {_hx_name:"ReadOnly",_hx_index:1,__enum__:"h3d.DepthBinding",toString:$estr}
	,DepthOnly: {_hx_name:"DepthOnly",_hx_index:2,__enum__:"h3d.DepthBinding",toString:$estr}
	,NotBound: {_hx_name:"NotBound",_hx_index:3,__enum__:"h3d.DepthBinding",toString:$estr}
};
h3d_DepthBinding.__constructs__ = [h3d_DepthBinding.ReadWrite,h3d_DepthBinding.ReadOnly,h3d_DepthBinding.DepthOnly,h3d_DepthBinding.NotBound];
h3d_DepthBinding.__empty_constructs__ = [h3d_DepthBinding.ReadWrite,h3d_DepthBinding.ReadOnly,h3d_DepthBinding.DepthOnly,h3d_DepthBinding.NotBound];
var h3d_Engine = function() {
	this.resCache = new haxe_ds_ObjectMap();
	this.ready = false;
	this.inRender = false;
	this.textureColorCache = new haxe_ds_IntMap();
	this.tmpVector = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.backgroundColor = -16777216;
	this.hardware = !h3d_Engine.SOFTWARE_DRIVER;
	this.antiAlias = h3d_Engine.ANTIALIASING;
	this.autoResize = true;
	this.set_fullScreen(!hxd_System.getValue(hxd_SystemValue.IsWindowed));
	this.window = hxd_Window.getInstance();
	this.realFps = hxd_System.getDefaultFrameRate();
	this.lastTime = HxOverrides.now() / 1000;
	this.window.addResizeEvent($bind(this,this.onWindowResize));
	h3d_Engine.CURRENT = this;
	this.window.setCurrent();
	this.driver = js_Browser.get_supported() ? new h3d_impl_GlDriver(this.antiAlias) : new h3d_impl_NullDriver();
};
$hxClasses["h3d.Engine"] = h3d_Engine;
h3d_Engine.__name__ = "h3d.Engine";
h3d_Engine.prototype = {
	init: function() {
		this.driver.init($bind(this,this.onCreate),!this.hardware);
	}
	,selectShader: function(shader) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		if(this.driver.selectShader(shader)) {
			this.shaderSwitches++;
		}
	}
	,selectMaterial: function(pass) {
		this.driver.selectMaterial(pass);
	}
	,uploadShaderBuffers: function(buffers,which) {
		this.driver.uploadShaderBuffers(buffers,which);
	}
	,selectBuffer: function(buf) {
		if(buf.vbuf == null) {
			return false;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectBuffer(buf);
		return true;
	}
	,renderBuffer: function(b,indexes,vertPerTri,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.vbuf == null) {
			return;
		}
		var ntri = b.vertices / vertPerTri | 0;
		if(drawTri < 0) {
			drawTri = ntri - startTri;
		}
		if(startTri < 0 || drawTri < 0 || startTri + drawTri > ntri) {
			throw haxe_Exception.thrown("Invalid vertices count");
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,renderIndexed: function(b,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.vbuf == null) {
			return;
		}
		var maxTri = indexes.vertices / 3 | 0;
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,renderMultiBuffers: function(format,buffers,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		var maxTri = indexes.vertices / 3 | 0;
		if(maxTri <= 0) {
			return;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectMultiBuffers(format,buffers);
		if(indexes.vbuf == null) {
			return;
		}
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0) {
			this.driver.draw(indexes,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,renderInstanced: function(indexes,commands) {
		if(indexes.vbuf == null) {
			return;
		}
		if(commands.commandCount > 0) {
			this.driver.drawInstanced(indexes,commands);
			this.drawTriangles += commands.triCount;
			this.drawCalls++;
		}
	}
	,set_debug: function(d) {
		this.debug = d;
		this.driver.setDebug(this.debug);
		return d;
	}
	,onCreate: function(disposed) {
		h3d_Engine.CURRENT = this;
		this.window.setCurrent();
		if(this.autoResize) {
			this.width = this.window.get_width();
			this.height = this.window.get_height();
		}
		if(disposed) {
			hxd_impl_Allocator.get().onContextLost();
			this.mem.onContextLost();
		} else {
			this.mem = new h3d_impl_MemoryManager(this.driver);
			this.mem.init();
			this.nullTexture = new h3d_mat_Texture(0,0,[h3d_mat_TextureFlags.NoAlloc]);
		}
		this.hardware = this.driver.hasFeature(h3d_impl_Feature.HardwareAccelerated);
		this.set_debug(this.debug);
		this.set_fullScreen(this.fullScreen);
		this.resize(this.width,this.height);
		if(disposed) {
			this.onContextLost();
		} else {
			this.onReady();
		}
		this.ready = true;
	}
	,onContextLost: function() {
	}
	,onReady: function() {
	}
	,onWindowResize: function() {
		if(this.autoResize && !this.driver.isDisposed()) {
			var w = this.window.get_width();
			var h = this.window.get_height();
			if(w != this.width || h != this.height) {
				this.resize(w,h);
			}
			this.onResized();
		}
	}
	,set_fullScreen: function(v) {
		this.fullScreen = v;
		if(this.mem != null && hxd_System.getValue(hxd_SystemValue.IsWindowed)) {
			this.window.set_displayMode(v ? hxd_DisplayMode.Borderless : hxd_DisplayMode.Windowed);
		}
		return v;
	}
	,onResized: function() {
	}
	,resize: function(width,height) {
		if(width < 32) {
			width = 32;
		}
		if(height < 32) {
			height = 32;
		}
		this.width = width;
		this.height = height;
		if(!this.driver.isDisposed()) {
			this.driver.resize(width,height);
		}
	}
	,begin: function() {
		if(this.driver.isDisposed()) {
			return false;
		}
		this.inRender = true;
		this.drawTriangles = 0;
		this.shaderSwitches = 0;
		this.drawCalls = 0;
		this.dispatches = 0;
		this.targetStack = null;
		this.needFlushTarget = this.currentTargetTex != null;
		this.driver.begin(hxd_Timer.frameCount);
		if(this.backgroundColor != null) {
			this.clear(this.backgroundColor,1,0);
		}
		return true;
	}
	,end: function() {
		this.inRender = false;
		this.driver.end();
	}
	,getCurrentTarget: function() {
		if(this.targetStack == null) {
			return null;
		} else if(this.targetStack.t == this.nullTexture) {
			return this.targetStack.textures[0];
		} else {
			return this.targetStack.t;
		}
	}
	,pushTarget: function(tex,layer,mipLevel,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		var c = this.targetTmp;
		if(c == null) {
			c = new h3d__$Engine_TargetTmp(tex,this.targetStack,layer,mipLevel,depthBinding);
		} else {
			this.targetTmp = c.next;
			c.t = tex;
			c.next = this.targetStack;
			c.mipLevel = mipLevel;
			c.layer = layer;
			c.depthBinding = depthBinding;
		}
		this.targetStack = c;
		this.updateNeedFlush();
	}
	,updateNeedFlush: function() {
		var t = this.targetStack;
		if(t == null) {
			this.needFlushTarget = this.currentTargetTex != null;
		} else {
			this.needFlushTarget = this.currentTargetTex != t.t || this.currentTargetLayer != t.layer || this.currentTargetMip != t.mipLevel || t.textures != null || this.currentDepthBinding != t.depthBinding;
		}
	}
	,pushDepth: function(depthBuffer) {
		this.pushTarget(depthBuffer,null,null,h3d_DepthBinding.DepthOnly);
	}
	,popTarget: function() {
		var c = this.targetStack;
		if(c == null) {
			throw haxe_Exception.thrown("popTarget() with no matching pushTarget()");
		}
		this.targetStack = c.next;
		this.updateNeedFlush();
		c.t = null;
		c.textures = null;
		c.next = this.targetTmp;
		this.targetTmp = c;
	}
	,doFlushTarget: function() {
		var t = this.targetStack;
		if(t == null) {
			this.driver.setRenderTarget(null);
			this.currentTargetTex = null;
		} else {
			if(t.depthBinding == h3d_DepthBinding.DepthOnly) {
				this.driver.setDepth(t.t);
			} else if(t.textures != null) {
				this.driver.setRenderTargets(t.textures,t.depthBinding);
			} else {
				this.driver.setRenderTarget(t.t,t.layer,t.mipLevel,t.depthBinding);
			}
			this.currentTargetTex = t.t;
			this.currentTargetLayer = t.layer;
			this.currentTargetMip = t.mipLevel;
			this.currentDepthBinding = t.depthBinding;
		}
		this.needFlushTarget = false;
	}
	,clear: function(color,depth,stencil) {
		if(color != null) {
			var _this = this.tmpVector;
			_this.x = (color >> 16 & 255) / 255;
			_this.y = (color >> 8 & 255) / 255;
			_this.z = (color & 255) / 255;
			_this.w = (color >>> 24) / 255;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color == null ? null : this.tmpVector,depth,stencil);
	}
	,setRenderZone: function(x,y,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.setRenderZone(x,y,width,height);
	}
	,render: function(obj) {
		if(!this.begin()) {
			return false;
		}
		obj.render(this);
		this.end();
		var delta = HxOverrides.now() / 1000 - this.lastTime;
		this.lastTime += delta;
		if(delta > 0) {
			var curFps = 1. / delta;
			if(curFps > this.realFps * 2) {
				curFps = this.realFps * 2;
			} else if(curFps < this.realFps * 0.5) {
				curFps = this.realFps * 0.5;
			}
			var f = delta / .5;
			if(f > 0.3) {
				f = 0.3;
			}
			this.realFps = this.realFps * (1 - f) + curFps * f;
		}
		return true;
	}
	,__class__: h3d_Engine
};
var h3d_Indexes = {};
h3d_Indexes._new = function(count,is32) {
	if(is32 == null) {
		is32 = false;
	}
	return new h3d_Buffer(count,is32 ? hxd_BufferFormat.get_INDEX32() : hxd_BufferFormat.get_INDEX16(),[h3d_BufferFlag.IndexBuffer]);
};
h3d_Indexes.uploadIndexes = function(this1,ibuf,bufPos,indices,startIndice) {
	if(startIndice == null) {
		startIndice = 0;
	}
	if(startIndice < 0 || indices < 0 || startIndice + indices > this1.vertices) {
		throw haxe_Exception.thrown("Invalid indices count");
	}
	if(this1.format.inputs[0].precision != 1) {
		throw haxe_Exception.thrown("Can't upload indexes on a 32-bit buffer");
	}
	if(indices == 0) {
		return;
	}
	h3d_Engine.CURRENT.driver.uploadIndexData(this1,startIndice,indices,ibuf,bufPos);
};
h3d_Indexes.alloc = function(i,startPos,length) {
	if(length == null) {
		length = -1;
	}
	if(startPos == null) {
		startPos = 0;
	}
	if(length < 0) {
		length = i.length;
	}
	var idx = h3d_Indexes._new(length);
	h3d_Indexes.uploadIndexes(idx,i,0,length);
	return idx;
};
var h3d_MatrixImpl = function() {
};
$hxClasses["h3d.MatrixImpl"] = h3d_MatrixImpl;
h3d_MatrixImpl.__name__ = "h3d.MatrixImpl";
h3d_MatrixImpl.prototype = {
	zero: function() {
		this._11 = 0.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 0.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 0.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 0.0;
	}
	,identity: function() {
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,multiply3x4: function(a,b) {
		var m11 = a._11;
		var m12 = a._12;
		var m13 = a._13;
		var m21 = a._21;
		var m22 = a._22;
		var m23 = a._23;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	,multiply: function(a,b) {
		var a11 = a._11;
		var a12 = a._12;
		var a13 = a._13;
		var a14 = a._14;
		var a21 = a._21;
		var a22 = a._22;
		var a23 = a._23;
		var a24 = a._24;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a34 = a._34;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var a44 = a._44;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b14 = b._14;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b24 = b._24;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b34 = b._34;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		var b44 = b._44;
		this._11 = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		this._12 = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		this._13 = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		this._14 = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		this._21 = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		this._22 = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		this._23 = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		this._24 = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		this._34 = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		this._44 = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	}
	,inverse3x4: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		this._11 = m22 * m33 - m23 * m32;
		this._12 = m13 * m32 - m12 * m33;
		this._13 = m12 * m23 - m13 * m22;
		this._14 = 0;
		this._21 = m23 * m31 - m21 * m33;
		this._22 = m11 * m33 - m13 * m31;
		this._23 = m13 * m21 - m11 * m23;
		this._24 = 0;
		this._31 = m21 * m32 - m22 * m31;
		this._32 = m12 * m31 - m11 * m32;
		this._33 = m11 * m22 - m12 * m21;
		this._34 = 0;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		this._44 = 1;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		var invDet = 1.0 / det;
		this._11 *= invDet;
		this._12 *= invDet;
		this._13 *= invDet;
		this._21 *= invDet;
		this._22 *= invDet;
		this._23 *= invDet;
		this._31 *= invDet;
		this._32 *= invDet;
		this._33 *= invDet;
		this._41 *= invDet;
		this._42 *= invDet;
		this._43 *= invDet;
	}
	,initInverse: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m14 = m._14;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m24 = m._24;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m34 = m._34;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		var m44 = m._44;
		this._11 = m22 * m33 * m44 - m22 * m34 * m43 - m32 * m23 * m44 + m32 * m24 * m43 + m42 * m23 * m34 - m42 * m24 * m33;
		this._12 = -m12 * m33 * m44 + m12 * m34 * m43 + m32 * m13 * m44 - m32 * m14 * m43 - m42 * m13 * m34 + m42 * m14 * m33;
		this._13 = m12 * m23 * m44 - m12 * m24 * m43 - m22 * m13 * m44 + m22 * m14 * m43 + m42 * m13 * m24 - m42 * m14 * m23;
		this._14 = -m12 * m23 * m34 + m12 * m24 * m33 + m22 * m13 * m34 - m22 * m14 * m33 - m32 * m13 * m24 + m32 * m14 * m23;
		this._21 = -m21 * m33 * m44 + m21 * m34 * m43 + m31 * m23 * m44 - m31 * m24 * m43 - m41 * m23 * m34 + m41 * m24 * m33;
		this._22 = m11 * m33 * m44 - m11 * m34 * m43 - m31 * m13 * m44 + m31 * m14 * m43 + m41 * m13 * m34 - m41 * m14 * m33;
		this._23 = -m11 * m23 * m44 + m11 * m24 * m43 + m21 * m13 * m44 - m21 * m14 * m43 - m41 * m13 * m24 + m41 * m14 * m23;
		this._24 = m11 * m23 * m34 - m11 * m24 * m33 - m21 * m13 * m34 + m21 * m14 * m33 + m31 * m13 * m24 - m31 * m14 * m23;
		this._31 = m21 * m32 * m44 - m21 * m34 * m42 - m31 * m22 * m44 + m31 * m24 * m42 + m41 * m22 * m34 - m41 * m24 * m32;
		this._32 = -m11 * m32 * m44 + m11 * m34 * m42 + m31 * m12 * m44 - m31 * m14 * m42 - m41 * m12 * m34 + m41 * m14 * m32;
		this._33 = m11 * m22 * m44 - m11 * m24 * m42 - m21 * m12 * m44 + m21 * m14 * m42 + m41 * m12 * m24 - m41 * m14 * m22;
		this._34 = -m11 * m22 * m34 + m11 * m24 * m32 + m21 * m12 * m34 - m21 * m14 * m32 - m31 * m12 * m24 + m31 * m14 * m22;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31 + m14 * this._41;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 *= det;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 *= det;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 *= det;
		this._41 *= det;
		this._42 *= det;
		this._43 *= det;
		this._44 *= det;
	}
	,clone: function() {
		var m = new h3d_MatrixImpl();
		m._11 = this._11;
		m._12 = this._12;
		m._13 = this._13;
		m._14 = this._14;
		m._21 = this._21;
		m._22 = this._22;
		m._23 = this._23;
		m._24 = this._24;
		m._31 = this._31;
		m._32 = this._32;
		m._33 = this._33;
		m._34 = this._34;
		m._41 = this._41;
		m._42 = this._42;
		m._43 = this._43;
		m._44 = this._44;
		return m;
	}
	,load: function(m) {
		this._11 = m._11;
		this._12 = m._12;
		this._13 = m._13;
		this._14 = m._14;
		this._21 = m._21;
		this._22 = m._22;
		this._23 = m._23;
		this._24 = m._24;
		this._31 = m._31;
		this._32 = m._32;
		this._33 = m._33;
		this._34 = m._34;
		this._41 = m._41;
		this._42 = m._42;
		this._43 = m._43;
		this._44 = m._44;
	}
	,loadValues: function(a) {
		this._11 = a[0];
		this._12 = a[1];
		this._13 = a[2];
		this._14 = a[3];
		this._21 = a[4];
		this._22 = a[5];
		this._23 = a[6];
		this._24 = a[7];
		this._31 = a[8];
		this._32 = a[9];
		this._33 = a[10];
		this._34 = a[11];
		this._41 = a[12];
		this._42 = a[13];
		this._43 = a[14];
		this._44 = a[15];
	}
	,colorSaturate: function(sat) {
		++sat;
		var ins = 1 - sat;
		var r = ins * 0.212671;
		var g = ins * 0.71516;
		var b = ins * 0.072169;
		var tmp = h3d_MatrixImpl.tmp;
		tmp._11 = r + sat;
		tmp._12 = r;
		tmp._13 = r;
		tmp._21 = g;
		tmp._22 = g + sat;
		tmp._23 = g;
		tmp._31 = b;
		tmp._32 = b;
		tmp._33 = b + sat;
		tmp._41 = 0;
		tmp._42 = 0;
		tmp._43 = 0;
		this.multiply3x4(this,tmp);
	}
	,colorLightness: function(lightness) {
		this._41 += lightness;
		this._42 += lightness;
		this._43 += lightness;
	}
	,__class__: h3d_MatrixImpl
};
var h3d_Matrix = {};
h3d_Matrix.I = function() {
	var m = new h3d_MatrixImpl();
	m.identity();
	return m;
};
h3d_Matrix.L = function(a) {
	var m = new h3d_MatrixImpl();
	m.loadValues(a);
	return m;
};
var h3d_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Quat"] = h3d_Quat;
h3d_Quat.__name__ = "h3d.Quat";
h3d_Quat.prototype = {
	toMatrix: function(m) {
		if(m == null) {
			m = new h3d_MatrixImpl();
		}
		var xx = this.x * this.x;
		var xy = this.x * this.y;
		var xz = this.x * this.z;
		var xw = this.x * this.w;
		var yy = this.y * this.y;
		var yz = this.y * this.z;
		var yw = this.y * this.w;
		var zz = this.z * this.z;
		var zw = this.z * this.w;
		m._11 = 1 - 2 * (yy + zz);
		m._12 = 2 * (xy + zw);
		m._13 = 2 * (xz - yw);
		m._14 = 0;
		m._21 = 2 * (xy - zw);
		m._22 = 1 - 2 * (xx + zz);
		m._23 = 2 * (yz + xw);
		m._24 = 0;
		m._31 = 2 * (xz + yw);
		m._32 = 2 * (yz - xw);
		m._33 = 1 - 2 * (xx + yy);
		m._34 = 0;
		m._41 = 0;
		m._42 = 0;
		m._43 = 0;
		m._44 = 1;
		return m;
	}
	,__class__: h3d_Quat
};
var h3d_VectorImpl = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["h3d.VectorImpl"] = h3d_VectorImpl;
h3d_VectorImpl.__name__ = "h3d.VectorImpl";
h3d_VectorImpl.prototype = {
	__class__: h3d_VectorImpl
};
var h3d_Vector4Impl = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Vector4Impl"] = h3d_Vector4Impl;
h3d_Vector4Impl.__name__ = "h3d.Vector4Impl";
h3d_Vector4Impl.prototype = {
	__class__: h3d_Vector4Impl
};
var h3d_anim_AnimatedObject = function() { };
$hxClasses["h3d.anim.AnimatedObject"] = h3d_anim_AnimatedObject;
h3d_anim_AnimatedObject.__name__ = "h3d.anim.AnimatedObject";
var h3d_anim_Animation = function(name,frameCount,sampling) {
	this.name = name;
	this.frameCount = frameCount;
	this.sampling = sampling;
	this.objects = [];
	this.lastEvent = -1;
	this.frame = 0.;
	this.speed = 1.;
	this.loop = true;
	this.pause = false;
};
$hxClasses["h3d.anim.Animation"] = h3d_anim_Animation;
h3d_anim_Animation.__name__ = "h3d.anim.Animation";
h3d_anim_Animation.prototype = {
	getPropValue: function(objectName,propName) {
		return null;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		throw haxe_Exception.thrown("assert");
	}
	,isPlaying: function() {
		if(!this.pause) {
			return (this.speed < 0 ? -this.speed : this.speed) > 0.000001;
		} else {
			return false;
		}
	}
	,endFrame: function() {
		return this.frameCount;
	}
	,update: function(dt) {
		if(!this.isInstance) {
			throw haxe_Exception.thrown("You must instantiate this animation first");
		}
		if(!this.isPlaying()) {
			return 0;
		}
		if(this.events != null && this.onEvent != null) {
			var f0 = this.frame | 0;
			var f1 = this.frame + dt * this.speed * this.sampling | 0;
			if(f1 >= this.frameCount) {
				f1 = this.frameCount - 1;
			}
			var _g = f0;
			var _g1 = f1 + 1;
			while(_g < _g1) {
				var f = _g++;
				if(f == this.lastEvent) {
					continue;
				}
				this.lastEvent = f;
				if(this.events[f] != null) {
					var oldF = this.frame;
					var oldDT = dt;
					dt -= (f - this.frame) / (this.speed * this.sampling);
					this.frame = f;
					var _g2 = 0;
					var _g3 = this.events[f];
					while(_g2 < _g3.length) {
						var e = _g3[_g2];
						++_g2;
						this.onEvent(e);
					}
					if(this.frame == f && f == this.frameCount - 1) {
						this.frame = oldF;
						dt = oldDT;
						break;
					} else {
						return dt;
					}
				}
			}
		}
		if(this.onAnimEnd != null) {
			var end = this.endFrame();
			var et = this.speed == 0 ? 0 : (end - this.frame) / (this.speed * this.sampling);
			if(et <= dt && et > 0) {
				this.frame = end;
				dt -= et;
				this.onAnimEnd();
				if(this.frame == end && this.isPlaying()) {
					if(this.loop) {
						this.frame = 0;
					} else {
						dt = 0;
					}
				}
				return dt;
			}
		}
		this.frame += dt * this.speed * this.sampling;
		if(this.frame >= this.frameCount) {
			if(this.loop) {
				this.frame %= this.frameCount;
			} else {
				this.frame = this.frameCount;
			}
		}
		return 0;
	}
	,__class__: h3d_anim_Animation
};
var h3d_col_Collider = function() { };
$hxClasses["h3d.col.Collider"] = h3d_col_Collider;
h3d_col_Collider.__name__ = "h3d.col.Collider";
h3d_col_Collider.prototype = {
	__class__: h3d_col_Collider
};
var h3d_col_Bounds = function() {
	this.xMin = 1e20;
	this.xMax = -1e20;
	this.yMin = 1e20;
	this.yMax = -1e20;
	this.zMin = 1e20;
	this.zMax = -1e20;
};
$hxClasses["h3d.col.Bounds"] = h3d_col_Bounds;
h3d_col_Bounds.__name__ = "h3d.col.Bounds";
h3d_col_Bounds.__super__ = h3d_col_Collider;
h3d_col_Bounds.prototype = $extend(h3d_col_Collider.prototype,{
	inFrustum: function(f,m) {
		if(m != null) {
			throw haxe_Exception.thrown("Not implemented");
		}
		return f.hasBounds(this);
	}
	,rayIntersection: function(r,bestMatch) {
		var minTx = (this.xMin - r.px) / r.lx;
		var minTy = (this.yMin - r.py) / r.ly;
		var minTz = (this.zMin - r.pz) / r.lz;
		var maxTx = (this.xMax - r.px) / r.lx;
		var maxTy = (this.yMax - r.py) / r.ly;
		var maxTz = (this.zMax - r.pz) / r.lz;
		var realMinTx = minTx > maxTx ? maxTx : minTx;
		var realMinTy = minTy > maxTy ? maxTy : minTy;
		var realMinTz = minTz > maxTz ? maxTz : minTz;
		var realMaxTx = minTx < maxTx ? maxTx : minTx;
		var realMaxTy = minTy < maxTy ? maxTy : minTy;
		var realMaxTz = minTz < maxTz ? maxTz : minTz;
		var a = realMaxTx > realMaxTy ? realMaxTy : realMaxTx;
		var minmax = a > realMaxTz ? realMaxTz : a;
		var a = realMinTx < realMinTy ? realMinTy : realMinTx;
		var maxmin = a < realMinTz ? realMinTz : a;
		if(minmax < maxmin) {
			return -1;
		}
		return maxmin;
	}
	,transform: function(m) {
		var xMin = this.xMin;
		var yMin = this.yMin;
		var zMin = this.zMin;
		var xMax = this.xMax;
		var yMax = this.yMax;
		var zMax = this.zMax;
		this.xMin = 1e20;
		this.xMax = -1e20;
		this.yMin = 1e20;
		this.yMax = -1e20;
		this.zMin = 1e20;
		this.zMax = -1e20;
		if(xMax < xMin && yMax < yMin && zMax < zMin) {
			return;
		}
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var _this_x = x;
		var _this_y = y;
		var _this_z = z;
		var x = xMin;
		var y = yMin;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		var x = xMin;
		var y = yMin;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		var x = xMin;
		var y = yMax;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		var x = xMin;
		var y = yMax;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		var x = xMax;
		var y = yMin;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		var x = xMax;
		var y = yMin;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		var x = xMax;
		var y = yMax;
		var z = zMin;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
		var x = xMax;
		var y = yMax;
		var z = zMax;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this_x = x;
		_this_y = y;
		_this_z = z;
		var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
		var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
		var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
		_this_x = px;
		_this_y = py;
		_this_z = pz;
		if(_this_x < this.xMin) {
			this.xMin = _this_x;
		}
		if(_this_x > this.xMax) {
			this.xMax = _this_x;
		}
		if(_this_y < this.yMin) {
			this.yMin = _this_y;
		}
		if(_this_y > this.yMax) {
			this.yMax = _this_y;
		}
		if(_this_z < this.zMin) {
			this.zMin = _this_z;
		}
		if(_this_z > this.zMax) {
			this.zMax = _this_z;
		}
	}
	,intersection: function(a,b) {
		var a1 = a.xMin;
		var b1 = b.xMin;
		var xMin = a1 < b1 ? b1 : a1;
		var a1 = a.yMin;
		var b1 = b.yMin;
		var yMin = a1 < b1 ? b1 : a1;
		var a1 = a.zMin;
		var b1 = b.zMin;
		var zMin = a1 < b1 ? b1 : a1;
		var a1 = a.xMax;
		var b1 = b.xMax;
		var xMax = a1 > b1 ? b1 : a1;
		var a1 = a.yMax;
		var b1 = b.yMax;
		var yMax = a1 > b1 ? b1 : a1;
		var a1 = a.zMax;
		var b1 = b.zMax;
		var zMax = a1 > b1 ? b1 : a1;
		this.xMin = xMin;
		this.xMax = xMax;
		this.yMin = yMin;
		this.yMax = yMax;
		this.zMin = zMin;
		this.zMax = zMax;
	}
	,load: function(b) {
		this.xMin = b.xMin;
		this.xMax = b.xMax;
		this.yMin = b.yMin;
		this.yMax = b.yMax;
		this.zMin = b.zMin;
		this.zMax = b.zMax;
	}
	,scaleCenter: function(v) {
		var dx = (this.xMax - this.xMin) * 0.5 * v;
		var dy = (this.yMax - this.yMin) * 0.5 * v;
		var dz = (this.zMax - this.zMin) * 0.5 * v;
		var mx = (this.xMax + this.xMin) * 0.5;
		var my = (this.yMax + this.yMin) * 0.5;
		var mz = (this.zMax + this.zMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.zMin = mz - dz;
		this.xMax = mx + dx;
		this.yMax = my + dy;
		this.zMax = mz + dz;
	}
	,__class__: h3d_col_Bounds
});
var h3d_col_Frustum = function(mvp) {
	this.checkNearFar = true;
	this.pleft = new h3d_col_Plane(1,0,0,0.0);
	this.pright = new h3d_col_Plane(1,0,0,0.0);
	this.ptop = new h3d_col_Plane(1,0,0,0.0);
	this.pbottom = new h3d_col_Plane(1,0,0,0.0);
	this.pnear = new h3d_col_Plane(1,0,0,0.0);
	this.pfar = new h3d_col_Plane(1,0,0,0.0);
	if(mvp != null) {
		this.loadMatrix(mvp);
	}
};
$hxClasses["h3d.col.Frustum"] = h3d_col_Frustum;
h3d_col_Frustum.__name__ = "h3d.col.Frustum";
h3d_col_Frustum.prototype = {
	loadMatrix: function(mvp) {
		var _this = this.pleft;
		var p_nx = mvp._14 + mvp._11;
		var p_ny = mvp._24 + mvp._21;
		var p_nz = mvp._34 + mvp._31;
		var p_d = -(mvp._44 + mvp._41);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pright;
		var p_nx = mvp._14 - mvp._11;
		var p_ny = mvp._24 - mvp._21;
		var p_nz = mvp._34 - mvp._31;
		var p_d = mvp._41 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.ptop;
		var p_nx = mvp._14 - mvp._12;
		var p_ny = mvp._24 - mvp._22;
		var p_nz = mvp._34 - mvp._32;
		var p_d = mvp._42 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pbottom;
		var p_nx = mvp._14 + mvp._12;
		var p_ny = mvp._24 + mvp._22;
		var p_nz = mvp._34 + mvp._32;
		var p_d = -(mvp._44 + mvp._42);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pnear;
		var p_nx = mvp._13;
		var p_ny = mvp._23;
		var p_nz = mvp._33;
		var p_d = -mvp._43;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pfar;
		var p_nx = mvp._14 - mvp._13;
		var p_ny = mvp._24 - mvp._23;
		var p_nz = mvp._34 - mvp._33;
		var p_d = mvp._43 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pleft;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pright;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.ptop;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pbottom;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pnear;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pfar;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
	}
	,hasSphere: function(s) {
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var p_x = x1;
		var p_y = y1;
		var p_z = z1;
		var _this = this.pleft;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.pright;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.ptop;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.pbottom;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		if(this.checkNearFar) {
			var _this = this.pnear;
			if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
				return false;
			}
			var _this = this.pfar;
			if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
				return false;
			}
		}
		return true;
	}
	,hasBounds: function(b) {
		var p = this.pleft;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pright;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.ptop;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pbottom;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		if(this.checkNearFar) {
			var p = this.pnear;
			var a = p.nx;
			var b1 = p.ny;
			var c = p.nz;
			var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
			if(a < 0) {
				a = -a;
			}
			if(b1 < 0) {
				b1 = -b1;
			}
			if(c < 0) {
				c = -c;
			}
			var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
			if(dd + rr - p.d * 2 < 0) {
				return false;
			}
			var p = this.pfar;
			var a = p.nx;
			var b1 = p.ny;
			var c = p.nz;
			var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
			if(a < 0) {
				a = -a;
			}
			if(b1 < 0) {
				b1 = -b1;
			}
			if(c < 0) {
				c = -c;
			}
			var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
			if(dd + rr - p.d * 2 < 0) {
				return false;
			}
		}
		return true;
	}
	,__class__: h3d_col_Frustum
};
var h3d_col_Ray = function() {
};
$hxClasses["h3d.col.Ray"] = h3d_col_Ray;
h3d_col_Ray.__name__ = "h3d.col.Ray";
h3d_col_Ray.prototype = {
	normalize: function() {
		var l = this.lx * this.lx + this.ly * this.ly + this.lz * this.lz;
		if(l == 1.) {
			return;
		}
		if(l < 1e-20) {
			l = 0;
		} else {
			l = 1. / Math.sqrt(l);
		}
		this.lx *= l;
		this.ly *= l;
		this.lz *= l;
	}
	,__class__: h3d_col_Ray
};
var h3d_col_Plane = function(nx,ny,nz,d) {
	this.nx = nx;
	this.ny = ny;
	this.nz = nz;
	this.d = d;
};
$hxClasses["h3d.col.Plane"] = h3d_col_Plane;
h3d_col_Plane.__name__ = "h3d.col.Plane";
h3d_col_Plane.prototype = {
	__class__: h3d_col_Plane
};
var h3d_scene_Object = function(parent) {
	this.prevAbsPosFrame = -1;
	this.flags = 32768;
	this.absPos = new h3d_MatrixImpl();
	this.absPos.identity();
	this.x = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var c = b;
	if(c && (this.flags & 131072) != 0) {
		var f = 262144;
		this.flags |= f;
	}
	this.y = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var c = b;
	if(c && (this.flags & 131072) != 0) {
		var f = 262144;
		this.flags |= f;
	}
	this.z = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var c = b;
	if(c && (this.flags & 131072) != 0) {
		var f = 262144;
		this.flags |= f;
	}
	this.scaleX = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var c = b;
	if(c && (this.flags & 131072) != 0) {
		var f = 262144;
		this.flags |= f;
	}
	this.scaleY = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var c = b;
	if(c && (this.flags & 131072) != 0) {
		var f = 262144;
		this.flags |= f;
	}
	this.scaleZ = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var c = b;
	if(c && (this.flags & 131072) != 0) {
		var f = 262144;
		this.flags |= f;
	}
	this.qRot = new h3d_Quat();
	var f = 1;
	var b = this.follow != null;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var c = b;
	if(c && (this.flags & 131072) != 0) {
		var f = 262144;
		this.flags |= f;
	}
	var f = 2;
	this.flags |= f;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h3d.scene.Object"] = h3d_scene_Object;
h3d_scene_Object.__name__ = "h3d.scene.Object";
h3d_scene_Object.prototype = {
	set_cullingCollider: function(c) {
		this.cullingCollider = c;
		var f = 4096;
		this.flags &= ~f;
		return c;
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h3d_VectorImpl(0.,0.,0.);
		}
		var m = this.absPos;
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	,getInvPos: function() {
		this.syncPos();
		if(this.invPos == null) {
			this.invPos = new h3d_MatrixImpl();
			this.invPos._44 = 0;
		}
		if(this.invPos._44 == 0) {
			this.invPos.inverse3x4(this.absPos);
		}
		return this.invPos;
	}
	,addChild: function(o) {
		this.addChildAt(o,this.children.length);
	}
	,addChildAt: function(o,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == o) {
				throw haxe_Exception.thrown("Recursive addChild");
			}
			p = p.parent;
		}
		if(o.parent != null) {
			var old = (o.flags & 32) != 0;
			var f = 32;
			o.flags &= ~f;
			o.parent.removeChild(o);
			var f = 32;
			if(old) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
		this.children.splice(pos,0,o);
		if((this.flags & 32) == 0 && (o.flags & 32) != 0) {
			o.onRemove();
		}
		o.parent = this;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		var c = b;
		if(c && (o.flags & 131072) != 0) {
			var f = 262144;
			o.flags |= f;
		}
		if((this.flags & 32) != 0) {
			if((o.flags & 32) == 0) {
				o.onAdd();
			} else {
				o.onParentChanged();
			}
		}
	}
	,iterVisibleMeshes: function(callb) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			return;
		}
		if((this.flags & 4) == 0) {
			var m = ((this) instanceof h3d_scene_Mesh) ? this : null;
			if(m != null) {
				callb(m);
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.iterVisibleMeshes(callb);
		}
	}
	,onParentChanged: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onParentChanged();
		}
	}
	,onAdd: function() {
		var f = 32;
		this.flags |= f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		var f = 32;
		this.flags &= ~f;
		var i = this.children.length - 1;
		while(i >= 0) this.children[i--].onRemove();
	}
	,removeChild: function(o) {
		if(HxOverrides.remove(this.children,o)) {
			if((o.flags & 32) != 0) {
				o.onRemove();
			}
			o.parent = null;
			var f = 1;
			var b = true;
			if(b) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
			var c = b;
			if(c && (o.flags & 131072) != 0) {
				var f = 262144;
				o.flags |= f;
			}
		}
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h3d_scene_Scene)) {
			return p;
		} else {
			return null;
		}
	}
	,getAbsPos: function() {
		this.syncPos();
		return this.absPos;
	}
	,draw: function(ctx) {
	}
	,computeVelocity: function() {
		return this.prevAbsPosFrame != -1;
	}
	,calcPrevAbsPos: function() {
		if(!this.computeVelocity()) {
			this.prevAbsPos = null;
		} else if(this.prevAbsPosFrame < hxd_Timer.frameCount) {
			this.prevAbsPosFrame = hxd_Timer.frameCount;
			if(this.prevAbsPos == null) {
				this.prevAbsPos = this.absPos.clone();
			} else {
				this.prevAbsPos.load(this.absPos);
			}
		}
	}
	,calcAbsPos: function() {
		this.calcPrevAbsPos();
		this.qRot.toMatrix(this.absPos);
		this.absPos._11 *= this.scaleX;
		this.absPos._12 *= this.scaleX;
		this.absPos._13 *= this.scaleX;
		this.absPos._21 *= this.scaleY;
		this.absPos._22 *= this.scaleY;
		this.absPos._23 *= this.scaleY;
		this.absPos._31 *= this.scaleZ;
		this.absPos._32 *= this.scaleZ;
		this.absPos._33 *= this.scaleZ;
		this.absPos._41 = this.x;
		this.absPos._42 = this.y;
		this.absPos._43 = this.z;
		if(this.follow != null) {
			this.follow.syncPos();
			if((this.flags & 8) != 0) {
				var _this = this.absPos;
				var a = this.absPos;
				var b = this.parent.absPos;
				var m11 = a._11;
				var m12 = a._12;
				var m13 = a._13;
				var m21 = a._21;
				var m22 = a._22;
				var m23 = a._23;
				var a31 = a._31;
				var a32 = a._32;
				var a33 = a._33;
				var a41 = a._41;
				var a42 = a._42;
				var a43 = a._43;
				var b11 = b._11;
				var b12 = b._12;
				var b13 = b._13;
				var b21 = b._21;
				var b22 = b._22;
				var b23 = b._23;
				var b31 = b._31;
				var b32 = b._32;
				var b33 = b._33;
				var b41 = b._41;
				var b42 = b._42;
				var b43 = b._43;
				_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
				_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
				_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
				_this._14 = 0;
				_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
				_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
				_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
				_this._24 = 0;
				_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
				_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
				_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
				_this._34 = 0;
				_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				_this._44 = 1;
				this.absPos._41 = this.x + this.follow.absPos._41;
				this.absPos._42 = this.y + this.follow.absPos._42;
				this.absPos._43 = this.z + this.follow.absPos._43;
			} else {
				this.absPos.multiply3x4(this.absPos,this.follow.absPos);
			}
		} else if(this.parent != null && (this.flags & 2048) == 0) {
			var _this = this.absPos;
			var a = this.absPos;
			var b = this.parent.absPos;
			var m11 = a._11;
			var m12 = a._12;
			var m13 = a._13;
			var m21 = a._21;
			var m22 = a._22;
			var m23 = a._23;
			var a31 = a._31;
			var a32 = a._32;
			var a33 = a._33;
			var a41 = a._41;
			var a42 = a._42;
			var a43 = a._43;
			var b11 = b._11;
			var b12 = b._12;
			var b13 = b._13;
			var b21 = b._21;
			var b22 = b._22;
			var b23 = b._23;
			var b31 = b._31;
			var b32 = b._32;
			var b33 = b._33;
			var b41 = b._41;
			var b42 = b._42;
			var b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.defaultTransform != null) {
			var _this = this.absPos;
			var a = this.defaultTransform;
			var b = this.absPos;
			var m11 = a._11;
			var m12 = a._12;
			var m13 = a._13;
			var m21 = a._21;
			var m22 = a._22;
			var m23 = a._23;
			var a31 = a._31;
			var a32 = a._32;
			var a33 = a._33;
			var a41 = a._41;
			var a42 = a._42;
			var a43 = a._43;
			var b11 = b._11;
			var b12 = b._12;
			var b13 = b._13;
			var b21 = b._21;
			var b22 = b._22;
			var b23 = b._23;
			var b31 = b._31;
			var b32 = b._32;
			var b33 = b._33;
			var b41 = b._41;
			var b42 = b._42;
			var b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.invPos != null) {
			this.invPos._44 = 0;
		}
	}
	,sync: function(ctx) {
	}
	,syncRec: function(ctx) {
		if(this.currentAnimation != null) {
			var old = this.parent;
			var dt = ctx.elapsedTime;
			while(dt > 0 && this.currentAnimation != null) dt = this.currentAnimation.update(dt);
			if(this.currentAnimation != null && (ctx.visibleFlag && (this.flags & 2) != 0 && (this.flags & 4) == 0 || (this.flags & 64) != 0)) {
				this.currentAnimation.sync();
			}
			if(this.parent == null && old != null) {
				return;
			}
		}
		if((this.flags & 32768) == 0 && ((this.flags & 4) != 0 || (this.flags & 2) == 0 || !ctx.visibleFlag)) {
			return;
		}
		var old = ctx.visibleFlag;
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			ctx.visibleFlag = false;
		}
		if(ctx.cullingCollider != null && (this.cullingCollider == null || (this.flags & 4096) != 0)) {
			this.set_cullingCollider(ctx.cullingCollider);
			var f = 4096;
			this.flags |= f;
		} else if((this.flags & 4096) != 0) {
			this.set_cullingCollider(null);
		}
		var prevCollider = ctx.cullingCollider;
		if((this.flags & 128) != 0) {
			ctx.cullingCollider = this.cullingCollider;
		}
		var changed = (this.flags & 1) != 0;
		if(changed) {
			this.calcAbsPos();
		}
		if((this.flags & 8192) != 0) {
			if((this.flags & 16384) != 0 && !changed && !ctx.wasContextLost) {
				ctx.visibleFlag = old;
				ctx.cullingCollider = prevCollider;
				return;
			}
			var f = 16384;
			this.flags |= f;
		}
		var f = 262144;
		this.flags &= ~f;
		var f = 131072;
		this.flags |= f;
		this.sync(ctx);
		var f = 131072;
		this.flags &= ~f;
		changed = changed || (this.flags & 262144) != 0;
		if((this.flags & 262144) != 0) {
			this.calcAbsPos();
		}
		var f = 1;
		var b = this.follow != null;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		var c = b;
		if(c && (this.flags & 131072) != 0) {
			var f = 262144;
			this.flags |= f;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					var f = 1;
					var b = true;
					if(b) {
						c.flags |= f;
					} else {
						c.flags &= ~f;
					}
					var c1 = b;
					if(c1 && (c.flags & 131072) != 0) {
						var f1 = 262144;
						c.flags |= f1;
					}
				}
				c.syncRec(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
		ctx.visibleFlag = old;
		ctx.cullingCollider = prevCollider;
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if((this.flags & 1) != 0) {
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			var c = b;
			if(c && (this.flags & 131072) != 0) {
				var f = 262144;
				this.flags |= f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f = 1;
				var b = true;
				if(b) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
				var c1 = b;
				if(c1 && (c.flags & 131072) != 0) {
					var f1 = 262144;
					c.flags |= f1;
				}
			}
		}
	}
	,emit: function(ctx) {
	}
	,emitRec: function(ctx) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0 && !ctx.computingStatic) {
			return;
		}
		if((this.flags & 1) != 0) {
			if(this.currentAnimation != null) {
				this.currentAnimation.sync();
			}
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			var c = b;
			if(c && (this.flags & 131072) != 0) {
				var f = 262144;
				this.flags |= f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f = 1;
				var b = true;
				if(b) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
				var c1 = b;
				if(c1 && (c.flags & 131072) != 0) {
					var f1 = 262144;
					c.flags |= f1;
				}
			}
		}
		var prevForcedScreenRatio = ctx.forcedScreenRatio;
		if((this.flags & 65536) == 0 || !ctx.computeVelocity || (this.flags & 8192) != 0 || (this.flags & 4) != 0) {
			this.prevAbsPosFrame = -1;
		} else if(!this.computeVelocity()) {
			this.prevAbsPosFrame = 0;
		}
		this.calcPrevAbsPos();
		if((this.flags & 4) == 0 || ctx.computingStatic) {
			this.emit(ctx);
			var f = 65536;
			this.flags &= ~f;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.emitRec(ctx);
		}
		ctx.forcedScreenRatio = prevForcedScreenRatio;
	}
	,__class__: h3d_scene_Object
};
var h3d_col_Sphere = function(x,y,z,r) {
	if(r == null) {
		r = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var sx = x;
	var sy = y;
	var sz = z;
	var sr = r;
	if(sr == null) {
		sr = 0.;
	}
	if(sz == null) {
		sz = 0.;
	}
	if(sy == null) {
		sy = 0.;
	}
	if(sx == null) {
		sx = 0.;
	}
	this.x = sx;
	this.y = sy;
	this.z = sz;
	this.r = sr;
};
$hxClasses["h3d.col.Sphere"] = h3d_col_Sphere;
h3d_col_Sphere.__name__ = "h3d.col.Sphere";
h3d_col_Sphere.__super__ = h3d_col_Collider;
h3d_col_Sphere.prototype = $extend(h3d_col_Collider.prototype,{
	rayIntersection: function(r,bestMatch) {
		var mx = r.px - this.x;
		var my = r.py - this.y;
		var mz = r.pz - this.z;
		var b = mx * r.lx + my * r.ly + mz * r.lz;
		var c = mx * mx + my * my + mz * mz - this.r * this.r;
		if(c > 0.0 && b > 0.0) {
			return -1;
		}
		var d = b * b - c;
		if(d < 0.0) {
			return -1;
		}
		var t = -b - Math.sqrt(d);
		if(t < 0.0) {
			return 0.0;
		} else {
			return t;
		}
	}
	,inFrustum: function(f,m) {
		if(m != null) {
			return this.inFrustumMatrix(f,m);
		}
		return f.hasSphere(this);
	}
	,inFrustumMatrix: function(f,m) {
		var oldX = this.x;
		var oldY = this.y;
		var oldZ = this.z;
		var oldR = this.r;
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var v_x = x1;
		var v_y = y1;
		var v_z = z1;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		this.x = v_x;
		this.y = v_y;
		this.z = v_z;
		var _this = m;
		var x = 0.;
		var y = 0.;
		var z = 0.;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var scale_x = x;
		var scale_y = y;
		var scale_z = z;
		scale_x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
		scale_y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
		scale_z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
		if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
			scale_x *= -1;
			scale_y *= -1;
			scale_z *= -1;
		}
		this.r *= Math.abs(Math.max(Math.max(scale_x,scale_y),scale_z));
		var res = f.hasSphere(this);
		this.x = oldX;
		this.y = oldY;
		this.z = oldZ;
		this.r = oldR;
		return res;
	}
	,__class__: h3d_col_Sphere
});
var h3d_impl_Feature = $hxEnums["h3d.impl.Feature"] = { __ename__:true,__constructs__:null
	,StandardDerivatives: {_hx_name:"StandardDerivatives",_hx_index:0,__enum__:"h3d.impl.Feature",toString:$estr}
	,FloatTextures: {_hx_name:"FloatTextures",_hx_index:1,__enum__:"h3d.impl.Feature",toString:$estr}
	,AllocDepthBuffer: {_hx_name:"AllocDepthBuffer",_hx_index:2,__enum__:"h3d.impl.Feature",toString:$estr}
	,HardwareAccelerated: {_hx_name:"HardwareAccelerated",_hx_index:3,__enum__:"h3d.impl.Feature",toString:$estr}
	,MultipleRenderTargets: {_hx_name:"MultipleRenderTargets",_hx_index:4,__enum__:"h3d.impl.Feature",toString:$estr}
	,Queries: {_hx_name:"Queries",_hx_index:5,__enum__:"h3d.impl.Feature",toString:$estr}
	,SRGBTextures: {_hx_name:"SRGBTextures",_hx_index:6,__enum__:"h3d.impl.Feature",toString:$estr}
	,ShaderModel3: {_hx_name:"ShaderModel3",_hx_index:7,__enum__:"h3d.impl.Feature",toString:$estr}
	,BottomLeftCoords: {_hx_name:"BottomLeftCoords",_hx_index:8,__enum__:"h3d.impl.Feature",toString:$estr}
	,Wireframe: {_hx_name:"Wireframe",_hx_index:9,__enum__:"h3d.impl.Feature",toString:$estr}
	,InstancedRendering: {_hx_name:"InstancedRendering",_hx_index:10,__enum__:"h3d.impl.Feature",toString:$estr}
};
h3d_impl_Feature.__constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries,h3d_impl_Feature.SRGBTextures,h3d_impl_Feature.ShaderModel3,h3d_impl_Feature.BottomLeftCoords,h3d_impl_Feature.Wireframe,h3d_impl_Feature.InstancedRendering];
h3d_impl_Feature.__empty_constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries,h3d_impl_Feature.SRGBTextures,h3d_impl_Feature.ShaderModel3,h3d_impl_Feature.BottomLeftCoords,h3d_impl_Feature.Wireframe,h3d_impl_Feature.InstancedRendering];
var h3d_impl_RenderFlag = $hxEnums["h3d.impl.RenderFlag"] = { __ename__:true,__constructs__:null
	,CameraHandness: {_hx_name:"CameraHandness",_hx_index:0,__enum__:"h3d.impl.RenderFlag",toString:$estr}
};
h3d_impl_RenderFlag.__constructs__ = [h3d_impl_RenderFlag.CameraHandness];
h3d_impl_RenderFlag.__empty_constructs__ = [h3d_impl_RenderFlag.CameraHandness];
var h3d_impl_Driver = function() {
};
$hxClasses["h3d.impl.Driver"] = h3d_impl_Driver;
h3d_impl_Driver.__name__ = "h3d.impl.Driver";
h3d_impl_Driver.prototype = {
	hasFeature: function(f) {
		return false;
	}
	,setRenderFlag: function(r,value) {
	}
	,isSupportedFormat: function(fmt) {
		return false;
	}
	,isDisposed: function() {
		return true;
	}
	,begin: function(frame) {
	}
	,generateMipMaps: function(texture) {
		throw haxe_Exception.thrown("Mipmaps auto generation is not supported on this platform");
	}
	,clear: function(color,depth,stencil) {
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
	}
	,resize: function(width,height) {
	}
	,selectShader: function(shader) {
		return false;
	}
	,selectMaterial: function(pass) {
	}
	,uploadShaderBuffers: function(buffers,which) {
	}
	,selectBuffer: function(buffer) {
	}
	,selectMultiBuffers: function(format,buffers) {
	}
	,draw: function(ibuf,startIndex,ntriangles) {
	}
	,drawInstanced: function(ibuf,commands) {
	}
	,setRenderZone: function(x,y,width,height) {
	}
	,setRenderTarget: function(tex,layer,mipLevel,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
	}
	,setRenderTargets: function(textures,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
	}
	,setDepth: function(tex) {
	}
	,allocDepthBuffer: function(b) {
		return null;
	}
	,getDefaultDepthBuffer: function() {
		return null;
	}
	,end: function() {
	}
	,setDebug: function(b) {
	}
	,allocTexture: function(t) {
		return null;
	}
	,allocBuffer: function(b) {
		return null;
	}
	,disposeTexture: function(t) {
	}
	,disposeBuffer: function(b) {
	}
	,uploadIndexData: function(i,startIndice,indiceCount,buf,bufPos) {
	}
	,uploadBufferData: function(b,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadBufferBytes: function(b,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
	}
	,copyTexture: function(from,to) {
		return false;
	}
	,__class__: h3d_impl_Driver
};
var h3d_impl__$GlDriver_CompiledShader = function(s,kind,shader) {
	this.s = s;
	this.kind = kind;
	this.shader = shader;
};
$hxClasses["h3d.impl._GlDriver.CompiledShader"] = h3d_impl__$GlDriver_CompiledShader;
h3d_impl__$GlDriver_CompiledShader.__name__ = "h3d.impl._GlDriver.CompiledShader";
h3d_impl__$GlDriver_CompiledShader.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledShader
};
var h3d_impl__$GlDriver_CompiledAttribute = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledAttribute"] = h3d_impl__$GlDriver_CompiledAttribute;
h3d_impl__$GlDriver_CompiledAttribute.__name__ = "h3d.impl._GlDriver.CompiledAttribute";
h3d_impl__$GlDriver_CompiledAttribute.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledAttribute
};
var h3d_impl__$GlDriver_CompiledProgram = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledProgram"] = h3d_impl__$GlDriver_CompiledProgram;
h3d_impl__$GlDriver_CompiledProgram.__name__ = "h3d.impl._GlDriver.CompiledProgram";
h3d_impl__$GlDriver_CompiledProgram.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledProgram
};
var h3d_impl_GlDriver = function(antiAlias) {
	if(antiAlias == null) {
		antiAlias = 0;
	}
	this.features = new haxe_ds_EnumValueMap();
	this.maxCompressedTexturesSupport = 0;
	this.rightHanded = false;
	this.firstShader = true;
	this.boundTextures = [];
	this.curTargets = [];
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	this.currentDivisor = _g;
	this.curColorMask = -1;
	this.lastActiveIndex = 0;
	this.curStEnabled = false;
	this.curStMaskBits = -1;
	this.curStOpBits = -1;
	this.curMatBits = -1;
	this.maxIdxCurAttribs = 0;
	this.curAttribs = [];
	h3d_impl_Driver.call(this);
	this.canvas = hxd_Window.getInstance().canvas;
	var options = { alpha : false, stencil : true, antialias : antiAlias > 0};
	if(h3d_impl_GlDriver.ALLOW_WEBGL2) {
		this.gl = this.canvas.getContext("webgl2",options);
	}
	if(this.gl == null) {
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,options);
	}
	if(this.gl == null) {
		throw haxe_Exception.thrown("Could not acquire GL context");
	}
	if(typeof(WebGLDebugUtils) != "undefined") {
		this.gl = WebGLDebugUtils.makeDebugContext(this.gl);
		this.glDebug = true;
	}
	this.commonFB = this.gl.createFramebuffer();
	this.programs = new haxe_ds_IntMap();
	this.defStencil = new h3d_mat_Stencil();
	this.frame = hxd_Timer.frameCount;
	var v = this.gl.getParameter(7938);
	var reg = new EReg("ES ([0-9]+\\.[0-9]+)","");
	if(reg.match(v)) {
		this.glES = parseFloat(reg.matched(1));
	}
	var reg = new EReg("[0-9]+\\.[0-9]+","");
	var v = this.gl.getParameter(35724);
	if(reg.match(v)) {
		this.glES = parseFloat(reg.matched(0));
		this.shaderVersion = Math.round(parseFloat(reg.matched(0)) * 100);
	}
	this.drawMode = 4;
	this.makeFeatures();
	if(this.hasFeature(h3d_impl_Feature.InstancedRendering) && this.glES < 3) {
		var extension = this.gl.getExtension("ANGLE_instanced_arrays");
		this.gl["vertexAttribDivisor"] = $bind(extension,extension.vertexAttribDivisorANGLE);
		this.gl["drawElementsInstanced"] = $bind(extension,extension.drawElementsInstancedANGLE);
	}
	hxsl_SharedShader.UNROLL_LOOPS = !this.hasFeature(h3d_impl_Feature.ShaderModel3);
	this.gl.pixelStorei(3333,1);
	this.gl.pixelStorei(3317,1);
};
$hxClasses["h3d.impl.GlDriver"] = h3d_impl_GlDriver;
h3d_impl_GlDriver.__name__ = "h3d.impl.GlDriver";
h3d_impl_GlDriver.__super__ = h3d_impl_Driver;
h3d_impl_GlDriver.prototype = $extend(h3d_impl_Driver.prototype,{
	setRenderFlag: function(r,value) {
		this.rightHanded = value > 0;
	}
	,setDebug: function(d) {
		this.debug = d;
	}
	,begin: function(frame) {
		this.frame = frame;
		this.resetStream();
		this.gl.useProgram(null);
		this.curShader = null;
		this.curBuffer = null;
	}
	,makeCompiler: function() {
		var glout = new hxsl_GlslOut();
		glout.glES = this.glES;
		glout.version = this.shaderVersion;
		glout.intelDriverFix = this.isIntelGpu;
		return glout;
	}
	,getDriverName: function(details) {
		var render = this.gl.getParameter(7937);
		if(details) {
			render += " GLv" + Std.string(this.gl.getParameter(7938));
		} else {
			render = render.split("/").shift();
		}
		render = render.split("WebGL ").join("");
		return "OpenGL " + render;
	}
	,compileShader: function(glout,shader) {
		var type;
		switch(shader.kind._hx_index) {
		case 0:
			type = 35633;
			break;
		case 1:
			type = 35632;
			break;
		case 4:
			throw haxe_Exception.thrown("Compute shader is not supported");
		default:
			throw haxe_Exception.thrown("assert");
		}
		var s = this.gl.createShader(type);
		if(shader.code == null) {
			shader.code = glout.run(shader.data);
			shader.data.funs = null;
		}
		this.gl.shaderSource(s,shader.code);
		this.gl.compileShader(s);
		if(this.gl.getShaderParameter(s,35713) != 1) {
			var log = this.gl.getShaderInfoLog(s);
			var lid = Std.parseInt(HxOverrides.substr(log,9,null));
			var line = lid == null ? null : shader.code.split("\n")[lid - 1];
			if(line == null) {
				line = "";
			} else {
				line = "(" + StringTools.trim(line) + ")";
			}
			var codeLines = shader.code.split("\n");
			var _g = 0;
			var _g1 = codeLines.length;
			while(_g < _g1) {
				var i = _g++;
				codeLines[i] = i + 1 + "\t" + codeLines[i];
			}
			throw haxe_Exception.thrown("An error occurred compiling the shaders: " + log + line + "\n\n" + codeLines.join("\n"));
		}
		return new h3d_impl__$GlDriver_CompiledShader(s,shader.kind,shader);
	}
	,initShader: function(p,s,shader,rt) {
		var prefix;
		switch(s.kind._hx_index) {
		case 0:
			prefix = "vertex";
			break;
		case 1:
			prefix = "fragment";
			break;
		default:
			prefix = "compute";
		}
		s.globals = this.gl.getUniformLocation(p.p,prefix + "Globals");
		s.params = this.gl.getUniformLocation(p.p,prefix + "Params");
		s.textures = [];
		var index = 0;
		var curT = null;
		var mode = 0;
		var name = "";
		var t = shader.textures;
		while(t != null) {
			var tt = t.type;
			var count = 1;
			switch(tt._hx_index) {
			case 15:
				var _g = tt.size;
				if(_g._hx_index == 0) {
					var n = _g.v;
					var t1 = tt.t;
					tt = t1;
					count = n;
				}
				break;
			case 17:
				var _g1 = tt.size;
				tt = hxsl_Type.TSampler(hxsl_TexDimension.T2D,false);
				break;
			default:
			}
			if(curT == null || !Type.enumEq(tt,curT)) {
				curT = tt;
				switch(tt._hx_index) {
				case 10:
					var dim = tt.dim;
					var arr = tt.isArray;
					switch(dim._hx_index) {
					case 1:
						mode = arr ? 35866 : 3553;
						break;
					case 2:
						if(arr == false) {
							mode = 32879;
						} else {
							throw haxe_Exception.thrown("Texture not supported " + Std.string(tt));
						}
						break;
					case 3:
						if(arr == false) {
							mode = 34067;
						} else {
							throw haxe_Exception.thrown("Texture not supported " + Std.string(tt));
						}
						break;
					default:
						throw haxe_Exception.thrown("Texture not supported " + Std.string(tt));
					}
					name = "Textures" + (dim == hxsl_TexDimension.T2D ? "" : HxOverrides.substr($hxEnums[dim.__enum__].__constructs__[dim._hx_index]._hx_name,1,null)) + (arr ? "Array" : "");
					break;
				case 11:
					var dim1 = tt.dim;
					var arr1 = tt.isArray;
					var chans = tt.channels;
					throw haxe_Exception.thrown("Texture not supported " + Std.string(tt));
				default:
					throw haxe_Exception.thrown("Unsupported texture type " + Std.string(tt));
				}
				index = 0;
			}
			var _g2 = 0;
			var _g3 = count;
			while(_g2 < _g3) {
				var i = _g2++;
				var loc = this.gl.getUniformLocation(p.p,prefix + name + "[" + index + "]");
				if(loc == null) {
					throw haxe_Exception.thrown("Texture " + rt.spec.instances[t.instance].shader.data.name + "." + t.name + " is missing from generated shader");
				}
				s.textures.push({ u : loc, t : curT, mode : mode});
				++index;
			}
			t = t.next;
		}
		if(shader.bufferCount > 0) {
			s.bufferTypes = [];
			var bp = s.shader.buffers;
			while(bp != null) {
				var kind;
				var _g = bp.type;
				if(_g._hx_index == 16) {
					var _g1 = _g.t;
					var _g2 = _g.size;
					var kind1 = _g.kind;
					kind = kind1;
				} else {
					throw haxe_Exception.thrown("assert");
				}
				s.bufferTypes.push(kind);
				bp = bp.next;
			}
			var _g = [];
			var _g1 = 0;
			var _g2 = shader.bufferCount;
			while(_g1 < _g2) {
				var i = _g1++;
				var tmp;
				switch(s.bufferTypes[i]._hx_index) {
				case 0:
					tmp = this.gl.getUniformBlockIndex(p.p,(shader.kind == hxsl_FunctionKind.Vertex ? "vertex_" : "") + "uniform_buffer" + i);
					break;
				case 1:
					throw haxe_Exception.thrown("Storage buffer not supported in WebGL");
				case 2:
					throw haxe_Exception.thrown("RW buffer not supported in WebGL");
				default:
					throw haxe_Exception.thrown("assert");
				}
				_g.push(tmp);
			}
			s.buffers = _g;
			var start = 0;
			if(s.kind == hxsl_FunctionKind.Fragment) {
				start = rt.vertex.bufferCount;
			}
			var _g = 0;
			var _g1 = shader.bufferCount;
			while(_g < _g1) {
				var i = _g++;
				switch(s.bufferTypes[i]._hx_index) {
				case 0:
					this.gl.uniformBlockBinding(p.p,s.buffers[i],i + start);
					break;
				case 1:case 2:
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
			}
		}
	}
	,selectShader: function(shader) {
		var p = this.programs.h[shader.id];
		if(p == null) {
			p = new h3d_impl__$GlDriver_CompiledProgram();
			var glout = this.makeCompiler();
			p.vertex = this.compileShader(glout,shader.vertex);
			if(shader.fragment != null) {
				p.fragment = this.compileShader(glout,shader.fragment);
			}
			p.p = this.gl.createProgram();
			this.gl.attachShader(p.p,p.vertex.s);
			if(p.fragment != null) {
				this.gl.attachShader(p.p,p.fragment.s);
			}
			var log = null;
			try {
				this.gl.linkProgram(p.p);
				if(this.gl.getProgramParameter(p.p,35714) != 1) {
					log = this.gl.getProgramInfoLog(p.p);
				}
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown("Shader linkage error: " + Std.string(e) + " (" + this.getDriverName(false) + ")");
			}
			this.gl.deleteShader(p.vertex.s);
			if(p.fragment != null) {
				this.gl.deleteShader(p.fragment.s);
			}
			if(log != null) {
				this.gl.deleteProgram(p.p);
				throw haxe_Exception.thrown("Program linkage failure: " + log + "\nVertex=\n" + shader.vertex.code + (shader.fragment == null ? "" : "\n\nFragment=\n" + shader.fragment.code));
			}
			this.firstShader = false;
			this.initShader(p,p.vertex,shader.vertex,shader);
			if(p.fragment != null) {
				this.initShader(p,p.fragment,shader.fragment,shader);
			}
			p.attribs = [];
			p.hasAttribIndex = 0;
			var format = [];
			var _g = 0;
			var _g1 = shader.vertex.data.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.kind._hx_index == 1) {
					var t = hxd_InputFormat.fromHXSL(v.type);
					var index = this.gl.getAttribLocation(p.p,glout.varNames.h.hasOwnProperty(v.id) ? glout.varNames.h[v.id] : v.name);
					if(index < 0) {
						continue;
					}
					if(index >= 32) {
						throw haxe_Exception.thrown("assert");
					}
					var a = new h3d_impl__$GlDriver_CompiledAttribute();
					a.type = 5126;
					a.index = index;
					a.size = t == js_Boot.__cast(9 , Int) ? 1 : t;
					var _g2 = v.type;
					if(_g2._hx_index == 9) {
						var n = _g2.size;
						a.type = 5120;
						a.size = n;
					}
					a.divisor = 0;
					if(v.qualifiers != null) {
						var _g3 = 0;
						var _g4 = v.qualifiers;
						while(_g3 < _g4.length) {
							var q = _g4[_g3];
							++_g3;
							if(q._hx_index == 9) {
								var n1 = q.v;
								a.divisor = n1;
							}
						}
					}
					p.attribs.push(a);
					p.hasAttribIndex |= 1 << a.index;
					format.push(new hxd_BufferInput(v.name,t,0));
				}
			}
			p.format = hxd_BufferFormat.make(format);
			this.programs.h[shader.id] = p;
		}
		if(this.curShader == p) {
			return false;
		}
		this.setProgram(p);
		return true;
	}
	,setProgram: function(p) {
		this.gl.useProgram(p.p);
		var _g = 0;
		var _g1 = p.attribs;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(!this.curAttribs[a.index]) {
				this.gl.enableVertexAttribArray(a.index);
				this.curAttribs[a.index] = true;
				if(this.maxIdxCurAttribs < a.index) {
					this.maxIdxCurAttribs = a.index;
				}
			}
		}
		var lastIdxCurAttribTrue = 0;
		var _g = 0;
		var _g1 = this.maxIdxCurAttribs + 1;
		while(_g < _g1) {
			var i = _g++;
			if(this.curAttribs[i] && (p.hasAttribIndex & 1 << i) == 0) {
				this.gl.disableVertexAttribArray(i);
				this.curAttribs[i] = false;
			} else if(this.curAttribs[i]) {
				lastIdxCurAttribTrue = i;
			}
		}
		this.maxIdxCurAttribs = lastIdxCurAttribTrue;
		this.curShader = p;
		this.curBuffer = null;
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
	}
	,uploadShaderBuffers: function(buf,which) {
		this.uploadBuffer(buf,this.curShader.vertex,buf.vertex,which);
		if(this.curShader.fragment != null) {
			this.uploadBuffer(buf,this.curShader.fragment,buf.fragment,which);
		}
	}
	,uploadBuffer: function(buffer,s,buf,which) {
		switch(which) {
		case 0:
			if(s.globals != null) {
				var a = buf.globals.subarray(0,s.shader.globalsSize * 4);
				this.gl.uniform4fv(s.globals,a);
			}
			break;
		case 1:
			if(s.params != null) {
				var a = buf.params.subarray(0,s.shader.paramsSize * 4);
				this.gl.uniform4fv(s.params,a);
			}
			break;
		case 2:
			var tcount = s.textures.length;
			var _g = 0;
			var _g1 = s.textures.length;
			while(_g < _g1) {
				var i = _g++;
				var t = buf.tex[i];
				var pt = s.textures[i];
				if(t == null || t.t == null && (t.isDepth() || t.realloc == null)) {
					var _g2 = pt.t;
					if(_g2._hx_index == 10) {
						var _g3 = _g2.isArray;
						if(_g2.dim._hx_index == 3) {
							if(_g3 == false) {
								t = h3d_mat_Texture.defaultCubeTexture();
							} else {
								throw haxe_Exception.thrown("Missing texture");
							}
						} else if(_g3 == false) {
							var color = h3d_mat_Defaults.loadingTextureColor;
							t = h3d_mat_Texture.fromColor(color,(color >>> 24) / 255);
						} else {
							throw haxe_Exception.thrown("Missing texture");
						}
					} else {
						throw haxe_Exception.thrown("Missing texture");
					}
				}
				if(t != null && t.t == null && t.realloc != null) {
					var s1 = this.curShader;
					t.alloc();
					t.realloc();
					if(this.curShader != s1) {
						this.setProgram(s1);
						this.uploadShaderBuffers(buffer,0);
						this.uploadShaderBuffers(buffer,1);
						this.uploadShaderBuffers(buffer,2);
						return;
					}
				}
				t.set_lastFrame(this.frame);
				if(pt.u == null) {
					continue;
				}
				var idx = s.kind == hxsl_FunctionKind.Fragment ? this.curShader.vertex.textures.length + i : i;
				if(this.boundTextures[idx] != t.t) {
					this.boundTextures[idx] = t.t;
					var mode = this.getBindType(t);
					if(mode != pt.mode) {
						throw haxe_Exception.thrown("Texture format mismatch: " + Std.string(t) + " should be " + Std.string(pt.t));
					}
					this.gl.activeTexture(33984 + idx);
					this.gl.uniform1i(pt.u,idx);
					this.gl.bindTexture(mode,t.t.t);
					this.lastActiveIndex = idx;
				}
				var mip = t.mipMap._hx_index;
				var filter = t.filter._hx_index;
				var wrap = t.wrap._hx_index;
				var bits = mip | filter << 3 | wrap << 6;
				if(bits != t.t.bits) {
					t.t.bits = bits;
					var flags = h3d_impl_GlDriver.TFILTERS[mip][filter];
					var mode1 = pt.mode;
					this.gl.texParameteri(mode1,10240,flags[0]);
					this.gl.texParameteri(mode1,10241,flags[1]);
					this.gl.texParameteri(mode1,34892,0);
					var w = h3d_impl_GlDriver.TWRAP[wrap];
					this.gl.texParameteri(mode1,10242,w);
					this.gl.texParameteri(mode1,10243,w);
				}
				if(t.t.startMip != t.startingMip) {
					this.gl.texParameteri(pt.mode,33084,t.startingMip);
					t.t.startMip = t.startingMip;
				}
			}
			break;
		case 3:
			if(s.buffers != null) {
				var start = 0;
				if(s.kind == hxsl_FunctionKind.Fragment && this.curShader.vertex.buffers != null) {
					start = this.curShader.vertex.buffers.length;
				}
				var _g = 0;
				var _g1 = s.buffers.length;
				while(_g < _g1) {
					var i = _g++;
					switch(s.bufferTypes[i]._hx_index) {
					case 0:
						this.gl.bindBufferBase(35345,i + start,buf.buffers[i].vbuf);
						break;
					case 1:
						this.gl.bindBufferBase(37074,i + start,buf.buffers[i].vbuf);
						break;
					case 2:
						if((buf.buffers[i].flags & 1 << h3d_BufferFlag.ReadWriteBuffer._hx_index) == 0) {
							throw haxe_Exception.thrown("Buffer was allocated without ReadWriteBuffer flag");
						}
						this.gl.bindBufferBase(37074,i + start,buf.buffers[i].vbuf);
						break;
					default:
						throw haxe_Exception.thrown("assert");
					}
				}
			}
			break;
		}
	}
	,selectMaterial: function(pass) {
		var bits = pass.bits;
		if(this.curTarget == null == this.rightHanded) {
			switch(pass.culling._hx_index) {
			case 1:
				bits = bits & -4 | 2;
				break;
			case 2:
				bits = bits & -4 | 1;
				break;
			default:
			}
		}
		this.selectMaterialBits(bits);
		if(this.curColorMask != pass.colorMask) {
			var m = pass.colorMask;
			this.gl.colorMask((m & 1) != 0,(m & 2) != 0,(m & 4) != 0,(m & 8) != 0);
			var mi = m >> 4;
			if(mi > 0) {
				throw haxe_Exception.thrown("GL ColorMaski support requires hlsdl 1.14+");
			}
			this.curColorMask = m;
		}
		var s = this.defStencil;
		if(pass.stencil == null) {
			if(this.curStEnabled) {
				this.gl.disable(2960);
				this.curStEnabled = false;
			}
		} else {
			s = pass.stencil;
			if(!this.curStEnabled) {
				this.gl.enable(2960);
				this.curStEnabled = true;
			}
		}
		this.selectStencilBits(s.opBits,s.maskBits);
	}
	,selectMaterialBits: function(bits) {
		var diff = bits ^ this.curMatBits;
		if(this.curMatBits < 0) {
			diff = -1;
		}
		if(diff == 0) {
			return;
		}
		var wireframe = (bits & 268435456) != 0;
		var fallback = true;
		if(fallback) {
			this.drawMode = wireframe ? 3 : 4;
		}
		if((diff & 3) != 0) {
			var cull = bits & 3;
			if(cull == 0) {
				this.gl.disable(2884);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits & 3) == 0) {
					this.gl.enable(2884);
				}
				this.gl.cullFace(h3d_impl_GlDriver.FACES[cull]);
			}
		}
		if((diff & 4194240) != 0) {
			var csrc = bits >> 6 & 15;
			var cdst = bits >> 10 & 15;
			var asrc = bits >> 14 & 15;
			var adst = bits >> 18 & 15;
			if(csrc == asrc && cdst == adst) {
				if(csrc == 0 && cdst == 1) {
					this.gl.disable(3042);
				} else {
					if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
						this.gl.enable(3042);
					}
					this.gl.blendFunc(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst]);
				}
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
					this.gl.enable(3042);
				}
				this.gl.blendFuncSeparate(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst],h3d_impl_GlDriver.BLEND[asrc],h3d_impl_GlDriver.BLEND[adst]);
			}
		}
		if((diff & 264241152) != 0) {
			var cop = bits >> 22 & 7;
			var aop = bits >> 25 & 7;
			if(cop == aop) {
				this.gl.blendEquation(h3d_impl_GlDriver.OP[cop]);
			} else {
				this.gl.blendEquationSeparate(h3d_impl_GlDriver.OP[cop],h3d_impl_GlDriver.OP[aop]);
			}
		}
		if((diff & 4) != 0) {
			this.gl.depthMask((bits >> 2 & 1) != 0);
		}
		if((diff & 56) != 0) {
			var cmp = bits >> 3 & 7;
			if(cmp == 0) {
				this.gl.disable(2929);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 3 & 7) == 0) {
					this.gl.enable(2929);
				}
				this.gl.depthFunc(h3d_impl_GlDriver.COMPARE[cmp]);
			}
		}
		this.curMatBits = bits;
	}
	,selectStencilBits: function(opBits,maskBits) {
		var diffOp = opBits ^ this.curStOpBits;
		var diffMask = maskBits ^ this.curStMaskBits;
		if((diffOp | diffMask) == 0) {
			return;
		}
		if((diffOp & 4088) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.STENCIL_OP[opBits >> 6 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 9 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 3 & 7]);
		}
		if((diffOp & 16744448) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.STENCIL_OP[opBits >> 18 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 21 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 15 & 7]);
		}
		if((diffOp & 7 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.COMPARE[opBits & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffOp & 28672 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.COMPARE[opBits >> 12 & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffMask & 65280) != 0) {
			var w = maskBits >> 8 & 255;
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[2],w);
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[1],w);
		}
		this.curStOpBits = opBits;
		this.curStMaskBits = maskBits;
	}
	,clear: function(color,depth,stencil) {
		var bits = 0;
		if(color != null) {
			this.gl.colorMask(true,true,true,true);
			this.curColorMask = 15;
			this.gl.clearColor(color.x,color.y,color.z,color.w);
			bits |= 16384;
		}
		if(depth != null) {
			this.gl.depthMask(true);
			if(this.curMatBits >= 0) {
				this.curMatBits |= 4;
			}
			this.gl.clearDepth(depth);
			bits |= 256;
		}
		if(stencil != null) {
			this.selectStencilBits(this.defStencil.opBits,this.defStencil.maskBits);
			this.gl.clearStencil(stencil);
			bits |= 1024;
		}
		if(bits != 0) {
			this.gl.clear(bits);
		}
		if(this.curTarget != null) {
			this.curTarget.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		}
	}
	,resize: function(width,height) {
		if(this.canvas.style.width == "") {
			var tmp = width / window.devicePixelRatio | 0;
			this.canvas.style.width = tmp + "px";
			var tmp = height / window.devicePixelRatio | 0;
			this.canvas.style.height = tmp + "px";
		}
		this.canvas.width = width;
		this.canvas.height = height;
		this.bufferWidth = width;
		this.bufferHeight = height;
		this.gl.viewport(0,0,width,height);
		if(this.defaultDepth != null) {
			this.disposeDepthBuffer(this.defaultDepth);
			this.defaultDepth.width = this.bufferWidth;
			this.defaultDepth.height = this.bufferHeight;
			this.defaultDepth.t = this.allocDepthBuffer(this.defaultDepth);
		}
	}
	,getChannels: function(t) {
		switch(t.internalFmt) {
		case 6407:
			return 6407;
		case 6408:
			return 6408;
		case 32857:
			return 6408;
		case 6403:case 33321:case 33322:case 33325:case 33326:
			return 6403;
		case 33319:case 33323:case 33324:case 33327:case 33328:
			return 33319;
		case 34836:case 34842:
			return 6408;
		case 35898:
			return 6407;
		case 35904:case 35905:
			return 6407;
		case 32859:case 33777:case 33778:case 33779:case 36492:
			return 6408;
		case 32852:case 34837:case 34843:case 36495:
			return 6407;
		default:
			throw haxe_Exception.thrown("Invalid format " + t.internalFmt);
		}
	}
	,isSupportedFormat: function(fmt) {
		switch(fmt._hx_index) {
		case 2:
			return true;
		case 3:case 4:
			return this.hasFeature(h3d_impl_Feature.FloatTextures);
		case 14:case 15:
			return this.hasFeature(h3d_impl_Feature.SRGBTextures);
		case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 16:case 17:
			return this.glES >= 3;
		case 22:
			var n = fmt.v;
			return n <= this.maxCompressedTexturesSupport;
		default:
			return false;
		}
	}
	,getBindType: function(t) {
		if((t.flags & 1 << h3d_mat_TextureFlags.Is3D._hx_index) != 0) {
			return 32879;
		}
		var isArray = (t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0;
		if((t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			return 34067;
		}
		if(isArray) {
			return 35866;
		} else {
			return 3553;
		}
	}
	,allocTexture: function(t) {
		var _gthis = this;
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var tt = this.gl.createTexture();
		var bind = this.getBindType(t);
		var tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : bind, bias : 0, startMip : t.startingMip};
		var _g = t.format;
		switch(_g._hx_index) {
		case 1:
			tt1.internalFmt = 32856;
			break;
		case 2:
			break;
		case 3:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.pixelFmt = 5131;
				tt1.internalFmt = 34842;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 4:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.internalFmt = 34836;
				tt1.pixelFmt = 5126;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 5:
			tt1.internalFmt = 33321;
			break;
		case 6:
			tt1.internalFmt = 33325;
			tt1.pixelFmt = 5131;
			break;
		case 7:
			tt1.internalFmt = 33326;
			tt1.pixelFmt = 5126;
			break;
		case 8:
			tt1.internalFmt = 33323;
			break;
		case 9:
			tt1.internalFmt = 33327;
			tt1.pixelFmt = 5131;
			break;
		case 10:
			tt1.internalFmt = 33328;
			tt1.pixelFmt = 5126;
			break;
		case 11:
			tt1.internalFmt = 6407;
			break;
		case 12:
			tt1.internalFmt = 34843;
			tt1.pixelFmt = 5131;
			break;
		case 13:
			tt1.internalFmt = 34837;
			tt1.pixelFmt = 5126;
			break;
		case 14:
			tt1.internalFmt = 35905;
			break;
		case 16:
			tt1.internalFmt = 32857;
			tt1.pixelFmt = 33640;
			break;
		case 17:
			tt1.internalFmt = 35898;
			tt1.pixelFmt = 35899;
			break;
		case 18:
			tt1.internalFmt = 33322;
			tt1.pixelFmt = 5123;
			break;
		case 19:
			tt1.internalFmt = 33324;
			tt1.pixelFmt = 5123;
			break;
		case 20:
			tt1.internalFmt = 32852;
			tt1.pixelFmt = 5123;
			break;
		case 21:
			tt1.internalFmt = 32859;
			tt1.pixelFmt = 5123;
			break;
		case 22:
			var n = _g.v;
			if(n <= this.maxCompressedTexturesSupport) {
				if((t.width & 3) != 0 || (t.height & 3) != 0) {
					throw haxe_Exception.thrown("Compressed texture " + Std.string(t) + " has size " + t.width + "x" + t.height + " - must be a multiple of 4");
				}
				switch(n) {
				case 1:
					tt1.internalFmt = 33777;
					break;
				case 2:
					tt1.internalFmt = 33778;
					break;
				case 3:
					tt1.internalFmt = 33779;
					break;
				case 6:
					tt1.internalFmt = 36495;
					break;
				case 7:
					tt1.internalFmt = 36492;
					break;
				default:
					throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
				}
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		default:
			throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
		}
		if(tt1.pixelFmt == 5123 && !this.has16Bits) {
			throw haxe_Exception.thrown("16 bit textures requires EXT_texture_norm16 extension");
		}
		t.set_lastFrame(this.frame);
		t.flags &= -1 - (1 << h3d_mat_TextureFlags.WasCleared._hx_index);
		this.gl.bindTexture(bind,tt1.t);
		var outOfMem = false;
		this.gl.texParameteri(bind,33084,t.startingMip);
		this.gl.texParameteri(bind,33085,t.get_mipLevels() - 1);
		var sizedFormat = tt1.internalFmt == 6408 ? 32856 : tt1.internalFmt;
		if(((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0 || (t.flags & 1 << h3d_mat_TextureFlags.Is3D._hx_index) != 0) && (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) == 0) {
			this.gl.texStorage3D(bind,t.get_mipLevels(),sizedFormat,tt1.width,tt1.height,t.get_layerCount());
			if(h3d_impl_GlDriver.outOfMemoryCheck) {
				var err = _gthis.gl.getError();
				if(err == 1285) {
					outOfMem = true;
				} else if(err != 0) {
					throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
				}
			}
		} else {
			this.gl.texStorage2D(bind,t.get_mipLevels(),sizedFormat,tt1.width,tt1.height);
			if(h3d_impl_GlDriver.outOfMemoryCheck) {
				var err = _gthis.gl.getError();
				if(err == 1285) {
					outOfMem = true;
				} else if(err != 0) {
					throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
				}
			}
		}
		this.restoreBind();
		if(outOfMem) {
			this.gl.deleteTexture(tt1.t);
			return null;
		}
		return tt1;
	}
	,restoreBind: function() {
		var t = this.boundTextures[this.lastActiveIndex];
		if(t == null) {
			this.gl.bindTexture(3553,null);
		} else {
			this.gl.bindTexture(t.bind,t.t);
		}
	}
	,allocDepthBuffer: function(t) {
		var tt = this.gl.createTexture();
		var tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : 3553, bias : 0, startMip : 0};
		var fmt = 6402;
		switch(t.format._hx_index) {
		case 23:
			tt1.internalFmt = 33189;
			break;
		case 24:
			if(this.glES >= 3) {
				tt1.internalFmt = 6402;
			} else {
				throw haxe_Exception.thrown("Unsupported depth format " + Std.string(t.format));
			}
			break;
		case 25:
			tt1.internalFmt = 35056;
			tt1.pixelFmt = 34042;
			fmt = 34041;
			break;
		case 26:
			tt1.internalFmt = 36012;
			break;
		default:
			throw haxe_Exception.thrown("Unsupported depth format " + Std.string(t.format));
		}
		t.set_lastFrame(this.frame);
		t.flags &= -1 - (1 << h3d_mat_TextureFlags.WasCleared._hx_index);
		this.gl.bindTexture(tt1.bind,tt1.t);
		this.gl.texParameteri(tt1.bind,10241,9728);
		this.gl.texParameteri(tt1.bind,10240,9728);
		this.gl.texParameteri(tt1.bind,10242,33071);
		this.gl.texParameteri(tt1.bind,10243,33071);
		this.gl.texImage2D(tt1.bind,0,tt1.internalFmt,tt1.width,tt1.height,0,fmt,tt1.pixelFmt,null);
		this.restoreBind();
		return tt1;
	}
	,disposeDepthBuffer: function(b) {
		if(b.t != null && b.t.t != null) {
			this.gl.deleteTexture(b.t.t);
			b.t = null;
		}
	}
	,getDefaultDepthBuffer: function() {
		if(this.defaultDepth != null) {
			return this.defaultDepth;
		}
		this.defaultDepth = new h3d_mat_Texture(0,0,null,hxd_PixelFormat.Depth24Stencil8);
		this.defaultDepth.name = "defaultDepthBuffer";
		this.defaultDepth.width = this.bufferWidth;
		this.defaultDepth.height = this.bufferHeight;
		this.defaultDepth.t = this.allocDepthBuffer(this.defaultDepth);
		return this.defaultDepth;
	}
	,allocBuffer: function(b) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var vb = this.gl.createBuffer();
		var type = (b.flags & 1 << h3d_BufferFlag.IndexBuffer._hx_index) != 0 ? 34963 : 34962;
		this.gl.bindBuffer(type,vb);
		if(b.vertices * b.format.stride == 0) {
			throw haxe_Exception.thrown("assert");
		}
		this.gl.bufferData(type,b.vertices * b.format.strideBytes,(b.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0 ? 35048 : 35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(type,null);
		if((b.flags & 1 << h3d_BufferFlag.IndexBuffer._hx_index) != 0) {
			this.curIndexBuffer = null;
		}
		if(outOfMem) {
			this.gl.deleteBuffer(vb);
			return null;
		}
		return vb;
	}
	,disposeTexture: function(t) {
		var tt = t.t;
		if(tt == null) {
			return;
		}
		t.t = null;
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.boundTextures[i] == tt) {
				this.boundTextures[i] = null;
			}
		}
		this.gl.deleteTexture(tt.t);
	}
	,disposeBuffer: function(b) {
		this.gl.deleteBuffer(b.vbuf);
	}
	,generateMipMaps: function(t) {
		var bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		this.gl.generateMipmap(bind);
		this.restoreBind();
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
		if(t.format != hxd_PixelFormat.RGBA || t.get_layerCount() != 1) {
			var pixels = bmp.getPixels();
			this.uploadTexturePixels(t,pixels,mipLevel,side);
			pixels.dispose();
		} else {
			var img = bmp.ctx;
			this.gl.bindTexture(3553,t.t.t);
			this.gl.texSubImage2D(3553,mipLevel,0,0,this.getChannels(t.t),t.t.pixelFmt,img.getImageData(0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height));
			this.restoreBind();
		}
	}
	,resetStream: function() {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
		var cubic = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var face = 3553;
		if(cubic) {
			face = h3d_impl_GlDriver.CUBE_FACES[side];
		}
		if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			face = 35866;
		} else if((t.flags & 1 << h3d_mat_TextureFlags.Is3D._hx_index) != 0) {
			face = 32879;
		}
		var bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		pixels.convert(t.format);
		var dataLen = pixels.dataSize;
		var buffer;
		switch(t.format._hx_index) {
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 2);
			break;
		case 16:case 17:
			buffer = new Uint32Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 2);
			break;
		case 3:case 6:case 9:case 12:case 18:case 19:case 20:case 21:
			buffer = new Uint16Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 1);
			break;
		default:
			buffer = new Uint8Array(pixels.bytes.b.buffer,pixels.offset,dataLen);
		}
		var _g = t.format;
		var tmp;
		if(_g._hx_index == 22) {
			var _g1 = _g.v;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0 || (t.flags & 1 << h3d_mat_TextureFlags.Is3D._hx_index) != 0) {
				this.gl.compressedTexSubImage3D(face,mipLevel,0,0,side,pixels.width,pixels.height,1,t.t.internalFmt,buffer);
			} else {
				this.gl.compressedTexSubImage2D(face,mipLevel,0,0,pixels.width,pixels.height,t.t.internalFmt,buffer);
			}
		} else if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0 || (t.flags & 1 << h3d_mat_TextureFlags.Is3D._hx_index) != 0) {
			this.gl.texSubImage3D(face,mipLevel,0,0,side,pixels.width,pixels.height,1,this.getChannels(t.t),t.t.pixelFmt,buffer);
		} else {
			this.gl.texSubImage2D(face,mipLevel,0,0,pixels.width,pixels.height,this.getChannels(t.t),t.t.pixelFmt,buffer);
		}
		t.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.restoreBind();
	}
	,uploadBufferData: function(b,startVertex,vertexCount,buf,bufPos) {
		var stride = b.format.strideBytes;
		this.gl.bindBuffer(34962,b.vbuf);
		var buf1 = buf.array;
		var sub = new Float32Array(buf1.buffer,bufPos * 4,vertexCount * stride >> 2);
		this.gl.bufferSubData(34962,startVertex * stride,sub);
		this.gl.bindBuffer(34962,null);
	}
	,uploadBufferBytes: function(b,startVertex,vertexCount,buf,bufPos) {
		var stride = b.format.strideBytes;
		var type = (b.flags & 1 << h3d_BufferFlag.IndexBuffer._hx_index) != 0 ? 34963 : 34962;
		this.gl.bindBuffer(type,b.vbuf);
		var sub = new Uint8Array(buf.b.bufferValue,bufPos,vertexCount * stride);
		this.gl.bufferSubData(type,startVertex * stride,sub);
		this.gl.bindBuffer(type,null);
		if((b.flags & 1 << h3d_BufferFlag.IndexBuffer._hx_index) != 0) {
			this.curIndexBuffer = null;
		}
	}
	,uploadIndexData: function(i,startIndice,indiceCount,buf,bufPos) {
		var bits = i.format.strideBytes >> 1;
		this.gl.bindBuffer(34963,i.vbuf);
		var buf1 = new Uint16Array(buf);
		var sub = new Uint16Array(buf1.buffer,bufPos << bits,indiceCount);
		this.gl.bufferSubData(34963,startIndice << bits,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	,selectBuffer: function(b) {
		if(b == this.curBuffer) {
			return;
		}
		if(this.curShader == null) {
			throw haxe_Exception.thrown("No shader selected");
		}
		this.gl.bindBuffer(34962,b.vbuf);
		this.curBuffer = b;
		var strideBytes = b.format.strideBytes;
		var map = b.format.resolveMapping(this.curShader.format);
		var _g_current = 0;
		var _g_array = this.curShader.attribs;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var a = _g_value;
			var inf = map[i];
			var norm = false;
			var tmp = this.gl;
			var a1 = a.index;
			var a2 = a.size;
			var tmp1;
			switch(inf & 7) {
			case 0:
				tmp1 = a.type;
				break;
			case 1:
				tmp1 = 5131;
				break;
			case 2:
				norm = true;
				tmp1 = 5121;
				break;
			case 3:
				norm = true;
				tmp1 = 5120;
				break;
			}
			tmp.vertexAttribPointer(a1,a2,tmp1,norm,strideBytes,inf >> 16);
			if(this.currentDivisor[a.index] != a.divisor) {
				this.currentDivisor[a.index] = a.divisor;
				this.gl.vertexAttribDivisor(a.index,a.divisor);
			}
		}
	}
	,selectMultiBuffers: function(format,buffers) {
		var format1 = this.curShader.format;
		var m = format.mappings[format1.uid];
		if(m == null) {
			m = format.makeMapping(format1);
		}
		var map = m;
		var _g_current = 0;
		var _g_array = this.curShader.attribs;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var a = _g_value;
			var inf = map[i];
			var b = buffers[inf >> 3 & 255];
			if(this.curBuffer != b) {
				this.gl.bindBuffer(34962,b.vbuf);
				this.curBuffer = b;
			}
			var norm = false;
			var tmp = this.gl;
			var a1 = a.index;
			var a2 = a.size;
			var tmp1;
			switch(inf & 7) {
			case 0:
				tmp1 = a.type;
				break;
			case 1:
				tmp1 = 5131;
				break;
			case 2:
				norm = true;
				tmp1 = 5121;
				break;
			case 3:
				norm = true;
				tmp1 = 5120;
				break;
			}
			tmp.vertexAttribPointer(a1,a2,tmp1,norm,b.format.strideBytes,inf >> 16);
			if(this.currentDivisor[a.index] != a.divisor) {
				this.currentDivisor[a.index] = a.divisor;
				this.gl.vertexAttribDivisor(a.index,a.divisor);
			}
		}
	}
	,draw: function(ibuf,startIndex,ntriangles) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.vbuf);
		}
		if(ibuf.format.strideBytes == 4) {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5125,startIndex * 4);
		} else {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5123,startIndex * 2);
		}
	}
	,drawInstanced: function(ibuf,commands) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.vbuf);
		}
		var kind;
		var size;
		if(ibuf.format.strideBytes == 4) {
			kind = 5125;
			size = 4;
		} else {
			kind = 5123;
			size = 2;
		}
		var args = commands.data;
		if(args != null) {
			var p = 0;
			var _g = 0;
			var _g1 = args.length / 3 | 0;
			while(_g < _g1) {
				var i = _g++;
				this.gl.drawElementsInstanced(this.drawMode,args[p++],kind,args[p++] * size,args[p++]);
			}
		} else {
			this.gl.drawElementsInstanced(this.drawMode,commands.indexCount,kind,commands.startIndex * size,commands.commandCount);
		}
	}
	,end: function() {
	}
	,isDisposed: function() {
		return this.gl.isContextLost();
	}
	,setRenderZone: function(x,y,width,height) {
		if(x == 0 && y == 0 && width < 0 && height < 0) {
			this.gl.disable(3089);
		} else {
			this.gl.enable(3089);
			if(this.curTarget == null) {
				y = this.bufferHeight - (y + height);
			}
			this.gl.scissor(x,y,width,height);
		}
	}
	,setDrawBuffers: function(k) {
		if(this.glES >= 3) {
			this.gl.drawBuffers(h3d_impl_GlDriver.CBUFFERS[k]);
		} else if(this.mrtExt != null) {
			this.mrtExt.drawBuffersWEBGL(h3d_impl_GlDriver.CBUFFERS[k]);
		}
	}
	,unbindTargets: function() {
		if(this.curTarget != null && this.numTargets > 1) {
			while(this.numTargets > 1) {
				this.gl.framebufferTexture2D(36160,36064 + --this.numTargets,3553,null,0);
				this.curTargets[this.numTargets] = null;
			}
			this.setDrawBuffers(1);
		}
	}
	,setRenderTarget: function(tex,layer,mipLevel,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		this.unbindTargets();
		this.curTarget = tex;
		if(tex == null) {
			this.gl.bindFramebuffer(36160,null);
			this.gl.viewport(0,0,this.bufferWidth,this.bufferHeight);
			return;
		}
		if(tex.depthBuffer != null && (tex.depthBuffer.width != tex.width || tex.depthBuffer.height != tex.height)) {
			throw haxe_Exception.thrown("Invalid depth buffer size : does not match render target size");
		}
		if(mipLevel > 0 && this.glES == 1) {
			throw haxe_Exception.thrown("Cannot render to mipLevel in WebGL1, use upload() instead");
		}
		if(tex.t == null) {
			tex.alloc();
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			var bind = this.getBindType(tex);
			this.gl.bindTexture(bind,tex.t.t);
			this.gl.generateMipmap(bind);
			this.restoreBind();
		}
		tex.set_lastFrame(this.frame);
		this.curTargetLayer = layer;
		this.curTargetMip = mipLevel;
		this.gl.bindFramebuffer(36160,this.commonFB);
		if((tex.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.framebufferTextureLayer(36160,36064,tex.t.t,mipLevel,layer);
		} else {
			this.gl.framebufferTexture2D(36160,36064,(tex.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0 ? h3d_impl_GlDriver.CUBE_FACES[layer] : 3553,tex.t.t,mipLevel);
		}
		this.setPolygonOffset(tex.depthBuffer);
		this.setDepthClamp(tex.depthBuffer);
		if(tex.depthBuffer != null && depthBinding != h3d_DepthBinding.NotBound) {
			if(tex.depthBuffer.hasStencil() && tex.depthBuffer.format == hxd_PixelFormat.Depth24Stencil8) {
				this.gl.framebufferTexture2D(36160,33306,3553,tex.depthBuffer.t.t,0);
			} else {
				this.gl.framebufferTexture2D(36160,33306,3553,null,0);
				this.gl.framebufferTexture2D(36160,36096,3553,tex.depthBuffer.t.t,0);
				this.gl.framebufferTexture2D(36160,36128,3553,tex.depthBuffer.hasStencil() ? tex.depthBuffer.t.t : null,0);
			}
		} else {
			this.gl.framebufferTexture2D(36160,33306,3553,null,0);
			this.gl.framebufferTexture2D(36160,36096,3553,null,0);
			this.gl.framebufferTexture2D(36160,36128,3553,null,0);
		}
		var w = tex.width >> mipLevel;
		if(w == 0) {
			w = 1;
		}
		var h = tex.height >> mipLevel;
		if(h == 0) {
			h = 1;
		}
		this.gl.viewport(0,0,w,h);
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
			this.clear(h3d_impl_GlDriver.BLACK);
		}
		if(this.glDebug) {
			var code = this.gl.checkFramebufferStatus(36160);
			if(code != 36053) {
				throw haxe_Exception.thrown("Invalid frame buffer: " + code);
			}
		}
	}
	,setRenderTargets: function(textures,depthBinding) {
		if(depthBinding == null) {
			depthBinding = h3d_DepthBinding.ReadWrite;
		}
		this.unbindTargets();
		this.setRenderTarget(textures[0],null,null,depthBinding);
		if(textures.length < 2) {
			return;
		}
		this.numTargets = textures.length;
		var needClear = false;
		var _g = 1;
		var _g1 = textures.length;
		while(_g < _g1) {
			var i = _g++;
			var tex = textures[i];
			if(tex.t == null) {
				tex.alloc();
			}
			this.gl.framebufferTexture2D(36160,36064 + i,3553,tex.t.t,0);
			this.curTargets[i] = tex;
			tex.set_lastFrame(this.frame);
			if((tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
				tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
				needClear = true;
			}
		}
		this.setDrawBuffers(textures.length);
		if(needClear) {
			this.clear(h3d_impl_GlDriver.BLACK);
		}
	}
	,setDepth: function(depthBuffer) {
		this.unbindTargets();
		this.curTarget = depthBuffer;
		depthBuffer.set_lastFrame(this.frame);
		this.curTargetLayer = 0;
		this.curTargetMip = 0;
		this.gl.bindFramebuffer(36160,this.commonFB);
		this.gl.framebufferTexture2D(36160,36064,3553,null,0);
		this.setPolygonOffset(depthBuffer);
		this.setDepthClamp(depthBuffer);
		if(depthBuffer.hasStencil() && depthBuffer.format == hxd_PixelFormat.Depth24Stencil8) {
			this.gl.framebufferTexture2D(36160,33306,3553,depthBuffer.t.t,0);
		} else {
			this.gl.framebufferTexture2D(36160,33306,3553,null,0);
			this.gl.framebufferTexture2D(36160,36096,3553,depthBuffer.t.t,0);
			this.gl.framebufferTexture2D(36160,36128,3553,depthBuffer.hasStencil() ? depthBuffer.t.t : null,0);
		}
		var w = depthBuffer.width;
		if(w == 0) {
			w = 1;
		}
		var h = depthBuffer.height;
		if(h == 0) {
			h = 1;
		}
		this.gl.viewport(0,0,w,h);
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
		if(this.glDebug) {
			var code = this.gl.checkFramebufferStatus(36160);
			if(code != 36053) {
				throw haxe_Exception.thrown("Invalid frame buffer: " + code);
			}
		}
	}
	,setPolygonOffset: function(depthBuffer) {
		if(depthBuffer != null && (depthBuffer.depthBias != 0 || depthBuffer.slopeScaledBias != 0)) {
			this.gl.enable(32823);
			this.gl.polygonOffset(depthBuffer.slopeScaledBias,depthBuffer.depthBias);
		} else {
			this.gl.disable(32823);
		}
	}
	,setDepthClamp: function(dephTexture) {
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		if(window.document.readyState == "complete") {
			var _g = onCreate;
			var a1 = false;
			haxe_Timer.delay(function() {
				_g(a1);
			},1);
		} else {
			var onLoad = null;
			onLoad = function() {
				window.removeEventListener("load",onLoad);
				onCreate(false);
			};
			window.addEventListener("load",onLoad);
		}
	}
	,hasFeature: function(f) {
		return this.features.get(f);
	}
	,makeFeatures: function() {
		var _g = 0;
		var _g1 = h3d_impl_Feature.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.features.set(f,this.checkFeature(f));
		}
		if(this.gl.getExtension("WEBGL_compressed_texture_s3tc") != null) {
			this.maxCompressedTexturesSupport = 3;
			if(this.gl.getExtension("EXT_texture_compression_bptc") != null) {
				this.maxCompressedTexturesSupport = 7;
			}
		}
		if(this.glES < 3) {
			this.gl.getExtension("WEBGL_depth_texture");
		}
		this.has16Bits = this.gl.getExtension("EXT_texture_norm16") != null;
	}
	,checkFeature: function(f) {
		switch(f._hx_index) {
		case 0:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("OES_standard_derivatives") != null;
			}
			break;
		case 1:
			if(this.glES >= 3) {
				if(this.gl.getExtension("EXT_color_buffer_float") != null) {
					return this.gl.getExtension("OES_texture_float_linear") != null;
				} else {
					return false;
				}
			} else if(this.gl.getExtension("OES_texture_float") != null && this.gl.getExtension("OES_texture_float_linear") != null && this.gl.getExtension("OES_texture_half_float") != null) {
				return this.gl.getExtension("OES_texture_half_float_linear") != null;
			} else {
				return false;
			}
			break;
		case 4:
			if(this.glES >= 3) {
				return true;
			} else if(this.mrtExt == null) {
				return (this.mrtExt = this.gl.getExtension("WEBGL_draw_buffers")) != null;
			} else {
				return true;
			}
			break;
		case 6:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("EXT_sRGB") != null;
			}
			break;
		case 7:
			if(this.glES >= 3) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:case 3:case 8:case 9:
			return true;
		case 10:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("ANGLE_instanced_arrays") != null;
			}
			break;
		default:
			return false;
		}
	}
	,__class__: h3d_impl_GlDriver
});
var h3d_impl_InstanceBuffer = function() {
	this.triCount = 0;
};
$hxClasses["h3d.impl.InstanceBuffer"] = h3d_impl_InstanceBuffer;
h3d_impl_InstanceBuffer.__name__ = "h3d.impl.InstanceBuffer";
h3d_impl_InstanceBuffer.prototype = {
	__class__: h3d_impl_InstanceBuffer
};
var h3d_impl_MemoryManager = function(driver) {
	this.lastAutoDispose = 0;
	this.autoDisposeCooldown = 60;
	this.texMemory = 0;
	this.usedMemory = 0;
	this.driver = driver;
};
$hxClasses["h3d.impl.MemoryManager"] = h3d_impl_MemoryManager;
h3d_impl_MemoryManager.__name__ = "h3d.impl.MemoryManager";
h3d_impl_MemoryManager.prototype = {
	init: function() {
		this.textures = [];
		this.buffers = [];
		this.initIndexes();
	}
	,initIndexes: function() {
		var indices = new Array(0);
		var _g = 0;
		while(_g < 65532) {
			var i = _g++;
			indices.push(i);
		}
		this.triIndexes16 = h3d_Indexes.alloc(indices);
		var indices = new Array(0);
		var p = 0;
		var _g = 0;
		while(_g < 10922) {
			var i = _g++;
			var k = i << 2;
			indices.push(k);
			indices.push(k + 1);
			indices.push(k + 2);
			indices.push(k + 2);
			indices.push(k + 1);
			indices.push(k + 3);
		}
		indices.push(65532);
		this.quadIndexes16 = h3d_Indexes.alloc(indices);
	}
	,garbage: function() {
	}
	,getTriIndexes: function(vertices) {
		if(vertices <= 65532) {
			return this.triIndexes16;
		}
		if(this.triIndexes32 == null || this.triIndexes32.vertices < vertices) {
			var sz = 131072;
			while(sz < vertices) sz <<= 1;
			var bytes = new haxe_io_Bytes(new ArrayBuffer(sz << 2));
			var _g = 0;
			var _g1 = sz;
			while(_g < _g1) {
				var i = _g++;
				bytes.setInt32(i << 2,i);
			}
			if(this.triIndexes32 != null) {
				this.triIndexes32.dispose();
			}
			this.triIndexes32 = h3d_Indexes._new(sz,true);
			this.triIndexes32.uploadBytes(bytes,0,sz);
		}
		return this.triIndexes32;
	}
	,getQuadIndexes: function(vertices) {
		var nquads = (vertices + 3 >> 2) * 6;
		if(nquads <= 65532) {
			return this.quadIndexes16;
		}
		if(this.quadIndexes32 == null || this.quadIndexes32.vertices < vertices) {
			var sz = 131072;
			while(sz < nquads) sz <<= 1;
			var bytes = new haxe_io_Bytes(new ArrayBuffer(sz << 2));
			var p = 0;
			var _g = 0;
			var _g1 = sz / 6 | 0;
			while(_g < _g1) {
				var i = _g++;
				var k = i << 2;
				bytes.setInt32(p++ << 2,k);
				bytes.setInt32(p++ << 2,k + 1);
				bytes.setInt32(p++ << 2,k + 2);
				bytes.setInt32(p++ << 2,k + 2);
				bytes.setInt32(p++ << 2,k + 1);
				bytes.setInt32(p++ << 2,k + 3);
			}
			if(this.quadIndexes32 != null) {
				this.quadIndexes32.dispose();
			}
			this.quadIndexes32 = h3d_Indexes._new(sz,true);
			this.quadIndexes32.uploadBytes(bytes,0,sz);
		}
		return this.quadIndexes32;
	}
	,allocBuffer: function(b) {
		if(b.vbuf != null) {
			return;
		}
		var mem = b.vertices * b.format.strideBytes;
		if(mem == 0) {
			return;
		}
		while(this.usedMemory + mem > 4294967296. || (b.vbuf = this.driver.allocBuffer(b)) == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			var size = this.usedMemory;
			this.garbage();
			if(this.usedMemory == size) {
				throw haxe_Exception.thrown("Memory full (" + Math.ceil(size / 1024) + " KB," + this.buffers.length + " buffers)");
			}
		}
		this.usedMemory += mem;
		this.buffers.push(b);
	}
	,freeBuffer: function(b) {
		if(b.vbuf == null) {
			return;
		}
		this.driver.disposeBuffer(b);
		b.vbuf = null;
		if(HxOverrides.remove(this.buffers,b)) {
			this.usedMemory -= b.vertices * b.format.strideBytes;
		}
	}
	,memSize: function(t) {
		if((t.flags & 1 << h3d_mat_TextureFlags.AsyncLoading._hx_index) != 0 && (t.flags & 1 << h3d_mat_TextureFlags.Loading._hx_index) != 0) {
			return 4;
		}
		var size = hxd_Pixels.calcDataSize(t.width,t.height,t.format);
		if(t.get_mipLevels() > 0) {
			var _g = 1;
			var _g1 = t.get_mipLevels();
			while(_g < _g1) {
				var i = _g++;
				var w = t.width >> i;
				if(w == 0) {
					w = 1;
				}
				var h = t.height >> i;
				if(h == 0) {
					h = 1;
				}
				size += hxd_Pixels.calcDataSize(w,h,t.format);
			}
		}
		return size * t.get_layerCount();
	}
	,cleanTextures: function(force) {
		if(force == null) {
			force = true;
		}
		this.textures.sort($bind(this,this.sortByLRU));
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.realloc == null || t.t == null && (t.isDepth() || t.realloc == null)) {
				continue;
			}
			if((force || t._lastFrame < hxd_Timer.frameCount - 3600) && t._lastFrame != h3d_mat_Texture.PREVENT_AUTO_DISPOSE) {
				t.dispose();
				return true;
			}
		}
		return false;
	}
	,sortByLRU: function(t1,t2) {
		return t1._lastFrame - t2._lastFrame;
	}
	,deleteTexture: function(t) {
		if(!HxOverrides.remove(this.textures,t)) {
			return;
		}
		this.driver.disposeTexture(t);
		this.texMemory -= this.memSize(t);
	}
	,allocTexture: function(t) {
		while(true) {
			var free = true;
			if(hxd_Timer.frameCount > this.lastAutoDispose + this.autoDisposeCooldown) {
				free = this.cleanTextures(false);
				this.lastAutoDispose = hxd_Timer.frameCount;
			}
			t.t = t.isDepth() ? this.driver.allocDepthBuffer(t) : this.driver.allocTexture(t);
			if(t.t != null) {
				break;
			}
			if(this.driver.isDisposed()) {
				return;
			}
			while(this.cleanTextures(false)) {
			}
			if(!free && !this.cleanTextures(true)) {
				throw haxe_Exception.thrown("Maximum texture memory reached");
			}
		}
		this.textures.push(t);
		this.texMemory += this.memSize(t);
	}
	,onContextLost: function() {
		this.dispose();
		this.initIndexes();
	}
	,dispose: function() {
		if(this.triIndexes16 != null) {
			this.triIndexes16.dispose();
		}
		if(this.quadIndexes16 != null) {
			this.quadIndexes16.dispose();
		}
		if(this.triIndexes32 != null) {
			this.triIndexes32.dispose();
		}
		if(this.quadIndexes32 != null) {
			this.quadIndexes32.dispose();
		}
		this.triIndexes16 = null;
		this.quadIndexes16 = null;
		this.triIndexes32 = null;
		this.quadIndexes32 = null;
		var _g = 0;
		var _g1 = this.textures.slice();
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		var _g = 0;
		var _g1 = this.buffers.slice();
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.dispose();
		}
		this.buffers = [];
		this.textures = [];
		this.usedMemory = 0;
		this.texMemory = 0;
	}
	,__class__: h3d_impl_MemoryManager
};
var h3d_impl_NullDriver = function() {
	h3d_impl_Driver.call(this);
};
$hxClasses["h3d.impl.NullDriver"] = h3d_impl_NullDriver;
h3d_impl_NullDriver.__name__ = "h3d.impl.NullDriver";
h3d_impl_NullDriver.__super__ = h3d_impl_Driver;
h3d_impl_NullDriver.prototype = $extend(h3d_impl_Driver.prototype,{
	hasFeature: function(f) {
		return true;
	}
	,isSupportedFormat: function(fmt) {
		return true;
	}
	,isDisposed: function() {
		return false;
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		onCreate(false);
	}
	,selectShader: function(shader) {
		if(this.cur == shader) {
			return false;
		}
		this.cur = shader;
		return true;
	}
	,allocTexture: function(t) {
		return { };
	}
	,allocBuffer: function(b) {
		return { };
	}
	,__class__: h3d_impl_NullDriver
});
var h3d_impl_RendererFX = function() { };
$hxClasses["h3d.impl.RendererFX"] = h3d_impl_RendererFX;
h3d_impl_RendererFX.__name__ = "h3d.impl.RendererFX";
h3d_impl_RendererFX.__isInterface__ = true;
h3d_impl_RendererFX.prototype = {
	__class__: h3d_impl_RendererFX
};
var h3d_impl_TextureCache = function() {
	this.position = 0;
	this.cache = [];
	var engine = h3d_Engine.CURRENT;
	this.defaultFormat = h3d_mat_Texture.nativeFormat;
	this.defaultDepthBuffer = h3d_mat_Texture.getDefaultDepth();
	if(h3d_impl_TextureCache.checkFlags < 0) {
		var flags = 0;
		var flagsArray = [h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.IsArray];
		var _g = 0;
		while(_g < flagsArray.length) {
			var f = flagsArray[_g];
			++_g;
			flags |= 1 << f._hx_index;
		}
		h3d_impl_TextureCache.checkFlags = flags;
	}
};
$hxClasses["h3d.impl.TextureCache"] = h3d_impl_TextureCache;
h3d_impl_TextureCache.__name__ = "h3d.impl.TextureCache";
h3d_impl_TextureCache.prototype = {
	begin: function() {
		while(this.cache.length > this.position) {
			var t = this.cache.pop();
			if(t != null) {
				t.dispose();
			}
		}
		this.position = 0;
	}
	,lookupTarget: function(name,width,height,format,flags) {
		var t = this.cache[this.position];
		var _g = this.position + 1;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var t2 = this.cache[i];
			if(t2 != null && !(t2.t == null && (t2.isDepth() || t2.realloc == null)) && t2.width == width && t2.height == height && t2.format == format) {
				var enumFlags = 0;
				if(flags != null) {
					var _g2 = 0;
					while(_g2 < flags.length) {
						var f = flags[_g2];
						++_g2;
						enumFlags |= 1 << f._hx_index;
					}
				}
				if((t2.flags & h3d_impl_TextureCache.checkFlags) != (enumFlags & h3d_impl_TextureCache.checkFlags)) {
					continue;
				}
				this.cache[this.position] = t2;
				this.cache[i] = t;
				return t2;
			}
		}
		if(t != null && t.name == name) {
			t.dispose();
			t = null;
		}
		if(flags == null) {
			flags = [];
		}
		if(flags.indexOf(h3d_mat_TextureFlags.Target) == -1) {
			flags.push(h3d_mat_TextureFlags.Target);
		}
		var newt = new h3d_mat_Texture(width,height,flags,format);
		newt.realloc = function() {
		};
		if(t != null) {
			this.cache.splice(this.position,0,newt);
		} else {
			this.cache[this.position] = newt;
		}
		return newt;
	}
	,allocTarget: function(name,width,height,defaultDepth,format,flags) {
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		var t = this.cache[this.position];
		if(format == null) {
			format = this.defaultFormat;
		}
		var alloc = false;
		if(t == null || t.t == null && (t.isDepth() || t.realloc == null) || t.width != width || t.height != height || t.format != format) {
			alloc = true;
		} else {
			var enumFlags = 0;
			if(flags != null) {
				var _g = 0;
				while(_g < flags.length) {
					var f = flags[_g];
					++_g;
					enumFlags |= 1 << f._hx_index;
				}
			}
			alloc = (t.flags & h3d_impl_TextureCache.checkFlags) != (enumFlags & h3d_impl_TextureCache.checkFlags);
		}
		if(alloc) {
			t = this.lookupTarget(name,width,height,format,flags);
		}
		t.depthBuffer = defaultDepth ? this.defaultDepthBuffer : null;
		t.setName(name);
		this.position++;
		return t;
	}
	,allocTileTarget: function(name,tile,defaultDepth,format) {
		if(defaultDepth == null) {
			defaultDepth = false;
		}
		return this.allocTarget(name,Math.ceil(tile.width + tile.x) - Math.floor(tile.x),Math.ceil(tile.height + tile.y) - Math.floor(tile.y),defaultDepth,format);
	}
	,__class__: h3d_impl_TextureCache
};
var hxd_impl_AnyProps = function() { };
$hxClasses["hxd.impl.AnyProps"] = hxd_impl_AnyProps;
hxd_impl_AnyProps.__name__ = "hxd.impl.AnyProps";
hxd_impl_AnyProps.prototype = {
	set_props: function(p) {
		this.props = p;
		this.refreshProps();
		return p;
	}
	,getDefaultProps: function(kind) {
		return { };
	}
	,refreshProps: function() {
	}
	,__class__: hxd_impl_AnyProps
};
var h3d_mat_BaseMaterial = function(shader) {
	if(shader != null) {
		this.addPass(new h3d_mat_Pass("default",null)).addShader(shader);
	}
};
$hxClasses["h3d.mat.BaseMaterial"] = h3d_mat_BaseMaterial;
h3d_mat_BaseMaterial.__name__ = "h3d.mat.BaseMaterial";
h3d_mat_BaseMaterial.__super__ = hxd_impl_AnyProps;
h3d_mat_BaseMaterial.prototype = $extend(hxd_impl_AnyProps.prototype,{
	addPass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			prev = cur;
			cur = cur.nextPass;
		}
		if(prev == null) {
			this.passes = p;
		} else {
			prev.nextPass = p;
		}
		p.nextPass = null;
		return p;
	}
	,removePass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			if(cur == p) {
				if(prev == null) {
					this.passes = p.nextPass;
				} else {
					prev.nextPass = p.nextPass;
				}
				p.nextPass = null;
				return true;
			}
			prev = cur;
			cur = cur.nextPass;
		}
		return false;
	}
	,getPass: function(name) {
		var p = this.passes;
		while(p != null) {
			if(p.name == name) {
				return p;
			}
			p = p.nextPass;
		}
		return null;
	}
	,__class__: h3d_mat_BaseMaterial
});
var h3d_mat_Face = $hxEnums["h3d.mat.Face"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.mat.Face",toString:$estr}
	,Back: {_hx_name:"Back",_hx_index:1,__enum__:"h3d.mat.Face",toString:$estr}
	,Front: {_hx_name:"Front",_hx_index:2,__enum__:"h3d.mat.Face",toString:$estr}
	,Both: {_hx_name:"Both",_hx_index:3,__enum__:"h3d.mat.Face",toString:$estr}
};
h3d_mat_Face.__constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
h3d_mat_Face.__empty_constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
var h3d_mat_Blend = $hxEnums["h3d.mat.Blend"] = { __ename__:true,__constructs__:null
	,One: {_hx_name:"One",_hx_index:0,__enum__:"h3d.mat.Blend",toString:$estr}
	,Zero: {_hx_name:"Zero",_hx_index:1,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlpha: {_hx_name:"SrcAlpha",_hx_index:2,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcColor: {_hx_name:"SrcColor",_hx_index:3,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstAlpha: {_hx_name:"DstAlpha",_hx_index:4,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstColor: {_hx_name:"DstColor",_hx_index:5,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcAlpha: {_hx_name:"OneMinusSrcAlpha",_hx_index:6,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcColor: {_hx_name:"OneMinusSrcColor",_hx_index:7,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstAlpha: {_hx_name:"OneMinusDstAlpha",_hx_index:8,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstColor: {_hx_name:"OneMinusDstColor",_hx_index:9,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantColor: {_hx_name:"ConstantColor",_hx_index:10,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantAlpha: {_hx_name:"ConstantAlpha",_hx_index:11,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantColor: {_hx_name:"OneMinusConstantColor",_hx_index:12,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantAlpha: {_hx_name:"OneMinusConstantAlpha",_hx_index:13,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlphaSaturate: {_hx_name:"SrcAlphaSaturate",_hx_index:14,__enum__:"h3d.mat.Blend",toString:$estr}
};
h3d_mat_Blend.__constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
h3d_mat_Blend.__empty_constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
var h3d_mat_Compare = $hxEnums["h3d.mat.Compare"] = { __ename__:true,__constructs__:null
	,Always: {_hx_name:"Always",_hx_index:0,__enum__:"h3d.mat.Compare",toString:$estr}
	,Never: {_hx_name:"Never",_hx_index:1,__enum__:"h3d.mat.Compare",toString:$estr}
	,Equal: {_hx_name:"Equal",_hx_index:2,__enum__:"h3d.mat.Compare",toString:$estr}
	,NotEqual: {_hx_name:"NotEqual",_hx_index:3,__enum__:"h3d.mat.Compare",toString:$estr}
	,Greater: {_hx_name:"Greater",_hx_index:4,__enum__:"h3d.mat.Compare",toString:$estr}
	,GreaterEqual: {_hx_name:"GreaterEqual",_hx_index:5,__enum__:"h3d.mat.Compare",toString:$estr}
	,Less: {_hx_name:"Less",_hx_index:6,__enum__:"h3d.mat.Compare",toString:$estr}
	,LessEqual: {_hx_name:"LessEqual",_hx_index:7,__enum__:"h3d.mat.Compare",toString:$estr}
};
h3d_mat_Compare.__constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
h3d_mat_Compare.__empty_constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
var h3d_mat_StencilOp = $hxEnums["h3d.mat.StencilOp"] = { __ename__:true,__constructs__:null
	,Keep: {_hx_name:"Keep",_hx_index:0,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Zero: {_hx_name:"Zero",_hx_index:1,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Replace: {_hx_name:"Replace",_hx_index:2,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Increment: {_hx_name:"Increment",_hx_index:3,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,IncrementWrap: {_hx_name:"IncrementWrap",_hx_index:4,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Decrement: {_hx_name:"Decrement",_hx_index:5,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,DecrementWrap: {_hx_name:"DecrementWrap",_hx_index:6,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Invert: {_hx_name:"Invert",_hx_index:7,__enum__:"h3d.mat.StencilOp",toString:$estr}
};
h3d_mat_StencilOp.__constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
h3d_mat_StencilOp.__empty_constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
var h3d_mat_MipMap = $hxEnums["h3d.mat.MipMap"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Nearest: {_hx_name:"Nearest",_hx_index:1,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Linear: {_hx_name:"Linear",_hx_index:2,__enum__:"h3d.mat.MipMap",toString:$estr}
};
h3d_mat_MipMap.__constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
h3d_mat_MipMap.__empty_constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
var h3d_mat_Filter = $hxEnums["h3d.mat.Filter"] = { __ename__:true,__constructs__:null
	,Nearest: {_hx_name:"Nearest",_hx_index:0,__enum__:"h3d.mat.Filter",toString:$estr}
	,Linear: {_hx_name:"Linear",_hx_index:1,__enum__:"h3d.mat.Filter",toString:$estr}
};
h3d_mat_Filter.__constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
h3d_mat_Filter.__empty_constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
var h3d_mat_Wrap = $hxEnums["h3d.mat.Wrap"] = { __ename__:true,__constructs__:null
	,Clamp: {_hx_name:"Clamp",_hx_index:0,__enum__:"h3d.mat.Wrap",toString:$estr}
	,Repeat: {_hx_name:"Repeat",_hx_index:1,__enum__:"h3d.mat.Wrap",toString:$estr}
};
h3d_mat_Wrap.__constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
h3d_mat_Wrap.__empty_constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
var h3d_mat_Operation = $hxEnums["h3d.mat.Operation"] = { __ename__:true,__constructs__:null
	,Add: {_hx_name:"Add",_hx_index:0,__enum__:"h3d.mat.Operation",toString:$estr}
	,Sub: {_hx_name:"Sub",_hx_index:1,__enum__:"h3d.mat.Operation",toString:$estr}
	,ReverseSub: {_hx_name:"ReverseSub",_hx_index:2,__enum__:"h3d.mat.Operation",toString:$estr}
	,Min: {_hx_name:"Min",_hx_index:3,__enum__:"h3d.mat.Operation",toString:$estr}
	,Max: {_hx_name:"Max",_hx_index:4,__enum__:"h3d.mat.Operation",toString:$estr}
};
h3d_mat_Operation.__constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub,h3d_mat_Operation.Min,h3d_mat_Operation.Max];
h3d_mat_Operation.__empty_constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub,h3d_mat_Operation.Min,h3d_mat_Operation.Max];
var h3d_mat_TextureFlags = $hxEnums["h3d.mat.TextureFlags"] = { __ename__:true,__constructs__:null
	,Target: {_hx_name:"Target",_hx_index:0,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Cube: {_hx_name:"Cube",_hx_index:1,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,MipMapped: {_hx_name:"MipMapped",_hx_index:2,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,ManualMipMapGen: {_hx_name:"ManualMipMapGen",_hx_index:3,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsNPOT: {_hx_name:"IsNPOT",_hx_index:4,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,NoAlloc: {_hx_name:"NoAlloc",_hx_index:5,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Dynamic: {_hx_name:"Dynamic",_hx_index:6,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AlphaPremultiplied: {_hx_name:"AlphaPremultiplied",_hx_index:7,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,WasCleared: {_hx_name:"WasCleared",_hx_index:8,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Loading: {_hx_name:"Loading",_hx_index:9,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Serialize: {_hx_name:"Serialize",_hx_index:10,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsArray: {_hx_name:"IsArray",_hx_index:11,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AsyncLoading: {_hx_name:"AsyncLoading",_hx_index:12,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,LazyLoading: {_hx_name:"LazyLoading",_hx_index:13,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Writable: {_hx_name:"Writable",_hx_index:14,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Is3D: {_hx_name:"Is3D",_hx_index:15,__enum__:"h3d.mat.TextureFlags",toString:$estr}
};
h3d_mat_TextureFlags.__constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize,h3d_mat_TextureFlags.IsArray,h3d_mat_TextureFlags.AsyncLoading,h3d_mat_TextureFlags.LazyLoading,h3d_mat_TextureFlags.Writable,h3d_mat_TextureFlags.Is3D];
h3d_mat_TextureFlags.__empty_constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize,h3d_mat_TextureFlags.IsArray,h3d_mat_TextureFlags.AsyncLoading,h3d_mat_TextureFlags.LazyLoading,h3d_mat_TextureFlags.Writable,h3d_mat_TextureFlags.Is3D];
var h3d_mat_Defaults = function() { };
$hxClasses["h3d.mat.Defaults"] = h3d_mat_Defaults;
h3d_mat_Defaults.__name__ = "h3d.mat.Defaults";
h3d_mat_Defaults.get_shadowShader = function() {
	var s = h3d_mat_Defaults.shadowShader;
	if(s == null) {
		s = new h3d_shader_Shadow();
		h3d_mat_Defaults.set_shadowShader(s);
		h3d_mat_Defaults.shadowShader.setPriority(-1);
	}
	return s;
};
h3d_mat_Defaults.set_shadowShader = function(s) {
	return h3d_mat_Defaults.shadowShader = s;
};
var h3d_mat_Material = function(texture) {
	this.mshader = new h3d_shader_BaseMesh();
	this.set_blendMode(h2d_BlendMode.None);
	h3d_mat_BaseMaterial.call(this,this.mshader);
	this.set_texture(texture);
};
$hxClasses["h3d.mat.Material"] = h3d_mat_Material;
h3d_mat_Material.__name__ = "h3d.mat.Material";
h3d_mat_Material.__super__ = h3d_mat_BaseMaterial;
h3d_mat_Material.prototype = $extend(h3d_mat_BaseMaterial.prototype,{
	set_castShadows: function(v) {
		if(this.castShadows == v) {
			return v;
		}
		if(this.passes != null) {
			if(v) {
				this.addPass(new h3d_mat_Pass("shadow",null,this.passes)).set_isStatic(this.staticShadows);
			} else {
				this.removePass(this.getPass("shadow"));
			}
		}
		return this.castShadows = v;
	}
	,set_receiveShadows: function(v) {
		if(v == this.receiveShadows) {
			return v;
		}
		if(this.passes != null) {
			var shadows = h3d_mat_Defaults.get_shadowShader();
			if(v) {
				this.passes.addShader(shadows);
			} else {
				this.passes.removeShader(shadows);
			}
		}
		return this.receiveShadows = v;
	}
	,set_blendMode: function(v) {
		if(this.passes != null) {
			this.passes.setBlendMode(v);
			switch(v._hx_index) {
			case 0:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("default");
				break;
			case 1:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("alpha");
				break;
			case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			}
		}
		return this.blendMode = v;
	}
	,set_texture: function(t) {
		if(t == null) {
			if(this.textureShader != null) {
				this.passes.removeShader(this.textureShader);
				this.textureShader = null;
			}
		} else {
			if(this.textureShader == null) {
				this.textureShader = new h3d_shader_Texture();
				this.passes.addShader(this.textureShader);
			}
			this.textureShader.texture__ = t;
		}
		return t;
	}
	,getDefaultProps: function(type) {
		var props;
		if(type == null) {
			props = { kind : "Opaque", shadows : true, culling : true, light : true};
		} else {
			switch(type) {
			case "particles3D":case "trail3D":
				props = { kind : "Alpha", shadows : false, culling : false, light : true};
				break;
			case "ui":
				props = { kind : "Alpha", shadows : false, culling : false, light : false};
				break;
			default:
				props = { kind : "Opaque", shadows : true, culling : true, light : true};
			}
		}
		return props;
	}
	,refreshProps: function() {
		if(this.props == null || this.passes == null) {
			return;
		}
		var props = this.props;
		switch(props.kind) {
		case "Add":
			this.set_blendMode(h2d_BlendMode.Add);
			break;
		case "Alpha":
			this.set_blendMode(h2d_BlendMode.Alpha);
			break;
		case "AlphaKill":case "Hidden":case "Opaque":
			this.set_blendMode(h2d_BlendMode.None);
			break;
		case "SoftAdd":
			this.set_blendMode(h2d_BlendMode.SoftAdd);
			break;
		}
		var tshader = this.textureShader;
		if(tshader != null) {
			tshader.constModified = true;
			tshader.killAlpha__ = props.kind == "AlphaKill";
			tshader.killAlphaThreshold__ = 0.5;
		}
		this.passes.set_culling(props.kind == "Hidden" ? h3d_mat_Face.Both : props.culling ? h3d_mat_Face.Back : h3d_mat_Face.None);
		this.passes.set_enableLights(props.light);
		var v = props.shadows;
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		if(this.castShadows && this.receiveShadows) {
			this.getPass("shadow").set_culling(this.passes.culling);
		}
	}
	,__class__: h3d_mat_Material
});
var h3d_mat_MaterialDatabase = function() {
};
$hxClasses["h3d.mat.MaterialDatabase"] = h3d_mat_MaterialDatabase;
h3d_mat_MaterialDatabase.__name__ = "h3d.mat.MaterialDatabase";
h3d_mat_MaterialDatabase.prototype = {
	__class__: h3d_mat_MaterialDatabase
};
var h3d_mat_MaterialSetup = function(name) {
	if(this.database == null) {
		this.database = new h3d_mat_MaterialDatabase();
	}
	this.name = name;
};
$hxClasses["h3d.mat.MaterialSetup"] = h3d_mat_MaterialSetup;
h3d_mat_MaterialSetup.__name__ = "h3d.mat.MaterialSetup";
h3d_mat_MaterialSetup.prototype = {
	createRenderer: function() {
		return new h3d_scene_fwd_Renderer();
	}
	,createLightSystem: function() {
		return new h3d_scene_fwd_LightSystem();
	}
	,createMaterial: function() {
		return new h3d_mat_Material();
	}
	,__class__: h3d_mat_MaterialSetup
};
var h3d_mat_Pass = function(name,shaders,parent) {
	this.layer = 0;
	this.rendererFlags = 0;
	this.bits = 0;
	this.parentPass = parent;
	this.shaders = shaders;
	this.setPassName(name);
	this.set_culling(h3d_mat_Face.Back);
	var src = h3d_mat_Blend.One;
	var dst = h3d_mat_Blend.Zero;
	this.set_blendSrc(src);
	this.set_blendAlphaSrc(src);
	this.set_blendDst(dst);
	this.set_blendAlphaDst(dst);
	this.depth(true,h3d_mat_Compare.Less);
	this.set_blendOp(this.set_blendAlphaOp(h3d_mat_Operation.Add));
	this.colorMask = 15;
};
$hxClasses["h3d.mat.Pass"] = h3d_mat_Pass;
h3d_mat_Pass.__name__ = "h3d.mat.Pass";
h3d_mat_Pass.prototype = {
	setPassName: function(name) {
		this.name = name;
		this.passId = hxsl_Globals.allocID(name);
	}
	,setBlendMode: function(b) {
		this.set_blendOp(h3d_mat_Operation.Add);
		this.set_blendAlphaOp(h3d_mat_Operation.Add);
		switch(b._hx_index) {
		case 0:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 1:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaSrc(h3d_mat_Blend.One);
			break;
		case 2:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaSrc(h3d_mat_Blend.One);
			break;
		case 3:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 4:
			var src = h3d_mat_Blend.OneMinusDstColor;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaSrc(h3d_mat_Blend.One);
			break;
		case 5:
			var src = h3d_mat_Blend.DstColor;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaSrc(h3d_mat_Blend.One);
			break;
		case 6:
			var src = h3d_mat_Blend.DstColor;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 7:
			var src = h3d_mat_Blend.Zero;
			var dst = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 8:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			break;
		case 9:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.ReverseSub);
			this.set_blendAlphaOp(h3d_mat_Operation.ReverseSub);
			break;
		case 10:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaOp(h3d_mat_Operation.Max);
			this.set_blendOp(h3d_mat_Operation.Max);
			break;
		case 11:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendAlphaOp(h3d_mat_Operation.Min);
			this.set_blendOp(h3d_mat_Operation.Min);
			break;
		}
	}
	,depth: function(write,test) {
		this.set_depthWrite(write);
		this.set_depthTest(test);
	}
	,resetRendererFlags: function() {
		this.rendererFlags = 0;
	}
	,addShader: function(s) {
		if(s == null) {
			return null;
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		this.resetRendererFlags();
		return s;
	}
	,removeShader: function(s) {
		var sl = this.shaders;
		var prev = null;
		var shaderFound = false;
		while(sl != null) {
			if(sl.s == s) {
				this.resetRendererFlags();
				if(this.selfShadersCache == sl) {
					this.selfShadersCache = this.selfShadersCache.next;
				}
				if(prev == null) {
					this.shaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				shaderFound = true;
				break;
			}
			prev = sl;
			sl = sl.next;
		}
		sl = this.selfShaders;
		prev = null;
		while(sl != null) {
			if(sl.s == s) {
				this.resetRendererFlags();
				if(this.selfShadersCache == sl) {
					this.selfShadersCache = this.selfShadersCache.next;
				}
				if(prev == null) {
					this.selfShaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				return true;
			}
			prev = sl;
			sl = sl.next;
		}
		return shaderFound;
	}
	,getShader: function(t) {
		var s = this._getShader(t,this.shaders);
		if(s != null) {
			return s;
		} else {
			return this._getShader(t,this.selfShaders);
		}
	}
	,_getShader: function(t,s) {
		while(s != null && s != this.parentShaders) {
			var value = s.s;
			var sh = js_Boot.__downcastCheck(value,t) ? value : null;
			if(sh != null) {
				return sh;
			}
			s = s.next;
		}
		return null;
	}
	,selfShadersRec: function(rebuild) {
		if(this.selfShaders == null) {
			return this.shaders;
		}
		if(!this.selfShadersChanged && !rebuild && this.shaders == this.selfShadersCache) {
			return this.selfShaders;
		}
		var sl = this.selfShaders;
		var prev = null;
		while(sl != null && sl != this.selfShadersCache) {
			prev = sl;
			sl = sl.next;
		}
		this.selfShadersCache = this.shaders;
		if(prev != null) {
			prev.next = this.selfShadersCache;
		} else {
			this.selfShaders = this.shaders;
		}
		return this.selfShaders;
	}
	,getShadersRec: function() {
		if(this.parentPass == null || this.parentShaders == this.parentPass.shaders) {
			return this.selfShadersRec(false);
		}
		var s = this.shaders;
		var prev = null;
		while(s != null && s != this.parentShaders) {
			prev = s;
			s = s.next;
		}
		if(s != this.parentShaders) {
			prev = null;
		}
		this.parentShaders = this.parentPass.shaders;
		if(prev == null) {
			this.shaders = this.parentShaders;
		} else {
			prev.next = this.parentShaders;
		}
		return this.selfShadersRec(true);
	}
	,set_enableLights: function(v) {
		this.flags = this.flags & -2 | (v ? 1 : 0);
		return this.enableLights = v;
	}
	,set_isStatic: function(v) {
		this.flags = this.flags & -5 | (v ? 1 : 0) << 2;
		return this.isStatic = v;
	}
	,set_culling: function(v) {
		this.bits = this.bits & -4 | v._hx_index;
		return this.culling = v;
	}
	,set_depthWrite: function(v) {
		this.bits = this.bits & -5 | (v ? 1 : 0) << 2;
		return this.depthWrite = v;
	}
	,set_depthTest: function(v) {
		this.bits = this.bits & -57 | v._hx_index << 3;
		return this.depthTest = v;
	}
	,set_blendSrc: function(v) {
		this.bits = this.bits & -961 | v._hx_index << 6;
		return this.blendSrc = v;
	}
	,set_blendDst: function(v) {
		this.bits = this.bits & -15361 | v._hx_index << 10;
		return this.blendDst = v;
	}
	,set_blendAlphaSrc: function(v) {
		this.bits = this.bits & -245761 | v._hx_index << 14;
		return this.blendAlphaSrc = v;
	}
	,set_blendAlphaDst: function(v) {
		this.bits = this.bits & -3932161 | v._hx_index << 18;
		return this.blendAlphaDst = v;
	}
	,set_blendOp: function(v) {
		this.bits = this.bits & -29360129 | v._hx_index << 22;
		return this.blendOp = v;
	}
	,set_blendAlphaOp: function(v) {
		this.bits = this.bits & -234881025 | v._hx_index << 25;
		return this.blendAlphaOp = v;
	}
	,__class__: h3d_mat_Pass
};
var h3d_mat_Stencil = function() {
	this.opBits = 0;
	this.maskBits = 0;
	this.setOp(h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep);
	this.setFunc(h3d_mat_Compare.Always);
};
$hxClasses["h3d.mat.Stencil"] = h3d_mat_Stencil;
h3d_mat_Stencil.__name__ = "h3d.mat.Stencil";
h3d_mat_Stencil.prototype = {
	setFront: function(stfail,dpfail,pass) {
		this.set_frontSTfail(stfail);
		this.set_frontDPfail(dpfail);
		this.set_frontPass(pass);
	}
	,setBack: function(stfail,dpfail,pass) {
		this.set_backSTfail(stfail);
		this.set_backDPfail(dpfail);
		this.set_backPass(pass);
	}
	,setOp: function(stfail,dpfail,pass) {
		this.setFront(stfail,dpfail,pass);
		this.setBack(stfail,dpfail,pass);
	}
	,setFunc: function(f,reference,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(reference == null) {
			reference = 0;
		}
		this.set_frontTest(this.set_backTest(f));
		this.set_reference(reference);
		this.set_readMask(readMask);
		this.set_writeMask(writeMask);
	}
	,set_readMask: function(v) {
		this.maskBits = this.maskBits & -256 | v & 255;
		return this.readMask = v;
	}
	,set_writeMask: function(v) {
		this.maskBits = this.maskBits & -65281 | (v & 255) << 8;
		return this.writeMask = v;
	}
	,set_reference: function(v) {
		this.maskBits = this.maskBits & -16711681 | (v & 255) << 16;
		return this.reference = v;
	}
	,set_frontTest: function(v) {
		this.opBits = this.opBits & -8 | v._hx_index;
		return this.frontTest = v;
	}
	,set_frontPass: function(v) {
		this.opBits = this.opBits & -57 | v._hx_index << 3;
		return this.frontPass = v;
	}
	,set_frontSTfail: function(v) {
		this.opBits = this.opBits & -449 | v._hx_index << 6;
		return this.frontSTfail = v;
	}
	,set_frontDPfail: function(v) {
		this.opBits = this.opBits & -3585 | v._hx_index << 9;
		return this.frontDPfail = v;
	}
	,set_backTest: function(v) {
		this.opBits = this.opBits & -28673 | v._hx_index << 12;
		return this.backTest = v;
	}
	,set_backPass: function(v) {
		this.opBits = this.opBits & -229377 | v._hx_index << 15;
		return this.backPass = v;
	}
	,set_backSTfail: function(v) {
		this.opBits = this.opBits & -1835009 | v._hx_index << 18;
		return this.backSTfail = v;
	}
	,set_backDPfail: function(v) {
		this.opBits = this.opBits & -14680065 | v._hx_index << 21;
		return this.backDPfail = v;
	}
	,__class__: h3d_mat_Stencil
};
var hxd_PixelFormat = $hxEnums["hxd.PixelFormat"] = { __ename__:true,__constructs__:null
	,ARGB: {_hx_name:"ARGB",_hx_index:0,__enum__:"hxd.PixelFormat",toString:$estr}
	,BGRA: {_hx_name:"BGRA",_hx_index:1,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA: {_hx_name:"RGBA",_hx_index:2,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16F: {_hx_name:"RGBA16F",_hx_index:3,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA32F: {_hx_name:"RGBA32F",_hx_index:4,__enum__:"hxd.PixelFormat",toString:$estr}
	,R8: {_hx_name:"R8",_hx_index:5,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16F: {_hx_name:"R16F",_hx_index:6,__enum__:"hxd.PixelFormat",toString:$estr}
	,R32F: {_hx_name:"R32F",_hx_index:7,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG8: {_hx_name:"RG8",_hx_index:8,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG16F: {_hx_name:"RG16F",_hx_index:9,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG32F: {_hx_name:"RG32F",_hx_index:10,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB8: {_hx_name:"RGB8",_hx_index:11,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16F: {_hx_name:"RGB16F",_hx_index:12,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB32F: {_hx_name:"RGB32F",_hx_index:13,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB: {_hx_name:"SRGB",_hx_index:14,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB_ALPHA: {_hx_name:"SRGB_ALPHA",_hx_index:15,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB10A2: {_hx_name:"RGB10A2",_hx_index:16,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG11B10UF: {_hx_name:"RG11B10UF",_hx_index:17,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16U: {_hx_name:"R16U",_hx_index:18,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG16U: {_hx_name:"RG16U",_hx_index:19,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16U: {_hx_name:"RGB16U",_hx_index:20,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16U: {_hx_name:"RGBA16U",_hx_index:21,__enum__:"hxd.PixelFormat",toString:$estr}
	,S3TC: ($_=function(v) { return {_hx_index:22,v:v,__enum__:"hxd.PixelFormat",toString:$estr}; },$_._hx_name="S3TC",$_.__params__ = ["v"],$_)
	,Depth16: {_hx_name:"Depth16",_hx_index:23,__enum__:"hxd.PixelFormat",toString:$estr}
	,Depth24: {_hx_name:"Depth24",_hx_index:24,__enum__:"hxd.PixelFormat",toString:$estr}
	,Depth24Stencil8: {_hx_name:"Depth24Stencil8",_hx_index:25,__enum__:"hxd.PixelFormat",toString:$estr}
	,Depth32: {_hx_name:"Depth32",_hx_index:26,__enum__:"hxd.PixelFormat",toString:$estr}
};
hxd_PixelFormat.__constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.R8,hxd_PixelFormat.R16F,hxd_PixelFormat.R32F,hxd_PixelFormat.RG8,hxd_PixelFormat.RG16F,hxd_PixelFormat.RG32F,hxd_PixelFormat.RGB8,hxd_PixelFormat.RGB16F,hxd_PixelFormat.RGB32F,hxd_PixelFormat.SRGB,hxd_PixelFormat.SRGB_ALPHA,hxd_PixelFormat.RGB10A2,hxd_PixelFormat.RG11B10UF,hxd_PixelFormat.R16U,hxd_PixelFormat.RG16U,hxd_PixelFormat.RGB16U,hxd_PixelFormat.RGBA16U,hxd_PixelFormat.S3TC,hxd_PixelFormat.Depth16,hxd_PixelFormat.Depth24,hxd_PixelFormat.Depth24Stencil8,hxd_PixelFormat.Depth32];
hxd_PixelFormat.__empty_constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.R8,hxd_PixelFormat.R16F,hxd_PixelFormat.R32F,hxd_PixelFormat.RG8,hxd_PixelFormat.RG16F,hxd_PixelFormat.RG32F,hxd_PixelFormat.RGB8,hxd_PixelFormat.RGB16F,hxd_PixelFormat.RGB32F,hxd_PixelFormat.SRGB,hxd_PixelFormat.SRGB_ALPHA,hxd_PixelFormat.RGB10A2,hxd_PixelFormat.RG11B10UF,hxd_PixelFormat.R16U,hxd_PixelFormat.RG16U,hxd_PixelFormat.RGB16U,hxd_PixelFormat.RGBA16U,hxd_PixelFormat.Depth16,hxd_PixelFormat.Depth24,hxd_PixelFormat.Depth24Stencil8,hxd_PixelFormat.Depth32];
var h3d_mat_Texture = function(w,h,flags,format) {
	this.slopeScaledBias = 0.;
	this.depthBias = 0.;
	this.startingMip = 0;
	if(format == null) {
		format = h3d_mat_Texture.nativeFormat;
	}
	this.id = ++h3d_mat_Texture.UID;
	this.format = format;
	this.flags = 0;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	var engine = h3d_Engine.CURRENT;
	this.mem = engine.mem;
	var tw = 1;
	var th = 1;
	while(tw < w) tw <<= 1;
	while(th < h) th <<= 1;
	if(tw != w || th != h) {
		this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
	}
	this.width = w;
	this.height = h;
	if((this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0) {
		this.set_mipMap(h3d_mat_Texture.TRILINEAR_FILTERING_ENABLED ? h3d_mat_MipMap.Linear : h3d_mat_MipMap.Nearest);
	} else {
		this.set_mipMap(h3d_mat_MipMap.None);
	}
	this.set_filter(h3d_mat_Filter.Linear);
	this.set_wrap(h3d_mat_Texture.DEFAULT_WRAP);
	this.bits &= 32767;
	this.allocPos = hxd_impl_AllocPos.make();
	if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0 && this.width > 0) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.Texture"] = h3d_mat_Texture;
h3d_mat_Texture.__name__ = "h3d.mat.Texture";
h3d_mat_Texture.getDefaultDepth = function() {
	return h3d_Engine.CURRENT.driver.getDefaultDepthBuffer();
};
h3d_mat_Texture.fromPixels = function(pixels,format) {
	var t = new h3d_mat_Texture(pixels.width,pixels.height,null,format != null ? format : pixels.innerFormat);
	t.uploadPixels(pixels);
	return t;
};
h3d_mat_Texture.fromColor = function(color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	var engine = h3d_Engine.CURRENT;
	var aval = alpha * 255 | 0;
	if(aval < 0) {
		aval = 0;
	} else if(aval > 255) {
		aval = 255;
	}
	var key = color & 16777215 | aval << 24;
	var t = engine.textureColorCache.h[key];
	if(t != null) {
		return t;
	}
	var t = new h3d_mat_Texture(1,1,null);
	t.clear(color,alpha);
	t.realloc = function() {
		t.clear(color,alpha);
	};
	engine.textureColorCache.h[key] = t;
	return t;
};
h3d_mat_Texture.defaultCubeTexture = function() {
	var engine = h3d_Engine.CURRENT;
	var t = engine.resCache.h[h3d_mat_Texture.__id__];
	if(t != null) {
		return t;
	}
	t = new h3d_mat_Texture(1,1,[h3d_mat_TextureFlags.Cube]);
	t.clear(2105376);
	t.realloc = function() {
		t.clear(2105376);
	};
	engine.resCache.set(h3d_mat_Texture,t);
	return t;
};
h3d_mat_Texture.prototype = {
	set_lastFrame: function(lf) {
		if(this._lastFrame != h3d_mat_Texture.PREVENT_AUTO_DISPOSE) {
			this._lastFrame = lf;
		}
		return this._lastFrame;
	}
	,get_mipLevels: function() {
		if((this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) == 0) {
			return 1;
		}
		if(this.customMipLevels > 0) {
			return this.customMipLevels;
		}
		var lv = 1;
		var w = this.width;
		var h = this.height;
		while(w >> lv >= 1 || h >> lv >= 1) ++lv;
		return lv;
	}
	,get_layerCount: function() {
		if((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			return 6;
		} else {
			return 1;
		}
	}
	,alloc: function() {
		if(this.t == null) {
			this.mem.allocTexture(this);
		}
	}
	,toString: function() {
		var str = this.name;
		if(this.name == null) {
			str = "Texture_" + this.id;
			if(this.allocPos != null) {
				str += "(" + this.allocPos.position + ")";
			}
		}
		if((this.flags & 1 << h3d_mat_TextureFlags.Is3D._hx_index) != 0) {
			str += "(" + this.width + "x" + this.height + "x" + this.get_layerCount() + ")";
		} else {
			str += "(" + this.width + "x" + this.height + ")";
		}
		return str;
	}
	,setName: function(n) {
		this.name = n;
	}
	,set_mipMap: function(m) {
		this.bits = this.bits & -4 | m._hx_index;
		return this.mipMap = m;
	}
	,set_filter: function(f) {
		this.bits = this.bits & -25 | f._hx_index << 3;
		return this.filter = f;
	}
	,set_wrap: function(w) {
		this.bits = this.bits & -193 | w._hx_index << 6;
		return this.wrap = w;
	}
	,resize: function(width,height) {
		this.dispose();
		var tw = 1;
		var th = 1;
		while(tw < width) tw <<= 1;
		while(th < height) th <<= 1;
		if(tw != width || th != height) {
			this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
		} else {
			this.flags &= -1 - (1 << h3d_mat_TextureFlags.IsNPOT._hx_index);
		}
		this.width = width;
		this.height = height;
		if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
			this.alloc();
		}
	}
	,clear: function(color,alpha,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(alpha == null) {
			alpha = 1.;
		}
		this.alloc();
		if(this.width == 0 || this.height == 0) {
			return;
		}
		if(this.width != 1 || this.height != 1) {
			var engine = h3d_Engine.CURRENT;
			color |= ((alpha < 0. ? 0. : alpha > 1. ? 1. : alpha) * 255 | 0) << 24;
			if(layer < 0) {
				var _g = 0;
				var _g1 = this.get_layerCount();
				while(_g < _g1) {
					var i = _g++;
					engine.pushTarget(this,i);
					engine.clear(color);
					engine.popTarget();
				}
			} else {
				engine.pushTarget(this,layer);
				engine.clear(color);
				engine.popTarget();
			}
		} else {
			var p = hxd_Pixels.alloc(this.width,this.height,h3d_mat_Texture.nativeFormat);
			var k = 0;
			var b = color & 255;
			var g = color >> 8 & 255;
			var r = color >> 16 & 255;
			var a = alpha * 255 | 0;
			if(a < 0) {
				a = 0;
			} else if(a > 255) {
				a = 255;
			}
			switch(h3d_mat_Texture.nativeFormat._hx_index) {
			case 1:
				var tmp = r;
				r = b;
				b = tmp;
				break;
			case 2:
				break;
			default:
				throw haxe_Exception.thrown("TODO");
			}
			var _g = 0;
			var _g1 = this.width * this.height;
			while(_g < _g1) {
				var i = _g++;
				p.bytes.b[k++] = r;
				p.bytes.b[k++] = g;
				p.bytes.b[k++] = b;
				p.bytes.b[k++] = a;
			}
			if(layer < 0) {
				var _g = 0;
				var _g1 = this.get_layerCount();
				while(_g < _g1) {
					var i = _g++;
					this.uploadPixels(p,0,i);
				}
			} else {
				this.uploadPixels(p,0,layer);
			}
			p.dispose();
		}
	}
	,checkSize: function(width,height,mip) {
		var mw = this.width >> mip;
		if(mw == 0) {
			mw = 1;
		}
		var mh = this.height >> mip;
		if(mh == 0) {
			mh = 1;
		}
		if(width != mw || height != mh) {
			throw haxe_Exception.thrown("Invalid upload size : " + width + "x" + height + " should be " + mw + "x" + mh);
		}
	}
	,checkMipMapGen: function(mipLevel,layer) {
		if(mipLevel == 0 && (this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (this.flags & 1 << h3d_mat_TextureFlags.ManualMipMapGen._hx_index) == 0 && layer == this.get_layerCount() - 1) {
			this.mem.driver.generateMipMaps(this);
		}
	}
	,uploadBitmap: function(bmp,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		this.checkSize(bmp.ctx.canvas.width,bmp.ctx.canvas.height,mipLevel);
		this.mem.driver.uploadTextureBitmap(this,bmp,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,uploadPixels: function(pixels,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		this.checkSize(pixels.width,pixels.height,mipLevel);
		this.mem.driver.uploadTexturePixels(this,pixels,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,dispose: function() {
		if(this.t != null) {
			this.mem.deleteTexture(this);
		}
	}
	,hasStencil: function() {
		if(this.format._hx_index == 25) {
			return true;
		} else {
			return false;
		}
	}
	,isDepth: function() {
		switch(this.format._hx_index) {
		case 23:case 24:case 25:case 26:
			return true;
		default:
			return false;
		}
	}
	,__class__: h3d_mat_Texture
};
var h3d_mat_TextureArray = function(w,h,layers,flags,format) {
	this.layers = layers;
	if(flags == null) {
		flags = [];
	}
	flags.push(h3d_mat_TextureFlags.IsArray);
	h3d_mat_Texture.call(this,w,h,flags,format);
};
$hxClasses["h3d.mat.TextureArray"] = h3d_mat_TextureArray;
h3d_mat_TextureArray.__name__ = "h3d.mat.TextureArray";
h3d_mat_TextureArray.__super__ = h3d_mat_Texture;
h3d_mat_TextureArray.prototype = $extend(h3d_mat_Texture.prototype,{
	get_layerCount: function() {
		return this.layers;
	}
	,toString: function() {
		return h3d_mat_Texture.prototype.toString.call(this) + "[" + this.layers + "]";
	}
	,__class__: h3d_mat_TextureArray
});
var h3d_pass_Blur = function(radius,gain,linear,quality) {
	if(quality == null) {
		quality = 1.;
	}
	if(linear == null) {
		linear = 0.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	this.cubeDir = [h3d_Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d_Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d_Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d_Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d_Matrix.L([1,0,0,0,0,-1,0,0,0,0,1,0]),h3d_Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
	h3d_pass_ScreenFx.call(this,new h3d_shader_Blur());
	this.set_radius(radius);
	this.set_quality(quality);
	this.set_gain(gain);
	this.set_linear(linear);
};
$hxClasses["h3d.pass.Blur"] = h3d_pass_Blur;
h3d_pass_Blur.__name__ = "h3d.pass.Blur";
h3d_pass_Blur.__super__ = h3d_pass_ScreenFx;
h3d_pass_Blur.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	set_radius: function(r) {
		if(this.radius == r) {
			return r;
		}
		this.values = null;
		return this.radius = r;
	}
	,set_quality: function(q) {
		if(this.quality == q) {
			return q;
		}
		this.values = null;
		return this.quality = q;
	}
	,set_gain: function(s) {
		if(this.gain == s) {
			return s;
		}
		this.values = null;
		return this.gain = s;
	}
	,set_linear: function(b) {
		if(this.linear == b) {
			return b;
		}
		this.values = null;
		return this.linear = b;
	}
	,gauss: function(x,s) {
		if(s <= 0) {
			if(x == 0) {
				return 1;
			} else {
				return 0;
			}
		}
		var sq = s * s;
		var p = Math.pow(2.718281828459,-(x * x) / (2 * sq));
		return p / Math.sqrt(2 * Math.PI * sq);
	}
	,calcValues: function() {
		this.values = [];
		this.offsets = [];
		var tot = 0.;
		var f = this.quality;
		var qadj = (f < 0. ? 0. : f > 1. ? 1. : f) * 0.7 + 0.3;
		var width;
		if(this.radius > 0) {
			var a = this.radius - 1;
			width = Math.ceil((a < 1 ? 1 : a) * qadj / 2);
		} else {
			width = 0;
		}
		var sigma = Math.sqrt(this.radius);
		var _g = 0;
		var _g1 = width + 1;
		while(_g < _g1) {
			var i = _g++;
			var i1 = i * 2;
			var i2 = i == 0 ? 0 : i * 2 - 1;
			var g1 = this.gauss(i1,sigma);
			var g2 = this.gauss(i2,sigma);
			var g = g1 + g2;
			this.values[i] = g;
			this.offsets[i] = i == 0 ? 0 : (g1 * i1 + g2 * i2) / (g * i * Math.sqrt(qadj));
			tot += g;
			if(i > 0) {
				tot += g;
			}
		}
		var minVal = this.values[0] * (0.01 / qadj);
		while(this.values.length > 2) {
			var last = this.values[this.values.length - 1];
			if(last > minVal) {
				break;
			}
			tot -= last * 2;
			this.values.pop();
		}
		tot /= this.gain;
		var _g = 0;
		var _g1 = this.values.length;
		while(_g < _g1) {
			var i = _g++;
			this.values[i] /= tot;
		}
		if(this.linear > 0) {
			var m = this.gain / (this.values.length * 2 - 1);
			var _g = 0;
			var _g1 = this.values.length;
			while(_g < _g1) {
				var i = _g++;
				var a = this.values[i];
				this.values[i] = a + this.linear * (m - a);
				var a1 = this.offsets[i];
				this.offsets[i] = a1 + this.linear * ((i == 0 ? 0 : (i * 2 - 0.5) / (i * qadj)) - a1);
			}
		}
	}
	,apply: function(ctx,src,output) {
		if(this.radius <= 0 && this.shader.fixedColor__ == null) {
			if(output != null) {
				h3d_pass_Copy.run(src,output);
			}
			return;
		}
		if(output == null) {
			output = src;
		}
		if(this.values == null) {
			this.calcValues();
		}
		var isCube = (src.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var faceCount = isCube ? 6 : 1;
		var tmp = ctx.textures.allocTarget(src.name + "BlurTmp",src.width,src.height,false,src.format,isCube ? [h3d_mat_TextureFlags.Cube] : null);
		var _this = this.shader;
		_this.constModified = true;
		_this.Quality__ = this.values.length;
		this.shader.values__ = this.values;
		this.shader.offsets__ = this.offsets;
		if(isCube) {
			this.shader.cubeTexture__ = src;
			var _this = this.shader;
			_this.constModified = true;
			_this.isCube__ = true;
		} else {
			this.shader.texture__ = src;
			var _this = this.shader;
			_this.constModified = true;
			_this.isCube__ = false;
		}
		var _this = this.shader.pixel__;
		var x = 1 / src.width;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		var _g = 0;
		var _g1 = faceCount;
		while(_g < _g1) {
			var i = _g++;
			this.get_engine().pushTarget(tmp,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		if(isCube) {
			this.shader.cubeTexture__ = tmp;
		} else {
			this.shader.texture__ = tmp;
		}
		var _this = this.shader.pixel__;
		var x = 0;
		var y = 1 / src.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		var outDepth = output.depthBuffer;
		output.depthBuffer = null;
		var _g = 0;
		var _g1 = faceCount;
		while(_g < _g1) {
			var i = _g++;
			this.get_engine().pushTarget(output,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		output.depthBuffer = outDepth;
	}
	,__class__: h3d_pass_Blur
});
var h3d_pass__$Border_BorderShader = function() {
	this.color__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Border.BorderShader"] = h3d_pass__$Border_BorderShader;
h3d_pass__$Border_BorderShader.__name__ = "h3d.pass._Border.BorderShader";
h3d_pass__$Border_BorderShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Border_BorderShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Border_BorderShader
});
var h3d_pass_Border = function(width,height,size) {
	if(size == null) {
		size = 1;
	}
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Border_BorderShader());
	this.width = width;
	this.height = height;
	this.size = size;
	var _this = this.shader.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = w;
};
$hxClasses["h3d.pass.Border"] = h3d_pass_Border;
h3d_pass_Border.__name__ = "h3d.pass.Border";
h3d_pass_Border.__super__ = h3d_pass_ScreenFx;
h3d_pass_Border.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	createPrimitive: function() {
		var _gthis = this;
		var bbuf = hxd__$FloatBuffer_Float32Expand._new(0);
		var v = 0 / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - 0 / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = this.width / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - 0 / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.size;
		var v = 0 / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.size;
		var v = this.width / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 0 / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - 0 / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = this.size / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - 0 / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.height;
		var v = 0 / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.height;
		var v = this.size / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.height - this.size;
		var v = 0 / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.height - this.size;
		var v = this.width / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.height;
		var v = 0 / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.height;
		var v = this.width / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = (this.width - this.size) / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - 0 / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = this.width / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - 0 / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.height;
		var v = (this.width - this.size) / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var y = this.height;
		var v = this.width / _gthis.width * 2 - 1;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		var v = 1 - y / _gthis.height * 2;
		if(bbuf.pos == bbuf.array.length) {
			var newSize = bbuf.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(bbuf.array);
			bbuf.array = newArray;
		}
		bbuf.array[bbuf.pos++] = v;
		this.primitive = new h3d_prim_RawPrimitive({ vbuf : bbuf, format : hxd_BufferFormat.make([new hxd_BufferInput("position",2,0)])},true);
	}
	,render: function() {
		if(this.primitive == null) {
			this.createPrimitive();
		}
		h3d_pass_ScreenFx.prototype.render.call(this);
	}
	,dispose: function() {
		if(this.primitive != null) {
			this.primitive.dispose();
		}
		h3d_pass_ScreenFx.prototype.dispose.call(this);
	}
	,__class__: h3d_pass_Border
});
var h3d_pass_ColorMatrixShader = function() {
	this.maskChannel__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.maskPower__ = 0;
	this.maskMatB__ = new h3d_VectorImpl(0.,0.,0.);
	this.maskMatA__ = new h3d_VectorImpl(0.,0.,0.);
	this.matrix2__ = new h3d_MatrixImpl();
	this.matrix__ = new h3d_MatrixImpl();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass.ColorMatrixShader"] = h3d_pass_ColorMatrixShader;
h3d_pass_ColorMatrixShader.__name__ = "h3d.pass.ColorMatrixShader";
h3d_pass_ColorMatrixShader.__super__ = h3d_shader_ScreenShader;
h3d_pass_ColorMatrixShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_matrix: function() {
		return this.matrix__;
	}
	,set_matrix: function(_v) {
		return this.matrix__ = _v;
	}
	,get_useAlpha: function() {
		return this.useAlpha__;
	}
	,set_useAlpha: function(_v) {
		this.constModified = true;
		return this.useAlpha__ = _v;
	}
	,get_useMask: function() {
		return this.useMask__;
	}
	,set_useMask: function(_v) {
		this.constModified = true;
		return this.useMask__ = _v;
	}
	,get_maskInvert: function() {
		return this.maskInvert__;
	}
	,set_maskInvert: function(_v) {
		this.constModified = true;
		return this.maskInvert__ = _v;
	}
	,get_hasSecondMatrix: function() {
		return this.hasSecondMatrix__;
	}
	,set_hasSecondMatrix: function(_v) {
		this.constModified = true;
		return this.hasSecondMatrix__ = _v;
	}
	,get_matrix2: function() {
		return this.matrix2__;
	}
	,set_matrix2: function(_v) {
		return this.matrix2__ = _v;
	}
	,get_mask: function() {
		return this.mask__;
	}
	,set_mask: function(_v) {
		return this.mask__ = _v;
	}
	,get_maskMatA: function() {
		return this.maskMatA__;
	}
	,set_maskMatA: function(_v) {
		return this.maskMatA__ = _v;
	}
	,get_maskMatB: function() {
		return this.maskMatB__;
	}
	,set_maskMatB: function(_v) {
		return this.maskMatB__ = _v;
	}
	,get_maskPower: function() {
		return this.maskPower__;
	}
	,set_maskPower: function(_v) {
		return this.maskPower__ = _v;
	}
	,get_maskChannel: function() {
		return this.maskChannel__;
	}
	,set_maskChannel: function(_v) {
		return this.maskChannel__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.useAlpha__) {
			this.constBits |= 1;
		}
		if(this.useMask__) {
			this.constBits |= 2;
		}
		if(this.maskInvert__) {
			this.constBits |= 4;
		}
		if(this.hasSecondMatrix__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.matrix__;
		case 3:
			return this.useAlpha__;
		case 4:
			return this.useMask__;
		case 5:
			return this.maskInvert__;
		case 6:
			return this.hasSecondMatrix__;
		case 7:
			return this.matrix2__;
		case 8:
			return this.mask__;
		case 9:
			return this.maskMatA__;
		case 10:
			return this.maskMatB__;
		case 11:
			return this.maskPower__;
		case 12:
			return this.maskChannel__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 11:
			return this.maskPower__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_pass_ColorMatrixShader
});
var h3d_pass_ColorMatrix = function(m) {
	h3d_pass_ScreenFx.call(this,new h3d_pass_ColorMatrixShader());
	if(m != null) {
		this.shader.matrix__ = m;
	} else {
		this.shader.matrix__.identity();
	}
	this.shader.maskPower__ = 1;
	var _this = this.shader.maskChannel__;
	var x = 1;
	var y = 0;
	var z = 0;
	var w = 0;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = w;
};
$hxClasses["h3d.pass.ColorMatrix"] = h3d_pass_ColorMatrix;
h3d_pass_ColorMatrix.__name__ = "h3d.pass.ColorMatrix";
h3d_pass_ColorMatrix.__super__ = h3d_pass_ScreenFx;
h3d_pass_ColorMatrix.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(src,out,mask,maskMatrix) {
		this.get_engine().pushTarget(out);
		this.shader.texture__ = src;
		var _this = this.shader;
		_this.constModified = true;
		_this.useMask__ = mask != null;
		if(mask != null) {
			this.shader.mask__ = mask;
			if(maskMatrix == null) {
				var _this = this.shader.maskMatA__;
				var x = 1;
				var y = 0;
				var z = 0;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				var _this = this.shader.maskMatB__;
				var x = 0;
				var y = 1;
				var z = 0;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
			} else {
				var _this = this.shader.maskMatA__;
				var x = maskMatrix.a;
				var y = maskMatrix.c;
				var z = maskMatrix.x;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				var _this = this.shader.maskMatB__;
				var x = maskMatrix.b;
				var y = maskMatrix.d;
				var z = maskMatrix.y;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
			}
		}
		this.render();
		this.get_engine().popTarget();
	}
	,__class__: h3d_pass_ColorMatrix
});
var h3d_pass__$Copy_ArrayCopyShader = function() {
	this.layer__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.ArrayCopyShader"] = h3d_pass__$Copy_ArrayCopyShader;
h3d_pass__$Copy_ArrayCopyShader.__name__ = "h3d.pass._Copy.ArrayCopyShader";
h3d_pass__$Copy_ArrayCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_ArrayCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_layer: function() {
		return this.layer__;
	}
	,set_layer: function(_v) {
		return this.layer__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.layer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 2:
			return this.layer__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_pass__$Copy_ArrayCopyShader
});
var h3d_pass__$Copy_CopyShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.CopyShader"] = h3d_pass__$Copy_CopyShader;
h3d_pass__$Copy_CopyShader.__name__ = "h3d.pass._Copy.CopyShader";
h3d_pass__$Copy_CopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_CopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Copy_CopyShader
});
var h3d_pass_Copy = function() {
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Copy_CopyShader());
};
$hxClasses["h3d.pass.Copy"] = h3d_pass_Copy;
h3d_pass_Copy.__name__ = "h3d.pass.Copy";
h3d_pass_Copy.run = function(from,to,blend,pass,layer) {
	var engine = h3d_Engine.CURRENT;
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && layer == null && engine.driver.copyTexture(from,to)) {
		return;
	}
	var inst = engine.resCache.h[h3d_pass_Copy.__id__];
	if(inst == null) {
		inst = new h3d_pass_Copy();
		engine.resCache.set(h3d_pass_Copy,inst);
	}
	inst.apply(from,to,blend,pass,layer);
};
h3d_pass_Copy.__super__ = h3d_pass_ScreenFx;
h3d_pass_Copy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,to,blend,customPass,layer) {
		if(to != null) {
			this.get_engine().pushTarget(to,layer != null ? layer : 0,null,h3d_DepthBinding.NotBound);
		}
		this.shader.texture__ = from;
		if(customPass != null) {
			if(blend != null) {
				customPass.setBlendMode(blend);
			}
			var h = customPass.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			var old = this.pass;
			this.pass = customPass;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		if(to != null) {
			this.get_engine().popTarget();
		}
	}
	,__class__: h3d_pass_Copy
});
var h3d_pass__$CubeCopy_CubeCopyShader = function() {
	this.mat__ = new h3d_MatrixImpl();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._CubeCopy.CubeCopyShader"] = h3d_pass__$CubeCopy_CubeCopyShader;
h3d_pass__$CubeCopy_CubeCopyShader.__name__ = "h3d.pass._CubeCopy.CubeCopyShader";
h3d_pass__$CubeCopy_CubeCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$CubeCopy_CubeCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_mat: function() {
		return this.mat__;
	}
	,set_mat: function(_v) {
		return this.mat__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$CubeCopy_CubeCopyShader
});
var h3d_pass_Output = function(name,output) {
	this.defaultSort = ($_=new h3d_pass_SortByMaterial(),$bind($_,$_.sort));
	this.name = name;
	this.output = new h3d_pass_OutputShader(output);
};
$hxClasses["h3d.pass.Output"] = h3d_pass_Output;
h3d_pass_Output.__name__ = "h3d.pass.Output";
h3d_pass_Output.prototype = {
	setContext: function(ctx) {
		this.ctx = ctx;
	}
	,processShaders: function(p,shaders) {
		var p = this.ctx.extraShaders;
		while(p != null) {
			shaders = this.ctx.allocShaderList(p.s,shaders);
			p = p.next;
		}
		return shaders;
	}
	,setupShaders: function(passes) {
		var lightInit = false;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var shaders = p.pass.getShadersRec();
			shaders = this.processShaders(p,shaders);
			if(p.pass.enableLights && this.ctx.lightSystem != null) {
				if(!lightInit) {
					this.ctx.lightSystem.initGlobals(this.ctx.globals);
					lightInit = true;
				}
				shaders = this.ctx.lightSystem.computeLight(p.obj,shaders);
			}
			p.shader = this.output.compileShaders(this.ctx.globals,shaders,p.pass.batchMode ? hxsl_LinkMode.Batch : hxsl_LinkMode.Default);
			p.shaders = shaders;
			var t = p.shader.fragment.textures;
			var tmp1;
			if(t != null) {
				var _g = t.type;
				if(_g._hx_index == 15) {
					var _g1 = _g.t;
					var _g2 = _g.size;
					tmp1 = true;
				} else {
					tmp1 = false;
				}
			} else {
				tmp1 = true;
			}
			if(tmp1) {
				p.texture = 0;
			} else {
				var _this = this.ctx;
				var opt = true;
				if(opt == null) {
					opt = false;
				}
				var t1;
				if(t.perObjectGlobal != null) {
					var v = _this.globals.map.h[t.perObjectGlobal.gid];
					if(v == null) {
						throw haxe_Exception.thrown("Missing global value " + t.perObjectGlobal.path + " for shader " + _this.shaderInfo(shaders,t.perObjectGlobal.path));
					}
					var _g3 = t.type;
					var t2;
					if(_g3._hx_index == 17) {
						var _g4 = _g3.size;
						t2 = true;
					} else {
						t2 = false;
					}
					t1 = t2 ? v.texture : v;
				} else {
					var si = shaders;
					var n = t.instance;
					while(--n > 0) si = si.next;
					var v1 = si.s.getParamValue(t.index);
					if(v1 == null && !opt) {
						throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + t.name);
					}
					t1 = v1;
				}
				p.texture = t1 == null ? 0 : t1.id;
			}
		}
	}
	,drawObject: function(p) {
		this.ctx.drawPass = p;
		this.ctx.engine.selectMaterial(p.pass);
		var _this = p.obj;
		var f = 65536;
		_this.flags |= f;
		p.obj.draw(this.ctx);
	}
	,draw: function(passes,sort) {
		if(passes.current == null) {
			return;
		}
		this.ctx.setupTarget();
		this.setupShaders(passes);
		if(sort == null) {
			this.defaultSort(passes);
		} else {
			sort(passes);
		}
		var buf = this.ctx.shaderBuffers;
		var prevShader = null;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var _this = this.ctx;
			var tmp1 = p.obj.prevAbsPos;
			var v = tmp1 != null ? tmp1 : p.obj.absPos;
			_this.globals.map.h[_this.globalPreviousModelView_id] = v;
			var _this1 = this.ctx;
			var v1 = p.obj.absPos;
			_this1.globals.map.h[_this1.globalModelView_id] = v1;
			if(p.shader.globals.h.hasOwnProperty(this.ctx.globalModelViewInverse_id)) {
				var _this2 = this.ctx;
				var v2 = p.obj.getInvPos();
				_this2.globals.map.h[_this2.globalModelViewInverse_id] = v2;
			}
			if(prevShader != p.shader) {
				prevShader = p.shader;
				if(h3d_pass_Output.onShaderError != null) {
					try {
						this.ctx.engine.selectShader(p.shader);
					} catch( _g ) {
						var e = haxe_Exception.caught(_g).unwrap();
						h3d_pass_Output.onShaderError(e,p);
						continue;
					}
				} else {
					this.ctx.engine.selectShader(p.shader);
				}
				var s = p.shader;
				buf.vertex.grow(s.vertex);
				if(s.fragment != null) {
					buf.fragment.grow(s.fragment);
				}
				this.ctx.fillGlobals(buf,p.shader);
				this.ctx.engine.uploadShaderBuffers(buf,0);
			}
			if(!p.pass.dynamicParameters) {
				this.ctx.fillParams(buf,p.shader,p.shaders);
				this.ctx.engine.uploadShaderBuffers(buf,1);
				this.ctx.engine.uploadShaderBuffers(buf,2);
				this.ctx.engine.uploadShaderBuffers(buf,3);
			}
			this.drawObject(p);
		}
		var _this = this.ctx;
		_this.cachedPos = 0;
		_this.drawPass = null;
	}
	,__class__: h3d_pass_Output
};
var h3d_pass_Shadows = function(light) {
	this.pcfScale = 1.0;
	this.pcfQuality = 1;
	this.bias = 0.01;
	this.power = 30.0;
	this.samplingKind = h3d_pass_ShadowSamplingKind.None;
	this.size = 1024;
	this.mode = h3d_pass_RenderMode.None;
	this.enabled = true;
	this.updateStatic = false;
	if(this.format == null) {
		this.format = hxd_PixelFormat.R16F;
	}
	if(!h3d_Engine.CURRENT.driver.isSupportedFormat(this.format)) {
		this.format = h3d_mat_Texture.nativeFormat;
	}
	h3d_pass_Output.call(this,"shadow",this.getOutputs());
	this.light = light;
	this.blur = new h3d_pass_Blur(5);
	this.blur.set_quality(0.5);
	var _this = this.blur.shader;
	_this.constModified = true;
	_this.isDepth__ = this.format == h3d_mat_Texture.nativeFormat;
};
$hxClasses["h3d.pass.Shadows"] = h3d_pass_Shadows;
h3d_pass_Shadows.__name__ = "h3d.pass.Shadows";
h3d_pass_Shadows.__super__ = h3d_pass_Output;
h3d_pass_Shadows.prototype = $extend(h3d_pass_Output.prototype,{
	set_size: function(s) {
		if(s != this.size && this.staticTexture != null) {
			this.staticTexture.dispose();
			this.staticTexture = null;
		}
		return this.size = s;
	}
	,getShadowProj: function() {
		return this.lightCamera.m;
	}
	,isUsingWorldDist: function() {
		return false;
	}
	,getOutputs: function() {
		if(this.isUsingWorldDist()) {
			return [hxsl_Output.Swiz(hxsl_Output.Value("output.worldDist",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
		}
		if(this.format == h3d_mat_Texture.nativeFormat) {
			return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
		}
		return [hxsl_Output.Swiz(hxsl_Output.Value("output.depth",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
	}
	,createDefaultShadowMap: function() {
		var tex = h3d_mat_Texture.fromColor(16777215);
		tex.name = "defaultShadowMap";
		return tex;
	}
	,syncEarlyExit: function() {
		this.syncShader(this.staticTexture == null ? this.createDefaultShadowMap() : this.staticTexture);
	}
	,syncShader: function(texture) {
	}
	,filterPasses: function(passes) {
		if(this.ctx.computingStatic || this.updateStatic) {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			case 2:
				return false;
			case 3:
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			}
		} else {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				this.syncEarlyExit();
				return false;
			case 2:
				return true;
			case 3:
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == false) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			}
		}
	}
	,__class__: h3d_pass_Shadows
});
var h3d_pass_DirShadowMap = function(light) {
	this.minDist = -1.0;
	this.maxDist = -1.0;
	this.autoZPlanes = false;
	this.autoShrink = true;
	this.mergePass = new h3d_pass_ScreenFx(new h3d_shader_MinMaxShader());
	h3d_pass_Shadows.call(this,light);
	this.lightCamera = new h3d_Camera();
	this.lightCamera.orthoBounds = new h3d_col_Bounds();
	this.shader = this.dshader = new h3d_shader_DirShadow();
	this.border = new h3d_pass_Border(this.size,this.size);
};
$hxClasses["h3d.pass.DirShadowMap"] = h3d_pass_DirShadowMap;
h3d_pass_DirShadowMap.__name__ = "h3d.pass.DirShadowMap";
h3d_pass_DirShadowMap.__super__ = h3d_pass_Shadows;
h3d_pass_DirShadowMap.prototype = $extend(h3d_pass_Shadows.prototype,{
	set_mode: function(m) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.enable__ = m != h3d_pass_RenderMode.None;
		return this.mode = m;
	}
	,set_size: function(s) {
		if(this.border != null && this.size != s) {
			this.border.dispose();
			this.border = new h3d_pass_Border(s,s);
		}
		return h3d_pass_Shadows.prototype.set_size.call(this,s);
	}
	,calcShadowBounds: function(camera) {
		var _gthis = this;
		var bounds = camera.orthoBounds;
		var zMax = -1e9;
		var zMin = 1e9;
		if(this.autoShrink) {
			var mtmp = new h3d_MatrixImpl();
			var identity = h3d_Matrix.I();
			var btmp = this.autoZPlanes ? new h3d_col_Bounds() : null;
			var obj = this.boundingObject != null ? this.boundingObject : this.ctx.scene;
			obj.iterVisibleMeshes(function(m) {
				if(m.primitive == null || !m.material.castShadows) {
					return;
				}
				var b = m.primitive.getBounds();
				if(b.xMin > b.xMax) {
					return;
				}
				var absPos = ((m.primitive) instanceof h3d_prim_Instanced) ? identity : m.getAbsPos();
				if(_gthis.autoZPlanes) {
					btmp.load(b);
					btmp.transform(absPos);
					if(btmp.zMax > zMax) {
						zMax = btmp.zMax;
					}
					if(btmp.zMin < zMin) {
						zMin = btmp.zMin;
					}
				}
				mtmp.multiply3x4(absPos,camera.mcam);
				var x = b.xMin;
				var y = b.yMin;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMin;
				var y = b.yMin;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMin;
				var y = b.yMax;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMin;
				var y = b.yMax;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMin;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMin;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMax;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMax;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p_x = x1;
				var p_y = y1;
				var p_z = z1;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
			});
		} else if(this.mode == h3d_pass_RenderMode.Dynamic) {
			bounds.xMin = -1e20;
			bounds.xMax = 1e20;
			bounds.yMin = -1e20;
			bounds.yMax = 1e20;
			bounds.zMin = -1e20;
			bounds.zMax = 1e20;
		}
		if(this.mode == h3d_pass_RenderMode.Dynamic) {
			var cameraBounds = new h3d_col_Bounds();
			var minDist = this.minDist < 0 ? this.ctx.camera.zNear : this.minDist;
			var maxDist = this.maxDist < 0 ? this.ctx.camera.zFar : this.maxDist;
			var dist = minDist;
			var this1 = _gthis.ctx.camera.unproject(-1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMax;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = minDist;
			var this1 = _gthis.ctx.camera.unproject(-1,1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMax;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = minDist;
			var this1 = _gthis.ctx.camera.unproject(1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMax;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = minDist;
			var this1 = _gthis.ctx.camera.unproject(1,1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMax;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = 1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = maxDist;
			var this1 = _gthis.ctx.camera.unproject(-1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMin;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = -1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = maxDist;
			var this1 = _gthis.ctx.camera.unproject(-1,1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMin;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = -1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = maxDist;
			var this1 = _gthis.ctx.camera.unproject(1,-1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMin;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = -1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			var dist = maxDist;
			var this1 = _gthis.ctx.camera.unproject(1,1,_gthis.ctx.camera.distanceToDepth(dist));
			var x = this1.x;
			var y = this1.y;
			var z = this1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			if(_gthis.autoShrink && _gthis.autoZPlanes) {
				var this1 = _gthis.ctx.camera.pos;
				var x = this1.x;
				var y = this1.y;
				var z = this1.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var x1 = x;
				var y1 = y;
				var z1 = z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var p1_x = x1;
				var p1_y = y1;
				var p1_z = z1;
				var r = new h3d_col_Ray();
				r.px = p1_x;
				r.py = p1_y;
				r.pz = p1_z;
				r.lx = _this_x - p1_x;
				r.ly = _this_y - p1_y;
				r.lz = _this_z - p1_z;
				r.normalize();
				var r1 = r;
				var v = zMin;
				if(v == null) {
					v = 0.0;
				}
				var p_nx = 0;
				var p_ny = 0;
				var p_nz = 1;
				var p_d = v;
				var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
				var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
				var d2 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
				var k = -1;
				if(d2 > 0 && d2 * k > dist * k) {
					var x = r1.px + d2 * r1.lx;
					var y = r1.py + d2 * r1.ly;
					var z = r1.pz + d2 * r1.lz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					_this_x = v_x;
					_this_y = v_y;
					_this_z = v_z;
				}
			}
			var m = camera.mcam;
			var px = _this_x * m._11 + _this_y * m._21 + _this_z * m._31 + m._41;
			var py = _this_x * m._12 + _this_y * m._22 + _this_z * m._32 + m._42;
			var pz = _this_x * m._13 + _this_y * m._23 + _this_z * m._33 + m._43;
			_this_x = px;
			_this_y = py;
			_this_z = pz;
			var x = _this_x;
			var y = _this_y;
			var z = _this_z;
			if(x < cameraBounds.xMin) {
				cameraBounds.xMin = x;
			}
			if(x > cameraBounds.xMax) {
				cameraBounds.xMax = x;
			}
			if(y < cameraBounds.yMin) {
				cameraBounds.yMin = y;
			}
			if(y > cameraBounds.yMax) {
				cameraBounds.yMax = y;
			}
			if(z < cameraBounds.zMin) {
				cameraBounds.zMin = z;
			}
			if(z > cameraBounds.zMax) {
				cameraBounds.zMax = z;
			}
			if(this.autoShrink) {
				cameraBounds.zMin = bounds.zMin;
				bounds.intersection(bounds,cameraBounds);
				if(this.autoZPlanes) {
					var this1 = camera.target;
					var v = camera.pos;
					var x = this1.x - v.x;
					var y = this1.y - v.y;
					var z = this1.z - v.z;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var _this_x = x1;
					var _this_y = y1;
					var _this_z = z1;
					var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
					if(k < 1e-20) {
						k = 0;
					} else {
						k = 1. / Math.sqrt(k);
					}
					var x = _this_x * k;
					var y = _this_y * k;
					var z = _this_z * k;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var v_x = x1;
					var v_y = y1;
					var v_z = z1;
					var dMin = 1e9;
					var px = bounds.xMin;
					var py = bounds.yMin;
					var x = px;
					var y = py;
					var z = bounds.zMin;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var this_x = x1;
					var this_y = y1;
					var this_z = z1;
					var m = camera.getInverseView();
					var px = this_x * m._11 + this_y * m._21 + this_z * m._31 + m._41;
					var py = this_x * m._12 + this_y * m._22 + this_z * m._32 + m._42;
					var pz = this_x * m._13 + this_y * m._23 + this_z * m._33 + m._43;
					var x = px;
					var y = py;
					var z = pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var r0_x = x1;
					var r0_y = y1;
					var r0_z = z1;
					var r = new h3d_col_Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					var r1 = r;
					var v = zMax;
					if(v == null) {
						v = 0.0;
					}
					var p_nx = 0;
					var p_ny = 0;
					var p_nz = 1;
					var p_d = v;
					var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					var d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					var px = bounds.xMin;
					var py = bounds.yMax;
					var x = px;
					var y = py;
					var z = bounds.zMin;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var this_x = x1;
					var this_y = y1;
					var this_z = z1;
					var m = camera.getInverseView();
					var px = this_x * m._11 + this_y * m._21 + this_z * m._31 + m._41;
					var py = this_x * m._12 + this_y * m._22 + this_z * m._32 + m._42;
					var pz = this_x * m._13 + this_y * m._23 + this_z * m._33 + m._43;
					var x = px;
					var y = py;
					var z = pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var r0_x = x1;
					var r0_y = y1;
					var r0_z = z1;
					var r = new h3d_col_Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					var r1 = r;
					var v = zMax;
					if(v == null) {
						v = 0.0;
					}
					var p_nx = 0;
					var p_ny = 0;
					var p_nz = 1;
					var p_d = v;
					var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					var d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					var px = bounds.xMax;
					var py = bounds.yMin;
					var x = px;
					var y = py;
					var z = bounds.zMin;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var this_x = x1;
					var this_y = y1;
					var this_z = z1;
					var m = camera.getInverseView();
					var px = this_x * m._11 + this_y * m._21 + this_z * m._31 + m._41;
					var py = this_x * m._12 + this_y * m._22 + this_z * m._32 + m._42;
					var pz = this_x * m._13 + this_y * m._23 + this_z * m._33 + m._43;
					var x = px;
					var y = py;
					var z = pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var r0_x = x1;
					var r0_y = y1;
					var r0_z = z1;
					var r = new h3d_col_Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					var r1 = r;
					var v = zMax;
					if(v == null) {
						v = 0.0;
					}
					var p_nx = 0;
					var p_ny = 0;
					var p_nz = 1;
					var p_d = v;
					var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					var d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					var px = bounds.xMax;
					var py = bounds.yMax;
					var x = px;
					var y = py;
					var z = bounds.zMin;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var this_x = x1;
					var this_y = y1;
					var this_z = z1;
					var m = camera.getInverseView();
					var px = this_x * m._11 + this_y * m._21 + this_z * m._31 + m._41;
					var py = this_x * m._12 + this_y * m._22 + this_z * m._32 + m._42;
					var pz = this_x * m._13 + this_y * m._23 + this_z * m._33 + m._43;
					var x = px;
					var y = py;
					var z = pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var r0_x = x1;
					var r0_y = y1;
					var r0_z = z1;
					var r = new h3d_col_Ray();
					r.px = r0_x;
					r.py = r0_y;
					r.pz = r0_z;
					r.lx = v_x;
					r.ly = v_y;
					r.lz = v_z;
					r.normalize();
					var r1 = r;
					var v = zMax;
					if(v == null) {
						v = 0.0;
					}
					var p_nx = 0;
					var p_ny = 0;
					var p_nz = 1;
					var p_d = v;
					var d = r1.lx * p_nx + r1.ly * p_ny + r1.lz * p_nz;
					var nd = p_d - (r1.px * p_nx + r1.py * p_ny + r1.pz * p_nz);
					var d1 = (d < 0 ? -d : d) < 1e-10 ? (nd < 0 ? -nd : nd) < 1e-10 ? 0. : -1 : nd / d;
					if(d1 < dMin) {
						dMin = d1;
					}
					bounds.zMin += dMin;
				}
			} else {
				bounds.load(cameraBounds);
			}
		}
		bounds.scaleCenter(1.01);
	}
	,syncShader: function(texture) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMap__ = texture;
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMapChannel__ = this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R;
		this.dshader.shadowBias__ = this.bias;
		this.dshader.shadowPower__ = this.power;
		this.dshader.shadowProj__ = this.getShadowProj();
		var _this = this.dshader;
		_this.constModified = true;
		_this.USE_ESM__ = this.samplingKind == h3d_pass_ShadowSamplingKind.ESM;
		this.dshader.shadowPower__ = this.power;
		var _this = this.dshader;
		_this.constModified = true;
		_this.USE_PCF__ = this.samplingKind == h3d_pass_ShadowSamplingKind.PCF;
		var _this = this.dshader.shadowRes__;
		var x = texture.width;
		var y = texture.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		this.dshader.pcfScale__ = this.pcfScale;
		this.dshader.set_pcfQuality(this.pcfQuality);
	}
	,processShadowMap: function(passes,tex,sort) {
		var _this = this.ctx;
		var prevViewProj = _this.globals.map.h[_this.cameraViewProj_id];
		var _this = this.ctx;
		var v = this.getShadowProj();
		_this.globals.map.h[_this.cameraViewProj_id] = v;
		if(tex.isDepth()) {
			this.ctx.engine.pushDepth(tex);
			this.ctx.engine.clear(null,1.0);
		} else {
			this.ctx.engine.pushTarget(tex);
			this.ctx.engine.clear(16777215,1.0);
		}
		h3d_pass_Shadows.prototype.draw.call(this,passes,sort);
		var computingStatic = this.ctx.computingStatic || this.updateStatic;
		var doBlur = this.blur.radius > 0 && (this.mode != h3d_pass_RenderMode.Mixed || !computingStatic);
		if(this.border != null && !doBlur) {
			this.border.render();
		}
		this.ctx.engine.popTarget();
		var tmp;
		if(this.mode == h3d_pass_RenderMode.Mixed && !computingStatic && this.staticTexture != null) {
			var _this = this.staticTexture;
			tmp = !(_this.t == null && (_this.isDepth() || _this.realloc == null));
		} else {
			tmp = false;
		}
		if(tmp) {
			if(this.staticTexture.width != tex.width) {
				throw haxe_Exception.thrown("Static shadow map doesnt match dynamic shadow map");
			}
			var merge = this.ctx.textures.allocTarget("mergedDirShadowMap",this.size,this.size,false,this.format);
			this.mergePass.shader.texA__ = tex;
			this.mergePass.shader.texB__ = this.staticTexture;
			this.ctx.engine.pushTarget(merge);
			this.mergePass.render();
			this.ctx.engine.popTarget();
			tex = merge;
		}
		if(doBlur) {
			if(tex.isDepth()) {
				var tmp = this.ctx.textures.allocTarget("dirShadowMapFloat",this.size,this.size,false,this.format);
				h3d_pass_Copy.run(tex,tmp);
				tex = tmp;
			}
			this.blur.apply(this.ctx,tex);
			if(this.border != null) {
				this.ctx.engine.pushTarget(tex);
				this.border.render();
				this.ctx.engine.popTarget();
			}
		}
		var _this = this.ctx;
		_this.globals.map.h[_this.cameraViewProj_id] = prevViewProj;
		return tex;
	}
	,draw: function(passes,sort) {
		var _gthis = this;
		if(!this.enabled) {
			return;
		}
		if(!this.filterPasses(passes)) {
			return;
		}
		var computingStatic = this.ctx.computingStatic || this.updateStatic;
		if(this.mode != h3d_pass_RenderMode.Mixed || computingStatic) {
			var ct = this.ctx.camera.target;
			var slight = this.light == null ? this.ctx.lightSystem.shadowLight : this.light;
			var ldir = slight == null ? null : slight.getShadowDirection();
			if(ldir == null) {
				var _this = this.lightCamera.target;
				var x = 0;
				var y = 0;
				var z = -1;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
			} else {
				var _this = this.lightCamera.target;
				var x = ldir.x;
				var y = ldir.y;
				var z = ldir.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				var _this = this.lightCamera.target;
				var k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
				if(k < 1e-20) {
					k = 0;
				} else {
					k = 1. / Math.sqrt(k);
				}
				_this.x *= k;
				_this.y *= k;
				_this.z *= k;
			}
			this.lightCamera.target.x += ct.x;
			this.lightCamera.target.y += ct.y;
			this.lightCamera.target.z += ct.z;
			var _this = this.lightCamera.pos;
			_this.x = ct.x;
			_this.y = ct.y;
			_this.z = ct.z;
			this.lightCamera.update();
			var _this = this.lightCamera.orthoBounds;
			_this.xMin = 1e20;
			_this.xMax = -1e20;
			_this.yMin = 1e20;
			_this.yMax = -1e20;
			_this.zMin = 1e20;
			_this.zMax = -1e20;
			if(passes.current != null) {
				this.calcShadowBounds(this.lightCamera);
			}
			this.lightCamera.update();
		}
		var f = function(col) {
			return col.inFrustum(_gthis.lightCamera.frustum);
		};
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col = cur.obj.cullingCollider;
			var tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
		var texture = this.ctx.textures.allocTarget("dirShadowMap",this.size,this.size,false,this.format);
		var tmp;
		if(!(this.depth == null || this.depth.width != this.size || this.depth.height != this.size)) {
			var _this = this.depth;
			tmp = _this.t == null && (_this.isDepth() || _this.realloc == null);
		} else {
			tmp = true;
		}
		if(tmp) {
			if(this.depth != null) {
				this.depth.dispose();
			}
			this.depth = new h3d_mat_Texture(this.size,this.size,null,hxd_PixelFormat.Depth24Stencil8);
			this.depth.name = "dirShadowMapDepth";
		}
		texture.depthBuffer = this.depth;
		texture = this.processShadowMap(passes,texture,sort);
		this.syncShader(texture);
		this.updateStatic = false;
	}
	,__class__: h3d_pass_DirShadowMap
});
var h3d_pass_DefaultShadowMap = function(size,format) {
	if(size == null) {
		size = 1024;
	}
	if(format != null) {
		this.format = format;
	}
	h3d_pass_DirShadowMap.call(this,null);
	this.set_size(size);
	this.color = new h3d_VectorImpl(0.,0.,0.);
	this.set_mode(h3d_pass_RenderMode.Dynamic);
	this.shadowMapId = hxsl_Globals.allocID("shadow.map");
	this.shadowProjId = hxsl_Globals.allocID("shadow.proj");
	this.shadowColorId = hxsl_Globals.allocID("shadow.color");
	this.shadowPowerId = hxsl_Globals.allocID("shadow.power");
	this.shadowBiasId = hxsl_Globals.allocID("shadow.bias");
};
$hxClasses["h3d.pass.DefaultShadowMap"] = h3d_pass_DefaultShadowMap;
h3d_pass_DefaultShadowMap.__name__ = "h3d.pass.DefaultShadowMap";
h3d_pass_DefaultShadowMap.__super__ = h3d_pass_DirShadowMap;
h3d_pass_DefaultShadowMap.prototype = $extend(h3d_pass_DirShadowMap.prototype,{
	draw: function(passes,sort) {
		h3d_pass_DirShadowMap.prototype.draw.call(this,passes,sort);
		this.ctx.globals.map.h[this.shadowMapId] = { texture : this.dshader.shadowMap__, channel : this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R};
		var _this = this.ctx.globals;
		var id = this.shadowProjId;
		var v = this.getShadowProj();
		_this.map.h[id] = v;
		this.ctx.globals.map.h[this.shadowColorId] = this.color;
		this.ctx.globals.map.h[this.shadowPowerId] = this.power;
		this.ctx.globals.map.h[this.shadowBiasId] = this.bias;
	}
	,__class__: h3d_pass_DefaultShadowMap
});
var h3d_pass_Outline = function(size,color,quality,multiplyAlpha) {
	if(multiplyAlpha == null) {
		multiplyAlpha = true;
	}
	if(quality == null) {
		quality = 0.3;
	}
	if(color == null) {
		color = 0;
	}
	if(size == null) {
		size = 4.0;
	}
	this.alpha = 1.;
	h3d_pass_ScreenFx.call(this,new h3d_shader_Outline2D());
	this.size = size;
	this.color = color;
	this.quality = quality;
	this.multiplyAlpha = multiplyAlpha;
};
$hxClasses["h3d.pass.Outline"] = h3d_pass_Outline;
h3d_pass_Outline.__name__ = "h3d.pass.Outline";
h3d_pass_Outline.__super__ = h3d_pass_ScreenFx;
h3d_pass_Outline.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(ctx,src,output) {
		if(output == null) {
			output = src;
		}
		var tmp = ctx.textures.allocTarget(src.name + "OutlineTmp",src.width,src.height,false,src.format);
		var _this = this.shader.color__;
		var c = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.shader.color__.w = this.alpha;
		var _this = this.shader.size__;
		var x = this.size / src.width;
		var y = this.size / src.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		var _this = this.shader;
		var _v = Math.max(this.quality * 100,1) | 0;
		_this.constModified = true;
		_this.samples__ = _v;
		var _this = this.shader;
		_this.constModified = true;
		_this.multiplyAlpha__ = this.multiplyAlpha ? 0 : 1;
		this.shader.texture__ = src;
		this.get_engine().pushTarget(tmp);
		this.render();
		this.get_engine().popTarget();
		this.shader.texture__ = tmp;
		var outDepth = output.depthBuffer;
		output.depthBuffer = null;
		this.get_engine().pushTarget(output);
		this.render();
		this.get_engine().popTarget();
		output.depthBuffer = outDepth;
	}
	,__class__: h3d_pass_Outline
});
var h3d_pass_OutputShader = function(output) {
	this.shaderCache = hxsl_Cache.get();
	this.currentOutput = new hxsl_ShaderList(null);
	this.setOutput(output);
};
$hxClasses["h3d.pass.OutputShader"] = h3d_pass_OutputShader;
h3d_pass_OutputShader.__name__ = "h3d.pass.OutputShader";
h3d_pass_OutputShader.prototype = {
	setOutput: function(output) {
		if(output == null) {
			output = [hxsl_Output.Value("output.color")];
		}
		this.currentOutput.s = this.shaderCache.getLinkShader(output);
	}
	,compileShaders: function(globals,shaders,mode) {
		if(mode == null) {
			mode = hxsl_LinkMode.Default;
		}
		globals.maxChannels = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			s1.updateConstants(globals);
		}
		this.currentOutput.next = shaders;
		var s = this.shaderCache.link(this.currentOutput,mode);
		this.currentOutput.next = null;
		return s;
	}
	,__class__: h3d_pass_OutputShader
};
var h3d_pass_PassList = function(current) {
	this.current = current;
	this.discarded = this.lastDisc = null;
};
$hxClasses["h3d.pass.PassList"] = h3d_pass_PassList;
h3d_pass_PassList.__name__ = "h3d.pass.PassList";
h3d_pass_PassList.prototype = {
	__class__: h3d_pass_PassList
};
var h3d_pass_PassObject = function() {
	this.texture = 0;
};
$hxClasses["h3d.pass.PassObject"] = h3d_pass_PassObject;
h3d_pass_PassObject.__name__ = "h3d.pass.PassObject";
h3d_pass_PassObject.prototype = {
	__class__: h3d_pass_PassObject
};
var h3d_pass_RenderMode = $hxEnums["h3d.pass.RenderMode"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Static: {_hx_name:"Static",_hx_index:1,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Dynamic: {_hx_name:"Dynamic",_hx_index:2,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Mixed: {_hx_name:"Mixed",_hx_index:3,__enum__:"h3d.pass.RenderMode",toString:$estr}
};
h3d_pass_RenderMode.__constructs__ = [h3d_pass_RenderMode.None,h3d_pass_RenderMode.Static,h3d_pass_RenderMode.Dynamic,h3d_pass_RenderMode.Mixed];
h3d_pass_RenderMode.__empty_constructs__ = [h3d_pass_RenderMode.None,h3d_pass_RenderMode.Static,h3d_pass_RenderMode.Dynamic,h3d_pass_RenderMode.Mixed];
var h3d_pass_ShadowSamplingKind = $hxEnums["h3d.pass.ShadowSamplingKind"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,PCF: {_hx_name:"PCF",_hx_index:1,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,ESM: {_hx_name:"ESM",_hx_index:2,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
};
h3d_pass_ShadowSamplingKind.__constructs__ = [h3d_pass_ShadowSamplingKind.None,h3d_pass_ShadowSamplingKind.PCF,h3d_pass_ShadowSamplingKind.ESM];
h3d_pass_ShadowSamplingKind.__empty_constructs__ = [h3d_pass_ShadowSamplingKind.None,h3d_pass_ShadowSamplingKind.PCF,h3d_pass_ShadowSamplingKind.ESM];
var h3d_pass_SortByMaterial = function() {
	this.textureCount = 1;
	this.shaderCount = 1;
	this.shaderIdMap = [];
	this.textureIdMap = [];
};
$hxClasses["h3d.pass.SortByMaterial"] = h3d_pass_SortByMaterial;
h3d_pass_SortByMaterial.__name__ = "h3d.pass.SortByMaterial";
h3d_pass_SortByMaterial.prototype = {
	sort: function(passes) {
		var _gthis = this;
		var shaderStart = this.shaderCount;
		var textureStart = this.textureCount;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			if(this.shaderIdMap[p.shader.id] < shaderStart || this.shaderIdMap[p.shader.id] == null) {
				this.shaderIdMap[p.shader.id] = this.shaderCount++;
			}
			if(this.textureIdMap[p.texture] < textureStart || this.textureIdMap[p.shader.id] == null) {
				this.textureIdMap[p.texture] = this.textureCount++;
			}
		}
		var list = passes.current;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else {
							var tmp1;
							if(!(qsize == 0 || q == null)) {
								var tmp2;
								if(p.pass.layer != q.pass.layer) {
									tmp2 = p.pass.layer - q.pass.layer;
								} else {
									var d = _gthis.shaderIdMap[p.shader.id] - _gthis.shaderIdMap[q.shader.id];
									tmp2 = d != 0 ? d : _gthis.textureIdMap[p.texture] - _gthis.textureIdMap[q.texture];
								}
								tmp1 = tmp2 <= 0;
							} else {
								tmp1 = true;
							}
							if(tmp1) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		passes.current = tmp;
	}
	,__class__: h3d_pass_SortByMaterial
};
var h3d_prim_MeshPrimitive = function() {
	h3d_prim_Primitive.call(this);
};
$hxClasses["h3d.prim.MeshPrimitive"] = h3d_prim_MeshPrimitive;
h3d_prim_MeshPrimitive.__name__ = "h3d.prim.MeshPrimitive";
h3d_prim_MeshPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_MeshPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	dispose: function() {
		h3d_prim_Primitive.prototype.dispose.call(this);
		if(this.buffers != null) {
			var _g = 0;
			var _g1 = this.buffers;
			while(_g < _g1.length) {
				var b = _g1[_g];
				++_g;
				b.dispose();
			}
			this.buffers = null;
			this.formats = null;
		}
	}
	,render: function(engine) {
		if(this.indexes == null || this.indexes.vbuf == null || this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(engine);
		}
		if(this.buffers != null) {
			engine.renderMultiBuffers(this.formats,this.buffers,this.indexes);
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	,__class__: h3d_prim_MeshPrimitive
});
var h3d_prim_Instanced = function() {
	h3d_prim_Primitive.call(this);
	this.bounds = new h3d_col_Bounds();
	var _this = this.bounds;
	if(0 < _this.xMin) {
		_this.xMin = 0;
	}
	if(0 > _this.xMax) {
		_this.xMax = 0;
	}
	if(0 < _this.yMin) {
		_this.yMin = 0;
	}
	if(0 > _this.yMax) {
		_this.yMax = 0;
	}
	if(0 < _this.zMin) {
		_this.zMin = 0;
	}
	if(0 > _this.zMax) {
		_this.zMax = 0;
	}
	this.tmpBounds = new h3d_col_Bounds();
};
$hxClasses["h3d.prim.Instanced"] = h3d_prim_Instanced;
h3d_prim_Instanced.__name__ = "h3d.prim.Instanced";
h3d_prim_Instanced.__super__ = h3d_prim_Primitive;
h3d_prim_Instanced.prototype = $extend(h3d_prim_Primitive.prototype,{
	dispose: function() {
	}
	,incref: function() {
		if(this.refCount == 0 && this.primitive != null) {
			this.primitive.incref();
		}
		h3d_prim_Primitive.prototype.incref.call(this);
	}
	,decref: function() {
		h3d_prim_Primitive.prototype.decref.call(this);
		if(this.refCount == 0 && this.primitive != null) {
			this.primitive.decref();
		}
	}
	,getBounds: function() {
		return this.bounds;
	}
	,screenRatioToLod: function(screenRatio) {
		return this.primitive.screenRatioToLod(screenRatio);
	}
	,render: function(engine) {
		if(this.primitive.buffer == null || this.primitive.buffer.vbuf == null) {
			this.primitive.alloc(engine);
		}
		if(engine.needFlushTarget) {
			engine.doFlushTarget();
		}
		if(this.primitive.buffers == null) {
			engine.driver.selectBuffer(this.primitive.buffer);
		} else {
			engine.driver.selectMultiBuffers(this.primitive.formats,this.primitive.buffers);
		}
		var indexes = this.primitive.indexes;
		if(indexes == null) {
			indexes = engine.mem.getTriIndexes(this.triCount() * 3);
		}
		engine.renderInstanced(indexes,this.commands);
	}
	,__class__: h3d_prim_Instanced
});
var h3d_prim_Plane2D = function() {
	h3d_prim_Primitive.call(this);
};
$hxClasses["h3d.prim.Plane2D"] = h3d_prim_Plane2D;
h3d_prim_Plane2D.__name__ = "h3d.prim.Plane2D";
h3d_prim_Plane2D.get = function() {
	var engine = h3d_Engine.CURRENT;
	var inst = engine.resCache.h[h3d_prim_Plane2D.__id__];
	if(inst == null) {
		inst = new h3d_prim_Plane2D();
		engine.resCache.set(h3d_prim_Plane2D,inst);
	}
	return inst;
};
h3d_prim_Plane2D.__super__ = h3d_prim_Primitive;
h3d_prim_Plane2D.prototype = $extend(h3d_prim_Primitive.prototype,{
	triCount: function() {
		return 2;
	}
	,alloc: function(engine) {
		var v = hxd__$FloatBuffer_Float32Expand._new(0);
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		this.buffer = h3d_Buffer.ofFloats(v,hxd_BufferFormat.get_XY_UV());
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.vbuf == null) {
			this.alloc(engine);
		}
		var b = this.buffer;
		engine.renderBuffer(b,engine.mem.getQuadIndexes(b.vertices),2,0,-1);
	}
	,__class__: h3d_prim_Plane2D
});
var h3d_prim_RawPrimitive = function(inf,persist) {
	if(persist == null) {
		persist = false;
	}
	h3d_prim_Primitive.call(this);
	this.onContextLost = function() {
		return inf;
	};
	this.bounds = inf.bounds;
	this.alloc(null);
	if(!persist) {
		this.onContextLost = null;
	}
};
$hxClasses["h3d.prim.RawPrimitive"] = h3d_prim_RawPrimitive;
h3d_prim_RawPrimitive.__name__ = "h3d.prim.RawPrimitive";
h3d_prim_RawPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_RawPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		if(this.onContextLost == null) {
			throw haxe_Exception.thrown("Cannot realloc " + Std.string(this));
		}
		var inf = this.onContextLost();
		this.buffer = h3d_Buffer.ofFloats(inf.vbuf,inf.format);
		this.vcount = this.buffer.vertices;
		this.tcount = inf.ibuf != null ? inf.ibuf.length / 3 | 0 : this.vcount / 3 | 0;
		if(inf.ibuf != null) {
			this.indexes = h3d_Indexes.alloc(inf.ibuf);
		} else if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,getBounds: function() {
		if(this.bounds == null) {
			throw haxe_Exception.thrown("Bounds not defined for " + Std.string(this));
		}
		return this.bounds;
	}
	,triCount: function() {
		return this.tcount;
	}
	,__class__: h3d_prim_RawPrimitive
});
var h3d_scene_Mesh = function(primitive,material,parent) {
	this.curScreenRatio = 1.0;
	this.inheritLod = false;
	h3d_scene_Object.call(this,parent);
	this.set_primitive(primitive);
	if(material == null) {
		material = h3d_mat_MaterialSetup.current.createMaterial();
		material.set_props(material.getDefaultProps());
	}
	this.material = material;
};
$hxClasses["h3d.scene.Mesh"] = h3d_scene_Mesh;
h3d_scene_Mesh.__name__ = "h3d.scene.Mesh";
h3d_scene_Mesh.screenRatio = function(absPos,bounds,camera) {
	var _this = absPos;
	var x = 0.;
	var y = 0.;
	var z = 0.;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var worldCenter_x = x;
	var worldCenter_y = y;
	var worldCenter_z = z;
	var x = _this._41;
	var y = _this._42;
	var z = _this._43;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	worldCenter_x = x;
	worldCenter_y = y;
	worldCenter_z = z;
	var _this = absPos;
	var x = 0.;
	var y = 0.;
	var z = 0.;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var worldScale_x = x;
	var worldScale_y = y;
	var worldScale_z = z;
	worldScale_x = Math.sqrt(_this._11 * _this._11 + _this._12 * _this._12 + _this._13 * _this._13);
	worldScale_y = Math.sqrt(_this._21 * _this._21 + _this._22 * _this._22 + _this._23 * _this._23);
	worldScale_z = Math.sqrt(_this._31 * _this._31 + _this._32 * _this._32 + _this._33 * _this._33);
	if(_this._11 * (_this._22 * _this._33 - _this._23 * _this._32) + _this._12 * (_this._23 * _this._31 - _this._21 * _this._33) + _this._13 * (_this._21 * _this._32 - _this._22 * _this._31) < 0) {
		worldScale_x *= -1;
		worldScale_y *= -1;
		worldScale_z *= -1;
	}
	var a = bounds.xMax - bounds.xMin;
	var a1 = bounds.yMax - bounds.yMin;
	var b = bounds.zMax - bounds.zMin;
	var b1 = a1 < b ? b : a1;
	var a1 = worldScale_x;
	var a2 = worldScale_y;
	var b = worldScale_z;
	var b2 = a2 < b ? b : a2;
	var worldRadius = (a < b1 ? b1 : a) * (a1 < b2 ? b2 : a1) / 2.0;
	var x = 0.;
	var y = 0.;
	var z = 0.;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var cameraRight_x = x;
	var cameraRight_y = y;
	var cameraRight_z = z;
	if(camera.directions == null) {
		camera.directions = new h3d_MatrixImpl();
		camera.directions._44 = 0;
	}
	if(camera.directions._44 == 0) {
		camera.calcDirections();
	}
	cameraRight_x = camera.directions._21;
	cameraRight_y = camera.directions._22;
	cameraRight_z = camera.directions._23;
	var x = 0.;
	var y = 0.;
	var z = 0.;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var cameraUp_x = x;
	var cameraUp_y = y;
	var cameraUp_z = z;
	if(camera.directions == null) {
		camera.directions = new h3d_MatrixImpl();
		camera.directions._44 = 0;
	}
	if(camera.directions._44 == 0) {
		camera.calcDirections();
	}
	cameraUp_x = camera.directions._31;
	cameraUp_y = camera.directions._32;
	cameraUp_z = camera.directions._33;
	var x = cameraUp_x - cameraRight_x;
	var y = cameraUp_y - cameraRight_y;
	var z = cameraUp_z - cameraRight_z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var _this_x = x1;
	var _this_y = y1;
	var _this_z = z1;
	var k = _this_x * _this_x + _this_y * _this_y + _this_z * _this_z;
	if(k < 1e-20) {
		k = 0;
	} else {
		k = 1. / Math.sqrt(k);
	}
	var x = _this_x * k;
	var y = _this_y * k;
	var z = _this_z * k;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var cameraTopLeft_x = x1;
	var cameraTopLeft_y = y1;
	var cameraTopLeft_z = z1;
	var x = cameraTopLeft_x * worldRadius;
	var y = cameraTopLeft_y * worldRadius;
	var z = cameraTopLeft_z * worldRadius;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var v_x = x1;
	var v_y = y1;
	var v_z = z1;
	var x = worldCenter_x + v_x;
	var y = worldCenter_y + v_y;
	var z = worldCenter_z + v_z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var worldTopLeft_x = x1;
	var worldTopLeft_y = y1;
	var worldTopLeft_z = z1;
	var x = cameraTopLeft_x * worldRadius;
	var y = cameraTopLeft_y * worldRadius;
	var z = cameraTopLeft_z * worldRadius;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var v_x = x1;
	var v_y = y1;
	var v_z = z1;
	var x = worldCenter_x - v_x;
	var y = worldCenter_y - v_y;
	var z = worldCenter_z - v_z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var x1 = x;
	var y1 = y;
	var z1 = z;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	var worldBottomRight_x = x1;
	var worldBottomRight_y = y1;
	var worldBottomRight_z = z1;
	var snapToPixel = false;
	if(snapToPixel == null) {
		snapToPixel = true;
	}
	var x = 0.;
	var y = 0.;
	var z = 0.;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var screenTopLeft_x = x;
	var screenTopLeft_y = y;
	var screenTopLeft_z = z;
	var x = worldTopLeft_x;
	var y = worldTopLeft_y;
	var z = worldTopLeft_z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	screenTopLeft_x = x;
	screenTopLeft_y = y;
	screenTopLeft_z = z;
	var m = camera.m;
	var px = screenTopLeft_x * m._11 + screenTopLeft_y * m._21 + screenTopLeft_z * m._31 + m._41;
	var py = screenTopLeft_x * m._12 + screenTopLeft_y * m._22 + screenTopLeft_z * m._32 + m._42;
	var pz = screenTopLeft_x * m._13 + screenTopLeft_y * m._23 + screenTopLeft_z * m._33 + m._43;
	var iw = 1 / (screenTopLeft_x * m._14 + screenTopLeft_y * m._24 + screenTopLeft_z * m._34 + m._44);
	screenTopLeft_x = px * iw;
	screenTopLeft_y = py * iw;
	screenTopLeft_z = pz * iw;
	screenTopLeft_x = (screenTopLeft_x + 1) * 0.5;
	screenTopLeft_y = (-screenTopLeft_y + 1) * 0.5;
	if(snapToPixel) {
		screenTopLeft_x = Math.round(screenTopLeft_x);
		screenTopLeft_y = Math.round(screenTopLeft_y);
	}
	var snapToPixel = false;
	if(snapToPixel == null) {
		snapToPixel = true;
	}
	var x = 0.;
	var y = 0.;
	var z = 0.;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var screenBottomRight_x = x;
	var screenBottomRight_y = y;
	var screenBottomRight_z = z;
	var x = worldBottomRight_x;
	var y = worldBottomRight_y;
	var z = worldBottomRight_z;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	screenBottomRight_x = x;
	screenBottomRight_y = y;
	screenBottomRight_z = z;
	var m = camera.m;
	var px = screenBottomRight_x * m._11 + screenBottomRight_y * m._21 + screenBottomRight_z * m._31 + m._41;
	var py = screenBottomRight_x * m._12 + screenBottomRight_y * m._22 + screenBottomRight_z * m._32 + m._42;
	var pz = screenBottomRight_x * m._13 + screenBottomRight_y * m._23 + screenBottomRight_z * m._33 + m._43;
	var iw = 1 / (screenBottomRight_x * m._14 + screenBottomRight_y * m._24 + screenBottomRight_z * m._34 + m._44);
	screenBottomRight_x = px * iw;
	screenBottomRight_y = py * iw;
	screenBottomRight_z = pz * iw;
	screenBottomRight_x = (screenBottomRight_x + 1) * 0.5;
	screenBottomRight_y = (-screenBottomRight_y + 1) * 0.5;
	if(snapToPixel) {
		screenBottomRight_x = Math.round(screenBottomRight_x);
		screenBottomRight_y = Math.round(screenBottomRight_y);
	}
	var a = screenBottomRight_x - screenTopLeft_x;
	var b = screenBottomRight_y - screenTopLeft_y;
	var screenArea = a < b ? b : a;
	return screenArea * screenArea;
};
h3d_scene_Mesh.__super__ = h3d_scene_Object;
h3d_scene_Mesh.prototype = $extend(h3d_scene_Object.prototype,{
	draw: function(ctx) {
		this.primitive.selectMaterial(0,this.primitive.screenRatioToLod(this.curScreenRatio));
		this.primitive.render(ctx.engine);
	}
	,calcScreenRatio: function(ctx) {
		if(this.primitive == null || this.primitive.lodCount() == 1) {
			return;
		}
		if(ctx.forcedScreenRatio >= 0.0) {
			this.curScreenRatio = ctx.forcedScreenRatio;
			return;
		}
		var bounds = this.primitive.getBounds();
		if(bounds == null) {
			this.curScreenRatio = 1.0;
			return;
		}
		this.curScreenRatio = h3d_scene_Mesh.screenRatio(this.getAbsPos(),bounds,ctx.camera);
		if(this.inheritLod) {
			ctx.forcedScreenRatio = this.curScreenRatio;
		}
	}
	,emit: function(ctx) {
		this.calcScreenRatio(ctx);
		if(this.primitive.screenRatioToLod(this.curScreenRatio) >= this.primitive.lodCount()) {
			return;
		}
		var p = this.material.passes;
		while(p != null) {
			if(!p.culled) {
				ctx.emitPass(p,this).index = 0;
			}
			p = p.nextPass;
		}
	}
	,onAdd: function() {
		h3d_scene_Object.prototype.onAdd.call(this);
		if(this.primitive != null) {
			this.primitive.incref();
		}
	}
	,onRemove: function() {
		if(this.primitive != null) {
			this.primitive.decref();
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,set_primitive: function(prim) {
		if(prim != this.primitive && (this.flags & 32) != 0) {
			if(this.primitive != null) {
				this.primitive.decref();
			}
			if(prim != null) {
				prim.incref();
			}
		}
		return this.primitive = prim;
	}
	,__class__: h3d_scene_Mesh
});
var h3d_scene_Interactive = function(shape,parent) {
	this.hitPoint = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.lastClickFrame = -1;
	this.mouseDownButton = -1;
	this.emittedLastFrame = false;
	this.isAbsoluteShape = false;
	this.allowMultiClick = false;
	this.enableRightButton = false;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h3d_scene_Object.call(this,parent);
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h3d.scene.Interactive"] = h3d_scene_Interactive;
h3d_scene_Interactive.__name__ = "h3d.scene.Interactive";
h3d_scene_Interactive.__interfaces__ = [hxd_Interactive];
h3d_scene_Interactive.__super__ = h3d_scene_Object;
h3d_scene_Interactive.prototype = $extend(h3d_scene_Object.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		h3d_scene_Object.prototype.onAdd.call(this);
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = null;
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,sync: function(ctx) {
		h3d_scene_Object.prototype.sync.call(this,ctx);
		this.emittedLastFrame = false;
	}
	,emit: function(ctx) {
		h3d_scene_Object.prototype.emit.call(this,ctx);
		this.emittedLastFrame = true;
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
				if(e.cancel) {
					this.mouseDownButton = -1;
				}
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				var frame = hxd_Timer.frameCount;
				if(this.mouseDownButton == e.button && (this.lastClickFrame != frame || this.allowMultiClick)) {
					this.onClick(e);
					this.lastClickFrame = frame;
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h3d_scene_Interactive
});
var h3d_scene_Light = function(shader,parent) {
	h3d_scene_Object.call(this,parent);
	this.shader = shader;
};
$hxClasses["h3d.scene.Light"] = h3d_scene_Light;
h3d_scene_Light.__name__ = "h3d.scene.Light";
h3d_scene_Light.__super__ = h3d_scene_Object;
h3d_scene_Light.prototype = $extend(h3d_scene_Object.prototype,{
	emit: function(ctx) {
		ctx.emitLight(this);
	}
	,getShadowDirection: function() {
		return null;
	}
	,__class__: h3d_scene_Light
});
var h3d_scene_LightSystem = function() {
};
$hxClasses["h3d.scene.LightSystem"] = h3d_scene_LightSystem;
h3d_scene_LightSystem.__name__ = "h3d.scene.LightSystem";
h3d_scene_LightSystem.prototype = {
	initGlobals: function(globals) {
	}
	,initLights: function(ctx) {
		this.ctx = ctx;
		if(this.shadowLight == null || (this.shadowLight.flags & 32) == 0) {
			var l = ctx.lights;
			while(l != null) {
				var dir = l.getShadowDirection();
				if(dir != null) {
					this.shadowLight = l;
					break;
				}
				l = l.next;
			}
		}
	}
	,computeLight: function(obj,shaders) {
		return shaders;
	}
	,__class__: h3d_scene_LightSystem
};
var h3d_scene_RenderContext = function(scene) {
	this.cameraFrustumUploaded = false;
	this.forcedScreenRatio = -1;
	h3d_impl_RenderContext.call(this);
	this.scene = scene;
	this.cachedShaderList = [];
	this.cachedPassObjects = [];
	this.initGlobals();
};
$hxClasses["h3d.scene.RenderContext"] = h3d_scene_RenderContext;
h3d_scene_RenderContext.__name__ = "h3d.scene.RenderContext";
h3d_scene_RenderContext.__super__ = h3d_impl_RenderContext;
h3d_scene_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	setCamera: function(cam) {
		this.camera = cam;
		var v = cam.mcam;
		this.globals.map.h[this.cameraView_id] = v;
		var v = cam.zNear;
		this.globals.map.h[this.cameraNear_id] = v;
		var v = cam.zFar;
		this.globals.map.h[this.cameraFar_id] = v;
		var v = cam.mproj;
		this.globals.map.h[this.cameraProj_id] = v;
		var v = cam.pos;
		this.globals.map.h[this.cameraPos_id] = v;
		var x = cam.mproj._11;
		var y = cam.mproj._22;
		var z = cam.mproj._33;
		var w = cam.mproj._44;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v = new h3d_Vector4Impl(x,y,z,w);
		this.globals.map.h[this.cameraProjDiag_id] = v;
		if(this.globals.map.h[this.cameraPreviousViewProj_id] == null) {
			var v = cam.m.clone();
			this.globals.map.h[this.cameraPreviousViewProj_id] = v;
		}
		if(this.globals.map.h[this.cameraJitterOffsets_id] == null) {
			var x = 0.0;
			var y = 0.0;
			var z = 0.0;
			var w = 0.0;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var v = new h3d_Vector4Impl(x,y,z,w);
			this.globals.map.h[this.cameraJitterOffsets_id] = v;
		}
		var v = cam.m;
		this.globals.map.h[this.cameraViewProj_id] = v;
		var v = this.camera.getInverseViewProj();
		this.globals.map.h[this.cameraInverseViewProj_id] = v;
	}
	,setupTarget: function() {
		var v = this.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.engine.getCurrentTarget() != null ? -1 : 1;
		this.globals.map.h[this.cameraProjFlip_id] = v;
	}
	,getCurrentPixelSize: function() {
		var t = this.engine.getCurrentTarget();
		var x = 2 / (t == null ? this.engine.width : t.width);
		var y = 2 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		return new h3d_VectorImpl(x,y,0.);
	}
	,start: function() {
		this.lights = null;
		this.drawPass = null;
		this.passes = [];
		this.lights = null;
		this.cachedPos = 0;
		this.visibleFlag = true;
		this.forcedScreenRatio = -1;
		this.time += this.elapsedTime;
		this.frame++;
		this.setCurrent();
		this.engine = h3d_Engine.CURRENT;
		var v = this.time;
		this.globals.map.h[this.globalTime_id] = v;
		var v = this.getCurrentPixelSize();
		this.globals.map.h[this.pixelSize_id] = v;
		this.setCamera(this.scene.camera);
	}
	,emitPass: function(pass,obj) {
		if((pass.rendererFlags & 1) == 0) {
			this.scene.renderer.setPassFlags(pass);
		}
		var o = this.allocPool;
		if(o == null) {
			o = new h3d_pass_PassObject();
			o.nextAlloc = this.allocFirst;
			this.allocFirst = o;
		} else {
			this.allocPool = o.nextAlloc;
		}
		o.pass = pass;
		o.obj = obj;
		if(this.passes.length <= pass.passId) {
			this.passes.length = pass.passId;
		}
		o.next = this.passes[pass.passId];
		this.passes[pass.passId] = o;
		return o;
	}
	,allocShaderList: function(s,next) {
		var sl = this.cachedShaderList[this.cachedPos++];
		if(sl == null) {
			sl = new hxsl_ShaderList(null);
			this.cachedShaderList[this.cachedPos - 1] = sl;
		}
		sl.s = s;
		sl.next = next;
		return sl;
	}
	,emitLight: function(l) {
		l.next = this.lights;
		this.lights = l;
	}
	,done: function() {
		this.drawPass = null;
		var p = this.allocFirst;
		while(p != null && p != this.allocPool) {
			p.obj = null;
			p.pass = null;
			p.shader = null;
			p.shaders = null;
			p.next = null;
			p.index = 0;
			p.texture = 0;
			p = p.nextAlloc;
		}
		if(this.allocPool != null) {
			this.allocFirst = this.allocFirst.nextAlloc;
		}
		this.allocPool = this.allocFirst;
		var _g = 0;
		var _g1 = this.cachedShaderList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.s = null;
			c.next = null;
		}
		this.passes = [];
		this.lights = null;
		this.cameraFrustumUploaded = false;
		this.globals.map.h[this.cameraPreviousViewProj_id].load(this.globals.map.h[this.cameraViewProj_id]);
		this.computeVelocity = false;
		this.clearCurrent();
	}
	,initGlobals: function() {
		this.cameraView_id = hxsl_Globals.allocID("camera.view");
		this.cameraNear_id = hxsl_Globals.allocID("camera.zNear");
		this.cameraFar_id = hxsl_Globals.allocID("camera.zFar");
		this.cameraProj_id = hxsl_Globals.allocID("camera.proj");
		this.cameraPos_id = hxsl_Globals.allocID("camera.position");
		this.cameraProjDiag_id = hxsl_Globals.allocID("camera.projDiag");
		this.cameraProjFlip_id = hxsl_Globals.allocID("camera.projFlip");
		this.cameraViewProj_id = hxsl_Globals.allocID("camera.viewProj");
		this.cameraInverseViewProj_id = hxsl_Globals.allocID("camera.inverseViewProj");
		this.cameraPreviousViewProj_id = hxsl_Globals.allocID("camera.previousViewProj");
		this.cameraJitterOffsets_id = hxsl_Globals.allocID("camera.jitterOffsets");
		this.globalTime_id = hxsl_Globals.allocID("global.time");
		this.pixelSize_id = hxsl_Globals.allocID("global.pixelSize");
		this.globalModelView_id = hxsl_Globals.allocID("global.modelView");
		this.globalModelViewInverse_id = hxsl_Globals.allocID("global.modelViewInverse");
		this.globalPreviousModelView_id = hxsl_Globals.allocID("global.previousModelView");
	}
	,__class__: h3d_scene_RenderContext
});
var h3d_scene_PassObjects = function() {
	this.passes = new h3d_pass_PassList();
};
$hxClasses["h3d.scene.PassObjects"] = h3d_scene_PassObjects;
h3d_scene_PassObjects.__name__ = "h3d.scene.PassObjects";
h3d_scene_PassObjects.prototype = {
	__class__: h3d_scene_PassObjects
};
var h3d_scene_Renderer = function() {
	this.effects = [];
	this.hasSetTarget = false;
	this.emptyPasses = new h3d_pass_PassList();
	this.allPasses = [];
	this.passObjects = new haxe_ds_StringMap();
	this.set_props(this.getDefaultProps());
	var _g = this;
	var frontToBack = true;
	this.frontToBack = function(passes) {
		_g.depthSort(frontToBack,passes);
	};
	var _g1 = this;
	var frontToBack1 = false;
	this.backToFront = function(passes) {
		_g1.depthSort(frontToBack1,passes);
	};
};
$hxClasses["h3d.scene.Renderer"] = h3d_scene_Renderer;
h3d_scene_Renderer.__name__ = "h3d.scene.Renderer";
h3d_scene_Renderer.__super__ = hxd_impl_AnyProps;
h3d_scene_Renderer.prototype = $extend(hxd_impl_AnyProps.prototype,{
	mark: function(id) {
	}
	,depthSort: function(frontToBack,passes) {
		var cam = this.ctx.camera.m;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var z = p.obj.absPos._41 * cam._13 + p.obj.absPos._42 * cam._23 + p.obj.absPos._43 * cam._33 + cam._43;
			var w = p.obj.absPos._41 * cam._14 + p.obj.absPos._42 * cam._24 + p.obj.absPos._43 * cam._34 + cam._44;
			p.depth = w > 0.0 ? z / w : -z / w;
		}
		if(frontToBack) {
			var list = passes.current;
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.pass.layer != q.pass.layer ? p.pass.layer - q.pass.layer : p.depth == q.depth ? 0 : p.depth > q.depth ? 1 : -1) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			passes.current = tmp;
		} else {
			var list = passes.current;
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.pass.layer != q.pass.layer ? p.pass.layer - q.pass.layer : p.depth == q.depth ? 0 : p.depth < q.depth ? 1 : -1) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			passes.current = tmp;
		}
	}
	,resetTarget: function() {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
			this.hasSetTarget = false;
		}
	}
	,has: function(name) {
		return this.passObjects.h[name] != null;
	}
	,setPassFlags: function(pass) {
		pass.rendererFlags |= 1;
	}
	,get: function(name) {
		var p = this.passObjects.h[name];
		if(p == null) {
			return this.emptyPasses;
		}
		p.rendered = true;
		return p.passes;
	}
	,render: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,computeStatic: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,start: function() {
	}
	,startEffects: function() {
		var _g = 0;
		var _g1 = this.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.enabled) {
				e.start(this);
			}
		}
	}
	,process: function(passes) {
		this.hasSetTarget = false;
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.setContext(this.ctx);
		}
		var _g = 0;
		while(_g < passes.length) {
			var p = passes[_g];
			++_g;
			this.passObjects.h[p.name] = p;
		}
		this.ctx.textures.begin();
		if(this.ctx.computingStatic) {
			this.computeStatic();
		} else {
			this.render();
		}
		this.resetTarget();
		var _g = 0;
		while(_g < passes.length) {
			var p = passes[_g];
			++_g;
			this.passObjects.h[p.name] = null;
		}
	}
	,__class__: h3d_scene_Renderer
});
var h3d_scene_Scene = function(createRenderer,createLightSystem) {
	if(createLightSystem == null) {
		createLightSystem = true;
	}
	if(createRenderer == null) {
		createRenderer = true;
	}
	this.interactiveOffset = 0;
	this.ratioY = 1;
	this.ratioX = 1;
	this.offsetY = 0;
	this.offsetX = 0;
	h3d_scene_Object.call(this,null);
	this.window = hxd_Window.getInstance();
	this.eventListeners = [];
	this.hitInteractives = [];
	this.interactives = [];
	this.camera = new h3d_Camera();
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.camera.screenRatio = engine.width / engine.height;
	}
	this.ctx = new h3d_scene_RenderContext(this);
	if(createRenderer) {
		this.set_renderer(h3d_mat_MaterialSetup.current.createRenderer());
	}
	if(createLightSystem) {
		this.lightSystem = h3d_mat_MaterialSetup.current.createLightSystem();
	}
};
$hxClasses["h3d.scene.Scene"] = h3d_scene_Scene;
h3d_scene_Scene.__name__ = "h3d.scene.Scene";
h3d_scene_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h3d_scene_Scene.__super__ = h3d_scene_Object;
h3d_scene_Scene.prototype = $extend(h3d_scene_Object.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,dispatchListeners: function(event) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,set_renderer: function(r) {
		this.renderer = r;
		if(r != null) {
			r.ctx = this.ctx;
		}
		return r;
	}
	,sortHitPointByCameraDistance: function(i1,i2) {
		var z1 = i1.hitPoint.w;
		var z2 = i2.hitPoint.w;
		if(z1 > z2) {
			return -1;
		}
		return 1;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		i.handleEvent(event);
	}
	,isInteractiveVisible: function(i) {
		var o = i;
		while(o != this) {
			if(o == null || (o.flags & 2) == 0) {
				return false;
			}
			o = o.parent;
		}
		return true;
	}
	,handleEvent: function(event,last) {
		if(this.interactives.length == 0) {
			return null;
		}
		if(this.hitInteractives.length == 0) {
			var x = event.relX - this.offsetX;
			var y = event.relY - this.offsetY;
			var width = this.ratioX * this.window.get_width();
			var height = this.ratioY * this.window.get_height();
			var screenX = (x / width - 0.5) * 2;
			var screenY = -(y / height - 0.5) * 2;
			var p0 = this.camera.unproject(screenX,screenY,0);
			var p1 = this.camera.unproject(screenX,screenY,1);
			var x = p0.x;
			var y = p0.y;
			var z = p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p1_x = x1;
			var p1_y = y1;
			var p1_z = z1;
			var x = p1.x;
			var y = p1.y;
			var z = p1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p2_x = x1;
			var p2_y = y1;
			var p2_z = z1;
			var r = new h3d_col_Ray();
			r.px = p1_x;
			r.py = p1_y;
			r.pz = p1_z;
			r.lx = p2_x - p1_x;
			r.ly = p2_y - p1_y;
			r.lz = p2_z - p1_z;
			r.normalize();
			var r1 = r;
			if(this.interactiveOffset != 0) {
				r1.px += r1.lx * this.interactiveOffset;
				r1.py += r1.ly * this.interactiveOffset;
				r1.pz += r1.lz * this.interactiveOffset;
			}
			var saveR_px = r1.px;
			var saveR_py = r1.py;
			var saveR_pz = r1.pz;
			var saveR_lx = r1.lx;
			var saveR_ly = r1.ly;
			var saveR_lz = r1.lz;
			var priority = -2147483648;
			var _g = 0;
			var _g1 = this.interactives;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i.priority < priority) {
					continue;
				}
				var p = i;
				while(p != null && (p.flags & 2) != 0) p = p.parent;
				if(p != null) {
					continue;
				}
				if(!i.isAbsoluteShape) {
					var minv = i.getInvPos();
					var x = r1.px;
					var y = r1.py;
					var z = r1.pz;
					if(z == null) {
						z = 0.;
					}
					if(y == null) {
						y = 0.;
					}
					if(x == null) {
						x = 0.;
					}
					var x1 = x;
					var y1 = y;
					var z1 = z;
					if(z1 == null) {
						z1 = 0.;
					}
					if(y1 == null) {
						y1 = 0.;
					}
					if(x1 == null) {
						x1 = 0.;
					}
					var p_x = x1;
					var p_y = y1;
					var p_z = z1;
					var px = p_x * minv._11 + p_y * minv._21 + p_z * minv._31 + minv._41;
					var py = p_x * minv._12 + p_y * minv._22 + p_z * minv._32 + minv._42;
					var pz = p_x * minv._13 + p_y * minv._23 + p_z * minv._33 + minv._43;
					p_x = px;
					p_y = py;
					p_z = pz;
					r1.px = p_x;
					r1.py = p_y;
					r1.pz = p_z;
					var x2 = r1.lx;
					var y2 = r1.ly;
					var z2 = r1.lz;
					if(z2 == null) {
						z2 = 0.;
					}
					if(y2 == null) {
						y2 = 0.;
					}
					if(x2 == null) {
						x2 = 0.;
					}
					var x3 = x2;
					var y3 = y2;
					var z3 = z2;
					if(z3 == null) {
						z3 = 0.;
					}
					if(y3 == null) {
						y3 = 0.;
					}
					if(x3 == null) {
						x3 = 0.;
					}
					var _this_x = x3;
					var _this_y = y3;
					var _this_z = z3;
					var px1 = _this_x * minv._11 + _this_y * minv._21 + _this_z * minv._31;
					var py1 = _this_x * minv._12 + _this_y * minv._22 + _this_z * minv._32;
					var pz1 = _this_x * minv._13 + _this_y * minv._23 + _this_z * minv._33;
					_this_x = px1;
					_this_y = py1;
					_this_z = pz1;
					r1.lx = _this_x;
					r1.ly = _this_y;
					r1.lz = _this_z;
					r1.normalize();
				}
				if(r1.lx != r1.lx) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var hit = i.shape.rayIntersection(r1,i.bestMatch);
				if(hit < 0) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var x4 = r1.px + hit * r1.lx;
				var y4 = r1.py + hit * r1.ly;
				var z4 = r1.pz + hit * r1.lz;
				if(z4 == null) {
					z4 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				var x5 = x4;
				var y5 = y4;
				var z5 = z4;
				if(z5 == null) {
					z5 = 0.;
				}
				if(y5 == null) {
					y5 = 0.;
				}
				if(x5 == null) {
					x5 = 0.;
				}
				var hitPoint_x = x5;
				var hitPoint_y = y5;
				var hitPoint_z = z5;
				r1.px = saveR_px;
				r1.py = saveR_py;
				r1.pz = saveR_pz;
				r1.lx = saveR_lx;
				r1.ly = saveR_ly;
				r1.lz = saveR_lz;
				i.hitPoint.x = hitPoint_x;
				i.hitPoint.y = hitPoint_y;
				i.hitPoint.z = hitPoint_z;
				if(i.priority > priority) {
					while(this.hitInteractives.length > 0) this.hitInteractives.pop();
					priority = i.priority;
				}
				this.hitInteractives.push(i);
			}
			if(this.hitInteractives.length == 0) {
				return null;
			}
			if(this.hitInteractives.length > 1) {
				var _g = 0;
				var _g1 = this.hitInteractives;
				while(_g < _g1.length) {
					var i = _g1[_g];
					++_g;
					var m = i.invPos;
					var wfactor = 0.;
					if(i.preciseShape != null || !i.bestMatch) {
						if(!i.isAbsoluteShape) {
							var x = r1.px;
							var y = r1.py;
							var z = r1.pz;
							if(z == null) {
								z = 0.;
							}
							if(y == null) {
								y = 0.;
							}
							if(x == null) {
								x = 0.;
							}
							var x1 = x;
							var y1 = y;
							var z1 = z;
							if(z1 == null) {
								z1 = 0.;
							}
							if(y1 == null) {
								y1 = 0.;
							}
							if(x1 == null) {
								x1 = 0.;
							}
							var p_x = x1;
							var p_y = y1;
							var p_z = z1;
							var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + m._41;
							var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + m._42;
							var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + m._43;
							p_x = px;
							p_y = py;
							p_z = pz;
							r1.px = p_x;
							r1.py = p_y;
							r1.pz = p_z;
							var x2 = r1.lx;
							var y2 = r1.ly;
							var z2 = r1.lz;
							if(z2 == null) {
								z2 = 0.;
							}
							if(y2 == null) {
								y2 = 0.;
							}
							if(x2 == null) {
								x2 = 0.;
							}
							var x3 = x2;
							var y3 = y2;
							var z3 = z2;
							if(z3 == null) {
								z3 = 0.;
							}
							if(y3 == null) {
								y3 = 0.;
							}
							if(x3 == null) {
								x3 = 0.;
							}
							var _this_x = x3;
							var _this_y = y3;
							var _this_z = z3;
							var px1 = _this_x * m._11 + _this_y * m._21 + _this_z * m._31;
							var py1 = _this_x * m._12 + _this_y * m._22 + _this_z * m._32;
							var pz1 = _this_x * m._13 + _this_y * m._23 + _this_z * m._33;
							_this_x = px1;
							_this_y = py1;
							_this_z = pz1;
							r1.lx = _this_x;
							r1.ly = _this_y;
							r1.lz = _this_z;
							r1.normalize();
						}
						var tmp = i.preciseShape;
						var hit = (tmp != null ? tmp : i.shape).rayIntersection(r1,true);
						if(hit > 0) {
							var x4 = r1.px + hit * r1.lx;
							var y4 = r1.py + hit * r1.ly;
							var z4 = r1.pz + hit * r1.lz;
							if(z4 == null) {
								z4 = 0.;
							}
							if(y4 == null) {
								y4 = 0.;
							}
							if(x4 == null) {
								x4 = 0.;
							}
							var x5 = x4;
							var y5 = y4;
							var z5 = z4;
							if(z5 == null) {
								z5 = 0.;
							}
							if(y5 == null) {
								y5 = 0.;
							}
							if(x5 == null) {
								x5 = 0.;
							}
							var hitPoint_x = x5;
							var hitPoint_y = y5;
							var hitPoint_z = z5;
							i.hitPoint.x = hitPoint_x;
							i.hitPoint.y = hitPoint_y;
							i.hitPoint.z = hitPoint_z;
						} else {
							wfactor = 1.;
						}
						r1.px = saveR_px;
						r1.py = saveR_py;
						r1.pz = saveR_pz;
						r1.lx = saveR_lx;
						r1.ly = saveR_ly;
						r1.lz = saveR_lz;
					}
					var _this = i.hitPoint;
					var x6 = _this.x;
					var y6 = _this.y;
					var z6 = _this.z;
					var w = _this.w;
					if(w == null) {
						w = 1.;
					}
					if(z6 == null) {
						z6 = 0.;
					}
					if(y6 == null) {
						y6 = 0.;
					}
					if(x6 == null) {
						x6 = 0.;
					}
					var x7 = x6;
					var y7 = y6;
					var z7 = z6;
					var w1 = w;
					if(w1 == null) {
						w1 = 1.;
					}
					if(z7 == null) {
						z7 = 0.;
					}
					if(y7 == null) {
						y7 = 0.;
					}
					if(x7 == null) {
						x7 = 0.;
					}
					var _this_x1 = x7;
					var _this_y1 = y7;
					var _this_z1 = z7;
					var _this_w = w1;
					_this_w = 1;
					if(!i.isAbsoluteShape) {
						var m1 = i.absPos;
						var px2 = _this_x1 * m1._11 + _this_y1 * m1._21 + _this_z1 * m1._31 + _this_w * m1._41;
						var py2 = _this_x1 * m1._12 + _this_y1 * m1._22 + _this_z1 * m1._32 + _this_w * m1._42;
						var pz2 = _this_x1 * m1._13 + _this_y1 * m1._23 + _this_z1 * m1._33 + _this_w * m1._43;
						_this_x1 = px2;
						_this_y1 = py2;
						_this_z1 = pz2;
					}
					var m2 = this.camera.m;
					var px3 = _this_x1 * m2._11 + _this_y1 * m2._21 + _this_z1 * m2._31 + _this_w * m2._41;
					var py3 = _this_x1 * m2._12 + _this_y1 * m2._22 + _this_z1 * m2._32 + _this_w * m2._42;
					var pz3 = _this_x1 * m2._13 + _this_y1 * m2._23 + _this_z1 * m2._33 + _this_w * m2._43;
					var iw = 1 / (_this_x1 * m2._14 + _this_y1 * m2._24 + _this_z1 * m2._34 + _this_w * m2._44);
					_this_x1 = px3 * iw;
					_this_y1 = py3 * iw;
					_this_z1 = pz3 * iw;
					_this_w = 1;
					i.hitPoint.w = _this_z1 + wfactor;
				}
				this.hitInteractives.sort($bind(this,this.sortHitPointByCameraDistance));
			}
			this.hitInteractives.unshift(null);
		}
		while(this.hitInteractives.length > 0) {
			var i = this.hitInteractives.pop();
			if(i == null) {
				return null;
			}
			event.relX = i.hitPoint.x;
			event.relY = i.hitPoint.y;
			event.relZ = i.hitPoint.z;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			if(!event.propagate) {
				while(this.hitInteractives.length > 0) this.hitInteractives.pop();
			}
			return i;
		}
		return null;
	}
	,addEventTarget: function(i) {
		if(this.interactives.indexOf(i) >= 0) {
			throw haxe_Exception.thrown("assert");
		}
		this.interactives.push(i);
	}
	,removeEventTarget: function(i) {
		if(HxOverrides.remove(this.interactives,i)) {
			if(this.events != null) {
				this.events.onRemove(i);
			}
			HxOverrides.remove(this.hitInteractives,i);
		}
	}
	,setElapsedTime: function(elapsedTime) {
		this.ctx.elapsedTime = elapsedTime;
	}
	,onContextLost: function() {
		this.ctx.wasContextLost = true;
	}
	,render: function(engine) {
		if((this.flags & 32) == 0) {
			this.onAdd();
		}
		var t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,1);
		}
		this.ctx.start();
		this.renderer.start();
		this.renderer.startEffects();
		this.mark("sync");
		this.syncRec(this.ctx);
		this.mark("emit");
		this.emitRec(this.ctx);
		var passes = [];
		var passIndex = -1;
		var _g = 0;
		var _g1 = this.ctx.passes.length;
		while(_g < _g1) {
			var passId = _g++;
			var curPass = this.ctx.passes[passId];
			if(curPass == null) {
				continue;
			}
			var pobjs = this.ctx.cachedPassObjects[++passIndex];
			if(pobjs == null) {
				pobjs = new h3d_scene_PassObjects();
				this.ctx.cachedPassObjects[passIndex] = pobjs;
			}
			pobjs.name = curPass.pass.name;
			var _this = pobjs.passes;
			_this.current = curPass;
			_this.discarded = _this.lastDisc = null;
			passes.push(pobjs);
		}
		if(this.lightSystem != null) {
			this.ctx.lightSystem = this.lightSystem;
			this.lightSystem.initLights(this.ctx);
		}
		this.renderer.process(passes);
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,0);
		}
		this.ctx.done();
		this.ctx.wasContextLost = false;
		var _g = 0;
		var _g1 = passIndex;
		while(_g < _g1) {
			var i = _g++;
			var p = this.ctx.cachedPassObjects[i];
			p.name = null;
			var _this = p.passes;
			_this.current = null;
			_this.discarded = _this.lastDisc = null;
		}
	}
	,mark: function(name) {
		this.renderer.mark(name);
	}
	,__class__: h3d_scene_Scene
});
var h3d_scene_fwd_Light = function(shader,parent) {
	this.priority = 0;
	this.cullingDistance = -1;
	h3d_scene_Light.call(this,shader,parent);
};
$hxClasses["h3d.scene.fwd.Light"] = h3d_scene_fwd_Light;
h3d_scene_fwd_Light.__name__ = "h3d.scene.fwd.Light";
h3d_scene_fwd_Light.__super__ = h3d_scene_Light;
h3d_scene_fwd_Light.prototype = $extend(h3d_scene_Light.prototype,{
	__class__: h3d_scene_fwd_Light
});
var h3d_scene_fwd_LightSystem = function() {
	this.perPixelLighting = true;
	this.maxLightsPerObject = 6;
	h3d_scene_LightSystem.call(this);
	var x = 0.5;
	var y = 0.5;
	var z = 0.5;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.ambientLight = new h3d_VectorImpl(x,y,z);
	this.ambientShader = new h3d_shader_AmbientLight();
	this.set_additiveLighting(true);
};
$hxClasses["h3d.scene.fwd.LightSystem"] = h3d_scene_fwd_LightSystem;
h3d_scene_fwd_LightSystem.__name__ = "h3d.scene.fwd.LightSystem";
h3d_scene_fwd_LightSystem.__super__ = h3d_scene_LightSystem;
h3d_scene_fwd_LightSystem.prototype = $extend(h3d_scene_LightSystem.prototype,{
	set_additiveLighting: function(b) {
		var value = this.ambientShader;
		var _this = ((value) instanceof h3d_shader_AmbientLight) ? value : null;
		_this.constModified = true;
		return _this.additive__ = b;
	}
	,initLights: function(ctx) {
		this.lightCount = 0;
		this.ctx = ctx;
		this.cullLights();
		h3d_scene_LightSystem.prototype.initLights.call(this,ctx);
		if(this.lightCount <= this.maxLightsPerObject) {
			var list = ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			ctx.lights = tmp;
		}
	}
	,initGlobals: function(globals) {
		globals.set("global.ambientLight",this.ambientLight);
		globals.set("global.perPixelLighting",this.perPixelLighting);
	}
	,cullLights: function() {
		var ll = this.ctx.lights;
		var prev = null;
		var s = new h3d_col_Sphere();
		while(ll != null) {
			var l = ((ll) instanceof h3d_scene_fwd_Light) ? ll : null;
			if(l != null) {
				s.x = l.absPos._41;
				s.y = l.absPos._42;
				s.z = l.absPos._43;
				s.r = l.cullingDistance;
			}
			if(l == null || l.cullingDistance > 0 && !this.ctx.computingStatic && !this.ctx.camera.frustum.hasSphere(s)) {
				if(prev == null) {
					this.ctx.lights = ll.next;
				} else {
					prev.next = ll.next;
				}
				ll = ll.next;
				continue;
			}
			this.lightCount++;
			l.objectDistance = 0.;
			prev = ll;
			ll = ll.next;
		}
	}
	,sortLight: function(l1,l2) {
		var p = l1.priority - l2.priority;
		if(p != 0) {
			return -p;
		}
		if(l1.objectDistance < l2.objectDistance) {
			return -1;
		} else {
			return 1;
		}
	}
	,computeLight: function(obj,shaders) {
		var _gthis = this;
		if(this.lightCount > this.maxLightsPerObject) {
			var ll = this.ctx.lights;
			while(ll != null) {
				var l = ((ll) instanceof h3d_scene_fwd_Light) ? ll : null;
				if((obj.flags & 16) != 0) {
					var dx = l.absPos._41 - this.ctx.camera.target.x;
					var dy = l.absPos._42 - this.ctx.camera.target.y;
					var dz = l.absPos._43 - this.ctx.camera.target.z;
					if(dz == null) {
						dz = 0.;
					}
					l.objectDistance = dx * dx + dy * dy + dz * dz;
				} else {
					var dx1 = l.absPos._41 - obj.absPos._41;
					var dy1 = l.absPos._42 - obj.absPos._42;
					var dz1 = l.absPos._43 - obj.absPos._43;
					if(dz1 == null) {
						dz1 = 0.;
					}
					l.objectDistance = dx1 * dx1 + dy1 * dy1 + dz1 * dz1;
				}
				ll = ll.next;
			}
			var list = this.ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			this.ctx.lights = tmp;
		}
		shaders = _gthis.ctx.allocShaderList(this.ambientShader,shaders);
		var l = this.ctx.lights;
		var i = 0;
		while(l != null) {
			if(i++ == this.maxLightsPerObject) {
				break;
			}
			shaders = _gthis.ctx.allocShaderList(l.shader,shaders);
			l = l.next;
		}
		return shaders;
	}
	,__class__: h3d_scene_fwd_LightSystem
});
var h3d_scene_fwd_DepthPass = function() {
	this.enableSky = false;
	h3d_pass_Output.call(this,"depth",[hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))]);
	this.depthMapId = hxsl_Globals.allocID("depthMap");
};
$hxClasses["h3d.scene.fwd.DepthPass"] = h3d_scene_fwd_DepthPass;
h3d_scene_fwd_DepthPass.__name__ = "h3d.scene.fwd.DepthPass";
h3d_scene_fwd_DepthPass.__super__ = h3d_pass_Output;
h3d_scene_fwd_DepthPass.prototype = $extend(h3d_pass_Output.prototype,{
	draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("depthMap",this.ctx.engine.width,this.ctx.engine.height,true);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(this.enableSky ? 0 : 16711680,1);
		h3d_pass_Output.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.globals.map.h[this.depthMapId] = { texture : texture};
	}
	,__class__: h3d_scene_fwd_DepthPass
});
var h3d_scene_fwd_NormalPass = function() {
	h3d_pass_Output.call(this,"normal",[hxsl_Output.PackNormal(hxsl_Output.Value("output.normal"))]);
	this.normalMapId = hxsl_Globals.allocID("normalMap");
};
$hxClasses["h3d.scene.fwd.NormalPass"] = h3d_scene_fwd_NormalPass;
h3d_scene_fwd_NormalPass.__name__ = "h3d.scene.fwd.NormalPass";
h3d_scene_fwd_NormalPass.__super__ = h3d_pass_Output;
h3d_scene_fwd_NormalPass.prototype = $extend(h3d_pass_Output.prototype,{
	draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("normalMap",this.ctx.engine.width,this.ctx.engine.height);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(8421504,1);
		h3d_pass_Output.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.globals.map.h[this.normalMapId] = texture;
	}
	,__class__: h3d_scene_fwd_NormalPass
});
var h3d_scene_fwd_Renderer = function() {
	this.shadow = new h3d_pass_DefaultShadowMap(1024);
	this.normal = new h3d_scene_fwd_NormalPass();
	this.depth = new h3d_scene_fwd_DepthPass();
	h3d_scene_Renderer.call(this);
	this.defaultPass = new h3d_pass_Output("default");
	this.allPasses = [this.defaultPass,this.depth,this.normal,this.shadow];
};
$hxClasses["h3d.scene.fwd.Renderer"] = h3d_scene_fwd_Renderer;
h3d_scene_fwd_Renderer.__name__ = "h3d.scene.fwd.Renderer";
h3d_scene_fwd_Renderer.__super__ = h3d_scene_Renderer;
h3d_scene_fwd_Renderer.prototype = $extend(h3d_scene_Renderer.prototype,{
	renderPass: function(p,passes,sort) {
		p.draw(passes,sort);
	}
	,render: function() {
		if(this.has("shadow")) {
			this.renderPass(this.shadow,this.get("shadow"));
		}
		if(this.has("depth")) {
			this.renderPass(this.depth,this.get("depth"));
		}
		if(this.has("normal")) {
			this.renderPass(this.normal,this.get("normal"));
		}
		this.renderPass(this.defaultPass,this.get("default"));
		this.renderPass(this.defaultPass,this.get("alpha"),this.backToFront);
		this.renderPass(this.defaultPass,this.get("additive"));
	}
	,__class__: h3d_scene_fwd_Renderer
});
var h3d_shader_AmbientLight = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.AmbientLight"] = h3d_shader_AmbientLight;
h3d_shader_AmbientLight.__name__ = "h3d.shader.AmbientLight";
h3d_shader_AmbientLight.__super__ = hxsl_Shader;
h3d_shader_AmbientLight.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 2;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_AmbientLight
});
var h3d_shader_Base2d = function() {
	this.viewportB__ = new h3d_VectorImpl(0.,0.,0.);
	this.viewportA__ = new h3d_VectorImpl(0.,0.,0.);
	this.halfPixelInverse__ = new h3d_VectorImpl(0.,0.,0.);
	this.uvPos__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.filterMatrixB__ = new h3d_VectorImpl(0.,0.,0.);
	this.filterMatrixA__ = new h3d_VectorImpl(0.,0.,0.);
	this.absoluteMatrixB__ = new h3d_VectorImpl(0.,0.,0.);
	this.absoluteMatrixA__ = new h3d_VectorImpl(0.,0.,0.);
	this.color__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.zValue__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Base2d"] = h3d_shader_Base2d;
h3d_shader_Base2d.__name__ = "h3d.shader.Base2d";
h3d_shader_Base2d.__super__ = hxsl_Shader;
h3d_shader_Base2d.prototype = $extend(hxsl_Shader.prototype,{
	get_zValue: function() {
		return this.zValue__;
	}
	,set_zValue: function(_v) {
		return this.zValue__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_isRelative: function() {
		return this.isRelative__;
	}
	,set_isRelative: function(_v) {
		this.constModified = true;
		return this.isRelative__ = _v;
	}
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,get_absoluteMatrixA: function() {
		return this.absoluteMatrixA__;
	}
	,set_absoluteMatrixA: function(_v) {
		return this.absoluteMatrixA__ = _v;
	}
	,get_absoluteMatrixB: function() {
		return this.absoluteMatrixB__;
	}
	,set_absoluteMatrixB: function(_v) {
		return this.absoluteMatrixB__ = _v;
	}
	,get_filterMatrixA: function() {
		return this.filterMatrixA__;
	}
	,set_filterMatrixA: function(_v) {
		return this.filterMatrixA__ = _v;
	}
	,get_filterMatrixB: function() {
		return this.filterMatrixB__;
	}
	,set_filterMatrixB: function(_v) {
		return this.filterMatrixB__ = _v;
	}
	,get_hasUVPos: function() {
		return this.hasUVPos__;
	}
	,set_hasUVPos: function(_v) {
		this.constModified = true;
		return this.hasUVPos__ = _v;
	}
	,get_uvPos: function() {
		return this.uvPos__;
	}
	,set_uvPos: function(_v) {
		return this.uvPos__ = _v;
	}
	,get_killAlpha: function() {
		return this.killAlpha__;
	}
	,set_killAlpha: function(_v) {
		this.constModified = true;
		return this.killAlpha__ = _v;
	}
	,get_pixelAlign: function() {
		return this.pixelAlign__;
	}
	,set_pixelAlign: function(_v) {
		this.constModified = true;
		return this.pixelAlign__ = _v;
	}
	,get_halfPixelInverse: function() {
		return this.halfPixelInverse__;
	}
	,set_halfPixelInverse: function(_v) {
		return this.halfPixelInverse__ = _v;
	}
	,get_viewportA: function() {
		return this.viewportA__;
	}
	,set_viewportA: function(_v) {
		return this.viewportA__ = _v;
	}
	,get_viewportB: function() {
		return this.viewportB__;
	}
	,set_viewportB: function(_v) {
		return this.viewportB__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isRelative__) {
			this.constBits |= 1;
		}
		if(this.hasUVPos__) {
			this.constBits |= 2;
		}
		if(this.killAlpha__) {
			this.constBits |= 4;
		}
		if(this.pixelAlign__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.zValue__;
		case 1:
			return this.texture__;
		case 2:
			return this.isRelative__;
		case 3:
			return this.color__;
		case 4:
			return this.absoluteMatrixA__;
		case 5:
			return this.absoluteMatrixB__;
		case 6:
			return this.filterMatrixA__;
		case 7:
			return this.filterMatrixB__;
		case 8:
			return this.hasUVPos__;
		case 9:
			return this.uvPos__;
		case 10:
			return this.killAlpha__;
		case 11:
			return this.pixelAlign__;
		case 12:
			return this.halfPixelInverse__;
		case 13:
			return this.viewportA__;
		case 14:
			return this.viewportB__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.zValue__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Base2d
});
var h3d_shader_BaseMesh = function() {
	this.specularColor__ = new h3d_VectorImpl(0.,0.,0.);
	this.specularAmount__ = 0;
	this.specularPower__ = 0;
	this.color__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	hxsl_Shader.call(this);
	var _this = this.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this = this.specularColor__;
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	this.specularPower__ = 50;
	this.specularAmount__ = 1;
};
$hxClasses["h3d.shader.BaseMesh"] = h3d_shader_BaseMesh;
h3d_shader_BaseMesh.__name__ = "h3d.shader.BaseMesh";
h3d_shader_BaseMesh.__super__ = hxsl_Shader;
h3d_shader_BaseMesh.prototype = $extend(hxsl_Shader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,get_specularPower: function() {
		return this.specularPower__;
	}
	,set_specularPower: function(_v) {
		return this.specularPower__ = _v;
	}
	,get_specularAmount: function() {
		return this.specularAmount__;
	}
	,set_specularAmount: function(_v) {
		return this.specularAmount__ = _v;
	}
	,get_specularColor: function() {
		return this.specularColor__;
	}
	,set_specularColor: function(_v) {
		return this.specularColor__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		case 3:
			return this.specularColor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_BaseMesh
});
var h3d_shader_Blur = function() {
	this.cubeDir__ = new h3d_MatrixImpl();
	this.depthThresholdMaxDist__ = 0;
	this.depthThreshold__ = 1;
	this.fixedColor__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.pixel__ = new h3d_VectorImpl(0.,0.,0.);
	this.offsets__ = [];
	this.values__ = [];
	this.Quality__ = 0;
	this.inverseProj__ = new h3d_MatrixImpl();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.Blur"] = h3d_shader_Blur;
h3d_shader_Blur.__name__ = "h3d.shader.Blur";
h3d_shader_Blur.__super__ = h3d_shader_ScreenShader;
h3d_shader_Blur.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_inverseProj: function() {
		return this.inverseProj__;
	}
	,set_inverseProj: function(_v) {
		return this.inverseProj__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_depthTexture: function() {
		return this.depthTexture__;
	}
	,set_depthTexture: function(_v) {
		return this.depthTexture__ = _v;
	}
	,get_Quality: function() {
		return this.Quality__;
	}
	,set_Quality: function(_v) {
		this.constModified = true;
		return this.Quality__ = _v;
	}
	,get_isDepth: function() {
		return this.isDepth__;
	}
	,set_isDepth: function(_v) {
		this.constModified = true;
		return this.isDepth__ = _v;
	}
	,get_values: function() {
		return this.values__;
	}
	,set_values: function(_v) {
		return this.values__ = _v;
	}
	,get_offsets: function() {
		return this.offsets__;
	}
	,set_offsets: function(_v) {
		return this.offsets__ = _v;
	}
	,get_pixel: function() {
		return this.pixel__;
	}
	,set_pixel: function(_v) {
		return this.pixel__ = _v;
	}
	,get_hasFixedColor: function() {
		return this.hasFixedColor__;
	}
	,set_hasFixedColor: function(_v) {
		this.constModified = true;
		return this.hasFixedColor__ = _v;
	}
	,get_smoothFixedColor: function() {
		return this.smoothFixedColor__;
	}
	,set_smoothFixedColor: function(_v) {
		this.constModified = true;
		return this.smoothFixedColor__ = _v;
	}
	,get_fixedColor: function() {
		return this.fixedColor__;
	}
	,set_fixedColor: function(_v) {
		return this.fixedColor__ = _v;
	}
	,get_isDepthDependant: function() {
		return this.isDepthDependant__;
	}
	,set_isDepthDependant: function(_v) {
		this.constModified = true;
		return this.isDepthDependant__ = _v;
	}
	,get_depthThreshold: function() {
		return this.depthThreshold__;
	}
	,set_depthThreshold: function(_v) {
		return this.depthThreshold__ = _v;
	}
	,get_depthThresholdMaxDist: function() {
		return this.depthThresholdMaxDist__;
	}
	,set_depthThresholdMaxDist: function(_v) {
		return this.depthThresholdMaxDist__ = _v;
	}
	,get_isCube: function() {
		return this.isCube__;
	}
	,set_isCube: function(_v) {
		this.constModified = true;
		return this.isCube__ = _v;
	}
	,get_cubeTexture: function() {
		return this.cubeTexture__;
	}
	,set_cubeTexture: function(_v) {
		return this.cubeTexture__ = _v;
	}
	,get_cubeDir: function() {
		return this.cubeDir__;
	}
	,set_cubeDir: function(_v) {
		return this.cubeDir__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Quality__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("Quality" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v;
		if(this.isDepth__) {
			this.constBits |= 256;
		}
		if(this.hasFixedColor__) {
			this.constBits |= 512;
		}
		if(this.smoothFixedColor__) {
			this.constBits |= 1024;
		}
		if(this.isDepthDependant__) {
			this.constBits |= 2048;
		}
		if(this.isCube__) {
			this.constBits |= 4096;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.inverseProj__;
		case 2:
			return this.texture__;
		case 3:
			return this.depthTexture__;
		case 4:
			return this.Quality__;
		case 5:
			return this.isDepth__;
		case 6:
			return this.values__;
		case 7:
			return this.offsets__;
		case 8:
			return this.pixel__;
		case 9:
			return this.hasFixedColor__;
		case 10:
			return this.smoothFixedColor__;
		case 11:
			return this.fixedColor__;
		case 12:
			return this.isDepthDependant__;
		case 13:
			return this.depthThreshold__;
		case 14:
			return this.depthThresholdMaxDist__;
		case 15:
			return this.isCube__;
		case 16:
			return this.cubeTexture__;
		case 17:
			return this.cubeDir__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 4:
			return this.Quality__;
		case 13:
			return this.depthThreshold__;
		case 14:
			return this.depthThresholdMaxDist__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_Blur
});
var h3d_shader_ShaderBuffers = function() {
	this.globals = new Float32Array(0);
	this.params = new Float32Array(0);
	this.tex = new Array(0);
};
$hxClasses["h3d.shader.ShaderBuffers"] = h3d_shader_ShaderBuffers;
h3d_shader_ShaderBuffers.__name__ = "h3d.shader.ShaderBuffers";
h3d_shader_ShaderBuffers.prototype = {
	grow: function(s) {
		var ng = s.globalsSize << 2;
		var np = s.paramsSize << 2;
		var nt = s.texturesCount;
		var nb = s.bufferCount;
		if(this.globals.length < ng) {
			this.globals = new Float32Array(ng);
		}
		if(this.params.length < np) {
			this.params = new Float32Array(np);
		}
		if(this.tex.length < nt) {
			this.tex = new Array(nt);
		}
		if(nb > 0 && (this.buffers == null || this.buffers.length < nb)) {
			this.buffers = new Array(nb);
		}
	}
	,__class__: h3d_shader_ShaderBuffers
};
var h3d_shader_Buffers = function() {
	this.vertex = new h3d_shader_ShaderBuffers();
	this.fragment = new h3d_shader_ShaderBuffers();
};
$hxClasses["h3d.shader.Buffers"] = h3d_shader_Buffers;
h3d_shader_Buffers.__name__ = "h3d.shader.Buffers";
h3d_shader_Buffers.prototype = {
	__class__: h3d_shader_Buffers
};
var h3d_shader_ColorAdd = function(color) {
	if(color == null) {
		color = 0;
	}
	this.color__ = new h3d_VectorImpl(0.,0.,0.);
	hxsl_Shader.call(this);
	var _this = this.color__;
	_this.x = (color >> 16 & 255) / 255;
	_this.y = (color >> 8 & 255) / 255;
	_this.z = (color & 255) / 255;
};
$hxClasses["h3d.shader.ColorAdd"] = h3d_shader_ColorAdd;
h3d_shader_ColorAdd.__name__ = "h3d.shader.ColorAdd";
h3d_shader_ColorAdd.__super__ = hxsl_Shader;
h3d_shader_ColorAdd.prototype = $extend(hxsl_Shader.prototype,{
	get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.color__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorAdd
});
var h3d_shader_ColorKey = function(v) {
	if(v == null) {
		v = 0;
	}
	this.colorKey__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	hxsl_Shader.call(this);
	var _this = this.colorKey__;
	_this.x = (v >> 16 & 255) / 255;
	_this.y = (v >> 8 & 255) / 255;
	_this.z = (v & 255) / 255;
	_this.w = (v >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorKey"] = h3d_shader_ColorKey;
h3d_shader_ColorKey.__name__ = "h3d.shader.ColorKey";
h3d_shader_ColorKey.__super__ = hxsl_Shader;
h3d_shader_ColorKey.prototype = $extend(hxsl_Shader.prototype,{
	get_colorKey: function() {
		return this.colorKey__;
	}
	,set_colorKey: function(_v) {
		return this.colorKey__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.colorKey__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorKey
});
var h3d_shader_ColorMatrix = function(m) {
	this.enabled__ = true;
	this.matrix__ = new h3d_MatrixImpl();
	hxsl_Shader.call(this);
	if(m != null) {
		this.matrix__.loadValues(m);
	} else {
		this.matrix__.identity();
	}
};
$hxClasses["h3d.shader.ColorMatrix"] = h3d_shader_ColorMatrix;
h3d_shader_ColorMatrix.__name__ = "h3d.shader.ColorMatrix";
h3d_shader_ColorMatrix.__super__ = hxsl_Shader;
h3d_shader_ColorMatrix.prototype = $extend(hxsl_Shader.prototype,{
	get_matrix: function() {
		return this.matrix__;
	}
	,set_matrix: function(_v) {
		return this.matrix__ = _v;
	}
	,get_enabled: function() {
		return this.enabled__;
	}
	,set_enabled: function(_v) {
		this.constModified = true;
		return this.enabled__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enabled__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.matrix__;
		case 1:
			return this.enabled__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorMatrix
});
var h3d_shader_DirShadow = function() {
	this.poissonDisk__ = [];
	this.shadowBias__ = 0;
	this.shadowProj__ = new h3d_MatrixImpl();
	this.shadowMapChannel__ = hxsl_Channel.Unknown;
	this.shadowRes__ = new h3d_VectorImpl(0.,0.,0.);
	this.pcfScale__ = 0;
	this.PCF_SAMPLES__ = 0;
	this.shadowPower__ = 0;
	hxsl_Shader.call(this);
	this.set_pcfQuality(1);
};
$hxClasses["h3d.shader.DirShadow"] = h3d_shader_DirShadow;
h3d_shader_DirShadow.__name__ = "h3d.shader.DirShadow";
h3d_shader_DirShadow.__super__ = hxsl_Shader;
h3d_shader_DirShadow.prototype = $extend(hxsl_Shader.prototype,{
	set_pcfQuality: function(q) {
		var _v;
		switch(q) {
		case 2:
			var x = -0.326;
			var y = -0.406;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this1 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.840;
			var y = -0.074;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this2 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.696;
			var y = 0.457;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this3 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.203;
			var y = 0.621;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this4 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.962;
			var y = -0.195;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this5 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.473;
			var y = -0.480;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this6 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.519;
			var y = 0.767;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this7 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.185;
			var y = -0.893;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this8 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.507;
			var y = 0.064;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this9 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.896;
			var y = 0.412;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this10 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.322;
			var y = -0.933;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this11 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.792;
			var y = -0.598;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_v = [this1,this2,this3,this4,this5,this6,this7,this8,this9,this10,this11,new h3d_Vector4Impl(x,y,0.,1.)];
			break;
		case 3:
			var x = -0.613392;
			var y = 0.617481;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this1 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.170019;
			var y = -0.040254;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this2 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.299417;
			var y = 0.791925;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this3 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.645680;
			var y = 0.493210;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this4 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.651784;
			var y = 0.717887;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this5 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.421003;
			var y = 0.027070;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this6 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.817194;
			var y = -0.271096;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this7 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.705374;
			var y = -0.668203;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this8 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.977050;
			var y = -0.108615;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this9 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.063326;
			var y = 0.142369;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this10 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.203528;
			var y = 0.214331;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this11 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.667531;
			var y = 0.326090;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this12 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.098422;
			var y = -0.295755;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this13 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.885922;
			var y = 0.215369;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this14 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.566637;
			var y = 0.605213;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this15 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.039766;
			var y = -0.396100;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this16 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.751946;
			var y = 0.453352;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this17 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.078707;
			var y = -0.715323;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this18 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.075838;
			var y = -0.529344;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this19 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.724479;
			var y = -0.580798;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this20 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.222999;
			var y = -0.215125;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this21 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.467574;
			var y = -0.405438;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this22 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.248268;
			var y = -0.814753;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this23 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.354411;
			var y = -0.887570;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this24 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.175817;
			var y = 0.382366;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this25 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.487472;
			var y = -0.063082;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this26 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.084078;
			var y = 0.898312;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this27 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.488876;
			var y = -0.783441;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this28 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.470016;
			var y = 0.217933;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this29 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.696890;
			var y = -0.549791;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this30 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.149693;
			var y = 0.605762;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this31 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.034211;
			var y = 0.979980;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this32 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.503098;
			var y = -0.308878;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this33 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.016205;
			var y = -0.872921;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this34 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.385784;
			var y = -0.393902;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this35 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.146886;
			var y = -0.859249;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this36 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.643361;
			var y = 0.164098;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this37 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.634388;
			var y = -0.049471;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this38 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.688894;
			var y = 0.007843;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this39 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.464034;
			var y = -0.188818;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this40 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.440840;
			var y = 0.137486;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this41 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.364483;
			var y = 0.511704;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this42 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.034028;
			var y = 0.325968;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this43 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.099094;
			var y = -0.308023;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this44 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.693960;
			var y = -0.366253;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this45 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.678884;
			var y = -0.204688;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this46 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.001801;
			var y = 0.780328;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this47 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.145177;
			var y = -0.898984;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this48 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.062655;
			var y = -0.611866;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this49 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.315226;
			var y = -0.604297;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this50 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.780145;
			var y = 0.486251;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this51 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.371868;
			var y = 0.882138;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this52 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.200476;
			var y = 0.494430;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this53 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.494552;
			var y = -0.711051;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this54 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.612476;
			var y = 0.705252;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this55 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.578845;
			var y = -0.768792;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this56 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.772454;
			var y = -0.090976;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this57 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.504440;
			var y = 0.372295;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this58 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.155736;
			var y = 0.065157;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this59 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.391522;
			var y = 0.849605;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this60 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.620106;
			var y = -0.328104;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this61 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.789239;
			var y = -0.419965;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this62 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.545396;
			var y = 0.538133;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this63 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.178564;
			var y = -0.596057;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_v = [this1,this2,this3,this4,this5,this6,this7,this8,this9,this10,this11,this12,this13,this14,this15,this16,this17,this18,this19,this20,this21,this22,this23,this24,this25,this26,this27,this28,this29,this30,this31,this32,this33,this34,this35,this36,this37,this38,this39,this40,this41,this42,this43,this44,this45,this46,this47,this48,this49,this50,this51,this52,this53,this54,this55,this56,this57,this58,this59,this60,this61,this62,this63,new h3d_Vector4Impl(x,y,0.,1.)];
			break;
		default:
			var x = -0.942;
			var y = -0.399;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this1 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.945;
			var y = -0.768;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this2 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = -0.094;
			var y = -0.929;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var this3 = new h3d_Vector4Impl(x,y,0.,1.);
			var x = 0.344;
			var y = 0.293;
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_v = [this1,this2,this3,new h3d_Vector4Impl(x,y,0.,1.)];
		}
		this.poissonDisk__ = _v;
		this.constModified = true;
		this.PCF_SAMPLES__ = this.poissonDisk__.length;
		return q;
	}
	,get_enable: function() {
		return this.enable__;
	}
	,set_enable: function(_v) {
		this.constModified = true;
		return this.enable__ = _v;
	}
	,get_USE_ESM: function() {
		return this.USE_ESM__;
	}
	,set_USE_ESM: function(_v) {
		this.constModified = true;
		return this.USE_ESM__ = _v;
	}
	,get_shadowPower: function() {
		return this.shadowPower__;
	}
	,set_shadowPower: function(_v) {
		return this.shadowPower__ = _v;
	}
	,get_USE_PCF: function() {
		return this.USE_PCF__;
	}
	,set_USE_PCF: function(_v) {
		this.constModified = true;
		return this.USE_PCF__ = _v;
	}
	,get_PCF_SAMPLES: function() {
		return this.PCF_SAMPLES__;
	}
	,set_PCF_SAMPLES: function(_v) {
		this.constModified = true;
		return this.PCF_SAMPLES__ = _v;
	}
	,get_pcfScale: function() {
		return this.pcfScale__;
	}
	,set_pcfScale: function(_v) {
		return this.pcfScale__ = _v;
	}
	,get_shadowRes: function() {
		return this.shadowRes__;
	}
	,set_shadowRes: function(_v) {
		return this.shadowRes__ = _v;
	}
	,get_shadowMap: function() {
		return this.shadowMap__;
	}
	,set_shadowMap: function(_v) {
		this.constModified = true;
		return this.shadowMap__ = _v;
	}
	,get_shadowProj: function() {
		return this.shadowProj__;
	}
	,set_shadowProj: function(_v) {
		return this.shadowProj__ = _v;
	}
	,get_shadowBias: function() {
		return this.shadowBias__;
	}
	,set_shadowBias: function(_v) {
		return this.shadowBias__ = _v;
	}
	,get_poissonDisk: function() {
		return this.poissonDisk__;
	}
	,set_poissonDisk: function(_v) {
		return this.poissonDisk__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enable__) {
			this.constBits |= 1;
		}
		if(this.USE_ESM__) {
			this.constBits |= 2;
		}
		if(this.USE_PCF__) {
			this.constBits |= 4;
		}
		var v = this.PCF_SAMPLES__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("PCF_SAMPLES" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v << 3;
		if(this.shadowMap__ == null) {
			this.shadowMapChannel__ = hxsl_Channel.Unknown;
		} else if(this.shadowMapChannel__ == hxsl_Channel.Unknown) {
			if(this.shadowMap__.format == h3d_mat_Texture.nativeFormat) {
				this.shadowMapChannel__ = hxsl_Channel.PackedFloat;
			} else {
				throw haxe_Exception.thrown("shadowMap" + "Channel is not set");
			}
		}
		this.constBits |= (globals.allocChannelID(this.shadowMap__) << 3 | this.shadowMapChannel__._hx_index) << 11;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.enable__;
		case 1:
			return this.USE_ESM__;
		case 2:
			return this.shadowPower__;
		case 3:
			return this.USE_PCF__;
		case 4:
			return this.PCF_SAMPLES__;
		case 5:
			return this.pcfScale__;
		case 6:
			return this.shadowRes__;
		case 7:
			return this.shadowMap__;
		case 8:
			return this.shadowProj__;
		case 9:
			return this.shadowBias__;
		case 10:
			return this.poissonDisk__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.shadowPower__;
		case 4:
			return this.PCF_SAMPLES__;
		case 5:
			return this.pcfScale__;
		case 9:
			return this.shadowBias__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_DirShadow
});
var h3d_shader_GenTexture = function() {
	this.color__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.mode__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.GenTexture"] = h3d_shader_GenTexture;
h3d_shader_GenTexture.__name__ = "h3d.shader.GenTexture";
h3d_shader_GenTexture.__super__ = h3d_shader_ScreenShader;
h3d_shader_GenTexture.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_mode: function() {
		return this.mode__;
	}
	,set_mode: function(_v) {
		this.constModified = true;
		return this.mode__ = _v;
	}
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.mode__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("mode" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.mode__;
		case 2:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.mode__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_GenTexture
});
var h3d_shader_LineShader = function(width,lengthScale) {
	if(lengthScale == null) {
		lengthScale = 1.;
	}
	if(width == null) {
		width = 1.5;
	}
	this.width__ = 0;
	this.lengthScale__ = 0;
	hxsl_Shader.call(this);
	this.width__ = width;
	this.lengthScale__ = lengthScale;
};
$hxClasses["h3d.shader.LineShader"] = h3d_shader_LineShader;
h3d_shader_LineShader.__name__ = "h3d.shader.LineShader";
h3d_shader_LineShader.__super__ = hxsl_Shader;
h3d_shader_LineShader.prototype = $extend(hxsl_Shader.prototype,{
	get_lengthScale: function() {
		return this.lengthScale__;
	}
	,set_lengthScale: function(_v) {
		return this.lengthScale__ = _v;
	}
	,get_width: function() {
		return this.width__;
	}
	,set_width: function(_v) {
		return this.width__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_LineShader
});
var h3d_shader_MinMaxShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.MinMaxShader"] = h3d_shader_MinMaxShader;
h3d_shader_MinMaxShader.__name__ = "h3d.shader.MinMaxShader";
h3d_shader_MinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_MinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texA: function() {
		return this.texA__;
	}
	,set_texA: function(_v) {
		return this.texA__ = _v;
	}
	,get_texB: function() {
		return this.texB__;
	}
	,set_texB: function(_v) {
		return this.texB__ = _v;
	}
	,get_isMax: function() {
		return this.isMax__;
	}
	,set_isMax: function(_v) {
		this.constModified = true;
		return this.isMax__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_MinMaxShader
});
var h3d_shader_CubeMinMaxShader = function() {
	this.mat__ = new h3d_MatrixImpl();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.CubeMinMaxShader"] = h3d_shader_CubeMinMaxShader;
h3d_shader_CubeMinMaxShader.__name__ = "h3d.shader.CubeMinMaxShader";
h3d_shader_CubeMinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_CubeMinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texA: function() {
		return this.texA__;
	}
	,set_texA: function(_v) {
		return this.texA__ = _v;
	}
	,get_texB: function() {
		return this.texB__;
	}
	,set_texB: function(_v) {
		return this.texB__ = _v;
	}
	,get_isMax: function() {
		return this.isMax__;
	}
	,set_isMax: function(_v) {
		this.constModified = true;
		return this.isMax__ = _v;
	}
	,get_mat: function() {
		return this.mat__;
	}
	,set_mat: function(_v) {
		return this.mat__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		case 4:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_CubeMinMaxShader
});
var h3d_shader_NormalMap = function(texture) {
	hxsl_Shader.call(this);
	this.texture__ = texture;
};
$hxClasses["h3d.shader.NormalMap"] = h3d_shader_NormalMap;
h3d_shader_NormalMap.__name__ = "h3d.shader.NormalMap";
h3d_shader_NormalMap.__super__ = hxsl_Shader;
h3d_shader_NormalMap.prototype = $extend(hxsl_Shader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_NormalMap
});
var h3d_shader_Outline2D = function() {
	this.multiplyAlpha__ = 0;
	this.color__ = new h3d_Vector4Impl(0.,0.,0.,1.);
	this.samples__ = 0;
	this.size__ = new h3d_VectorImpl(0.,0.,0.);
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.Outline2D"] = h3d_shader_Outline2D;
h3d_shader_Outline2D.__name__ = "h3d.shader.Outline2D";
h3d_shader_Outline2D.__super__ = h3d_shader_ScreenShader;
h3d_shader_Outline2D.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,get_size: function() {
		return this.size__;
	}
	,set_size: function(_v) {
		return this.size__ = _v;
	}
	,get_samples: function() {
		return this.samples__;
	}
	,set_samples: function(_v) {
		this.constModified = true;
		return this.samples__ = _v;
	}
	,get_color: function() {
		return this.color__;
	}
	,set_color: function(_v) {
		return this.color__ = _v;
	}
	,get_multiplyAlpha: function() {
		return this.multiplyAlpha__;
	}
	,set_multiplyAlpha: function(_v) {
		this.constModified = true;
		return this.multiplyAlpha__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.samples__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("samples" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v;
		var v = this.multiplyAlpha__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("multiplyAlpha" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v << 8;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.size__;
		case 3:
			return this.samples__;
		case 4:
			return this.color__;
		case 5:
			return this.multiplyAlpha__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 3:
			return this.samples__;
		case 5:
			return this.multiplyAlpha__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_Outline2D
});
var h3d_shader_Shadow = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Shadow"] = h3d_shader_Shadow;
h3d_shader_Shadow.__name__ = "h3d.shader.Shadow";
h3d_shader_Shadow.__super__ = hxsl_Shader;
h3d_shader_Shadow.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Shadow
});
var h3d_shader_SignedDistanceField = function() {
	this.smoothing__ = 0.041666666666666664;
	this.alphaCutoff__ = 0.5;
	this.autoSmoothing__ = false;
	this.channel__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.SignedDistanceField"] = h3d_shader_SignedDistanceField;
h3d_shader_SignedDistanceField.__name__ = "h3d.shader.SignedDistanceField";
h3d_shader_SignedDistanceField.__super__ = hxsl_Shader;
h3d_shader_SignedDistanceField.prototype = $extend(hxsl_Shader.prototype,{
	get_channel: function() {
		return this.channel__;
	}
	,set_channel: function(_v) {
		this.constModified = true;
		return this.channel__ = _v;
	}
	,get_autoSmoothing: function() {
		return this.autoSmoothing__;
	}
	,set_autoSmoothing: function(_v) {
		this.constModified = true;
		return this.autoSmoothing__ = _v;
	}
	,get_alphaCutoff: function() {
		return this.alphaCutoff__;
	}
	,set_alphaCutoff: function(_v) {
		return this.alphaCutoff__ = _v;
	}
	,get_smoothing: function() {
		return this.smoothing__;
	}
	,set_smoothing: function(_v) {
		return this.smoothing__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.channel__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("channel" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v;
		if(this.autoSmoothing__) {
			this.constBits |= 256;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.channel__;
		case 1:
			return this.autoSmoothing__;
		case 2:
			return this.alphaCutoff__;
		case 3:
			return this.smoothing__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.channel__;
		case 2:
			return this.alphaCutoff__;
		case 3:
			return this.smoothing__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_SignedDistanceField
});
var h3d_shader_Utils = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Utils"] = h3d_shader_Utils;
h3d_shader_Utils.__name__ = "h3d.shader.Utils";
h3d_shader_Utils.__super__ = hxsl_Shader;
h3d_shader_Utils.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Utils
});
var h3d_shader_SkinBase = function() {
	this.prevBonesMatrixes__ = [];
	this.bonesMatrixes__ = [];
	this.calcPrevPos__ = false;
	this.fourBonesByVertex__ = false;
	this.MaxBones__ = 0;
	hxsl_Shader.call(this);
	this.constModified = true;
	this.MaxBones__ = 34;
};
$hxClasses["h3d.shader.SkinBase"] = h3d_shader_SkinBase;
h3d_shader_SkinBase.__name__ = "h3d.shader.SkinBase";
h3d_shader_SkinBase.__super__ = hxsl_Shader;
h3d_shader_SkinBase.prototype = $extend(hxsl_Shader.prototype,{
	get_MaxBones: function() {
		return this.MaxBones__;
	}
	,set_MaxBones: function(_v) {
		this.constModified = true;
		return this.MaxBones__ = _v;
	}
	,get_fourBonesByVertex: function() {
		return this.fourBonesByVertex__;
	}
	,set_fourBonesByVertex: function(_v) {
		this.constModified = true;
		return this.fourBonesByVertex__ = _v;
	}
	,get_calcPrevPos: function() {
		return this.calcPrevPos__;
	}
	,set_calcPrevPos: function(_v) {
		this.constModified = true;
		return this.calcPrevPos__ = _v;
	}
	,get_bonesMatrixes: function() {
		return this.bonesMatrixes__;
	}
	,set_bonesMatrixes: function(_v) {
		return this.bonesMatrixes__ = _v;
	}
	,get_prevBonesMatrixes: function() {
		return this.prevBonesMatrixes__;
	}
	,set_prevBonesMatrixes: function(_v) {
		return this.prevBonesMatrixes__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v;
		if(this.fourBonesByVertex__) {
			this.constBits |= 256;
		}
		if(this.calcPrevPos__) {
			this.constBits |= 512;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.fourBonesByVertex__;
		case 2:
			return this.calcPrevPos__;
		case 3:
			return this.bonesMatrixes__;
		case 4:
			return this.prevBonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.MaxBones__;
		}
		return 0.;
	}
	,__class__: h3d_shader_SkinBase
});
var h3d_shader_Skin = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.Skin"] = h3d_shader_Skin;
h3d_shader_Skin.__name__ = "h3d.shader.Skin";
h3d_shader_Skin.__super__ = h3d_shader_SkinBase;
h3d_shader_Skin.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v;
		if(this.fourBonesByVertex__) {
			this.constBits |= 256;
		}
		if(this.calcPrevPos__) {
			this.constBits |= 512;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.fourBonesByVertex__;
		case 2:
			return this.calcPrevPos__;
		case 3:
			return this.bonesMatrixes__;
		case 4:
			return this.prevBonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.MaxBones__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Skin
});
var h3d_shader_SkinTangent = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.SkinTangent"] = h3d_shader_SkinTangent;
h3d_shader_SkinTangent.__name__ = "h3d.shader.SkinTangent";
h3d_shader_SkinTangent.__super__ = h3d_shader_SkinBase;
h3d_shader_SkinTangent.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v;
		if(this.fourBonesByVertex__) {
			this.constBits |= 256;
		}
		if(this.calcPrevPos__) {
			this.constBits |= 512;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.fourBonesByVertex__;
		case 2:
			return this.calcPrevPos__;
		case 3:
			return this.bonesMatrixes__;
		case 4:
			return this.prevBonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.MaxBones__;
		}
		return 0.;
	}
	,__class__: h3d_shader_SkinTangent
});
var h3d_shader_SpecularTexture = function(tex) {
	hxsl_Shader.call(this);
	this.texture__ = tex;
};
$hxClasses["h3d.shader.SpecularTexture"] = h3d_shader_SpecularTexture;
h3d_shader_SpecularTexture.__name__ = "h3d.shader.SpecularTexture";
h3d_shader_SpecularTexture.__super__ = hxsl_Shader;
h3d_shader_SpecularTexture.prototype = $extend(hxsl_Shader.prototype,{
	get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SpecularTexture
});
var h3d_shader_Texture = function(tex) {
	this.killAlphaThreshold__ = 0;
	hxsl_Shader.call(this);
	this.texture__ = tex;
	this.killAlphaThreshold__ = h3d_mat_Defaults.defaultKillAlphaThreshold;
};
$hxClasses["h3d.shader.Texture"] = h3d_shader_Texture;
h3d_shader_Texture.__name__ = "h3d.shader.Texture";
h3d_shader_Texture.__super__ = hxsl_Shader;
h3d_shader_Texture.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,get_killAlpha: function() {
		return this.killAlpha__;
	}
	,set_killAlpha: function(_v) {
		this.constModified = true;
		return this.killAlpha__ = _v;
	}
	,get_specularAlpha: function() {
		return this.specularAlpha__;
	}
	,set_specularAlpha: function(_v) {
		this.constModified = true;
		return this.specularAlpha__ = _v;
	}
	,get_killAlphaThreshold: function() {
		return this.killAlphaThreshold__;
	}
	,set_killAlphaThreshold: function(_v) {
		return this.killAlphaThreshold__ = _v;
	}
	,get_texture: function() {
		return this.texture__;
	}
	,set_texture: function(_v) {
		return this.texture__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		if(this.killAlpha__) {
			this.constBits |= 2;
		}
		if(this.specularAlpha__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.additive__;
		case 1:
			return this.killAlpha__;
		case 2:
			return this.specularAlpha__;
		case 3:
			return this.killAlphaThreshold__;
		case 4:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 3) {
			return this.killAlphaThreshold__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Texture
});
var h3d_shader_UVDelta = function(dx,dy,sx,sy) {
	if(sy == null) {
		sy = 1.;
	}
	if(sx == null) {
		sx = 1.;
	}
	if(dy == null) {
		dy = 0.;
	}
	if(dx == null) {
		dx = 0.;
	}
	this.uvScale__ = new h3d_VectorImpl(0.,0.,0.);
	this.uvDelta__ = new h3d_VectorImpl(0.,0.,0.);
	hxsl_Shader.call(this);
	var _this = this.uvDelta__;
	var x = dx;
	var y = dy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	var _this = this.uvScale__;
	var x = sx;
	var y = sy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
};
$hxClasses["h3d.shader.UVDelta"] = h3d_shader_UVDelta;
h3d_shader_UVDelta.__name__ = "h3d.shader.UVDelta";
h3d_shader_UVDelta.__super__ = hxsl_Shader;
h3d_shader_UVDelta.prototype = $extend(hxsl_Shader.prototype,{
	get_uvDelta: function() {
		return this.uvDelta__;
	}
	,set_uvDelta: function(_v) {
		return this.uvDelta__ = _v;
	}
	,get_uvScale: function() {
		return this.uvScale__;
	}
	,set_uvScale: function(_v) {
		return this.uvScale__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.uvDelta__;
		case 1:
			return this.uvScale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_UVDelta
});
var h3d_shader_VertexColorAlpha = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.VertexColorAlpha"] = h3d_shader_VertexColorAlpha;
h3d_shader_VertexColorAlpha.__name__ = "h3d.shader.VertexColorAlpha";
h3d_shader_VertexColorAlpha.__super__ = hxsl_Shader;
h3d_shader_VertexColorAlpha.prototype = $extend(hxsl_Shader.prototype,{
	get_additive: function() {
		return this.additive__;
	}
	,set_additive: function(_v) {
		this.constModified = true;
		return this.additive__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_VertexColorAlpha
});
var h3d_shader_VolumeDecal = function(objectWidth,objectHeight) {
	this.isCentered__ = true;
	this.tangent__ = new h3d_VectorImpl(0.,0.,0.);
	this.normal__ = new h3d_VectorImpl(0.,0.,0.);
	this.scale__ = new h3d_VectorImpl(0.,0.,0.);
	hxsl_Shader.call(this);
	var _this = this.normal__;
	var x = 0;
	var y = 0;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	var _this = this.tangent__;
	var x = 1;
	var y = 0;
	var z = 0;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	var _this = this.scale__;
	var x = 1 / objectWidth;
	var y = 1 / objectHeight;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
};
$hxClasses["h3d.shader.VolumeDecal"] = h3d_shader_VolumeDecal;
h3d_shader_VolumeDecal.__name__ = "h3d.shader.VolumeDecal";
h3d_shader_VolumeDecal.__super__ = hxsl_Shader;
h3d_shader_VolumeDecal.prototype = $extend(hxsl_Shader.prototype,{
	get_scale: function() {
		return this.scale__;
	}
	,set_scale: function(_v) {
		return this.scale__ = _v;
	}
	,get_normal: function() {
		return this.normal__;
	}
	,set_normal: function(_v) {
		return this.normal__ = _v;
	}
	,get_tangent: function() {
		return this.tangent__;
	}
	,set_tangent: function(_v) {
		return this.tangent__ = _v;
	}
	,get_isCentered: function() {
		return this.isCentered__;
	}
	,set_isCentered: function(_v) {
		this.constModified = true;
		return this.isCentered__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isCentered__) {
			this.constBits |= 64;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.scale__;
		case 1:
			return this.normal__;
		case 2:
			return this.tangent__;
		case 3:
			return this.isCentered__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_VolumeDecal
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:true,__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
haxe_StackItem.__empty_constructs__ = [haxe_StackItem.CFunction];
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_EntryPoint = function() { };
$hxClasses["haxe.EntryPoint"] = haxe_EntryPoint;
haxe_EntryPoint.__name__ = "haxe.EntryPoint";
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	var time = haxe_MainLoop.tick();
	if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return time;
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	if(typeof(window) != "undefined") {
		var $window = window;
		var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
		if(rqf != null) {
			rqf(haxe_EntryPoint.run);
		} else if(nextTick >= 0) {
			setTimeout(haxe_EntryPoint.run,nextTick * 1000);
		}
	} else if(nextTick >= 0) {
		setTimeout(haxe_EntryPoint.run,nextTick * 1000);
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Int32 = {};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_MainEvent = function(f,p) {
	this.isBlocking = true;
	this.f = f;
	this.priority = p;
	this.nextRun = -Infinity;
};
$hxClasses["haxe.MainEvent"] = haxe_MainEvent;
haxe_MainEvent.__name__ = "haxe.MainEvent";
haxe_MainEvent.prototype = {
	__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
$hxClasses["haxe.MainLoop"] = haxe_MainLoop;
haxe_MainLoop.__name__ = "haxe.MainLoop";
haxe_MainLoop.hasEvents = function() {
	var p = haxe_MainLoop.pending;
	while(p != null) {
		if(p.isBlocking) {
			return true;
		}
		p = p.next;
	}
	return false;
};
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw haxe_Exception.thrown("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	return e;
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g = 0;
			var _g1 = insize;
			while(_g < _g1) {
				var i = _g++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var now = HxOverrides.now() / 1000;
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(wt <= 0) {
			wait = 0;
			if(e.f != null) {
				e.f();
			}
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([$A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = this.buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var _this = edecl.__constructs__;
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _this[i]._hx_name;
			}
			var tag = result[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i = 0;
	var max = str1.length;
	var l = max * 8;
	while(i < max) {
		blks[i >> 2] |= str1.b[i] << (l + i) % 4 * 8;
		++i;
	}
	blks[i >> 2] |= 128 << (l + i) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += hex_chr.charAt(num >> 4 & 15) + hex_chr.charAt(num & 15);
			str += hex_chr.charAt(num >> 12 & 15) + hex_chr.charAt(num >> 8 & 15);
			str += hex_chr.charAt(num >> 20 & 15) + hex_chr.charAt(num >> 16 & 15);
			str += hex_chr.charAt(num >> 28 & 15) + hex_chr.charAt(num >> 24 & 15);
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.iteratorLoop = function(node,acc) {
	if(node != null) {
		haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
		acc.push(node.value);
		haxe_ds_BalancedTree.iteratorLoop(node.right,acc);
	}
};
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,toString: function() {
		if(this.root == null) {
			return "[]";
		} else {
			return "[" + this.root.toString() + "]";
		}
	}
	,clear: function() {
		this.root = null;
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	toString: function() {
		return (this.left == null ? "" : this.left.toString() + ", ") + ("" + Std.string(this.key) + " => " + Std.string(this.value)) + (this.right == null ? "" : ", " + this.right.toString());
	}
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = "haxe.ds.GenericCell";
haxe_ds_GenericCell.prototype = {
	__class__: haxe_ds_GenericCell
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,toString: function() {
		var s_b = "";
		s_b += "[";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += i1 == null ? "null" : "" + i1;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "]";
		return s_b;
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,copy: function() {
		var copied = new haxe_ds_ObjectMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.h[key1.__id__]);
		}
		return copied;
	}
	,toString: function() {
		var s_b = "";
		s_b += "[";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "]";
		return s_b;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.stringify = function(h) {
	var s = "[";
	var first = true;
	for (var key in h) {
		if (first) first = false; else s += ',';
		s += key + ' => ' + Std.string(h[key]);
	}
	return s + "]";
};
haxe_ds_StringMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapValueIterator(this.h);
	}
	,toString: function() {
		return haxe_ds_StringMap.stringify(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe_ds__$StringMap_StringMapKeyIterator;
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_ds__$StringMap_StringMapValueIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapValueIterator"] = haxe_ds__$StringMap_StringMapValueIterator;
haxe_ds__$StringMap_StringMapValueIterator.__name__ = "haxe.ds._StringMap.StringMapValueIterator";
haxe_ds__$StringMap_StringMapValueIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.h[this.keys[this.current++]];
	}
	,__class__: haxe_ds__$StringMap_StringMapValueIterator
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
};
$hxClasses["haxe.exceptions.PosException"] = haxe_exceptions_PosException;
haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException";
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
};
$hxClasses["haxe.exceptions.NotImplementedException"] = haxe_exceptions_NotImplementedException;
haxe_exceptions_NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException";
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUntil: function(end) {
		var buf = new haxe_io_BytesBuffer();
		var last;
		while(true) {
			last = this.readByte();
			if(!(last != end)) {
				break;
			}
			buf.addByte(last);
		}
		return buf.getBytes().toString();
	}
	,readLine: function() {
		var buf = new haxe_io_BytesBuffer();
		var last;
		var s;
		try {
			while(true) {
				last = this.readByte();
				if(!(last != 10)) {
					break;
				}
				buf.addByte(last);
			}
			s = buf.getBytes().toString();
			if(HxOverrides.cca(s,s.length - 1) == 13) {
				s = HxOverrides.substr(s,0,-1);
			}
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof haxe_io_Eof)) {
				var e = _g1;
				s = buf.getBytes().toString();
				if(s.length == 0) {
					throw haxe_Exception.thrown(e);
				}
			} else {
				throw _g;
			}
		}
		return s;
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readUInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		if(this.bigEndian) {
			return ch3 | ch2 << 8 | ch1 << 16;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	flush: function() {
	}
	,close: function() {
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.withExtension = function(path,ext) {
	var s = new haxe_io_Path(path);
	s.ext = ext;
	return s.toString();
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths = _g;
	if(paths.length == 0) {
		return "";
	}
	var path = paths[0];
	var _g = 1;
	var _g1 = paths.length;
	while(_g < _g1) {
		var i = _g++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g_offset = 0;
	var _g_s = tmp;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_macro_Binop = $hxEnums["haxe.macro.Binop"] = { __ename__:true,__constructs__:null
	,OpAdd: {_hx_name:"OpAdd",_hx_index:0,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMult: {_hx_name:"OpMult",_hx_index:1,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpDiv: {_hx_name:"OpDiv",_hx_index:2,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpSub: {_hx_name:"OpSub",_hx_index:3,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssign: {_hx_name:"OpAssign",_hx_index:4,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpEq: {_hx_name:"OpEq",_hx_index:5,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNotEq: {_hx_name:"OpNotEq",_hx_index:6,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGt: {_hx_name:"OpGt",_hx_index:7,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGte: {_hx_name:"OpGte",_hx_index:8,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLt: {_hx_name:"OpLt",_hx_index:9,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLte: {_hx_name:"OpLte",_hx_index:10,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAnd: {_hx_name:"OpAnd",_hx_index:11,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpOr: {_hx_name:"OpOr",_hx_index:12,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpXor: {_hx_name:"OpXor",_hx_index:13,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolAnd: {_hx_name:"OpBoolAnd",_hx_index:14,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolOr: {_hx_name:"OpBoolOr",_hx_index:15,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShl: {_hx_name:"OpShl",_hx_index:16,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShr: {_hx_name:"OpShr",_hx_index:17,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpUShr: {_hx_name:"OpUShr",_hx_index:18,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMod: {_hx_name:"OpMod",_hx_index:19,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssignOp: ($_=function(op) { return {_hx_index:20,op:op,__enum__:"haxe.macro.Binop",toString:$estr}; },$_._hx_name="OpAssignOp",$_.__params__ = ["op"],$_)
	,OpInterval: {_hx_name:"OpInterval",_hx_index:21,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpArrow: {_hx_name:"OpArrow",_hx_index:22,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpIn: {_hx_name:"OpIn",_hx_index:23,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNullCoal: {_hx_name:"OpNullCoal",_hx_index:24,__enum__:"haxe.macro.Binop",toString:$estr}
};
haxe_macro_Binop.__constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpAssignOp,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn,haxe_macro_Binop.OpNullCoal];
haxe_macro_Binop.__empty_constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn,haxe_macro_Binop.OpNullCoal];
var haxe_macro_Unop = $hxEnums["haxe.macro.Unop"] = { __ename__:true,__constructs__:null
	,OpIncrement: {_hx_name:"OpIncrement",_hx_index:0,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpDecrement: {_hx_name:"OpDecrement",_hx_index:1,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNot: {_hx_name:"OpNot",_hx_index:2,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNeg: {_hx_name:"OpNeg",_hx_index:3,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNegBits: {_hx_name:"OpNegBits",_hx_index:4,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpSpread: {_hx_name:"OpSpread",_hx_index:5,__enum__:"haxe.macro.Unop",toString:$estr}
};
haxe_macro_Unop.__constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits,haxe_macro_Unop.OpSpread];
haxe_macro_Unop.__empty_constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits,haxe_macro_Unop.OpSpread];
var haxe_macro_Error = function(message,pos,previous) {
	haxe_Exception.call(this,message,previous);
	this.pos = pos;
};
$hxClasses["haxe.macro.Error"] = haxe_macro_Error;
haxe_macro_Error.__name__ = "haxe.macro.Error";
haxe_macro_Error.__super__ = haxe_Exception;
haxe_macro_Error.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_macro_Error
});
var haxe_xml__$Access_NodeAccess = {};
haxe_xml__$Access_NodeAccess.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			xname = this1.nodeName;
		}
		throw haxe_Exception.thrown(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	return x;
};
var haxe_xml__$Access_AttribAccess = {};
haxe_xml__$Access_AttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
		}
		throw haxe_Exception.thrown(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasNodeAccess = {};
haxe_xml__$Access_HasNodeAccess.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(p < str.length) {
		var c = str.charCodeAt(p);
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__:true,__constructs__:null
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="Found",$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBit",$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBits",$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__constructs__ = [haxe_zip_Huffman.Found,haxe_zip_Huffman.NeedBit,haxe_zip_Huffman.NeedBits];
haxe_zip_Huffman.__empty_constructs__ = [];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var a = t.left;
			var b = t.right;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g = t.n;
			var _g = t.table;
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var a = t.left;
				var b = t.right;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var a = t.left;
			var b = t.right;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__:true,__constructs__:null
	,Head: {_hx_name:"Head",_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_name:"Block",_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_name:"CData",_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_name:"Flat",_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_name:"Crc",_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_name:"Dist",_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_name:"DistOne",_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
haxe_zip__$InflateImpl_State.__empty_constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var a = h.left;
			var b = h.right;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var n = h.n;
			var tbl = h.table;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
$hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
haxe_zip_Uncompress.__name__ = "haxe.zip.Uncompress";
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var hxd_BitmapData = function(width,height) {
	if(!(width == -101 && height == -102)) {
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		this.ctx = canvas.getContext("2d",null);
	}
};
$hxClasses["hxd.BitmapData"] = hxd_BitmapData;
hxd_BitmapData.__name__ = "hxd.BitmapData";
hxd_BitmapData.prototype = {
	fill: function(x,y,width,height,color) {
		this.ctx.fillStyle = "rgba(" + (color >> 16 & 255) + ", " + (color >> 8 & 255) + ", " + (color & 255) + ", " + (color >>> 24) / 255 + ")";
		this.ctx.fillRect(x,y,width,height);
	}
	,line: function(x0,y0,x1,y1,color) {
		var dx = x1 - x0;
		var dy = y1 - y0;
		if(dx == 0) {
			if(y1 < y0) {
				var tmp = y0;
				y0 = y1;
				y1 = tmp;
			}
			if(y0 < 0) {
				y0 = 0;
			}
			if(y1 > this.ctx.canvas.height - 1) {
				y1 = this.ctx.canvas.height - 1;
			}
			var _g = y0;
			var _g1 = y1 + 1;
			while(_g < _g1) {
				var y = _g++;
				this.setPixel(x0,y,color);
			}
		} else if(dy == 0) {
			if(x1 < x0) {
				var tmp = x0;
				x0 = x1;
				x1 = tmp;
			}
			if(x0 < 0) {
				x0 = 0;
			}
			if(x1 > this.ctx.canvas.width - 1) {
				x1 = this.ctx.canvas.width - 1;
			}
			var _g = x0;
			var _g1 = x1 + 1;
			while(_g < _g1) {
				var x = _g++;
				this.setPixel(x,y0,color);
			}
		} else {
			var sx;
			var sy;
			var clip_x0;
			var clip_y0;
			var clip_x1;
			var clip_y1;
			if(x0 < x1) {
				if(x0 >= this.ctx.canvas.width || x1 < 0) {
					return;
				}
				sx = 1;
				clip_x0 = 0;
				clip_x1 = this.ctx.canvas.width - 1;
			} else {
				if(x1 >= this.ctx.canvas.width || x0 < 0) {
					return;
				}
				sx = -1;
				x1 = -x1;
				x0 = -x0;
				clip_x0 = 1 - this.ctx.canvas.width;
				clip_x1 = 0;
			}
			if(y0 < y1) {
				if(y0 >= this.ctx.canvas.height || y1 < 0) {
					return;
				}
				sy = 1;
				clip_y0 = 0;
				clip_y1 = this.ctx.canvas.height - 1;
			} else {
				if(y1 >= this.ctx.canvas.width || y0 < 0) {
					return;
				}
				sy = -1;
				y1 = -y1;
				y0 = -y0;
				clip_y0 = 1 - this.ctx.canvas.height;
				clip_y1 = 0;
			}
			dx = x1 - x0;
			dy = y1 - y0;
			var d2x = dx << 1;
			var d2y = dy << 1;
			var x = x0;
			var y = y0;
			if(dx >= dy) {
				var delta = d2y - dx;
				var tracing_can_start = false;
				if(y0 < clip_y0) {
					var temp = d2x;
					temp = temp * (clip_y0 - y0) - dx;
					var xinc = temp / d2y;
					x += xinc | 0;
					if(x > clip_x1) {
						return;
					}
					if(x >= clip_x0) {
						temp -= xinc * d2y;
						delta -= (temp | 0) + dx;
						y = clip_y0;
						if(temp > 0) {
							++x;
							delta += d2y;
						}
						tracing_can_start = true;
					}
				}
				if(!tracing_can_start && x0 < clip_x0) {
					var temp = d2y;
					temp *= clip_x0 - x0;
					var yinc = temp / d2x;
					y += yinc | 0;
					temp %= d2x;
					if(y > clip_y1 || y == clip_y1 && temp > dx) {
						return;
					}
					x = clip_x0;
					delta += temp | 0;
					if(temp >= dx) {
						++y;
						delta -= d2x;
					}
				}
				var xend = x1;
				if(y1 > clip_y1) {
					var temp = d2x;
					temp = temp * (clip_y1 - y1) + dx;
					var xinc = temp / d2y;
					xend += xinc | 0;
					if(temp - xinc * d2y == 0) {
						--xend;
					}
				}
				if(xend > clip_x1) {
					xend = clip_x1 + 1;
				} else {
					++xend;
				}
				if(sx == -1) {
					x = -x;
					xend = -xend;
				}
				if(sy == -1) {
					y = -y;
				}
				d2x -= d2y;
				while(x != xend) {
					this.setPixel(x,y,color);
					if(delta >= 0) {
						y += sy;
						delta -= d2x;
					} else {
						delta += d2y;
					}
					x += sx;
				}
			} else {
				var delta = d2x - dy;
				var tracing_can_start = false;
				if(x0 < clip_x0) {
					var temp = d2y;
					temp = temp * (clip_x0 - x0) - dy;
					var yinc = temp / d2x;
					y += yinc | 0;
					if(y > clip_y1) {
						return;
					}
					if(y >= clip_y0) {
						temp -= yinc * d2x;
						delta -= (temp | 0) + dy;
						x = clip_x0;
						if(temp > 0) {
							++y;
							delta += d2x;
						}
						tracing_can_start = true;
					}
				}
				if(!tracing_can_start && y0 < clip_y0) {
					var temp = d2x;
					temp *= clip_y0 - y0;
					var xinc = temp / d2y;
					x += xinc | 0;
					temp %= d2y;
					if(x > clip_x1 || x == clip_x1 && temp > dy) {
						return;
					}
					y = clip_y0;
					delta += temp | 0;
					if(temp >= dy) {
						++x;
						delta -= d2y;
					}
				}
				var yend = y1;
				if(x1 > clip_x1) {
					var temp = d2y;
					temp = temp * (clip_x1 - x1) + dy;
					var yinc = temp / d2x;
					yend += yinc | 0;
					if(temp - yinc * d2x == 0) {
						--yend;
					}
				}
				if(yend > clip_y1) {
					yend = clip_y1 + 1;
				} else {
					++yend;
				}
				if(sx == -1) {
					x = -x;
				}
				if(sy == -1) {
					y = -y;
					yend = -yend;
				}
				d2y -= d2x;
				while(y != yend) {
					this.setPixel(x,y,color);
					if(delta >= 0) {
						x += sx;
						delta -= d2y;
					} else {
						delta += d2x;
					}
					y += sy;
				}
			}
		}
	}
	,lock: function() {
		if(this.lockImage == null) {
			this.lockImage = this.ctx.getImageData(0,0,this.ctx.canvas.width,this.ctx.canvas.height);
		}
	}
	,unlock: function() {
		if(this.lockImage != null) {
			this.ctx.putImageData(this.lockImage,0,0);
			this.lockImage = null;
		}
	}
	,setPixel: function(x,y,c) {
		var i = this.lockImage;
		if(i != null) {
			var a = x + y * i.width << 2;
			i.data[a] = c >> 16 & 255;
			i.data[a | 1] = c >> 8 & 255;
			i.data[a | 2] = c & 255;
			i.data[a | 3] = c >>> 24 & 255;
			return;
		}
		var i = this.pixel;
		if(i == null) {
			i = this.ctx.createImageData(1,1);
			this.pixel = i;
		}
		i.data[0] = c >> 16 & 255;
		i.data[1] = c >> 8 & 255;
		i.data[2] = c & 255;
		i.data[3] = c >>> 24 & 255;
		this.ctx.putImageData(i,x,y);
	}
	,getPixels: function() {
		var w = this.ctx.canvas.width;
		var h = this.ctx.canvas.height;
		var data = this.ctx.getImageData(0,0,w,h).data;
		var pixels = data.buffer;
		return new hxd_Pixels(w,h,haxe_io_Bytes.ofData(pixels),hxd_PixelFormat.RGBA);
	}
	,__class__: hxd_BitmapData
};
var hxd_Precision = {};
var hxd_InputFormat = {};
hxd_InputFormat.toString = function(this1) {
	switch(this1) {
	case 1:
		return "DFloat";
	case 2:
		return "DVec2";
	case 3:
		return "DVec3";
	case 4:
		return "DVec4";
	case 9:
		return "DBytes4";
	case 16:
		return "DMat4";
	}
};
hxd_InputFormat.fromHXSL = function(t) {
	switch(t._hx_index) {
	case 3:
		return 1;
	case 5:
		var _g = t.t;
		switch(t.size) {
		case 2:
			if(_g._hx_index == 1) {
				return 2;
			} else {
				throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
			}
			break;
		case 3:
			if(_g._hx_index == 1) {
				return 3;
			} else {
				throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
			}
			break;
		case 4:
			if(_g._hx_index == 1) {
				return 4;
			} else {
				throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
			}
			break;
		default:
			throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
		}
		break;
	case 7:
		return 16;
	case 9:
		if(t.size == 4) {
			return 9;
		} else {
			throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
		}
		break;
	default:
		throw haxe_Exception.thrown("Unsupported buffer type " + Std.string(t));
	}
};
var hxd_BufferInput = function(name,type,precision) {
	if(precision == null) {
		precision = 0;
	}
	this.name = name;
	this.type = type;
	this.precision = precision;
};
$hxClasses["hxd.BufferInput"] = hxd_BufferInput;
hxd_BufferInput.__name__ = "hxd.BufferInput";
hxd_BufferInput.prototype = {
	__class__: hxd_BufferInput
};
var hxd_BufferMapping = {};
hxd_BufferMapping._new = function(index,offset,prec) {
	return index << 3 | prec | offset << 16;
};
var hxd_BufferFormat = function(inputs) {
	this.uid = hxd_BufferFormat._UID++;
	this.stride = this.strideBytes = 0;
	this.inputs = inputs.slice();
	this.hasLowPrecision = false;
	var _g = 0;
	while(_g < inputs.length) {
		var i = inputs[_g];
		++_g;
		var this1 = i.type;
		this.stride += this1 == js_Boot.__cast(9 , Int) ? 1 : this1;
		var this2 = i.type;
		this.strideBytes += (this2 == js_Boot.__cast(9 , Int) ? 1 : this2) * hxd_Precision.SIZES[i.precision];
		if((this.strideBytes & 3) != 0) {
			this.strideBytes += 4 - (this.strideBytes & 3);
		}
		if(i.precision != 0) {
			this.hasLowPrecision = true;
		}
	}
};
$hxClasses["hxd.BufferFormat"] = hxd_BufferFormat;
hxd_BufferFormat.__name__ = "hxd.BufferFormat";
hxd_BufferFormat.get_XY_UV_RGBA = function() {
	if(hxd_BufferFormat.XY_UV_RGBA == null) {
		hxd_BufferFormat.XY_UV_RGBA = hxd_BufferFormat.make([new hxd_BufferInput("position",2,0),new hxd_BufferInput("uv",2,0),new hxd_BufferInput("color",4,0)]);
	}
	return hxd_BufferFormat.XY_UV_RGBA;
};
hxd_BufferFormat.get_XY_UV = function() {
	if(hxd_BufferFormat.XY_UV == null) {
		hxd_BufferFormat.XY_UV = hxd_BufferFormat.make([new hxd_BufferInput("position",2,0),new hxd_BufferInput("uv",2,0)]);
	}
	return hxd_BufferFormat.XY_UV;
};
hxd_BufferFormat.get_INDEX16 = function() {
	if(hxd_BufferFormat.INDEX16 == null) {
		hxd_BufferFormat.INDEX16 = hxd_BufferFormat.make([new hxd_BufferInput("index",1,1)]);
		hxd_BufferFormat.INDEX16.strideBytes = 2;
	}
	return hxd_BufferFormat.INDEX16;
};
hxd_BufferFormat.get_INDEX32 = function() {
	if(hxd_BufferFormat.INDEX32 == null) {
		hxd_BufferFormat.INDEX32 = hxd_BufferFormat.make([new hxd_BufferInput("index",1,0)]);
	}
	return hxd_BufferFormat.INDEX32;
};
hxd_BufferFormat.fromID = function(uid) {
	var h = hxd_BufferFormat.ALL_FORMATS.h;
	var fl_h = h;
	var fl_keys = Object.keys(h);
	var fl_length = fl_keys.length;
	var fl_current = 0;
	while(fl_current < fl_length) {
		var fl = fl_h[fl_keys[fl_current++]];
		var _g = 0;
		while(_g < fl.length) {
			var f = fl[_g];
			++_g;
			if(f.uid == uid) {
				return f;
			}
		}
	}
	return null;
};
hxd_BufferFormat.make = function(inputs) {
	var names = [];
	var _g = 0;
	while(_g < inputs.length) {
		var b = inputs[_g];
		++_g;
		names.push(b.name);
	}
	var key = names.join("|");
	var arr = hxd_BufferFormat.ALL_FORMATS.h[key];
	if(arr == null) {
		arr = [];
		hxd_BufferFormat.ALL_FORMATS.h[key] = arr;
	}
	var _g = 0;
	while(_g < arr.length) {
		var fmt = arr[_g];
		++_g;
		var found = true;
		var _g1 = 0;
		var _g2 = inputs.length;
		while(_g1 < _g2) {
			var i = _g1++;
			var _this = inputs[i];
			var b = fmt.inputs[i];
			if(!(_this.type == b.type && _this.name == b.name && _this.precision == b.precision)) {
				found = false;
				break;
			}
		}
		if(found) {
			return fmt;
		}
	}
	var fmt = new hxd_BufferFormat(inputs);
	arr.push(fmt);
	return fmt;
};
hxd_BufferFormat.float32to16 = function(v,denormalsAreZero) {
	if(denormalsAreZero == null) {
		denormalsAreZero = false;
	}
	var i = haxe_io_FPHelper.floatToI32(v);
	var sign = (i & -2147483648) >>> 16;
	var exp = (i & 2139095040) >>> 23;
	var bits = i & 8388607;
	if(exp > 112) {
		return sign | exp - 112 << 10 & 31744 | bits >> 13;
	}
	if(exp < 113 && exp > 101 && !denormalsAreZero) {
		return sign | (8384512 + bits >> 125 - exp) + 1 >> 1;
	}
	if(exp > 143) {
		return sign | 32767;
	}
	return 0;
};
hxd_BufferFormat.float32toS8 = function(v) {
	var i = Math.floor(v * 128);
	if(i >= 127) {
		return 127;
	}
	if(i <= -127) {
		return 128;
	}
	if(i >= 0) {
		return i;
	} else {
		return 127 + i | 128;
	}
};
hxd_BufferFormat.float32toU8 = function(v) {
	if(v < 0) {
		return 0;
	}
	if(v >= 1) {
		return 255;
	}
	return Math.floor(v * 256);
};
hxd_BufferFormat.prototype = {
	getInput: function(name) {
		var _g = 0;
		var _g1 = this.inputs;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.name == name) {
				return i;
			}
		}
		return null;
	}
	,calculateInputOffset: function(name) {
		var offset = 0;
		var _g = 0;
		var _g1 = this.inputs;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.name == name) {
				return offset;
			}
			var this1 = i.type;
			offset += (this1 == js_Boot.__cast(9 , Int) ? 1 : this1) * hxd_Precision.SIZES[i.precision];
			if((offset & 3) != 0) {
				offset += 4 - (offset & 3);
			}
		}
		throw haxe_Exception.thrown("Input not found : " + name);
	}
	,resolveMapping: function(target) {
		var m = this.mappings == null ? null : this.mappings[target.uid];
		if(m != null) {
			return m;
		}
		m = [];
		var _g = 0;
		var _g1 = target.inputs;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var found = false;
			var _g2 = 0;
			var _g3 = this.inputs;
			while(_g2 < _g3.length) {
				var i2 = _g3[_g2];
				++_g2;
				if(i2.name == i.name && i2.type == i.type) {
					m.push(hxd_BufferMapping._new(0,this.calculateInputOffset(i2.name),i2.precision));
					found = true;
					break;
				}
			}
			if(!found) {
				throw haxe_Exception.thrown("Missing buffer input '" + i.name + "'");
			}
		}
		if(this.mappings == null) {
			this.mappings = [];
		}
		this.mappings[target.uid] = m;
		return m;
	}
	,__class__: hxd_BufferFormat
};
var hxd_MultiFormat = function(formats) {
	this.mappings = [];
	this.uid = hxd_MultiFormat._UID++;
	this.formats = formats;
};
$hxClasses["hxd.MultiFormat"] = hxd_MultiFormat;
hxd_MultiFormat.__name__ = "hxd.MultiFormat";
hxd_MultiFormat.prototype = {
	makeMapping: function(format) {
		var m = [];
		var _g_current = 0;
		var _g_array = format.inputs;
		while(_g_current < _g_array.length) {
			var input = _g_array[_g_current++];
			var found = false;
			var match = null;
			var _g_current1 = 0;
			var _g_array1 = this.formats;
			while(_g_current1 < _g_array1.length) {
				var _g_value = _g_array1[_g_current1];
				var _g_key = _g_current1++;
				var idx = _g_key;
				var f = _g_value;
				var i = f.getInput(input.name);
				if(i != null) {
					match = i;
					if(i.type != input.type) {
						continue;
					}
					var offset = f.calculateInputOffset(i.name);
					m.push(hxd_BufferMapping._new(idx,offset,i.precision));
					found = true;
					break;
				}
			}
			if(!found) {
				if(match != null) {
					throw haxe_Exception.thrown("Shader buffer " + input.name + " was requested with " + (input.type == null ? "null" : hxd_InputFormat.toString(input.type)) + " but found with " + (match.type == null ? "null" : hxd_InputFormat.toString(match.type)));
				}
				throw haxe_Exception.thrown("Missing shader buffer " + input.name);
			}
		}
		this.mappings[format.uid] = m;
		return m;
	}
	,__class__: hxd_MultiFormat
};
var hxd_Charset = function() {
	var _gthis = this;
	this.map = new haxe_ds_IntMap();
	var _g = 0;
	while(_g < 94) {
		var i = _g++;
		_gthis.map.h[65281 + i] = 33 + i;
	}
	var _g = 192;
	var _g1 = 199;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 65;
	}
	var _g = 224;
	var _g1 = 231;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 97;
	}
	var _g = 200;
	var _g1 = 204;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 69;
	}
	var _g = 232;
	var _g1 = 236;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 101;
	}
	var _g = 204;
	var _g1 = 208;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 73;
	}
	var _g = 236;
	var _g1 = 240;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 105;
	}
	var _g = 210;
	var _g1 = 215;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 79;
	}
	var _g = 242;
	var _g1 = 247;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 111;
	}
	var _g = 217;
	var _g1 = 221;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 85;
	}
	var _g = 249;
	var _g1 = 253;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 117;
	}
	_gthis.map.h[199] = 67;
	_gthis.map.h[231] = 67;
	_gthis.map.h[208] = 68;
	_gthis.map.h[222] = 100;
	_gthis.map.h[209] = 78;
	_gthis.map.h[241] = 110;
	_gthis.map.h[221] = 89;
	_gthis.map.h[253] = 121;
	_gthis.map.h[255] = 121;
	_gthis.map.h[8364] = 69;
	_gthis.map.h[12288] = 32;
	_gthis.map.h[160] = 32;
	_gthis.map.h[171] = 34;
	_gthis.map.h[187] = 34;
	_gthis.map.h[8220] = 34;
	_gthis.map.h[8221] = 34;
	_gthis.map.h[8222] = 34;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8217] = 39;
	_gthis.map.h[180] = 39;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8249] = 60;
	_gthis.map.h[8250] = 62;
	_gthis.map.h[8211] = 45;
};
$hxClasses["hxd.Charset"] = hxd_Charset;
hxd_Charset.__name__ = "hxd.Charset";
hxd_Charset.getDefault = function() {
	if(hxd_Charset.inst == null) {
		hxd_Charset.inst = new hxd_Charset();
	}
	return hxd_Charset.inst;
};
hxd_Charset.prototype = {
	resolveChar: function(code,glyphs) {
		var c = code;
		while(c != null) {
			var g = glyphs.h[c];
			if(g != null) {
				return g;
			}
			c = this.map.h[c];
		}
		return null;
	}
	,isCJK: function(code) {
		if(!(code >= 11904 && code <= 42191 || code >= 63744 && code <= 64255)) {
			if(code >= 131072) {
				return code <= 262141;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,isSpace: function(code) {
		if(code != 32) {
			return code == 12288;
		} else {
			return true;
		}
	}
	,isBreakChar: function(code) {
		if(!this.isSpace(code)) {
			return this.isCJK(code);
		} else {
			return true;
		}
	}
	,isComplementChar: function(code) {
		return hxd_Charset.complementChars.h.hasOwnProperty(code);
	}
	,__class__: hxd_Charset
};
var hxd_Cursor = $hxEnums["hxd.Cursor"] = { __ename__:true,__constructs__:null
	,Default: {_hx_name:"Default",_hx_index:0,__enum__:"hxd.Cursor",toString:$estr}
	,Button: {_hx_name:"Button",_hx_index:1,__enum__:"hxd.Cursor",toString:$estr}
	,Move: {_hx_name:"Move",_hx_index:2,__enum__:"hxd.Cursor",toString:$estr}
	,TextInput: {_hx_name:"TextInput",_hx_index:3,__enum__:"hxd.Cursor",toString:$estr}
	,Hide: {_hx_name:"Hide",_hx_index:4,__enum__:"hxd.Cursor",toString:$estr}
	,Custom: ($_=function(custom) { return {_hx_index:5,custom:custom,__enum__:"hxd.Cursor",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["custom"],$_)
	,Callback: ($_=function(f) { return {_hx_index:6,f:f,__enum__:"hxd.Cursor",toString:$estr}; },$_._hx_name="Callback",$_.__params__ = ["f"],$_)
};
hxd_Cursor.__constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide,hxd_Cursor.Custom,hxd_Cursor.Callback];
hxd_Cursor.__empty_constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide];
var hxd_CustomCursor = function(frames,speed,offsetX,offsetY) {
	this.frames = frames;
	this.speed = speed;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.frameDelay = 1 / speed;
	this.frameTime = 0;
	this.frameIndex = 0;
};
$hxClasses["hxd.CustomCursor"] = hxd_CustomCursor;
hxd_CustomCursor.__name__ = "hxd.CustomCursor";
hxd_CustomCursor.prototype = {
	reset: function() {
		this.frameTime = 0;
		this.frameIndex = 0;
	}
	,update: function(dt) {
		var newTime = this.frameTime + dt;
		var delay = this.frameDelay;
		var index = this.frameIndex;
		while(newTime >= delay) {
			newTime -= delay;
			++index;
		}
		this.frameTime = newTime;
		if(index >= this.frames.length) {
			index %= this.frames.length;
		}
		if(index != this.frameIndex) {
			this.frameIndex = index;
			return index;
		}
		return -1;
	}
	,__class__: hxd_CustomCursor
};
var hxd_DropFileEvent = function() { };
$hxClasses["hxd.DropFileEvent"] = hxd_DropFileEvent;
hxd_DropFileEvent.__name__ = "hxd.DropFileEvent";
var hxd_EventKind = $hxEnums["hxd.EventKind"] = { __ename__:true,__constructs__:null
	,EPush: {_hx_name:"EPush",_hx_index:0,__enum__:"hxd.EventKind",toString:$estr}
	,ERelease: {_hx_name:"ERelease",_hx_index:1,__enum__:"hxd.EventKind",toString:$estr}
	,EMove: {_hx_name:"EMove",_hx_index:2,__enum__:"hxd.EventKind",toString:$estr}
	,EOver: {_hx_name:"EOver",_hx_index:3,__enum__:"hxd.EventKind",toString:$estr}
	,EOut: {_hx_name:"EOut",_hx_index:4,__enum__:"hxd.EventKind",toString:$estr}
	,EWheel: {_hx_name:"EWheel",_hx_index:5,__enum__:"hxd.EventKind",toString:$estr}
	,EFocus: {_hx_name:"EFocus",_hx_index:6,__enum__:"hxd.EventKind",toString:$estr}
	,EFocusLost: {_hx_name:"EFocusLost",_hx_index:7,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyDown: {_hx_name:"EKeyDown",_hx_index:8,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyUp: {_hx_name:"EKeyUp",_hx_index:9,__enum__:"hxd.EventKind",toString:$estr}
	,EReleaseOutside: {_hx_name:"EReleaseOutside",_hx_index:10,__enum__:"hxd.EventKind",toString:$estr}
	,ETextInput: {_hx_name:"ETextInput",_hx_index:11,__enum__:"hxd.EventKind",toString:$estr}
	,ECheck: {_hx_name:"ECheck",_hx_index:12,__enum__:"hxd.EventKind",toString:$estr}
};
hxd_EventKind.__constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
hxd_EventKind.__empty_constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
var hxd_Event = function(k,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.button = 0;
	this.kind = k;
	this.relX = x;
	this.relY = y;
};
$hxClasses["hxd.Event"] = hxd_Event;
hxd_Event.__name__ = "hxd.Event";
hxd_Event.prototype = {
	__class__: hxd_Event
};
var hxd__$FloatBuffer_Float32Expand = {};
hxd__$FloatBuffer_Float32Expand._new = function(length) {
	return { pos : length, array : new Float32Array(new ArrayBuffer(length << 2))};
};
var hxd_Key = function() { };
$hxClasses["hxd.Key"] = hxd_Key;
hxd_Key.__name__ = "hxd.Key";
hxd_Key.initialize = function() {
	if(hxd_Key.initDone) {
		hxd_Key.dispose();
	}
	hxd_Key.initDone = true;
	hxd_Key.keyPressed = [];
	hxd_Window.getInstance().addEventTarget(hxd_Key.onEvent);
};
hxd_Key.dispose = function() {
	if(hxd_Key.initDone) {
		hxd_Window.getInstance().removeEventTarget(hxd_Key.onEvent);
		hxd_Key.initDone = false;
		hxd_Key.keyPressed = [];
	}
};
hxd_Key.onEvent = function(e) {
	switch(e.kind._hx_index) {
	case 0:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = hxd_Timer.frameCount + 2;
		}
		break;
	case 1:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = -(hxd_Timer.frameCount + 2);
		}
		break;
	case 5:
		hxd_Key.keyPressed[e.wheelDelta > 0 ? 6 : 5] = hxd_Timer.frameCount + 2;
		break;
	case 8:
		if(!hxd_Key.ALLOW_KEY_REPEAT && hxd_Key.keyPressed[e.keyCode] > 0) {
			return;
		}
		hxd_Key.keyPressed[e.keyCode] = hxd_Timer.frameCount + 2;
		break;
	case 9:
		hxd_Key.keyPressed[e.keyCode] = -(hxd_Timer.frameCount + 2);
		break;
	case 10:
		hxd_Key.keyPressed = [];
		break;
	default:
	}
};
var hxd_Math = function() { };
$hxClasses["hxd.Math"] = hxd_Math;
hxd_Math.__name__ = "hxd.Math";
hxd_Math.srand = function(max) {
	if(max == null) {
		max = 1.0;
	}
	return (Math.random() - 0.5) * (max * 2);
};
var hxd_Flags = $hxEnums["hxd.Flags"] = { __ename__:true,__constructs__:null
	,ReadOnly: {_hx_name:"ReadOnly",_hx_index:0,__enum__:"hxd.Flags",toString:$estr}
	,AlphaPremultiplied: {_hx_name:"AlphaPremultiplied",_hx_index:1,__enum__:"hxd.Flags",toString:$estr}
};
hxd_Flags.__constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied];
hxd_Flags.__empty_constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied];
var hxd_PixelsARGB = {};
hxd_PixelsARGB.fromPixels = function(p) {
	p.convert(hxd_PixelFormat.ARGB);
	return p;
};
var hxd_Pixels = function(width,height,bytes,format,offset) {
	if(offset == null) {
		offset = 0;
	}
	this.width = width;
	this.height = height;
	this.bytes = bytes;
	this.set_innerFormat(format);
	this.offset = offset;
	var i = 0;
	if(i == null) {
		i = 0;
	}
	this.flags = i;
};
$hxClasses["hxd.Pixels"] = hxd_Pixels;
hxd_Pixels.__name__ = "hxd.Pixels";
hxd_Pixels.calcDataSize = function(width,height,format) {
	if(format._hx_index == 22) {
		var _g = format.v;
		return (height + 3 >> 2 << 2) * hxd_Pixels.calcStride(width,format);
	} else {
		return height * hxd_Pixels.calcStride(width,format);
	}
};
hxd_Pixels.calcStride = function(width,format) {
	var tmp;
	switch(format._hx_index) {
	case 3:case 21:
		tmp = 8;
		break;
	case 4:
		tmp = 16;
		break;
	case 5:
		tmp = 1;
		break;
	case 6:case 18:
		tmp = 2;
		break;
	case 7:
		tmp = 4;
		break;
	case 8:
		tmp = 2;
		break;
	case 9:case 19:
		tmp = 4;
		break;
	case 10:
		tmp = 8;
		break;
	case 11:
		tmp = 3;
		break;
	case 12:case 20:
		tmp = 6;
		break;
	case 13:
		tmp = 12;
		break;
	case 0:case 1:case 2:case 14:case 15:
		tmp = 4;
		break;
	case 16:
		tmp = 4;
		break;
	case 17:
		tmp = 4;
		break;
	case 22:
		var n = format.v;
		var blocks = width + 3 >> 2;
		if(n == 1 || n == 4) {
			return blocks << 1;
		}
		return blocks << 2;
	case 23:
		tmp = 2;
		break;
	case 24:
		tmp = 3;
		break;
	case 25:case 26:
		tmp = 4;
		break;
	}
	return width * tmp;
};
hxd_Pixels.alloc = function(width,height,format) {
	return new hxd_Pixels(width,height,new haxe_io_Bytes(new ArrayBuffer(hxd_Pixels.calcDataSize(width,height,format))),format);
};
hxd_Pixels.prototype = {
	set_innerFormat: function(fmt) {
		this.innerFormat = fmt;
		this.stride = hxd_Pixels.calcStride(this.width,fmt);
		this.dataSize = hxd_Pixels.calcDataSize(this.width,this.height,fmt);
		this.bytesPerPixel = hxd_Pixels.calcStride(1,fmt);
		return fmt;
	}
	,invalidFormat: function() {
		throw haxe_Exception.thrown("Unsupported format for this operation : " + Std.string(this.innerFormat));
	}
	,toVector: function() {
		var vec = new Array(this.width * this.height);
		var idx = 0;
		var p = this.offset;
		var dl = 0;
		switch(this.innerFormat._hx_index) {
		case 0:
			var _g = 0;
			var _g1 = this.height;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g3 = this.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var v = this.bytes.getInt32(p);
					vec[idx++] = v >>> 24 | v >> 8 & 65280 | v << 8 & 16711680 | v << 24;
					p += 4;
				}
				p += dl;
			}
			break;
		case 1:
			var _g = 0;
			var _g1 = this.height;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g3 = this.width;
				while(_g2 < _g3) {
					var x = _g2++;
					vec[idx++] = this.bytes.getInt32(p);
					p += 4;
				}
				p += dl;
			}
			break;
		case 2:
			var _g = 0;
			var _g1 = this.height;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g3 = this.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var v = this.bytes.getInt32(p);
					vec[idx++] = v & -16711936 | v << 16 & 16711680 | v >> 16 & 255;
					p += 4;
				}
				p += dl;
			}
			break;
		default:
			this.invalidFormat();
		}
		return vec;
	}
	,makeSquare: function(copy) {
		var w = this.width;
		var h = this.height;
		var tw = w == 0 ? 0 : 1;
		var th = h == 0 ? 0 : 1;
		while(tw < w) tw <<= 1;
		while(th < h) th <<= 1;
		if(w == tw && h == th) {
			return this;
		}
		var bpp = this.bytesPerPixel;
		var out = new haxe_io_Bytes(new ArrayBuffer(tw * th * bpp));
		var p = 0;
		var b = this.offset;
		var _g = 0;
		var _g1 = h;
		while(_g < _g1) {
			var y = _g++;
			out.blit(p,this.bytes,b,w * bpp);
			p += w * bpp;
			b += w * bpp;
			var _g2 = 0;
			var _g3 = (tw - w) * bpp >> 2;
			while(_g2 < _g3) {
				var i = _g2++;
				out.setInt32(p,0);
				p += 4;
			}
		}
		var _g = 0;
		var _g1 = (th - h) * tw * bpp >> 2;
		while(_g < _g1) {
			var i = _g++;
			out.setInt32(p,0);
			p += 4;
		}
		if(copy) {
			return new hxd_Pixels(tw,th,out,this.innerFormat);
		}
		this.bytes = out;
		this.width = tw;
		this.height = th;
		return this;
	}
	,copyInner: function() {
		var old = this.bytes;
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.dataSize));
		this.bytes.blit(0,old,this.offset,this.dataSize);
		this.offset = 0;
		this.flags &= -1 - (1 << hxd_Flags.ReadOnly._hx_index);
	}
	,flipY: function() {
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		if(this.stride % 4 != 0) {
			this.invalidFormat();
		}
		var _g = 0;
		var _g1 = this.height >> 1;
		while(_g < _g1) {
			var y = _g++;
			var p1 = y * this.stride + this.offset;
			var p2 = (this.height - 1 - y) * this.stride + this.offset;
			var _g2 = 0;
			var _g3 = this.stride >> 2;
			while(_g2 < _g3) {
				var x = _g2++;
				var a = this.bytes.getInt32(p1);
				var b = this.bytes.getInt32(p2);
				this.bytes.setInt32(p1,b);
				this.bytes.setInt32(p2,a);
				p1 += 4;
				p2 += 4;
			}
		}
	}
	,convert: function(target) {
		if(this.innerFormat == target || Type.enumEq(this.innerFormat,target)) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		var bytes = this.bytes.b;
		var _g = this.innerFormat;
		switch(_g._hx_index) {
		case 0:
			switch(target._hx_index) {
			case 1:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var r = bytes[p + 1];
					var g = bytes[p + 2];
					var b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var v = bytes[p + 1];
					bytes[p] = v;
					var v1 = bytes[p + 2];
					bytes[p + 1] = v1;
					var v2 = bytes[p + 3];
					bytes[p + 2] = v2;
					bytes[p + 3] = a;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 1:
			switch(target._hx_index) {
			case 0:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var r = bytes[p + 1];
					var g = bytes[p + 2];
					var b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var b = bytes[p];
					var r = bytes[p + 2];
					bytes[p] = r;
					bytes[p + 2] = b;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 2:
			switch(target._hx_index) {
			case 0:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p + 3];
					var v = bytes[p + 2];
					bytes[p + 3] = v;
					var v1 = bytes[p + 1];
					bytes[p + 2] = v1;
					var v2 = bytes[p];
					bytes[p + 1] = v2;
					bytes[p] = a;
				}
				break;
			case 1:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var b = bytes[p];
					var r = bytes[p + 2];
					bytes[p] = r;
					bytes[p + 2] = b;
				}
				break;
			case 5:
				var nbytes = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height));
				var out = nbytes.b;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var v = bytes[i << 2];
					out[i] = v;
				}
				this.bytes = nbytes;
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 4:
			if(target._hx_index == 7) {
				var nbytes = new haxe_io_Bytes(new ArrayBuffer(this.height * this.width * 4));
				var out = nbytes.b;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					nbytes.setFloat(i << 2,this.bytes.getFloat(i << 4));
				}
				this.bytes = nbytes;
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 7:
			switch(target._hx_index) {
			case 1:case 2:
				var fbytes = this.bytes;
				var p = 0;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var v = fbytes.getFloat(p) * 255 | 0;
					if(v < 0) {
						v = 0;
					} else if(v > 255) {
						v = 255;
					}
					bytes[p++] = v;
					bytes[p++] = v;
					bytes[p++] = v;
					bytes[p++] = 255;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 18:
			if(target._hx_index == 7) {
				var nbytes = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height * 4));
				var fbytes = this.bytes;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var nv = fbytes.getUInt16(i << 1);
					nbytes.setFloat(i << 2,nv / 65535.0);
				}
				this.bytes = nbytes;
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 22:
			if(target._hx_index == 22) {
				var b = target.v;
				var a = _g.v;
				if(a != b) {
					throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
				}
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
		}
		this.set_innerFormat(target);
	}
	,dispose: function() {
		this.bytes = null;
	}
	,toString: function() {
		return "Pixels(" + this.width + "x" + this.height + " " + Std.string(this.innerFormat) + ")";
	}
	,__class__: hxd_Pixels
};
var hxd_Rand = function(seed) {
	this.init(seed);
};
$hxClasses["hxd.Rand"] = hxd_Rand;
hxd_Rand.__name__ = "hxd.Rand";
hxd_Rand.hash = function(n,seed) {
	if(seed == null) {
		seed = 5381;
	}
	var n1 = n;
	n1 = haxe_Int32._mul(n1,-862048943);
	n1 = n1 << 15 | n1 >>> 17;
	n1 = haxe_Int32._mul(n1,461845907);
	var h = seed;
	h ^= n1;
	h = h << 13 | h >>> 19;
	h = haxe_Int32._mul(h,5) + (-430675100) | 0;
	h ^= h >> 16;
	h = haxe_Int32._mul(h,-2048144789);
	h ^= h >> 13;
	h = haxe_Int32._mul(h,-1028477387);
	return h ^= h >> 16;
};
hxd_Rand.prototype = {
	init: function(seed) {
		this.seed = seed;
		this.seed2 = hxd_Rand.hash(seed);
		if(this.seed == 0) {
			this.seed = 1;
		}
		if(this.seed2 == 0) {
			this.seed2 = 1;
		}
	}
	,__class__: hxd_Rand
};
var hxd_Res = function() { };
$hxClasses["hxd.Res"] = hxd_Res;
hxd_Res.__name__ = "hxd.Res";
hxd_Res.load = function(name) {
	return hxd_Res.get_loader().load(name);
};
hxd_Res.get_loader = function() {
	var l = hxd_res_Loader.currentInstance;
	if(l == null) {
		throw haxe_Exception.thrown("Resource loader not initialized: call to hxd.Res.initXXX() required");
	}
	return l;
};
hxd_Res.set_loader = function(l) {
	return hxd_res_Loader.currentInstance = l;
};
var hxd_SceneEvents = function($window) {
	this.defaultCursor = hxd_Cursor.Default;
	this.mouseCheckMove = true;
	this.enablePhysicalMouse = true;
	this.isOut = false;
	this.onOver = new hxd_Event(hxd_EventKind.EOver);
	this.onOut = new hxd_Event(hxd_EventKind.EOut);
	this.checkPos = new hxd_Event(hxd_EventKind.ECheck);
	this.focusLost = new hxd_Event(hxd_EventKind.EFocusLost);
	this.lastTouch = 0;
	this.mouseY = -1.;
	this.mouseX = -1.;
	this.overIndex = -1;
	this.scenes = [];
	this.pendingEvents = [];
	this.pushList = [];
	this.overList = [];
	this.overCandidates = [];
	if($window == null) {
		$window = hxd_Window.getInstance();
	}
	this.window = $window;
	$window.addEventTarget($bind(this,this.onEvent));
};
$hxClasses["hxd.SceneEvents"] = hxd_SceneEvents;
hxd_SceneEvents.__name__ = "hxd.SceneEvents";
hxd_SceneEvents.prototype = {
	onRemove: function(i) {
		if(i == this.currentFocus) {
			this.currentFocus = null;
		}
		if(this.overIndex >= 0) {
			var index = this.overList.indexOf(i);
			if(index >= 0) {
				HxOverrides.remove(this.overList,i);
				if(index < this.overIndex) {
					this.overIndex--;
				}
			}
		} else {
			HxOverrides.remove(this.overList,i);
			this.selectCursor();
		}
		HxOverrides.remove(this.pushList,i);
	}
	,addScene: function(s,index) {
		s.setEvents(this);
		if(index == null) {
			this.scenes.push(s);
		} else {
			this.scenes.splice(index,0,s);
		}
	}
	,blur: function() {
		if(this.currentFocus == null) {
			return;
		}
		this.focusLost.cancel = false;
		this.currentFocus.handleEvent(this.focusLost);
		if(!this.focusLost.cancel) {
			this.currentFocus = null;
		}
	}
	,checkFocus: function() {
		if(this.currentFocus == null) {
			return;
		}
		var s = this.currentFocus.getInteractiveScene();
		if(s == null) {
			this.currentFocus = null;
			return;
		}
		if(!s.isInteractiveVisible(this.currentFocus)) {
			this.blur();
		}
	}
	,emitEvent: function(event) {
		var oldX = event.relX;
		var oldY = event.relY;
		var overCandidateCount = 0;
		var handled = false;
		var checkOver = false;
		var fillOver = false;
		var checkPush = false;
		var cancelFocus = false;
		var updateCursor = false;
		this.overIndex = 0;
		switch(event.kind._hx_index) {
		case 0:
			cancelFocus = true;
			checkPush = true;
			break;
		case 1:
			checkPush = true;
			break;
		case 5:case 8:case 9:case 11:
			if(this.currentFocus != null) {
				event.relX = event.relY = 0;
				this.currentFocus.handleEvent(event);
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					return;
				}
			}
			break;
		case 2:case 12:
			checkOver = true;
			fillOver = true;
			break;
		default:
		}
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var last = null;
			while(true) {
				var i = s.handleEvent(event,last);
				if(i == null) {
					event.relX = oldX;
					event.relY = oldY;
					break;
				}
				if(checkOver) {
					if(fillOver) {
						var idx = this.overList.indexOf(i);
						if(idx == -1) {
							if(this.overCandidates.length == overCandidateCount) {
								this.overCandidates[overCandidateCount] = { i : i, s : s, x : event.relX, y : event.relY, z : event.relZ};
							} else {
								var info = this.overCandidates[overCandidateCount];
								info.i = i;
								info.s = s;
								info.x = event.relX;
								info.y = event.relY;
								info.z = event.relZ;
							}
							++overCandidateCount;
							this.overList.splice(this.overIndex++,0,i);
							updateCursor = true;
						} else {
							if(idx < this.overIndex) {
								do {
									this.overList[idx] = this.overList[idx + 1];
									++idx;
								} while(idx < this.overIndex);
								this.overList[this.overIndex] = i;
								updateCursor = true;
							} else if(idx > this.overIndex) {
								do {
									this.overList[idx] = this.overList[idx - 1];
									--idx;
								} while(idx > this.overIndex);
								this.overList[this.overIndex] = i;
								updateCursor = true;
							}
							this.overIndex++;
						}
						fillOver = event.propagate;
					}
				} else {
					if(checkPush) {
						if(event.kind == hxd_EventKind.EPush) {
							this.pushList.push(i);
						} else {
							HxOverrides.remove(this.pushList,i);
						}
					}
					if(cancelFocus && i == this.currentFocus) {
						cancelFocus = false;
					}
				}
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					handled = true;
					break;
				}
				last = i;
				event.propagate = false;
			}
			if(handled) {
				break;
			}
		}
		if(cancelFocus && this.currentFocus != null) {
			this.blur();
		}
		if(checkOver) {
			if(this.overIndex < this.overList.length) {
				while(this.overIndex < this.overList.length) {
					var e = this.overList.pop();
					e.handleEvent(this.onOut);
				}
				updateCursor = true;
			}
			if(overCandidateCount != 0) {
				var i = 0;
				var ev = this.onOver;
				do {
					var info = this.overCandidates[i++];
					ev.relX = info.x;
					ev.relY = info.y;
					ev.relZ = info.z;
					if(info.s.isInteractiveVisible(info.i)) {
						info.i.handleEvent(ev);
					} else {
						HxOverrides.remove(this.overList,info.i);
					}
					info.i = null;
					info.s = null;
				} while(i < overCandidateCount);
			}
		}
		this.overIndex = -1;
		if(updateCursor) {
			this.selectCursor();
		}
		if(!handled && event != this.checkPos) {
			if(event.kind == hxd_EventKind.EPush) {
				this.pushList.push(null);
			} else if(event.kind == hxd_EventKind.ERelease) {
				HxOverrides.remove(this.pushList,null);
			}
			this.dispatchListeners(event);
		}
		if(event.kind == hxd_EventKind.ERelease && this.pushList.length > 0) {
			var _g = 0;
			var _g1 = this.pushList;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i == null) {
					event.kind = hxd_EventKind.EReleaseOutside;
					this.dispatchListeners(event);
					event.kind = hxd_EventKind.ERelease;
				} else {
					var s = i.getInteractiveScene();
					if(s == null) {
						continue;
					}
					event.kind = hxd_EventKind.EReleaseOutside;
					s.dispatchEvent(event,i);
					event.kind = hxd_EventKind.ERelease;
					event.relX = oldX;
					event.relY = oldY;
				}
			}
			this.pushList = [];
		}
	}
	,checkEvents: function() {
		var old = this.pendingEvents;
		var checkMoved = !this.mouseCheckMove;
		var checkFocused = this.currentFocus == null;
		if(old.length > 0) {
			this.pendingEvents = [];
			var _g = 0;
			while(_g < old.length) {
				var e = old[_g];
				++_g;
				var ox = e.relX;
				var oy = e.relY;
				switch(e.kind._hx_index) {
				case 0:case 1:
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 2:
					checkMoved = true;
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 3:
					this.isOut = false;
					this.selectCursor();
					continue;
				case 4:
					this.isOut = true;
					if(this.overList.length > 0) {
						var i = this.overList.length - 1;
						while(i >= 0) {
							this.onOut.cancel = false;
							this.overList[i].handleEvent(this.onOut);
							HxOverrides.remove(this.overList,this.overList[i]);
							--i;
						}
						this.selectCursor();
					}
					continue;
				case 5:case 8:case 9:case 11:
					if(!checkFocused) {
						checkFocused = true;
						this.checkFocus();
					}
					break;
				default:
				}
				if(this.currentDrag != null && (this.currentDrag.ref == null || this.currentDrag.ref == e.touchId)) {
					e.propagate = true;
					e.cancel = false;
					this.currentDrag.f(e);
					e.relX = ox;
					e.relY = oy;
					if(!e.propagate) {
						continue;
					}
					e.propagate = false;
				}
				this.emitEvent(e);
			}
		}
		if(!checkFocused) {
			this.checkFocus();
		}
		if(!checkMoved && !this.isOut && this.currentDrag == null) {
			this.checkPos.relX = this.mouseX;
			this.checkPos.relY = this.mouseY;
			this.checkPos.touchId = this.lastTouch;
			this.checkPos.cancel = false;
			this.checkPos.propagate = false;
			this.emitEvent(this.checkPos);
		}
	}
	,startCapture: function(f,onCancel,touchId) {
		if(this.currentDrag != null && this.currentDrag.onCancel != null) {
			this.currentDrag.onCancel();
		}
		this.currentDrag = { f : f, ref : touchId, onCancel : onCancel};
	}
	,stopCapture: function() {
		if(this.currentDrag != null && this.currentDrag.onCancel != null) {
			this.currentDrag.onCancel();
		}
		this.currentDrag = null;
	}
	,updateCursor: function(i) {
		if(this.overList.indexOf(i) != -1) {
			this.selectCursor();
		}
	}
	,selectCursor: function() {
		var cur = this.defaultCursor;
		var _g = 0;
		var _g1 = this.overList;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.cursor != null) {
				cur = o.cursor;
				break;
			}
		}
		if(cur._hx_index == 6) {
			var f = cur.f;
			f();
		} else {
			hxd_System.setCursor(cur);
		}
	}
	,onEvent: function(e) {
		if(!this.enablePhysicalMouse && e.kind == hxd_EventKind.EMove) {
			return;
		}
		this.pendingEvents.push(e);
	}
	,dispatchListeners: function(event) {
		var ox = event.relX;
		var oy = event.relY;
		event.propagate = true;
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			event.cancel = false;
			s.dispatchListeners(event);
			event.relX = ox;
			event.relY = oy;
			if(!event.propagate) {
				break;
			}
		}
	}
	,__class__: hxd_SceneEvents
};
var hxd_Platform = $hxEnums["hxd.Platform"] = { __ename__:true,__constructs__:null
	,IOS: {_hx_name:"IOS",_hx_index:0,__enum__:"hxd.Platform",toString:$estr}
	,Android: {_hx_name:"Android",_hx_index:1,__enum__:"hxd.Platform",toString:$estr}
	,WebGL: {_hx_name:"WebGL",_hx_index:2,__enum__:"hxd.Platform",toString:$estr}
	,PC: {_hx_name:"PC",_hx_index:3,__enum__:"hxd.Platform",toString:$estr}
	,Console: {_hx_name:"Console",_hx_index:4,__enum__:"hxd.Platform",toString:$estr}
	,FlashPlayer: {_hx_name:"FlashPlayer",_hx_index:5,__enum__:"hxd.Platform",toString:$estr}
};
hxd_Platform.__constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
hxd_Platform.__empty_constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
var hxd_SystemValue = $hxEnums["hxd.SystemValue"] = { __ename__:true,__constructs__:null
	,IsTouch: {_hx_name:"IsTouch",_hx_index:0,__enum__:"hxd.SystemValue",toString:$estr}
	,IsWindowed: {_hx_name:"IsWindowed",_hx_index:1,__enum__:"hxd.SystemValue",toString:$estr}
	,IsMobile: {_hx_name:"IsMobile",_hx_index:2,__enum__:"hxd.SystemValue",toString:$estr}
};
hxd_SystemValue.__constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
hxd_SystemValue.__empty_constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
var hxd_Timer = function() { };
$hxClasses["hxd.Timer"] = hxd_Timer;
hxd_Timer.__name__ = "hxd.Timer";
hxd_Timer.update = function() {
	hxd_Timer.frameCount++;
	var newTime = HxOverrides.now() / 1000;
	hxd_Timer.elapsedTime = newTime - hxd_Timer.lastTimeStamp;
	hxd_Timer.lastTimeStamp = newTime;
	if(hxd_Timer.elapsedTime < hxd_Timer.maxDeltaTime) {
		var a = hxd_Timer.elapsedTime;
		hxd_Timer.currentDT = a + hxd_Timer.smoothFactor * (hxd_Timer.currentDT - a);
	} else {
		hxd_Timer.elapsedTime = 1 / hxd_Timer.wantedFPS;
	}
	hxd_Timer.dt = hxd_Timer.currentDT;
};
hxd_Timer.skip = function() {
	hxd_Timer.lastTimeStamp = HxOverrides.now() / 1000;
};
var hxd_Window = function(canvas,globalEvents) {
	this.canLockMouse = true;
	this.discardMouseUp = -1;
	this.discardMouseCaptureEvent = true;
	this.useScreenPixels = js_Browser.get_supported();
	this.curMouseY = 0.;
	this.curMouseX = 0.;
	this.mouseMode = hxd_impl_MouseMode.Absolute;
	var _gthis = this;
	var customCanvas = canvas != null;
	this.eventTargets = new haxe_ds_List();
	this.resizeEvents = new haxe_ds_List();
	this.dropTargets = new haxe_ds_List();
	if(!js_Browser.get_supported()) {
		this.canvasPos = { "width" : 0, "top" : 0, "left" : 0, "height" : 0};
		return;
	}
	if(canvas == null) {
		canvas = window.document.getElementById("webgl");
		if(canvas == null) {
			throw haxe_Exception.thrown("Missing canvas #webgl");
		}
		if(canvas.getAttribute("globalEvents") == "1") {
			globalEvents = true;
		}
	}
	this.canvas = canvas;
	this.propagateKeyEvents = globalEvents;
	var propagate = canvas.getAttribute("propagateKeyEvents");
	if(propagate != null) {
		this.propagateKeyEvents = propagate != "0" && propagate != "false";
	}
	this.focused = globalEvents;
	this.element = globalEvents ? window : canvas;
	this.canvasPos = canvas.getBoundingClientRect();
	if(customCanvas) {
		canvas.addEventListener("mousemove",$bind(this,this.onMouseMove));
	} else {
		window.addEventListener("mousemove",$bind(this,this.onMouseMove));
	}
	this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
	this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
	this.element.addEventListener("mouseleave",$bind(this,this.onMouseLeave));
	this.element.addEventListener("wheel",$bind(this,this.onMouseWheel));
	this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
	this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
	this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
	this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
	this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
	this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
	var _g = this;
	var b = false;
	var tmp = function() {
		_g.onFocus(b);
	};
	this.element.addEventListener("blur",tmp);
	var _g1 = this;
	var b1 = true;
	var tmp = function() {
		_g1.onFocus(b1);
	};
	this.element.addEventListener("focus",tmp);
	if(window.ResizeObserver != null) {
		this.observer = new ResizeObserver(function(e) {
			_gthis.checkResize();
		});
		this.observer.observe(canvas);
	}
	window.addEventListener("resize",$bind(this,this.checkResize));
	window.document.addEventListener("pointerlockchange",$bind(this,this.onPointerLockChange));
	canvas.addEventListener("contextmenu",function(e) {
		e.stopPropagation();
		if(e.button == 2) {
			e.preventDefault();
		}
		return false;
	});
	if(globalEvents) {
		canvas.addEventListener("mousedown",function(e) {
			_gthis.onMouseDown(e);
			e.stopPropagation();
			e.preventDefault();
		});
		this.element.addEventListener("contextmenu",function(e) {
			e.stopPropagation();
			e.preventDefault();
			return false;
		});
	} else {
		if(canvas.getAttribute("tabindex") == null) {
			canvas.setAttribute("tabindex","1");
		}
		canvas.style.outline = "none";
	}
	this.curW = this.get_width();
	this.curH = this.get_height();
};
$hxClasses["hxd.Window"] = hxd_Window;
hxd_Window.__name__ = "hxd.Window";
hxd_Window.getInstance = function() {
	if(hxd_Window.inst == null) {
		hxd_Window.inst = new hxd_Window();
	}
	return hxd_Window.inst;
};
hxd_Window.prototype = {
	checkResize: function() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		var cw = this.get_width();
		var ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	,onMouseModeChange: function(from,to) {
		return null;
	}
	,event: function(e) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var et = val;
			et(e);
		}
	}
	,addEventTarget: function(et) {
		this.eventTargets.add(et);
	}
	,removeEventTarget: function(et) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(e == et) {
				this.eventTargets.remove(e);
				break;
			}
		}
	}
	,addResizeEvent: function(f) {
		this.resizeEvents.push(f);
	}
	,removeResizeEvent: function(f) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(e == f) {
				this.resizeEvents.remove(f);
				break;
			}
		}
	}
	,onResize: function(e) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var r = val;
			r();
		}
	}
	,resize: function(width,height) {
	}
	,setCurrent: function() {
		hxd_Window.inst = this;
	}
	,getPixelRatio: function() {
		if(this.useScreenPixels) {
			return window.devicePixelRatio;
		} else {
			return 1;
		}
	}
	,get_width: function() {
		return Math.round(this.canvasPos.width * this.getPixelRatio());
	}
	,get_height: function() {
		return Math.round(this.canvasPos.height * this.getPixelRatio());
	}
	,get_mouseX: function() {
		return Math.round((this.curMouseX - this.canvasPos.left) * this.getPixelRatio());
	}
	,get_mouseY: function() {
		return Math.round((this.curMouseY - this.canvasPos.top) * this.getPixelRatio());
	}
	,set_mouseMode: function(v) {
		if(Type.enumEq(v,this.mouseMode)) {
			return v;
		}
		var forced = this.onMouseModeChange(this.mouseMode,v);
		if(forced != null) {
			v = forced;
		}
		var target = this.pointerLockTarget = this.canvas != null ? this.canvas : window.document.documentElement;
		if(v == hxd_impl_MouseMode.Absolute) {
			if(target.ownerDocument.pointerLockElement == target) {
				target.ownerDocument.exitPointerLock();
			}
		} else if(this.canLockMouse) {
			if(target.ownerDocument.pointerLockElement != target) {
				target.requestPointerLock();
			}
		}
		return this.mouseMode = v;
	}
	,onPointerLockChange: function(e) {
		if(this.mouseMode != hxd_impl_MouseMode.Absolute && this.pointerLockTarget.ownerDocument.pointerLockElement != this.pointerLockTarget) {
			this.canLockMouse = false;
			this.set_mouseMode(hxd_impl_MouseMode.Absolute);
			this.canLockMouse = true;
		}
	}
	,onMouseDown: function(e) {
		if(this.mouseMode == hxd_impl_MouseMode.Absolute) {
			if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
				this.onMouseMove(e);
			}
		} else {
			if(this.pointerLockTarget.ownerDocument.pointerLockElement != this.pointerLockTarget) {
				this.pointerLockTarget.requestPointerLock();
				if(this.discardMouseCaptureEvent) {
					this.discardMouseUp = e.button;
					return;
				}
			}
			if(e.movementX != 0 || e.movementY != 0) {
				this.onMouseMove(e);
			}
		}
		var ev = new hxd_Event(hxd_EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseUp: function(e) {
		if(this.discardMouseUp == e.button) {
			this.discardMouseUp = -1;
			return;
		}
		if(this.mouseMode == hxd_impl_MouseMode.Absolute ? e.clientX != this.curMouseX || e.clientY != this.curMouseY : e.movementX != 0 || e.movementY != 0) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseLeave: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EReleaseOutside,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseMove: function(e) {
		var _g = this.mouseMode;
		switch(_g._hx_index) {
		case 0:
			this.curMouseX = e.clientX;
			this.curMouseY = e.clientY;
			this.event(new hxd_Event(hxd_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
			break;
		case 1:
			var _g1 = _g.restorePos;
			var callback = _g.callback;
			if(this.pointerLockTarget.ownerDocument.pointerLockElement != this.pointerLockTarget) {
				return;
			}
			var ev = new hxd_Event(hxd_EventKind.EMove,e.movementX,e.movementY);
			callback(ev);
			if(!ev.cancel && ev.propagate) {
				ev.cancel = false;
				ev.propagate = false;
				ev.relX = this.curMouseX;
				ev.relY = this.curMouseY;
				this.event(ev);
			}
			break;
		case 2:
			var _g1 = _g.restorePos;
			if(this.pointerLockTarget.ownerDocument.pointerLockElement != this.pointerLockTarget) {
				return;
			}
			this.curMouseX += e.movementX;
			this.curMouseY += e.movementY;
			this.event(new hxd_Event(hxd_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
			break;
		}
	}
	,onMouseWheel: function(e) {
		e.preventDefault();
		var ev = new hxd_Event(hxd_EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = e.deltaY / 120;
		this.event(ev);
	}
	,onTouchStart: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchMove: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchEnd: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onKeyUp: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onKeyDown: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			switch(ev.keyCode) {
			case 8:case 9:case 16:case 17:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:
				e.preventDefault();
				break;
			default:
			}
			e.stopPropagation();
		}
	}
	,onKeyPress: function(e) {
		var ev = new hxd_Event(hxd_EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onFocus: function(b) {
		this.event(new hxd_Event(b ? hxd_EventKind.EFocus : hxd_EventKind.EFocusLost));
		this.focused = b;
	}
	,set_displayMode: function(m) {
		if(!js_Browser.get_supported()) {
			return m;
		}
		var doc = window.document;
		var elt = doc.documentElement;
		var fullscreen = m != hxd_DisplayMode.Windowed;
		if(doc.fullscreenElement == elt == fullscreen) {
			return hxd_DisplayMode.Windowed;
		}
		if(m != hxd_DisplayMode.Windowed) {
			elt.requestFullscreen();
		} else {
			doc.exitFullscreen();
		}
		return m;
	}
	,__class__: hxd_Window
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.get_supported = function() {
	if(typeof(window) != "undefined" && typeof(window.location) != "undefined") {
		return typeof(window.location.protocol) == "string";
	} else {
		return false;
	}
};
var hxd_System = function() { };
$hxClasses["hxd.System"] = hxd_System;
hxd_System.__name__ = "hxd.System";
hxd_System.setLoop = function(f) {
	if(!hxd_System.loopInit) {
		hxd_System.loopInit = true;
		hxd_System.browserLoop();
	}
	hxd_System.loopFunc = f;
};
hxd_System.browserLoop = function() {
	if(js_Browser.get_supported()) {
		var $window = window;
		var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
		if(hxd_System.fpsLimit > 0) {
			window.setTimeout(function() {
				return rqf(hxd_System.browserLoop);
			},1000 / hxd_System.fpsLimit);
		} else {
			rqf(hxd_System.browserLoop);
		}
	} else {
		throw haxe_Exception.thrown("Cannot use browserLoop without Browser support nor defining nodejs + hxnodejs");
	}
	if(hxd_System.loopFunc != null) {
		hxd_System.loopFunc();
	}
};
hxd_System.start = function(callb) {
	callb();
};
hxd_System.setNativeCursor = function(c) {
	if(hxd_System.currentNativeCursor != null && Type.enumEq(c,hxd_System.currentNativeCursor)) {
		return;
	}
	hxd_System.currentNativeCursor = c;
	hxd_System.currentCustomCursor = null;
	var canvas = hxd_Window.getInstance().canvas;
	if(canvas != null) {
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "pointer";
			break;
		case 2:
			tmp = "move";
			break;
		case 3:
			tmp = "text";
			break;
		case 4:
			tmp = "none";
			break;
		case 5:
			var cur = c.custom;
			if(cur.alloc == null) {
				cur.alloc = [];
				var _g = 0;
				var _g1 = cur.frames;
				while(_g < _g1.length) {
					var frame = _g1[_g];
					++_g;
					cur.alloc.push("url(\"" + frame.ctx.canvas.toDataURL("image/png") + "\") " + cur.offsetX + " " + cur.offsetY + ", default");
				}
			}
			if(cur.frames.length > 1) {
				hxd_System.currentCustomCursor = cur;
				cur.reset();
			}
			tmp = cur.alloc[cur.frameIndex];
			break;
		case 6:
			var _g = c.f;
			throw haxe_Exception.thrown("assert");
		}
		canvas.style.cursor = tmp;
	}
};
hxd_System.getDefaultFrameRate = function() {
	return 60.;
};
hxd_System.getValue = function(s) {
	switch(s._hx_index) {
	case 0:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	case 1:
		return true;
	case 2:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	}
};
hxd_System.updateCursor = function() {
	if(hxd_System.currentCustomCursor != null) {
		var change = hxd_System.currentCustomCursor.update(hxd_Timer.elapsedTime);
		if(change != -1) {
			var canvas = hxd_Window.getInstance().canvas;
			if(canvas != null) {
				canvas.style.cursor = hxd_System.currentCustomCursor.alloc[change];
			}
		}
	}
};
hxd_System.get_platform = function() {
	var ua = $global.navigator.userAgent.toLowerCase();
	if(ua.indexOf("android") >= 0) {
		return hxd_Platform.Android;
	} else if(ua.indexOf("ipad") >= 0 || ua.indexOf("iphone") >= 0 || ua.indexOf("ipod") >= 0) {
		return hxd_Platform.IOS;
	} else {
		return hxd_Platform.PC;
	}
};
var hxd_DisplayMode = $hxEnums["hxd.DisplayMode"] = { __ename__:true,__constructs__:null
	,Windowed: {_hx_name:"Windowed",_hx_index:0,__enum__:"hxd.DisplayMode",toString:$estr}
	,Borderless: {_hx_name:"Borderless",_hx_index:1,__enum__:"hxd.DisplayMode",toString:$estr}
	,Fullscreen: {_hx_name:"Fullscreen",_hx_index:2,__enum__:"hxd.DisplayMode",toString:$estr}
	,FullscreenResize: {_hx_name:"FullscreenResize",_hx_index:3,__enum__:"hxd.DisplayMode",toString:$estr}
};
hxd_DisplayMode.__constructs__ = [hxd_DisplayMode.Windowed,hxd_DisplayMode.Borderless,hxd_DisplayMode.Fullscreen,hxd_DisplayMode.FullscreenResize];
hxd_DisplayMode.__empty_constructs__ = [hxd_DisplayMode.Windowed,hxd_DisplayMode.Borderless,hxd_DisplayMode.Fullscreen,hxd_DisplayMode.FullscreenResize];
var hxd_earcut_EarNode = function() {
};
$hxClasses["hxd.earcut.EarNode"] = hxd_earcut_EarNode;
hxd_earcut_EarNode.__name__ = "hxd.earcut.EarNode";
hxd_earcut_EarNode.prototype = {
	__class__: hxd_earcut_EarNode
};
var hxd_earcut_Earcut = function() {
};
$hxClasses["hxd.earcut.Earcut"] = hxd_earcut_Earcut;
hxd_earcut_Earcut.__name__ = "hxd.earcut.Earcut";
hxd_earcut_Earcut.prototype = {
	triangulate_h2d_GPoint: function(points,holes) {
		var hasHoles = holes != null && holes.length > 0;
		var outerLen = hasHoles ? holes[0] : points.length;
		if(outerLen < 3) {
			return [];
		}
		var root = this.setLinkedList_triangulate_T(points,0,outerLen,true);
		if(holes != null) {
			root = this.eliminateHoles_triangulate_T(points,holes,root);
		}
		return this.triangulateNode(root,points.length > 80);
	}
	,eliminateHoles_triangulate_T: function(points,holes,root) {
		var queue = [];
		var _g = 0;
		var _g1 = holes.length;
		while(_g < _g1) {
			var i = _g++;
			var s = holes[i];
			var e = i == holes.length - 1 ? points.length : holes[i + 1];
			var node = this.setLinkedList_eliminateHoles_T(points,s,e,false);
			if(node == node.next) {
				node.steiner = true;
			}
			queue.push(this.getLeftmost(node));
		}
		queue.sort($bind(this,this.compareX));
		var _g = 0;
		while(_g < queue.length) {
			var q = queue[_g];
			++_g;
			this.eliminateHole(q,root);
			root = this.filterPoints(root,root.next);
		}
		return root;
	}
	,setLinkedList_eliminateHoles_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g = start;
			var _g1 = end;
			while(_g < _g1) {
				var i = _g++;
				var p = points[i];
				var x = p.x;
				var y = p.y;
				var n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
			}
		} else {
			var i = end - 1;
			while(i >= start) {
				var p = points[i];
				var x = p.x;
				var y = p.y;
				var n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
				--i;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,setLinkedList_triangulate_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g = start;
			var _g1 = end;
			while(_g < _g1) {
				var i = _g++;
				var p = points[i];
				var x = p.x;
				var y = p.y;
				var n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
			}
		} else {
			var i = end - 1;
			while(i >= start) {
				var p = points[i];
				var x = p.x;
				var y = p.y;
				var n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
				--i;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,triangulateNode: function(root,useZOrder) {
		this.triangles = [];
		root = this.filterPoints(root);
		if(useZOrder && root != null) {
			var maxX = root.x;
			this.minX = maxX;
			var maxY = root.y;
			this.minY = maxY;
			var p = root.next;
			while(p != root) {
				var x = p.x;
				var y = p.y;
				if(x < this.minX) {
					this.minX = x;
				}
				if(y < this.minY) {
					this.minY = y;
				}
				if(x > maxX) {
					maxX = x;
				}
				if(y > maxY) {
					maxY = y;
				}
				p = p.next;
			}
			var a = maxX - this.minX;
			var b = maxY - this.minY;
			this.size = a < b ? b : a;
			this.hasSize = true;
		} else {
			this.hasSize = false;
		}
		this.earcutLinked(root);
		var result = this.triangles;
		this.triangles = null;
		var n = this.allocated;
		if(this.cache != null) {
			while(n != this.cache) n = n.allocNext;
			n = n.allocNext;
		}
		while(n != null) {
			n.next = this.cache;
			this.cache = n;
			n = n.allocNext;
		}
		return result;
	}
	,eliminateHole: function(hole,root) {
		root = this.findHoleBridge(hole,root);
		if(root != null) {
			var b = this.splitPolygon(root,hole);
			this.filterPoints(b,b.next);
		}
	}
	,findHoleBridge: function(hole,root) {
		var p = root;
		var hx = hole.x;
		var hy = hole.y;
		var qx = -Infinity;
		var m = null;
		do {
			if(hy <= p.y && hy >= p.next.y) {
				var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
				if(x <= hx && x > qx) {
					qx = x;
					m = p.x < p.next.x ? p : p.next;
				}
			}
			p = p.next;
		} while(p != root);
		if(m == null) {
			return null;
		}
		var stop = m;
		var tanMin = Infinity;
		var tan;
		p = m.next;
		while(p != stop) {
			var tmp;
			if(hx >= p.x && p.x >= m.x) {
				var ax = hy < m.y ? hx : qx;
				var bx = m.x;
				var by = m.y;
				var cx = hy < m.y ? qx : hx;
				var px = p.x;
				var py = p.y;
				tmp = (cx - px) * (hy - py) - (ax - px) * (hy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (hy - py) >= 0 && (bx - px) * (hy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				var f = hy - p.y;
				tan = (f < 0 ? -f : f) / (hx - p.x);
				var tmp1;
				if(tan < tanMin || tan == tanMin && p.x > m.x) {
					var p1 = p.prev;
					var r = p.next;
					if((p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) < 0) {
						var r1 = p.next;
						if((hole.y - p.y) * (r1.x - hole.x) - (hole.x - p.x) * (r1.y - hole.y) >= 0) {
							var q = p.prev;
							tmp1 = (q.y - p.y) * (hole.x - q.x) - (q.x - p.x) * (hole.y - q.y) >= 0;
						} else {
							tmp1 = false;
						}
					} else {
						var r2 = p.prev;
						if(!((hole.y - p.y) * (r2.x - hole.x) - (hole.x - p.x) * (r2.y - hole.y) < 0)) {
							var q1 = p.next;
							tmp1 = (q1.y - p.y) * (hole.x - q1.x) - (q1.x - p.x) * (hole.y - q1.y) < 0;
						} else {
							tmp1 = true;
						}
					}
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					m = p;
					tanMin = tan;
				}
			}
			p = p.next;
		}
		return m;
	}
	,getLeftmost: function(node) {
		var p = node;
		var leftmost = node;
		do {
			if(p.x < leftmost.x) {
				leftmost = p;
			}
			p = p.next;
		} while(p != node);
		return leftmost;
	}
	,compareX: function(a,b) {
		if(a.x - b.x > 0) {
			return 1;
		} else {
			return -1;
		}
	}
	,filterPoints: function(start,end) {
		if(start == null) {
			return start;
		}
		if(end == null) {
			end = start;
		}
		var p = start;
		var again;
		do {
			again = false;
			var tmp;
			if(!p.steiner) {
				var p2 = p.next;
				if(!(p.x == p2.x && p.y == p2.y)) {
					var p1 = p.prev;
					var r = p.next;
					tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) == 0;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				end = p.prev;
				p = end;
				if(p == p.next) {
					return null;
				}
				again = true;
			} else {
				p = p.next;
			}
		} while(again || p != end);
		return end;
	}
	,earcutLinked: function(ear,pass) {
		if(pass == null) {
			pass = 0;
		}
		if(ear == null) {
			return;
		}
		if(pass == 0 && this.hasSize) {
			this.indexCurve(ear);
		}
		var stop = ear;
		var prev;
		var next;
		while(ear.prev != ear.next) {
			prev = ear.prev;
			next = ear.next;
			if(this.hasSize ? this.isEarHashed(ear) : this.isEar(ear)) {
				this.triangles.push(prev.i);
				this.triangles.push(ear.i);
				this.triangles.push(next.i);
				ear.next.prev = ear.prev;
				ear.prev.next = ear.next;
				if(ear.prevZ != null) {
					ear.prevZ.nextZ = ear.nextZ;
				}
				if(ear.nextZ != null) {
					ear.nextZ.prevZ = ear.prevZ;
				}
				ear = next.next;
				stop = next.next;
				continue;
			}
			ear = next;
			if(ear == stop) {
				switch(pass) {
				case 0:
					this.earcutLinked(this.filterPoints(ear),1);
					break;
				case 1:
					ear = this.cureLocalIntersections(ear);
					this.earcutLinked(ear,2);
					break;
				case 2:
					this.splitEarcut(ear);
					break;
				}
				break;
			}
		}
	}
	,isEar: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var p = ear.next.next;
		while(p != ear.prev) {
			var tmp;
			var ax = a.x;
			var ay = a.y;
			var bx = b.x;
			var by = b.y;
			var cx = c.x;
			var cy = c.y;
			var px = p.x;
			var py = p.y;
			if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.next;
		}
		return true;
	}
	,isEarHashed: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x;
		var minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y;
		var maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x;
		var maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
		var x = 32767 * (minTX - this.minX) / this.size | 0;
		var y = 32767 * (minTY - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		var minZ = x | y << 1;
		var x = 32767 * (maxTX - this.minX) / this.size | 0;
		var y = 32767 * (maxTY - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		var maxZ = x | y << 1;
		var p = ear.nextZ;
		while(p != null && p.z <= maxZ) {
			var tmp;
			var tmp1;
			if(p != ear.prev && p != ear.next) {
				var ax = a.x;
				var ay = a.y;
				var bx = b.x;
				var by = b.y;
				var cx = c.x;
				var cy = c.y;
				var px = p.x;
				var py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.nextZ;
		}
		p = ear.prevZ;
		while(p != null && p.z >= minZ) {
			var tmp;
			var tmp1;
			if(p != ear.prev && p != ear.next) {
				var ax = a.x;
				var ay = a.y;
				var bx = b.x;
				var by = b.y;
				var cx = c.x;
				var cy = c.y;
				var px = p.x;
				var py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.prevZ;
		}
		return true;
	}
	,cureLocalIntersections: function(start) {
		var p = start;
		do {
			var a = p.prev;
			var b = p.next.next;
			var tmp;
			var tmp1;
			var p2 = p.next;
			if((p.y - a.y) * (p2.x - p.x) - (p.x - a.x) * (p2.y - p.y) > 0 != (p.y - a.y) * (b.x - p.x) - (p.x - a.x) * (b.y - p.y) > 0 && (b.y - p2.y) * (a.x - b.x) - (b.x - p2.x) * (a.y - b.y) > 0 != (b.y - p2.y) * (p.x - b.x) - (b.x - p2.x) * (p.y - b.y) > 0) {
				var p1 = a.prev;
				var r = a.next;
				if((a.y - p1.y) * (r.x - a.x) - (a.x - p1.x) * (r.y - a.y) < 0) {
					var r1 = a.next;
					if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r2 = a.prev;
					if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
						var q1 = a.next;
						tmp1 = (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p3 = b.prev;
				var r3 = b.next;
				if((b.y - p3.y) * (r3.x - b.x) - (b.x - p3.x) * (r3.y - b.y) < 0) {
					var r4 = b.next;
					if((a.y - b.y) * (r4.x - a.x) - (a.x - b.x) * (r4.y - a.y) >= 0) {
						var q2 = b.prev;
						tmp = (q2.y - b.y) * (a.x - q2.x) - (q2.x - b.x) * (a.y - q2.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r5 = b.prev;
					if(!((a.y - b.y) * (r5.x - a.x) - (a.x - b.x) * (r5.y - a.y) < 0)) {
						var q3 = b.next;
						tmp = (q3.y - b.y) * (a.x - q3.x) - (q3.x - b.x) * (a.y - q3.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				this.triangles.push(a.i);
				this.triangles.push(p.i);
				this.triangles.push(b.i);
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				var p4 = p.next;
				p4.next.prev = p4.prev;
				p4.prev.next = p4.next;
				if(p4.prevZ != null) {
					p4.prevZ.nextZ = p4.nextZ;
				}
				if(p4.nextZ != null) {
					p4.nextZ.prevZ = p4.prevZ;
				}
				start = b;
				p = start;
			}
			p = p.next;
		} while(p != start);
		return p;
	}
	,splitEarcut: function(start) {
		var a = start;
		do {
			var b = a.next.next;
			while(b != a.prev) {
				if(a.i != b.i && this.isValidDiagonal(a,b)) {
					var c = this.splitPolygon(a,b);
					a = this.filterPoints(a,a.next);
					c = this.filterPoints(c,c.next);
					this.earcutLinked(a);
					this.earcutLinked(c);
					return;
				}
				b = b.next;
			}
			a = a.next;
		} while(a != start);
	}
	,splitPolygon: function(a,b) {
		var i = a.i;
		var x = a.x;
		var y = a.y;
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var a2 = n;
		var i = b.i;
		var x = b.x;
		var y = b.y;
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var b2 = n;
		var an = a.next;
		var bp = b.prev;
		a.next = b;
		b.prev = a;
		a2.next = an;
		an.prev = a2;
		b2.next = a2;
		a2.prev = b2;
		bp.next = b2;
		b2.prev = bp;
		return b2;
	}
	,isValidDiagonal: function(a,b) {
		if(!(a.x == b.x && a.y == b.y)) {
			var tmp;
			var tmp1;
			if(a.next.i != b.i && a.prev.i != b.i && !this.intersectsPolygon(a,b)) {
				var p = a.prev;
				var r = a.next;
				if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
					var r = a.next;
					if((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r = a.prev;
					if(!((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) < 0)) {
						var q = a.next;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p = b.prev;
				var r = b.next;
				if((b.y - p.y) * (r.x - b.x) - (b.x - p.x) * (r.y - b.y) < 0) {
					var r = b.next;
					if((a.y - b.y) * (r.x - a.x) - (a.x - b.x) * (r.y - a.y) >= 0) {
						var q = b.prev;
						tmp = (q.y - b.y) * (a.x - q.x) - (q.x - b.x) * (a.y - q.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r = b.prev;
					if(!((a.y - b.y) * (r.x - a.x) - (a.x - b.x) * (r.y - a.y) < 0)) {
						var q = b.next;
						tmp = (q.y - b.y) * (a.x - q.x) - (q.x - b.x) * (a.y - q.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				return this.middleInside(a,b);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,middleInside: function(a,b) {
		var p = a;
		var inside = false;
		var px = (a.x + b.x) / 2;
		var py = (a.y + b.y) / 2;
		do {
			if(p.y > py != p.next.y > py && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) {
				inside = !inside;
			}
			p = p.next;
		} while(p != a);
		return inside;
	}
	,intersectsPolygon: function(a,b) {
		var p = a;
		do {
			var tmp;
			if(p.i != a.i && p.next.i != a.i && p.i != b.i && p.next.i != b.i) {
				var q1 = p.next;
				tmp = (q1.y - p.y) * (a.x - q1.x) - (q1.x - p.x) * (a.y - q1.y) > 0 != (q1.y - p.y) * (b.x - q1.x) - (q1.x - p.x) * (b.y - q1.y) > 0 && (b.y - a.y) * (p.x - b.x) - (b.x - a.x) * (p.y - b.y) > 0 != (b.y - a.y) * (q1.x - b.x) - (b.x - a.x) * (q1.y - b.y) > 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return true;
			}
			p = p.next;
		} while(p != a);
		return false;
	}
	,indexCurve: function(start) {
		var p = start;
		do {
			if(p.z < 0) {
				var x = 32767 * (p.x - this.minX) / this.size | 0;
				var y = 32767 * (p.y - this.minY) / this.size | 0;
				x = (x | x << 8) & 16711935;
				x = (x | x << 4) & 252645135;
				x = (x | x << 2) & 858993459;
				x = (x | x << 1) & 1431655765;
				y = (y | y << 8) & 16711935;
				y = (y | y << 4) & 252645135;
				y = (y | y << 2) & 858993459;
				y = (y | y << 1) & 1431655765;
				p.z = x | y << 1;
			}
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;
		} while(p != start);
		p.prevZ.nextZ = null;
		p.prevZ = null;
		this.sortLinked(p);
	}
	,sortLinked: function(list) {
		var p;
		var q;
		var e;
		var tail;
		var numMerges;
		var pSize;
		var qSize;
		var inSize = 1;
		do {
			p = list;
			list = null;
			tail = null;
			numMerges = 0;
			while(p != null) {
				++numMerges;
				q = p;
				pSize = 0;
				var _g = 0;
				var _g1 = inSize;
				while(_g < _g1) {
					var i = _g++;
					++pSize;
					q = q.nextZ;
					if(q == null) {
						break;
					}
				}
				qSize = inSize;
				while(pSize > 0 || qSize > 0 && q != null) {
					if(pSize == 0) {
						e = q;
						q = q.nextZ;
						--qSize;
					} else if(qSize == 0 || q == null) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else if(p.z <= q.z) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else {
						e = q;
						q = q.nextZ;
						--qSize;
					}
					if(tail != null) {
						tail.nextZ = e;
					} else {
						list = e;
					}
					e.prevZ = tail;
					tail = e;
				}
				p = q;
			}
			tail.nextZ = null;
			inSize *= 2;
		} while(numMerges > 1);
		return list;
	}
	,__class__: hxd_earcut_Earcut
};
var hxd_fmt_bfnt_FontParser = function() { };
$hxClasses["hxd.fmt.bfnt.FontParser"] = hxd_fmt_bfnt_FontParser;
hxd_fmt_bfnt_FontParser.__name__ = "hxd.fmt.bfnt.FontParser";
hxd_fmt_bfnt_FontParser.parse = function(bytes,path,resolveTile) {
	var tile = null;
	var font = new h2d_Font(null,0);
	var glyphs = font.glyphs;
	font.baseLine = 0;
	var _g = bytes.getInt32(0);
	switch(_g) {
	case 54938946:
		var bytes1 = new haxe_io_BytesInput(bytes);
		bytes1.set_position(bytes1.pos + 4);
		var pageCount = 0;
		while(bytes1.pos < bytes1.totlen) {
			var id = bytes1.readByte();
			var length = bytes1.readInt32();
			var pos = bytes1.pos;
			switch(id) {
			case 1:
				font.size = font.initSize = bytes1.readInt16();
				bytes1.set_position(bytes1.pos + 12);
				font.name = bytes1.readUntil(0);
				break;
			case 2:
				font.lineHeight = bytes1.readUInt16();
				font.baseLine = bytes1.readUInt16();
				bytes1.set_position(bytes1.pos + 4);
				pageCount = bytes1.readUInt16();
				if(pageCount != 1) {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 220, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
				break;
			case 3:
				var name = bytes1.readUntil(0);
				try {
					font.tilePath = name;
					tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),name]));
				} catch( _g1 ) {
					haxe_Log.trace("Warning: Could not find referenced font texture at \"" + name + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 26, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
					font.tilePath = new haxe_io_Path(path).file + ".png";
					tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
				}
				break;
			case 4:
				var count = length / 20 | 0;
				while(count > 0) {
					var cid = bytes1.readInt32();
					var t = tile.sub(bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readInt16(),bytes1.readInt16());
					var fc = new h2d_FontChar(t,bytes1.readInt16());
					glyphs.h[cid] = fc;
					bytes1.set_position(bytes1.pos + 2);
					--count;
				}
				break;
			case 5:
				var count1 = length / 10 | 0;
				while(count1 > 0) {
					var first = bytes1.readInt32();
					var key = bytes1.readInt32();
					var fc1 = glyphs.h[key];
					if(fc1 != null) {
						fc1.addKerning(first,bytes1.readInt16());
					} else {
						bytes1.set_position(bytes1.pos + 2);
					}
					--count1;
				}
				break;
			}
			bytes1.set_position(pos + length);
		}
		break;
	case 1414415938:
		return new hxd_fmt_bfnt_Reader(new haxe_io_BytesInput(bytes)).read(function(tp) {
			try {
				font.tilePath = tp;
				tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),tp]));
			} catch( _g ) {
				haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tp + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 26, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				font.tilePath = new haxe_io_Path(path).file + ".png";
				tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
			}
			return tile;
		});
	case 1836597052:case 1852794428:
		var xml = Xml.parse(bytes.toString());
		var x = xml.firstElement();
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
		}
		var xml = x;
		if(haxe_xml__$Access_HasNodeAccess.resolve(xml,"info")) {
			var tmp = haxe_xml__$Access_NodeAccess.resolve(xml,"info");
			font.name = haxe_xml__$Access_AttribAccess.resolve(tmp,"face");
			var tmp = haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"info"),"size");
			font.size = font.initSize = Std.parseInt(tmp);
			var tmp = haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"common"),"lineHeight");
			font.lineHeight = Std.parseInt(tmp);
			var tmp = haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"common"),"base");
			font.baseLine = Std.parseInt(tmp);
			var p = haxe_xml__$Access_NodeAccess.resolve(xml,"pages").elements();
			while(p.hasNext()) {
				var p1 = p.next();
				if(haxe_xml__$Access_AttribAccess.resolve(p1,"id") == "0") {
					var tilePath = haxe_xml__$Access_AttribAccess.resolve(p1,"file");
					try {
						font.tilePath = tilePath;
						tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),tilePath]));
					} catch( _g1 ) {
						haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 26, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						font.tilePath = new haxe_io_Path(path).file + ".png";
						tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
					}
				} else {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 62, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
			}
			var chars = haxe_xml__$Access_NodeAccess.resolve(xml,"chars").elements();
			var c = chars;
			while(c.hasNext()) {
				var c1 = c.next();
				var t = tile.sub(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"x")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"y")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"width")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"height")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"xoffset")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"yoffset")));
				var fc = new h2d_FontChar(t,Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"xadvance")));
				var kerns = haxe_xml__$Access_NodeAccess.resolve(xml,"kernings").elements();
				var k = kerns;
				while(k.hasNext()) {
					var k1 = k.next();
					if(haxe_xml__$Access_AttribAccess.resolve(k1,"second") == haxe_xml__$Access_AttribAccess.resolve(c1,"id")) {
						fc.addKerning(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(k1,"first")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(k1,"amount")));
					}
				}
				var key = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"id"));
				glyphs.h[key] = fc;
			}
		} else {
			font.tilePath = new haxe_io_Path(path).file + ".png";
			tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
			font.name = haxe_xml__$Access_AttribAccess.resolve(xml,"family");
			var tmp = haxe_xml__$Access_AttribAccess.resolve(xml,"size");
			font.size = font.initSize = Std.parseInt(tmp);
			var tmp = haxe_xml__$Access_AttribAccess.resolve(xml,"height");
			font.lineHeight = Std.parseInt(tmp);
			var kernings = [];
			var c = xml.elements();
			while(c.hasNext()) {
				var c1 = c.next();
				var r = haxe_xml__$Access_AttribAccess.resolve(c1,"rect").split(" ");
				var o = haxe_xml__$Access_AttribAccess.resolve(c1,"offset").split(" ");
				var t = tile.sub(Std.parseInt(r[0]),Std.parseInt(r[1]),Std.parseInt(r[2]),Std.parseInt(r[3]),Std.parseInt(o[0]),Std.parseInt(o[1]));
				var fc = new h2d_FontChar(t,Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"width")));
				var code = haxe_xml__$Access_AttribAccess.resolve(c1,"code");
				var code1 = StringTools.startsWith(code,"&#") ? Std.parseInt(HxOverrides.substr(code,2,code.length - 3)) : HxOverrides.cca(code,0);
				var k = c1.elements();
				while(k.hasNext()) {
					var k1 = k.next();
					var code2 = haxe_xml__$Access_AttribAccess.resolve(k1,"id");
					var next = StringTools.startsWith(code2,"&#") ? Std.parseInt(HxOverrides.substr(code2,2,code2.length - 3)) : HxOverrides.cca(code2,0);
					var adv = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(k1,"advance"));
					if(glyphs.h.hasOwnProperty(next)) {
						glyphs.h[next].addKerning(code1,adv);
					} else {
						kernings.push({ prev : code1, next : next, adv : adv});
					}
				}
				glyphs.h[code1] = fc;
			}
			var _g1 = 0;
			while(_g1 < kernings.length) {
				var k = kernings[_g1];
				++_g1;
				var g = glyphs.h[k.next];
				if(g == null) {
					continue;
				}
				g.addKerning(k.prev,k.adv);
			}
		}
		break;
	case 1868983913:
		var lines = bytes.toString().split("\n");
		var reg = new EReg(" *?([0-9a-zA-Z]+)=(\"[^\"]+\"|.+?)(?:[ \r]|$)","");
		var idx;
		var pageCount = 0;
		var _g1 = 0;
		while(_g1 < lines.length) {
			var line = lines[_g1];
			++_g1;
			idx = line.indexOf(" ");
			switch(HxOverrides.substr(line,0,idx)) {
			case "char":
				var id = 0;
				var x = 0;
				var y = 0;
				var width = 0;
				var height = 0;
				var xoffset = 0;
				var yoffset = 0;
				var xadvance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "height":
						var v = reg.matched(2);
						height = Std.parseInt(HxOverrides.cca(v,0) == 34 ? v.substring(1,v.length - 1) : v);
						break;
					case "id":
						var v1 = reg.matched(2);
						id = Std.parseInt(HxOverrides.cca(v1,0) == 34 ? v1.substring(1,v1.length - 1) : v1);
						break;
					case "width":
						var v2 = reg.matched(2);
						width = Std.parseInt(HxOverrides.cca(v2,0) == 34 ? v2.substring(1,v2.length - 1) : v2);
						break;
					case "x":
						var v3 = reg.matched(2);
						x = Std.parseInt(HxOverrides.cca(v3,0) == 34 ? v3.substring(1,v3.length - 1) : v3);
						break;
					case "xadvance":
						var v4 = reg.matched(2);
						xadvance = Std.parseInt(HxOverrides.cca(v4,0) == 34 ? v4.substring(1,v4.length - 1) : v4);
						break;
					case "xoffset":
						var v5 = reg.matched(2);
						xoffset = Std.parseInt(HxOverrides.cca(v5,0) == 34 ? v5.substring(1,v5.length - 1) : v5);
						break;
					case "y":
						var v6 = reg.matched(2);
						y = Std.parseInt(HxOverrides.cca(v6,0) == 34 ? v6.substring(1,v6.length - 1) : v6);
						break;
					case "yoffset":
						var v7 = reg.matched(2);
						yoffset = Std.parseInt(HxOverrides.cca(v7,0) == 34 ? v7.substring(1,v7.length - 1) : v7);
						break;
					}
					var pos = reg.matchedPos();
					idx = pos.pos + pos.len;
				}
				var t = tile.sub(x,y,width,height,xoffset,yoffset);
				var fc = new h2d_FontChar(t,xadvance);
				glyphs.h[id] = fc;
				break;
			case "common":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "base":
						var v8 = reg.matched(2);
						font.baseLine = Std.parseInt(HxOverrides.cca(v8,0) == 34 ? v8.substring(1,v8.length - 1) : v8);
						break;
					case "lineHeight":
						var v9 = reg.matched(2);
						font.lineHeight = Std.parseInt(HxOverrides.cca(v9,0) == 34 ? v9.substring(1,v9.length - 1) : v9);
						break;
					case "pages":
						var v10 = reg.matched(2);
						pageCount = Std.parseInt(HxOverrides.cca(v10,0) == 34 ? v10.substring(1,v10.length - 1) : v10);
						if(pageCount != 1) {
							haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 153, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						}
						break;
					}
					var pos1 = reg.matchedPos();
					idx = pos1.pos + pos1.len;
				}
				break;
			case "info":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "face":
						var v11 = reg.matched(2);
						font.name = HxOverrides.cca(v11,0) == 34 ? v11.substring(1,v11.length - 1) : v11;
						break;
					case "size":
						var v12 = reg.matched(2);
						font.size = font.initSize = Std.parseInt(HxOverrides.cca(v12,0) == 34 ? v12.substring(1,v12.length - 1) : v12);
						break;
					}
					var pos2 = reg.matchedPos();
					idx = pos2.pos + pos2.len;
				}
				break;
			case "kerning":
				var first = 0;
				var second = 0;
				var advance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "amount":
						var v13 = reg.matched(2);
						advance = Std.parseInt(HxOverrides.cca(v13,0) == 34 ? v13.substring(1,v13.length - 1) : v13);
						break;
					case "first":
						var v14 = reg.matched(2);
						first = Std.parseInt(HxOverrides.cca(v14,0) == 34 ? v14.substring(1,v14.length - 1) : v14);
						break;
					case "second":
						var v15 = reg.matched(2);
						second = Std.parseInt(HxOverrides.cca(v15,0) == 34 ? v15.substring(1,v15.length - 1) : v15);
						break;
					}
					var pos3 = reg.matchedPos();
					idx = pos3.pos + pos3.len;
				}
				var fc1 = glyphs.h[second];
				if(fc1 != null) {
					fc1.addKerning(first,advance);
				}
				break;
			case "page":
				while(idx < line.length && reg.matchSub(line,idx)) {
					if(reg.matched(1) == "file") {
						var v16 = reg.matched(2);
						var tilePath = HxOverrides.cca(v16,0) == 34 ? v16.substring(1,v16.length - 1) : v16;
						try {
							font.tilePath = tilePath;
							tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),tilePath]));
						} catch( _g2 ) {
							haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 26, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
							font.tilePath = new haxe_io_Path(path).file + ".png";
							tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
						}
					}
					var pos4 = reg.matchedPos();
					idx = pos4.pos + pos4.len;
				}
				break;
			}
		}
		break;
	default:
		var sign = _g;
		throw haxe_Exception.thrown("Unknown font signature " + StringTools.hex(sign,8));
	}
	if(glyphs.h[32] == null) {
		var value = new h2d_FontChar(tile.sub(0,0,0,0),font.size >> 1);
		glyphs.h[32] = value;
	}
	font.tile = tile;
	if(font.baseLine == 0) {
		font.baseLine = font.calcBaseLine();
	}
	var fallback = glyphs.h[65533];
	if(fallback == null) {
		fallback = glyphs.h[9633];
	}
	if(fallback == null) {
		fallback = glyphs.h[63];
	}
	if(fallback != null) {
		font.defaultChar = fallback;
	}
	return font;
};
var hxd_fmt_bfnt_Reader = function(i) {
	this.i = i;
};
$hxClasses["hxd.fmt.bfnt.Reader"] = hxd_fmt_bfnt_Reader;
hxd_fmt_bfnt_Reader.__name__ = "hxd.fmt.bfnt.Reader";
hxd_fmt_bfnt_Reader.prototype = {
	read: function(resolveTile) {
		if(this.i.readString(4) != "BFNT" || this.i.readByte() != 0) {
			throw haxe_Exception.thrown("Not a BFNT file!");
		}
		var font = null;
		var _g = this.i.readByte();
		if(_g == 1) {
			font = new h2d_Font(this.i.readString(this.i.readUInt16()),this.i.readInt16());
			font.tilePath = this.i.readString(this.i.readUInt16());
			var tile = font.tile = resolveTile(font.tilePath);
			font.lineHeight = this.i.readInt16();
			font.baseLine = this.i.readInt16();
			var defaultChar = this.i.readInt32();
			var id;
			while(true) {
				id = this.i.readInt32();
				if(!(id != 0)) {
					break;
				}
				var t = tile.sub(this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readInt16(),this.i.readInt16());
				var glyph = new h2d_FontChar(t,this.i.readInt16());
				font.glyphs.h[id] = glyph;
				if(id == defaultChar) {
					font.defaultChar = glyph;
				}
				var prevChar;
				while(true) {
					prevChar = this.i.readInt32();
					if(!(prevChar != 0)) {
						break;
					}
					glyph.addKerning(prevChar,this.i.readInt16());
				}
			}
		} else {
			var ver = _g;
			throw haxe_Exception.thrown("Unknown BFNT version: " + ver);
		}
		return font;
	}
	,__class__: hxd_fmt_bfnt_Reader
};
var hxd_fmt_hdr_Reader = function() { };
$hxClasses["hxd.fmt.hdr.Reader"] = hxd_fmt_hdr_Reader;
hxd_fmt_hdr_Reader.__name__ = "hxd.fmt.hdr.Reader";
hxd_fmt_hdr_Reader.decode = function(bytes,sRGB) {
	var f = new haxe_io_BytesInput(bytes);
	var width = 0;
	var height = 0;
	var keys_h = Object.create(null);
	while(true) {
		var line = f.readLine();
		if(line == "") {
			break;
		}
		if(HxOverrides.cca(line,0) == 35) {
			continue;
		}
		var nameValue = line.split("=");
		if(nameValue.length > 1) {
			keys_h[nameValue.shift()] = nameValue.join("=");
		}
	}
	var parts = f.readLine().split(" ");
	height = Std.parseInt(parts[1]);
	width = Std.parseInt(parts[3]);
	var gamma = keys_h["GAMMA"] == "1";
	var data = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 * 4));
	var exposure = 1.0;
	var exp = keys_h["EXPOSURE"];
	if(exp != null) {
		var exp1 = parseFloat(exp);
		if(exp1 < 1e-12 || exp1 < 1e12) {
			exposure = exp1;
		}
	}
	var gammaCorrect = sRGB ? 1 : 0.45454545454545453;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 256) {
		var e = _g1++;
		_g.push(Math.pow(e,gammaCorrect));
	}
	var gammaVals = _g;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 256) {
		var e = _g1++;
		_g.push(Math.pow(Math.pow(2,e - 128) / (256 * exposure),gammaCorrect));
	}
	var exps = _g;
	var _g = keys_h["FORMAT"];
	if(_g == null) {
		var fmt = _g;
		throw haxe_Exception.thrown("Unsupported HDR format " + fmt);
	} else if(_g == "32-bit_rle_rgbe") {
		var dataPos = f.pos;
		var scanLen = width * 4;
		var scanLine = new haxe_io_Bytes(new ArrayBuffer(scanLen));
		var widthBE = width >> 8 | (width & 255) << 8;
		var _g1 = 0;
		var _g2 = height;
		while(_g1 < _g2) {
			var y = _g1++;
			var h = bytes.getInt32(dataPos);
			if((h & 65535) != 514 || h >>> 16 != widthBE) {
				scanLine.blit(0,bytes,dataPos,width * 4);
				dataPos += width * 4;
			} else {
				dataPos += 4;
				var p = 0;
				var end = width * 4;
				while(p < end) {
					var len = bytes.b[dataPos++];
					if(len > 128) {
						len -= 128;
						scanLine.fill(p,len,bytes.b[dataPos++]);
					} else {
						scanLine.blit(p,bytes,dataPos,len);
						dataPos += len;
					}
					p += len;
				}
			}
			var pos = y * width * 16;
			var _g3 = 0;
			var _g4 = width;
			while(_g3 < _g4) {
				var x = _g3++;
				var e = exps[scanLine.b[x + width * 3]];
				data.setFloat(pos,gammaVals[scanLine.b[x]] * e);
				pos += 4;
				data.setFloat(pos,gammaVals[scanLine.b[x + width]] * e);
				pos += 4;
				data.setFloat(pos,gammaVals[scanLine.b[x + (width << 1)]] * e);
				pos += 4;
				data.setFloat(pos,1.0);
				pos += 4;
			}
		}
	} else {
		var fmt = _g;
		throw haxe_Exception.thrown("Unsupported HDR format " + fmt);
	}
	return { width : width, height : height, bytes : data, gamma : gamma};
};
var hxd_fs_FileEntry = function() { };
$hxClasses["hxd.fs.FileEntry"] = hxd_fs_FileEntry;
hxd_fs_FileEntry.__name__ = "hxd.fs.FileEntry";
hxd_fs_FileEntry.prototype = {
	getBytes: function() {
		return null;
	}
	,readBytes: function(out,outPos,pos,len) {
		throw haxe_Exception.thrown("readBytes() not implemented");
	}
	,fetchBytes: function(pos,len) {
		var bytes = hxd_fs_FileEntry.TMP_BYTES;
		if(bytes == null || bytes.length < len) {
			var allocSize = len + 65535 & -65536;
			bytes = new haxe_io_Bytes(new ArrayBuffer(allocSize));
			hxd_fs_FileEntry.TMP_BYTES = bytes;
		}
		this.readFull(bytes,pos,len);
		return bytes;
	}
	,readFull: function(bytes,pos,len) {
		if(this.readBytes(bytes,0,pos,len) < len) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
	}
	,getText: function() {
		return this.getBytes().toString();
	}
	,open: function() {
		return new hxd_fs_FileInput(this);
	}
	,load: function(onReady) {
		if(!this.get_isAvailable()) {
			throw haxe_Exception.thrown("load() not implemented");
		} else if(onReady != null) {
			onReady();
		}
	}
	,loadBitmap: function(onLoaded) {
		throw haxe_Exception.thrown("loadBitmap() not implemented");
	}
	,watch: function(onChanged) {
	}
	,get_isAvailable: function() {
		return true;
	}
	,get_size: function() {
		return 0;
	}
	,get_path: function() {
		throw haxe_Exception.thrown("path() not implemented");
	}
	,get_extension: function() {
		var idx = this.name.lastIndexOf(".");
		if(idx < 0) {
			return "";
		}
		return HxOverrides.substr(this.name,idx + 1,null).toLowerCase();
	}
	,__class__: hxd_fs_FileEntry
};
var hxd_fs_BytesFileEntry = function(path,bytes) {
	this.fullPath = path;
	this.name = path.split("/").pop();
	this.bytes = bytes;
};
$hxClasses["hxd.fs.BytesFileEntry"] = hxd_fs_BytesFileEntry;
hxd_fs_BytesFileEntry.__name__ = "hxd.fs.BytesFileEntry";
hxd_fs_BytesFileEntry.__super__ = hxd_fs_FileEntry;
hxd_fs_BytesFileEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	get_path: function() {
		return this.fullPath;
	}
	,getBytes: function() {
		return this.bytes;
	}
	,readBytes: function(out,outPos,pos,len) {
		if(pos + len > this.bytes.length) {
			len = this.bytes.length - pos;
		}
		if(len < 0) {
			len = 0;
		}
		out.blit(outPos,this.bytes,pos,len);
		return len;
	}
	,load: function(onReady) {
		haxe_Timer.delay(onReady,1);
	}
	,loadBitmap: function(onLoaded) {
		var mime;
		switch(haxe_io_Path.extension(this.fullPath).toLowerCase()) {
		case "gif":
			mime = "image/gif";
			break;
		case "jpeg":case "jpg":
			mime = "image/jpeg";
			break;
		case "png":
			mime = "image/png";
			break;
		default:
			throw haxe_Exception.thrown("Cannot determine image encoding, try adding an extension to the resource path");
		}
		var img = new Image();
		img.onload = function() {
			onLoaded(img);
		};
		var tmp = haxe_crypto_Base64.encode(this.bytes);
		img.src = "data:" + mime + ";base64," + tmp;
	}
	,get_size: function() {
		return this.bytes.length;
	}
	,__class__: hxd_fs_BytesFileEntry
});
var hxd_fs_FileSystem = function() { };
$hxClasses["hxd.fs.FileSystem"] = hxd_fs_FileSystem;
hxd_fs_FileSystem.__name__ = "hxd.fs.FileSystem";
hxd_fs_FileSystem.__isInterface__ = true;
hxd_fs_FileSystem.prototype = {
	__class__: hxd_fs_FileSystem
};
var hxd_fs_BytesFileSystem = function() {
};
$hxClasses["hxd.fs.BytesFileSystem"] = hxd_fs_BytesFileSystem;
hxd_fs_BytesFileSystem.__name__ = "hxd.fs.BytesFileSystem";
hxd_fs_BytesFileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fs_BytesFileSystem.prototype = {
	getBytes: function(path) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,exists: function(path) {
		return this.getBytes(path) != null;
	}
	,get: function(path) {
		var bytes = this.getBytes(path);
		if(bytes == null) {
			throw haxe_Exception.thrown("Resource not found '" + path + "'");
		}
		return new hxd_fs_BytesFileEntry(path,bytes);
	}
	,__class__: hxd_fs_BytesFileSystem
};
var hxd_fs__$EmbedFileSystem_EmbedEntry = function(fs,name,relPath,data) {
	this.fs = fs;
	this.name = name;
	this.relPath = relPath;
	this.data = data;
};
$hxClasses["hxd.fs._EmbedFileSystem.EmbedEntry"] = hxd_fs__$EmbedFileSystem_EmbedEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.__name__ = "hxd.fs._EmbedFileSystem.EmbedEntry";
hxd_fs__$EmbedFileSystem_EmbedEntry.__super__ = hxd_fs_FileEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	init: function() {
		if(this.bytes == null) {
			this.bytes = haxe_Resource.getBytes(this.data);
			if(this.bytes == null) {
				throw haxe_Exception.thrown("Missing resource " + this.data);
			}
		}
	}
	,getBytes: function() {
		if(this.bytes == null) {
			this.init();
		}
		return this.bytes;
	}
	,readBytes: function(out,outPos,pos,len) {
		if(this.bytes == null) {
			this.init();
		}
		if(pos + len > this.bytes.length) {
			len = this.bytes.length - pos;
		}
		if(len < 0) {
			len = 0;
		}
		out.blit(outPos,this.bytes,pos,len);
		return len;
	}
	,load: function(onReady) {
		if(onReady != null) {
			haxe_Timer.delay(onReady,1);
		}
	}
	,loadBitmap: function(onLoaded) {
		var rawData = null;
		var _g = 0;
		var _g1 = haxe_Resource.content;
		while(_g < _g1.length) {
			var res = _g1[_g];
			++_g;
			if(res.name == this.data) {
				rawData = res.data;
				break;
			}
		}
		if(rawData == null) {
			throw haxe_Exception.thrown("Missing resource " + this.data);
		}
		var image = new Image();
		image.onload = function(_) {
			onLoaded(image);
		};
		var extra = "";
		var bytes = rawData.length * 6 >> 3;
		var _g = 0;
		var _g1 = (3 - bytes * 4 % 3) % 3;
		while(_g < _g1) {
			var i = _g++;
			extra += "=";
		}
		var tmp = "data:image/" + this.get_extension() + ";base64," + rawData;
		image.src = tmp + extra;
	}
	,get_path: function() {
		if(this.relPath == ".") {
			return "<root>";
		} else {
			return this.relPath;
		}
	}
	,get_size: function() {
		this.init();
		return this.bytes.length;
	}
	,__class__: hxd_fs__$EmbedFileSystem_EmbedEntry
});
var hxd_fs_EmbedFileSystem = function(root) {
	this.root = root;
};
$hxClasses["hxd.fs.EmbedFileSystem"] = hxd_fs_EmbedFileSystem;
hxd_fs_EmbedFileSystem.__name__ = "hxd.fs.EmbedFileSystem";
hxd_fs_EmbedFileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fs_EmbedFileSystem.resolve = function(path) {
	return "R_" + path.replace(hxd_fs_EmbedFileSystem.invalidChars.r,"_");
};
hxd_fs_EmbedFileSystem.prototype = {
	splitPath: function(path) {
		if(path == ".") {
			return [];
		} else {
			return path.split("/");
		}
	}
	,exists: function(path) {
		var r = this.root;
		var _g = 0;
		var _g1 = this.splitPath(path);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			r = Reflect.field(r,p);
			if(r == null) {
				return false;
			}
		}
		return true;
	}
	,get: function(path) {
		if(!this.exists(path)) {
			throw haxe_Exception.thrown(new hxd_fs_NotFound(path));
		}
		var id = hxd_fs_EmbedFileSystem.resolve(path);
		return new hxd_fs__$EmbedFileSystem_EmbedEntry(this,path.split("/").pop(),path,id);
	}
	,__class__: hxd_fs_EmbedFileSystem
};
var hxd_fs_FileInput = function(entry) {
	this.nextReadPos = 0;
	this.cacheLen = 0;
	this.cachePos = 0;
	this.entry = entry;
};
$hxClasses["hxd.fs.FileInput"] = hxd_fs_FileInput;
hxd_fs_FileInput.__name__ = "hxd.fs.FileInput";
hxd_fs_FileInput.__super__ = haxe_io_Input;
hxd_fs_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	fetch: function(dataSize) {
		if(dataSize == null) {
			dataSize = 256;
		}
		var prev = this.cache;
		if(this.cache == null || this.cache.length < dataSize) {
			this.cache = hxd_fs_FileInput.PREFETCH_CACHE;
			if(this.cache != null && this.cache.length >= dataSize) {
				hxd_fs_FileInput.PREFETCH_CACHE = null;
			} else {
				this.cache = new haxe_io_Bytes(new ArrayBuffer(dataSize));
			}
		}
		var startPos = 0;
		if(this.cacheLen > 0) {
			startPos = this.cacheLen;
			dataSize -= this.cacheLen;
			this.cache.blit(0,prev,this.cachePos,this.cacheLen);
		}
		var read = this.entry.readBytes(this.cache,startPos,this.nextReadPos,dataSize);
		this.cachePos = 0;
		this.cacheLen = startPos + read;
		this.nextReadPos += read;
		if(this.cacheLen == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
	}
	,skip: function(nbytes) {
		if(this.cacheLen > 0) {
			var a = this.cacheLen;
			var k = a > nbytes ? nbytes : a;
			this.cachePos += k;
			this.cacheLen -= k;
			nbytes -= k;
		}
		this.nextReadPos += nbytes;
	}
	,readByte: function() {
		if(this.cacheLen == 0) {
			this.fetch();
		}
		var b = this.cache.b[this.cachePos++];
		this.cacheLen--;
		return b;
	}
	,readBytes: function(b,pos,len) {
		var tot = 0;
		if(len < 256 && this.cacheLen < len) {
			this.fetch();
		}
		if(this.cacheLen > 0) {
			var b1 = this.cacheLen;
			var k = len > b1 ? b1 : len;
			b.blit(pos,this.cache,this.cachePos,k);
			this.cachePos += k;
			this.cacheLen -= k;
			len -= k;
			if(len == 0) {
				return k;
			}
			pos += k;
			tot += k;
		}
		if(len > 0) {
			var k = this.entry.readBytes(b,pos,this.nextReadPos,len);
			this.nextReadPos += k;
			tot += k;
		}
		return tot;
	}
	,close: function() {
		if(this.cache != null && (hxd_fs_FileInput.PREFETCH_CACHE == null || hxd_fs_FileInput.PREFETCH_CACHE.length < this.cache.length)) {
			hxd_fs_FileInput.PREFETCH_CACHE = this.cache;
		}
		this.cache = null;
		this.cacheLen = 0;
	}
	,__class__: hxd_fs_FileInput
});
var hxd_fs_LoadedBitmap = {};
hxd_fs_LoadedBitmap.toBitmap = function(this1) {
	var bmp = new hxd_BitmapData(this1.width,this1.height);
	bmp.ctx.drawImage(this1,0,0);
	return bmp;
};
var hxd_fs_NotFound = function(path) {
	this.path = path;
};
$hxClasses["hxd.fs.NotFound"] = hxd_fs_NotFound;
hxd_fs_NotFound.__name__ = "hxd.fs.NotFound";
hxd_fs_NotFound.prototype = {
	toString: function() {
		return "Resource file not found '" + this.path + "'";
	}
	,__class__: hxd_fs_NotFound
};
var hxd_fs_SourceLoader = function() { };
$hxClasses["hxd.fs.SourceLoader"] = hxd_fs_SourceLoader;
hxd_fs_SourceLoader.__name__ = "hxd.fs.SourceLoader";
hxd_fs_SourceLoader.isActive = function() {
	return hxd_fs_SourceLoader.RELOAD_LFS.length > 0;
};
hxd_fs_SourceLoader.resolve = function(path) {
	var _g = 0;
	var _g1 = hxd_fs_SourceLoader.RELOAD_LFS;
	while(_g < _g1.length) {
		var fs = _g1[_g];
		++_g;
		try {
			return fs.get(path);
		} catch( _g2 ) {
			if(!((haxe_Exception.caught(_g2).unwrap()) instanceof hxd_fs_NotFound)) {
				throw _g2;
			}
		}
	}
	return null;
};
var hxd_impl_AllocPos = function() {
	this.stack = [];
	var curStack = haxe_CallStack.callStack();
	curStack.shift();
	var _g = 0;
	while(_g < curStack.length) {
		var s = curStack[_g];
		++_g;
		switch(s._hx_index) {
		case 0:
			break;
		case 1:
			var _g1 = s.m;
			break;
		case 2:
			var _g2 = s.s;
			var _g3 = s.column;
			var file = s.file;
			var line = s.line;
			var idx = file.indexOf("\\std/");
			if(idx > 0) {
				file = HxOverrides.substr(file,idx + 5,null);
			}
			var pos = file + ":" + line;
			this.stack.push(pos);
			if(this.position == null) {
				var p = file.indexOf("/");
				var pack = p < 0 ? "" : HxOverrides.substr(file,0,p);
				if(hxd_impl_AllocPos.ENGINE_PACKAGES.indexOf(pack) < 0) {
					this.position = pos;
				}
			}
			break;
		case 3:
			var cl = s.classname;
			var meth = s.method;
			break;
		case 4:
			var _g4 = s.v;
			break;
		}
	}
	if(this.position == null) {
		this.position = this.stack[0];
	}
};
$hxClasses["hxd.impl.AllocPos"] = hxd_impl_AllocPos;
hxd_impl_AllocPos.__name__ = "hxd.impl.AllocPos";
hxd_impl_AllocPos.make = function() {
	if(!hxd_impl_AllocPos.ENABLED) {
		return null;
	}
	return new hxd_impl_AllocPos();
};
hxd_impl_AllocPos.prototype = {
	__class__: hxd_impl_AllocPos
};
var hxd_impl_Allocator = function() {
};
$hxClasses["hxd.impl.Allocator"] = hxd_impl_Allocator;
hxd_impl_Allocator.__name__ = "hxd.impl.Allocator";
hxd_impl_Allocator.get = function() {
	if(hxd_impl_Allocator.inst == null) {
		hxd_impl_Allocator.inst = new hxd_impl_Allocator();
	}
	return hxd_impl_Allocator.inst;
};
hxd_impl_Allocator.prototype = {
	toBufferFlags: function(flags) {
		switch(flags) {
		case 0:
			return [h3d_BufferFlag.Dynamic];
		case 1:
			return null;
		case 2:
			return [h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.Dynamic];
		case 3:
			return [h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.ReadWriteBuffer];
		case 4:
			return [h3d_BufferFlag.UniformBuffer];
		}
	}
	,allocBuffer: function(vertices,format,flags) {
		if(flags == null) {
			flags = 0;
		}
		return new h3d_Buffer(vertices,format,this.toBufferFlags(flags));
	}
	,ofFloats: function(v,format,flags) {
		if(flags == null) {
			flags = 0;
		}
		var nvert = Math.ceil(v.pos / format.stride);
		return this.ofSubFloats(v,nvert,format,flags);
	}
	,ofSubFloats: function(v,vertices,format,flags) {
		if(flags == null) {
			flags = 0;
		}
		var b = this.allocBuffer(vertices,format,flags);
		b.uploadFloats(v,0,vertices);
		return b;
	}
	,disposeBuffer: function(b) {
		b.dispose();
	}
	,allocIndexBuffer: function(count) {
		return h3d_Indexes._new(count);
	}
	,ofIndexes: function(ib,length) {
		if(length == null) {
			length = -1;
		}
		if(length < 0 && ib != null) {
			length = ib.length;
		}
		var idx = this.allocIndexBuffer(length);
		h3d_Indexes.uploadIndexes(idx,ib,0,length);
		return idx;
	}
	,disposeIndexBuffer: function(i) {
		i.dispose();
	}
	,onContextLost: function() {
	}
	,__class__: hxd_impl_Allocator
};
var hxd_impl_AsyncLoader = function() { };
$hxClasses["hxd.impl.AsyncLoader"] = hxd_impl_AsyncLoader;
hxd_impl_AsyncLoader.__name__ = "hxd.impl.AsyncLoader";
hxd_impl_AsyncLoader.__isInterface__ = true;
hxd_impl_AsyncLoader.prototype = {
	__class__: hxd_impl_AsyncLoader
};
var hxd_impl_MouseMode = $hxEnums["hxd.impl.MouseMode"] = { __ename__:true,__constructs__:null
	,Absolute: {_hx_name:"Absolute",_hx_index:0,__enum__:"hxd.impl.MouseMode",toString:$estr}
	,Relative: ($_=function(callback,restorePos) { return {_hx_index:1,callback:callback,restorePos:restorePos,__enum__:"hxd.impl.MouseMode",toString:$estr}; },$_._hx_name="Relative",$_.__params__ = ["callback","restorePos"],$_)
	,AbsoluteUnbound: ($_=function(restorePos) { return {_hx_index:2,restorePos:restorePos,__enum__:"hxd.impl.MouseMode",toString:$estr}; },$_._hx_name="AbsoluteUnbound",$_.__params__ = ["restorePos"],$_)
};
hxd_impl_MouseMode.__constructs__ = [hxd_impl_MouseMode.Absolute,hxd_impl_MouseMode.Relative,hxd_impl_MouseMode.AbsoluteUnbound];
hxd_impl_MouseMode.__empty_constructs__ = [hxd_impl_MouseMode.Absolute];
var hxd_res__$Any_SingleFileSystem = function(path,bytes) {
	hxd_fs_BytesFileSystem.call(this);
	this.path = path;
	this.bytes = bytes;
};
$hxClasses["hxd.res._Any.SingleFileSystem"] = hxd_res__$Any_SingleFileSystem;
hxd_res__$Any_SingleFileSystem.__name__ = "hxd.res._Any.SingleFileSystem";
hxd_res__$Any_SingleFileSystem.__super__ = hxd_fs_BytesFileSystem;
hxd_res__$Any_SingleFileSystem.prototype = $extend(hxd_fs_BytesFileSystem.prototype,{
	getBytes: function(p) {
		if(p == this.path) {
			return this.bytes;
		} else {
			return null;
		}
	}
	,__class__: hxd_res__$Any_SingleFileSystem
});
var hxd_res_Any = function(loader,entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = loader;
};
$hxClasses["hxd.res.Any"] = hxd_res_Any;
hxd_res_Any.__name__ = "hxd.res.Any";
hxd_res_Any.fromBytes = function(path,bytes) {
	var fs = new hxd_res__$Any_SingleFileSystem(path,bytes);
	return new hxd_res_Loader(fs).load(path);
};
hxd_res_Any.__super__ = hxd_res_Resource;
hxd_res_Any.prototype = $extend(hxd_res_Resource.prototype,{
	toTexture: function() {
		return this.toImage().toTexture();
	}
	,toTile: function() {
		return this.toImage().toTile();
	}
	,toImage: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Image);
	}
	,to: function(c) {
		return this.loader.loadCache(this.entry.get_path(),c);
	}
	,__class__: hxd_res_Any
});
var hxd_res_Atlas = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Atlas"] = hxd_res_Atlas;
hxd_res_Atlas.__name__ = "hxd.res.Atlas";
hxd_res_Atlas.__super__ = hxd_res_Resource;
hxd_res_Atlas.prototype = $extend(hxd_res_Resource.prototype,{
	__class__: hxd_res_Atlas
});
var hxd_res_BitmapFont = function(entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = hxd_res_Loader.currentInstance;
};
$hxClasses["hxd.res.BitmapFont"] = hxd_res_BitmapFont;
hxd_res_BitmapFont.__name__ = "hxd.res.BitmapFont";
hxd_res_BitmapFont.__super__ = hxd_res_Resource;
hxd_res_BitmapFont.prototype = $extend(hxd_res_Resource.prototype,{
	toFont: function() {
		if(this.font == null) {
			this.font = hxd_fmt_bfnt_FontParser.parse(this.entry.getBytes(),this.entry.get_path(),$bind(this,this.resolveTile));
		}
		return this.font;
	}
	,toSdfFont: function(size,channel,alphaCutoff,smoothing) {
		if(smoothing == null) {
			smoothing = -1;
		}
		if(alphaCutoff == null) {
			alphaCutoff = 0.5;
		}
		if(channel == null) {
			channel = 0;
		}
		if(this.sdfFonts == null) {
			this.sdfFonts = [];
		}
		if(size == null) {
			size = this.toFont().size;
		}
		var _g = 0;
		var _g1 = this.sdfFonts;
		while(_g < _g1.length) {
			var font = _g1[_g];
			++_g;
			var _g2 = font.type;
			if(_g2._hx_index == 1) {
				var fchannel = _g2.channel;
				var falphaCutoff = _g2.alphaCutoff;
				var fsmoothing = _g2.smoothing;
				if(font.size == size && fchannel == channel && falphaCutoff == alphaCutoff && fsmoothing == smoothing) {
					return font;
				}
			}
		}
		var font = hxd_fmt_bfnt_FontParser.parse(this.entry.getBytes(),this.entry.get_path(),$bind(this,this.resolveSdfTile));
		font.type = h2d_FontType.SignedDistanceField(channel,alphaCutoff,smoothing);
		font.resizeTo(size);
		this.sdfFonts.push(font);
		return font;
	}
	,resolveSdfTile: function(path) {
		var tex = this.loader.load(path).toTexture();
		tex.set_filter(h3d_mat_Filter.Linear);
		return h2d_Tile.fromTexture(tex);
	}
	,resolveTile: function(path) {
		return this.loader.load(path).toTile();
	}
	,__class__: hxd_res_BitmapFont
});
var hxd_res_DefaultFont = function() { };
$hxClasses["hxd.res.DefaultFont"] = hxd_res_DefaultFont;
hxd_res_DefaultFont.__name__ = "hxd.res.DefaultFont";
hxd_res_DefaultFont.get = function() {
	var engine = h3d_Engine.CURRENT;
	var fnt = engine.resCache.h[hxd_res_DefaultFont.__id__];
	if(fnt == null) {
		var BYTES = hxd_res_Any.fromBytes("hxd/res/defaultFont.png",haxe_Unserializer.run("s3176:iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAACPBJREFUeJztnelypDoMRp2p%:6v3PNjhrlCLX1aLIPBPlWppI03bCG0QOfn8:m0zbr8KupnS9FDqRKAzUOhAvBRfqO:tfrSZ86H:ET79o6Rhc%JzzNSD7Xn:XyEH9RPtP4X:6GDDj6ttR:Hb62d9pmX8b487StA4:DFlup5z5MSWS%tL:f6eG4BXDppGQdtApJEtPm0zkf427Oo1fAxtfO2hDIruGXCLgnAD:jNyzSsKxa18yBphyqQ1jqwBN1zHmgcU3V3jHui9xaArkS0%XzTohOX%jvGauzvjMrlUJXuqSeV07G0ekgTovWS1t61vr0CQAez7nkj7uFIELJqmdN7RWvzil7hnnXV5qLOzSMAmlcQub9ZRuEsaNoq0w5RZbN0rye1ASzplWyAiGEXQVK3kZOdRcgy9:FLoRogI02WNc7rRQw3jzsZAfWB7skR44%3jdo6Wv2qfr4rFuUCZlftrT1jjpezSih4b75ClQDMvrizz%82uA1wMCqsKvUv3YO045rxma2vjY3mpPUvuV1WKDzbLtqfNu9:AjA6tl69QM3Zn1Wfl1M8G:CUW4s6b%sWIEXWtM:omNeXrnaDRm:OyIsE1UOfQ1gCwMOLdFCqWnj8Grl5nsjVakRjHMj1DgnEcQvw%OV0AE0wGisfqTKrbBYrZ4BiB:T4ldE8dPsMxU2oEWgZZtoAyMCq2GxtLlWCFbEB%PGIYWv1kxECq0%TbDKITjpirVr9SW2zC:skqqKdUp%QwwbILKwlgZk2mkBlmUVgPPOI3IbL0GwASY2PiMdbPrfVF6:vVctIq5SoVqNdxtrvWXt1:EguYHVL:ZV4Q8F781%KVwD25r8UagTyYE4TjkllmfrU4udtI%XZdrRcm5c1T%3cPXjq9RqEYTewIrau1a%ODVSBomgeL4cLudedG%H2pah4KBQx8gSnWMC:8AvDKwS0fXU5n59Uf7gAXA1dfG1TtM1Bm2ZtKi%PCGaVlpXKrf67ngeI%uFXoW1WdvNH0ztuV3vNBvAOrC30wR0LG7kX0:p3MjoCqPYfiQNI3BK%BEhq31vfYtS5UkN5lCD%NGWMSBxAWyyeyKkAJYc2Z6JrfqpvGYF0IzxqNWoDoPrSeNJ8POMgtJg76rtSEyDNErGzUF5F3ZOq9wI2D%VtbuBsaFfkNGwBGMtUmy3BjUAtxs3x3LOk8mi7zWB6Xw7leCNlb%LRXkrk%wEOpESIlezxlvM%uSWuzQXNx1Ofjqd5Aah:qW5PGDfbjpZzRCGlbwZ5T0TqMHMVoLgCP56Nj0fqo7mhLOeMGoDPx4wE0sW64mRmXLSDaCZvxPjSeNnAGKx:hxcw8%a3Zkc7tTqjyWgbs:4d3w8wW:7AC42l3zF:dH9H9SGedwO9rmEEz4nMpCXuznFoSS5tf9x9e24ByFjqodKAQio6EjfP9C8duzLHoZ0r8oD%LzRyAZY1XN2umux8n0L3OkeygcdnDzMYTSvQvc47G7g4q3xL2EqE8jhbAN6H9YDJ6TaxBeCduJNy3AjkrghySay8QXOU84lZSQ8plj:ioYuIG%axvLUrcoRxHHGHXelgKzkTWSxtLK:7whM8UaGLzs3qJ7P5IxNI0axh%hbAgxhWMGJ01M%KVKIASXQcipVR7MEz524XboQNoKVwPZPNhkpRjD5yRdM53B0c0qKDvE4X9PVw78JYWPc7usEo9cm1TAa0%R:hh44n1UXz1sjaB0dbJATdGoB:R1Dv:c4DGktSez33TNqW96MZtVo:R53sPLQxvGseCWu7y2d7Kji70MgQRUIwM5nNb%1bc8HyK%MAHiMtq2q5ypaOS39rdTz9jMaac4kg87eDpSsp4%bx:iS3UZLOqMQPM44Y3jGuSoCVabERyaCsj:90qs7TG1soWePZbICViWharvnSgrfTwYsz0gjckvUApHcDOdwa9waDvIGjCFZ:2vwzfVeGj7W%qs4ns0ettbMASJvG:WfJ%JAGHOVvI6GSxtMEUfNENK%FH%NtNaz1qzif7B79mcC2AdbG8zVxyNqMtrGkTQqZWmHUqvJjDJg%BZ9Rf552I8qtY%a:jUMnEG3j9V1RvWgUryfqFyXql1etX2aP:vGER8JWCCLdxhME4OlMbWTdLQCRhA%qX1WegVrZEbtjCjQjsDnKM200Y8nLjDaAx%WdVgg8:zfQY%1620Q8grcxpRDcfQvwMN2ivYm7s4GSRkGZLuRvV5T3AP1tAe08q8qtY38KJo4Ejgglbxh3awCJQyL35l:AjAKwN:5CKozAqpRm7zibBBUCMDJFi:p5GlMKcJUbGAm4aIkdlPCpttK9xz1RxMhzAdVCkDmnE5H:GURPXLta7ypHcz248%GLWR6Q%cL7ZdHRVOddWHPt1VRWX6O1mERXuNt6HmBmooGXnlB178MX3vIr5nhCejkUbf7VhgyalyWwngcjqsorxxg5xy%oDeDZ:Du0Qub%2aP6M%XVfSFK90D6ihjranoC2pUgUVVe0VdUw2bmeEKyASx1OwvWfQ7dPqi1XlFe1Vd0nbu1C:%HEeEObuSH:LyRKzSW6QZKvjDXDNKxqvIsR19a:624vKKvW9Zy5nTw5swQO2zGbODmDNdmpWwBmJ%hNo7n7WAJ5L703FN4DD:Sr3RcK6uar0XVnHvHUbHeDqadawaLFA3jbTwW6tH2aC%5oqgfLXYRGcOab5SKOVvz8sY75AneZATyQd:qyt1ByFjkGoCrR6u8gXLtc2tn:51qD22s7Pwi5Z5jEryNtS6jy6U5qfS8HZwFTWp0ogWdj3Wu0nmPWJ8K3HO62gvoul:dhKbBPPWmp:fdwBXwXNGa8TY92ruBzVG%GpoqnUXtp9CeCdza4JvZLhDqyqb3hT8RRDtH5VmyavKKREn0XCW1f3WiDKWmpTpf7GTQc:F6OpCdC3guJdp5C8CzkTY9JAg8Ekh:bxaAPxVMf28WgP7XMMrWAovwhO8I2gxkC8DibAFYnC0Ai6OFgjeL4Pmm0M2L0dzAzSJY2cDNy:E8ELJ5MdsLWJwtAIuzBWBxtgAszhaAxdkCsDi:AYnqZwd25SoPAAAAAElFTkSuQmCC"));
		var DESC = hxd_res_Any.fromBytes("hxd/res/defaultFont.fnt",haxe_Unserializer.run("s14030:PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPEZvbnQgc2l6ZT0iMTIiIGZhbWlseT0iUGl4ZWwgT3BlcmF0b3IiIGhlaWdodD0iMTYiIHN0eWxlPSJSZWd1bGFyIj4KIDxDaGFyIHdpZHRoPSI0IiBvZmZzZXQ9IjAgMTMiIHJlY3Q9IjEgMTIgMCAwIiBjb2RlPSIgIi8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjIgMyAxIDkiIGNvZGU9IiEiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNCAzIDMgMyIgY29kZT0iJnF1b3Q7Ii8%CiA8Q2hhciB3aWR0aD0iOCIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjggMyA2IDkiIGNvZGU9IiMiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMiIgcmVjdD0iMTUgMSA1IDEzIiBjb2RlPSIkIi8%CiA8Q2hhciB3aWR0aD0iOSIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjIxIDMgNyA5IiBjb2RlPSIlIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjI5IDMgNSA5IiBjb2RlPSImYW1wOyIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSA0IiByZWN0PSIzNSAzIDEgMyIgY29kZT0iJyIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA0IiByZWN0PSIzNyAzIDMgOSIgY29kZT0iKCIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA0IiByZWN0PSI0MSAzIDMgOSIgY29kZT0iKSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI0NSAzIDUgNSIgY29kZT0iKiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI1MSA1IDUgNSIgY29kZT0iKyIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAxMiIgcmVjdD0iNTcgMTEgMiAzIiBjb2RlPSIsIi8%CiA8Q2hhciB3aWR0aD0iNiIgb2Zmc2V0PSIxIDgiIHJlY3Q9IjYwIDcgNCAxIiBjb2RlPSItIi8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDEyIiByZWN0PSI2NSAxMSAxIDEiIGNvZGU9Ii4iLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNjcgMyAzIDkiIGNvZGU9Ii8iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNzEgMyA1IDkiIGNvZGU9IjAiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNzcgMyAzIDkiIGNvZGU9IjEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODEgMyA1IDkiIGNvZGU9IjIiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODcgMyA1IDkiIGNvZGU9IjMiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOTMgMyA1IDkiIGNvZGU9IjQiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOTkgMyA1IDkiIGNvZGU9IjUiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTA1IDMgNSA5IiBjb2RlPSI2Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjExMSAzIDUgOSIgY29kZT0iNyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxMTcgMyA1IDkiIGNvZGU9IjgiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMSAxNSA1IDkiIGNvZGU9IjkiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNiIgcmVjdD0iNyAxNyAxIDciIGNvZGU9IjoiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgNiIgcmVjdD0iOSAxNyAyIDkiIGNvZGU9IjsiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNiIgcmVjdD0iMTIgMTcgMyA1IiBjb2RlPSImbHQ7Ii8%CiA8Q2hhciB3aWR0aD0iNiIgb2Zmc2V0PSIxIDciIHJlY3Q9IjE2IDE4IDQgMyIgY29kZT0iPSIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA2IiByZWN0PSIyMSAxNyAzIDUiIGNvZGU9Ij4iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjUgMTUgNSA5IiBjb2RlPSI:Ii8%CiA8Q2hhciB3aWR0aD0iOSIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjMxIDE1IDcgOSIgY29kZT0iQCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIzOSAxNSA1IDkiIGNvZGU9IkEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNDUgMTUgNSA5IiBjb2RlPSJCIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjUxIDE1IDUgOSIgY29kZT0iQyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI1NyAxNSA1IDkiIGNvZGU9IkQiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNjMgMTUgNSA5IiBjb2RlPSJFIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjY5IDE1IDUgOSIgY29kZT0iRiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI3NSAxNSA1IDkiIGNvZGU9IkciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODEgMTUgNSA5IiBjb2RlPSJIIi8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDQiIHJlY3Q9Ijg3IDE1IDEgOSIgY29kZT0iSSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI4OSAxNSA1IDkiIGNvZGU9IkoiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOTUgMTUgNSA5IiBjb2RlPSJLIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEwMSAxNSA1IDkiIGNvZGU9IkwiLz4KIDxDaGFyIHdpZHRoPSI5IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTA3IDE1IDcgOSIgY29kZT0iTSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxMTUgMTUgNSA5IiBjb2RlPSJOIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEyMSAxNSA1IDkiIGNvZGU9Ik8iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMSAyNyA1IDkiIGNvZGU9IlAiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNyAyNyA1IDkiIGNvZGU9IlEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTMgMjcgNSA5IiBjb2RlPSJSIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjE5IDI3IDUgOSIgY29kZT0iUyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIyNSAyNyA1IDkiIGNvZGU9IlQiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMzEgMjcgNSA5IiBjb2RlPSJVIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjM3IDI3IDUgOSIgY29kZT0iViIvPgogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA0IiByZWN0PSI0MyAyNyA3IDkiIGNvZGU9IlciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNTEgMjcgNSA5IiBjb2RlPSJYIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjU3IDI3IDUgOSIgY29kZT0iWSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI2MyAyNyA1IDkiIGNvZGU9IloiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNjkgMjcgMyA5IiBjb2RlPSJbIi8%CiA8Q2hhciB3aWR0aD0iNSIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjczIDI3IDMgOSIgY29kZT0iXCIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMSA0IiByZWN0PSI3NyAyNyAzIDkiIGNvZGU9Il0iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iODEgMjcgNSAzIiBjb2RlPSJeIi8%CiA8Q2hhciB3aWR0aD0iNSIgb2Zmc2V0PSIwIDE0IiByZWN0PSI4NyAzNyA1IDEiIGNvZGU9Il8iLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgNCIgcmVjdD0iOTMgMjcgMiAyIiBjb2RlPSJgIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9Ijk2IDI5IDUgNyIgY29kZT0iYSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxMDIgMjcgNSA5IiBjb2RlPSJiIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjEwOCAyOSA1IDciIGNvZGU9ImMiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTE0IDI3IDUgOSIgY29kZT0iZCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxMjAgMjkgNSA3IiBjb2RlPSJlIi8%CiA8Q2hhciB3aWR0aD0iNiIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEgMzkgNSA5IiBjb2RlPSJmIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjcgNDEgNSA5IiBjb2RlPSJnIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjEzIDM5IDUgOSIgY29kZT0iaCIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSA0IiByZWN0PSIxOSAzOSAxIDkiIGNvZGU9ImkiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjEgMzkgNSAxMSIgY29kZT0iaiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIyNyAzOSA1IDkiIGNvZGU9ImsiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNCIgcmVjdD0iMzMgMzkgMSA5IiBjb2RlPSJsIi8%CiA8Q2hhciB3aWR0aD0iOSIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjM1IDQxIDcgNyIgY29kZT0ibSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI0MyA0MSA1IDciIGNvZGU9Im4iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNDkgNDEgNSA3IiBjb2RlPSJvIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjU1IDQxIDUgOSIgY29kZT0icCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI2MSA0MSA1IDkiIGNvZGU9InEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNjcgNDEgNSA3IiBjb2RlPSJyIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjczIDQxIDUgNyIgY29kZT0icyIvPgogPENoYXIgd2lkdGg9IjYiIG9mZnNldD0iMSA1IiByZWN0PSI3OSA0MCA1IDgiIGNvZGU9InQiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iODUgNDEgNSA3IiBjb2RlPSJ1Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjkxIDQxIDUgNyIgY29kZT0idiIvPgogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA2IiByZWN0PSI5NyA0MSA3IDciIGNvZGU9InciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iMTA1IDQxIDUgNyIgY29kZT0ieCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxMTEgNDEgNSA5IiBjb2RlPSJ5Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjExNyA0MSA1IDciIGNvZGU9InoiLz4KIDxDaGFyIHdpZHRoPSI2IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMSA1NCA0IDkiIGNvZGU9InsiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNCIgcmVjdD0iNiA1NCAxIDkiIGNvZGU9InwiLz4KIDxDaGFyIHdpZHRoPSI2IiBvZmZzZXQ9IjEgNCIgcmVjdD0iOCA1NCA0IDkiIGNvZGU9In0iLz4KIDxDaGFyIHdpZHRoPSI4IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTMgNTQgNiAyIiBjb2RlPSJ%Ii8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjIwIDU2IDEgOSIgY29kZT0iwqEiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjIgNTQgNSAxMSIgY29kZT0iwqIiLz4KIDxDaGFyIHdpZHRoPSI4IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjggNTQgNiA5IiBjb2RlPSLCoyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIzNSA1NCA1IDkiIGNvZGU9IsKlIi8%CiA8Q2hhciB3aWR0aD0iMyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjQxIDU0IDEgOSIgY29kZT0iwqYiLz4KIDxDaGFyIHdpZHRoPSI1IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNDMgNTQgMyAxIiBjb2RlPSLCqCIvPgogPENoYXIgd2lkdGg9IjkiIG9mZnNldD0iMSA0IiByZWN0PSI0NyA1NCA3IDkiIGNvZGU9IsKpIi8%CiA8Q2hhciB3aWR0aD0iOCIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjU1IDU2IDYgNSIgY29kZT0iwqsiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgOCIgcmVjdD0iNjIgNTggNSAzIiBjb2RlPSLCrCIvPgogPENoYXIgd2lkdGg9IjYiIG9mZnNldD0iMSA0IiByZWN0PSI2OCA1NCA0IDQiIGNvZGU9IsKwIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjczIDU2IDUgNyIgY29kZT0iwrEiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgNCIgcmVjdD0iNzkgNTQgMiAyIiBjb2RlPSLCtCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSI4MiA1NiA1IDkiIGNvZGU9IsK1Ii8%CiA8Q2hhciB3aWR0aD0iOCIgb2Zmc2V0PSIxIDQiIHJlY3Q9Ijg4IDU0IDcgOSIgY29kZT0iwrYiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgOCIgcmVjdD0iOTYgNTggMSAxIiBjb2RlPSLCtyIvPgogPENoYXIgd2lkdGg9IjUiIG9mZnNldD0iMCAxMyIgcmVjdD0iOTggNjMgMyAyIiBjb2RlPSLCuCIvPgogPENoYXIgd2lkdGg9IjgiIG9mZnNldD0iMSA2IiByZWN0PSIxMDIgNTYgNiA1IiBjb2RlPSLCuyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxMDkgNTYgNSA5IiBjb2RlPSLCvyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSIxMTUgNTEgNSAxMiIgY29kZT0iw4AiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMSIgcmVjdD0iMTIxIDUxIDUgMTIiIGNvZGU9IsOBIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjEgNjcgNSAxMiIgY29kZT0iw4IiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMSIgcmVjdD0iNyA2NyA2IDEyIiBjb2RlPSLDgyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAyIiByZWN0PSIxNCA2OCA1IDExIiBjb2RlPSLDhCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAwIiByZWN0PSIyMCA2NiA1IDEzIiBjb2RlPSLDhSIvPgogPENoYXIgd2lkdGg9IjExIiBvZmZzZXQ9IjEgNCIgcmVjdD0iMjYgNzAgOSA5IiBjb2RlPSLDhiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIzNiA3MCA1IDExIiBjb2RlPSLDhyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSI0MiA2NyA1IDEyIiBjb2RlPSLDiCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSI0OCA2NyA1IDEyIiBjb2RlPSLDiSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSI1NCA2NyA1IDEyIiBjb2RlPSLDiiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAyIiByZWN0PSI2MCA2OCA1IDExIiBjb2RlPSLDiyIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAxIiByZWN0PSI2NiA2NyAyIDEyIiBjb2RlPSLDjCIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMSAxIiByZWN0PSI2OSA2NyAyIDEyIiBjb2RlPSLDjSIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAxIiByZWN0PSI3MiA2NyAzIDEyIiBjb2RlPSLDjiIvPgogPENoYXIgd2lkdGg9IjMiIG9mZnNldD0iMCAyIiByZWN0PSI3NiA2OCAzIDExIiBjb2RlPSLDjyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMCA0IiByZWN0PSI4MCA3MCA2IDkiIGNvZGU9IsOQIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9Ijg3IDY3IDYgMTIiIGNvZGU9IsORIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9Ijk0IDY3IDUgMTIiIGNvZGU9IsOSIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjEwMCA2NyA1IDEyIiBjb2RlPSLDkyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAxIiByZWN0PSIxMDYgNjcgNSAxMiIgY29kZT0iw5QiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMSIgcmVjdD0iMTEyIDY3IDYgMTIiIGNvZGU9IsOVIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDIiIHJlY3Q9IjExOSA2OCA1IDExIiBjb2RlPSLDliIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA2IiByZWN0PSIxIDg3IDUgNSIgY29kZT0iw5ciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjAgNCIgcmVjdD0iNyA4NSA3IDkiIGNvZGU9IsOYIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjE1IDgyIDUgMTIiIGNvZGU9IsOZIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjIxIDgyIDUgMTIiIGNvZGU9IsOaIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjI3IDgyIDUgMTIiIGNvZGU9IsObIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDIiIHJlY3Q9IjMzIDgzIDUgMTEiIGNvZGU9IsOcIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDEiIHJlY3Q9IjM5IDgyIDUgMTIiIGNvZGU9IsOdIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjQ1IDg1IDUgOSIgY29kZT0iw54iLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iNTEgODUgNSA5IiBjb2RlPSLDnyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI1NyA4NCA1IDEwIiBjb2RlPSLDoCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI2MyA4NCA1IDEwIiBjb2RlPSLDoSIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI2OSA4NCA1IDEwIiBjb2RlPSLDoiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSI3NSA4NCA2IDEwIiBjb2RlPSLDoyIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI4MiA4NSA1IDkiIGNvZGU9IsOkIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDIiIHJlY3Q9Ijg4IDgzIDUgMTEiIGNvZGU9IsOlIi8%CiA8Q2hhciB3aWR0aD0iMTEiIG9mZnNldD0iMSA2IiByZWN0PSI5NCA4NyA5IDciIGNvZGU9IsOmIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDYiIHJlY3Q9IjEwNCA4NyA1IDkiIGNvZGU9IsOnIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjExMCA4NCA1IDEwIiBjb2RlPSLDqCIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSAzIiByZWN0PSIxMTYgODQgNSAxMCIgY29kZT0iw6kiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iMSA5NyA1IDEwIiBjb2RlPSLDqiIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSI3IDk4IDUgOSIgY29kZT0iw6siLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgMyIgcmVjdD0iMTMgOTcgMiAxMCIgY29kZT0iw6wiLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjEgMyIgcmVjdD0iMTYgOTcgMiAxMCIgY29kZT0iw60iLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgMyIgcmVjdD0iMTkgOTcgMyAxMCIgY29kZT0iw64iLz4KIDxDaGFyIHdpZHRoPSIzIiBvZmZzZXQ9IjAgNCIgcmVjdD0iMjMgOTggMyA5IiBjb2RlPSLDryIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIyNyA5OCA2IDkiIGNvZGU9IsOwIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjM0IDk3IDYgMTAiIGNvZGU9IsOxIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjQxIDk3IDUgMTAiIGNvZGU9IsOyIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjQ3IDk3IDUgMTAiIGNvZGU9IsOzIi8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjUzIDk3IDUgMTAiIGNvZGU9IsO0Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDMiIHJlY3Q9IjU5IDk3IDYgMTAiIGNvZGU9IsO1Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjY2IDk4IDUgOSIgY29kZT0iw7YiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNiIgcmVjdD0iNzIgMTAwIDUgNSIgY29kZT0iw7ciLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjAgNiIgcmVjdD0iNzggMTAwIDcgNyIgY29kZT0iw7giLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iODYgOTcgNSAxMCIgY29kZT0iw7kiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iOTIgOTcgNSAxMCIgY29kZT0iw7oiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iOTggOTcgNSAxMCIgY29kZT0iw7siLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgNCIgcmVjdD0iMTA0IDk4IDUgOSIgY29kZT0iw7wiLz4KIDxDaGFyIHdpZHRoPSI3IiBvZmZzZXQ9IjEgMyIgcmVjdD0iMTEwIDk3IDUgMTIiIGNvZGU9IsO9Ii8%CiA8Q2hhciB3aWR0aD0iNyIgb2Zmc2V0PSIxIDQiIHJlY3Q9IjExNiA5OCA1IDExIiBjb2RlPSLDviIvPgogPENoYXIgd2lkdGg9IjciIG9mZnNldD0iMSA0IiByZWN0PSIxIDExMCA1IDExIiBjb2RlPSLDvyIvPgo8L0ZvbnQ%Cg"));
		var bmp = new hxd_res_BitmapFont(DESC.entry);
		bmp.loader = BYTES.loader;
		fnt = bmp.toFont();
		engine.resCache.set(hxd_res_DefaultFont,fnt);
	}
	return fnt;
};
var hxd_res_Embed = function() { };
$hxClasses["hxd.res.Embed"] = hxd_res_Embed;
hxd_res_Embed.__name__ = "hxd.res.Embed";
var hxd_res_ImageFormat = {};
hxd_res_ImageFormat.getName = function(this1) {
	switch(this1) {
	case 0:
		return "JPG";
	case 1:
		return "PNG";
	case 2:
		return "GIF";
	case 3:
		return "TGA";
	case 4:
		return "DDS";
	case 5:
		return "RAW";
	case 6:
		return "HDR";
	}
};
var hxd_res_ImageInfoFlag = $hxEnums["hxd.res.ImageInfoFlag"] = { __ename__:true,__constructs__:null
	,IsCube: {_hx_name:"IsCube",_hx_index:0,__enum__:"hxd.res.ImageInfoFlag",toString:$estr}
	,Dxt10Header: {_hx_name:"Dxt10Header",_hx_index:1,__enum__:"hxd.res.ImageInfoFlag",toString:$estr}
};
hxd_res_ImageInfoFlag.__constructs__ = [hxd_res_ImageInfoFlag.IsCube,hxd_res_ImageInfoFlag.Dxt10Header];
hxd_res_ImageInfoFlag.__empty_constructs__ = [hxd_res_ImageInfoFlag.IsCube,hxd_res_ImageInfoFlag.Dxt10Header];
var hxd_res_ImageInfo = function() {
	this.layerCount = 1;
	this.mipOffset = 0;
	this.mipLevels = 1;
	this.height = 0;
	this.width = 0;
	this.flags = 0;
};
$hxClasses["hxd.res.ImageInfo"] = hxd_res_ImageInfo;
hxd_res_ImageInfo.__name__ = "hxd.res.ImageInfo";
hxd_res_ImageInfo.prototype = {
	__class__: hxd_res_ImageInfo
};
var hxd_res_Image = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Image"] = hxd_res_Image;
hxd_res_Image.__name__ = "hxd.res.Image";
hxd_res_Image.customCheckInfo = function(i) {
};
hxd_res_Image.setupTextureFlags = function(tex) {
};
hxd_res_Image.__super__ = hxd_res_Resource;
hxd_res_Image.prototype = $extend(hxd_res_Resource.prototype,{
	getInfo: function() {
		if(this.inf != null) {
			return this.inf;
		}
		this.inf = new hxd_res_ImageInfo();
		var f = this.entry.open();
		f.fetch(256);
		var head;
		try {
			head = f.readUInt16();
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				head = 0;
			} else {
				throw _g;
			}
		}
		switch(head) {
		case 16163:
			this.inf.dataFormat = 6;
			while(f.readLine() != "") {
			}
			var parts = f.readLine().split(" ");
			this.inf.pixelFormat = hxd_PixelFormat.RGBA32F;
			this.inf.height = Std.parseInt(parts[1]);
			this.inf.width = Std.parseInt(parts[3]);
			break;
		case 17476:
			this.inf.dataFormat = 4;
			f.skip(10);
			this.inf.height = f.readInt32();
			this.inf.width = f.readInt32();
			f.skip(8);
			this.inf.mipLevels = f.readInt32();
			f.skip(48);
			var caps = f.readInt32();
			var fourCC = f.readInt32();
			var bpp = f.readInt32();
			var rMask = f.readInt32();
			var gMask = f.readInt32();
			var bMask = f.readInt32();
			var aMask = f.readInt32();
			var caps2 = f.readInt32();
			var cubes = f.readInt32();
			if((cubes & 65024) == 65024) {
				this.inf.flags |= 1 << hxd_res_ImageInfoFlag.IsCube._hx_index;
			}
			switch(fourCC & 16777215) {
			case 0:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					switch(bpp) {
					case 16:
						if(rMask == 65535) {
							if(gMask == 0) {
								if(bMask == 0) {
									if(aMask == 0) {
										this.inf.pixelFormat = hxd_PixelFormat.R16U;
									} else {
										throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
						} else {
							throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
						}
						break;
					case 32:
						switch(rMask) {
						case 255:
							if(gMask == 65280) {
								if(bMask == 16711680) {
									if(aMask == -16777216) {
										this.inf.pixelFormat = hxd_PixelFormat.RGBA;
									} else {
										throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
							break;
						case 65535:
							if(gMask == -65536) {
								if(bMask == 0) {
									if(aMask == 0) {
										this.inf.pixelFormat = hxd_PixelFormat.RG16U;
									} else {
										throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
							break;
						case 16711680:
							if(gMask == 65280) {
								if(bMask == 255) {
									if(aMask == -16777216) {
										this.inf.pixelFormat = hxd_PixelFormat.BGRA;
									} else {
										throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
							break;
						default:
							throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
						}
						break;
					default:
						throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
					}
				}
				break;
			case 36:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RGBA16U;
				}
				break;
			case 111:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.R16F;
				}
				break;
			case 112:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RG16F;
				}
				break;
			case 113:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RGBA16F;
				}
				break;
			case 114:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.R32F;
				}
				break;
			case 115:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RG32F;
				}
				break;
			case 116:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RGBA32F;
				}
				break;
			case 4805697:
				var v = (fourCC >>> 24) - 48;
				var tmp;
				switch(v) {
				case 1:
					tmp = hxd_PixelFormat.S3TC(4);
					break;
				case 2:
					tmp = hxd_PixelFormat.S3TC(5);
					break;
				default:
					tmp = null;
				}
				this.inf.pixelFormat = tmp;
				break;
			case 5527620:
				var dxt = (fourCC >>> 24) - 48;
				var tmp;
				switch(dxt) {
				case 1:
					tmp = hxd_PixelFormat.S3TC(1);
					break;
				case 2:case 3:
					tmp = hxd_PixelFormat.S3TC(2);
					break;
				case 4:case 5:
					tmp = hxd_PixelFormat.S3TC(3);
					break;
				default:
					tmp = null;
				}
				this.inf.pixelFormat = tmp;
				break;
			default:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 28:
						tmp = hxd_PixelFormat.RGBA;
						break;
					case 71:
						tmp = hxd_PixelFormat.S3TC(1);
						break;
					case 74:
						tmp = hxd_PixelFormat.S3TC(2);
						break;
					case 77:
						tmp = hxd_PixelFormat.S3TC(3);
						break;
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
					var imgType = f.readInt32();
					f.skip(4);
					this.inf.layerCount = f.readInt32();
				}
			}
			if(this.inf.pixelFormat == null) {
				var fid = String.fromCodePoint((fourCC & 255)) + String.fromCodePoint((fourCC >> 8 & 255)) + String.fromCodePoint((fourCC >> 16 & 255)) + String.fromCodePoint((fourCC >>> 24));
				if((fourCC & 255) == fourCC) {
					fid = "" + fourCC;
				}
				throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported 4CC " + fid);
			}
			break;
		case 18759:
			this.inf.dataFormat = 2;
			this.inf.pixelFormat = hxd_PixelFormat.BGRA;
			f.readInt32();
			this.inf.width = f.readUInt16();
			this.inf.height = f.readUInt16();
			break;
		case 20617:
			this.inf.dataFormat = 1;
			f.set_bigEndian(true);
			f.skip(6);
			while(true) {
				var dataLen = f.readInt32();
				if(f.readInt32() == 1229472850) {
					this.inf.width = f.readInt32();
					this.inf.height = f.readInt32();
					var colbits = f.readByte();
					var colType = f.readByte();
					var tmp;
					switch(colbits) {
					case 8:
						tmp = hxd_PixelFormat.BGRA;
						break;
					case 16:
						switch(colType) {
						case 0:
							tmp = hxd_PixelFormat.R16U;
							break;
						case 2:
							tmp = hxd_PixelFormat.RGBA16U;
							break;
						case 4:
							tmp = hxd_PixelFormat.RG16U;
							break;
						case 6:
							tmp = hxd_PixelFormat.RGBA16U;
							break;
						default:
							throw haxe_Exception.thrown("Unsupported png format " + colbits + "/" + colType + "(" + this.entry.get_path() + ")");
						}
						break;
					default:
						throw haxe_Exception.thrown("Unsupported png format " + colbits + "/" + colType + "(" + this.entry.get_path() + ")");
					}
					this.inf.pixelFormat = tmp;
					break;
				}
				f.skip(dataLen + 4);
			}
			break;
		case 55551:
			this.inf.dataFormat = 0;
			this.inf.pixelFormat = hxd_PixelFormat.BGRA;
			f.set_bigEndian(true);
			_hx_loop3: while(true) switch(f.readUInt16()) {
			case 65472:case 65473:case 65474:
				var len = f.readUInt16();
				var prec = f.readByte();
				this.inf.height = f.readUInt16();
				this.inf.width = f.readUInt16();
				break _hx_loop3;
			default:
				f.skip(f.readUInt16() - 2);
			}
			break;
		default:
			if(this.entry.get_extension() == "tga") {
				this.inf.dataFormat = 3;
				this.inf.pixelFormat = hxd_PixelFormat.ARGB;
				f.skip(10);
				this.inf.width = f.readUInt16();
				this.inf.height = f.readUInt16();
			} else if(this.entry.get_extension() == "raw") {
				this.inf.dataFormat = 5;
				this.inf.pixelFormat = hxd_PixelFormat.R32F;
				var size = Math.sqrt(this.entry.get_size() >> 2) | 0;
				if(this.entry.get_size() != size * size * 4) {
					var size2 = Math.sqrt(this.entry.get_size() >> 1) | 0;
					if(this.entry.get_size() == size2 * size2 * 2) {
						this.inf.pixelFormat = hxd_PixelFormat.R16F;
						size = size2;
					} else {
						throw haxe_Exception.thrown("RAW format does not match 32 bit per components on " + size + "x" + size);
					}
				}
				this.inf.width = this.inf.height = size;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + this.entry.get_path());
			}
		}
		f.close();
		if(this.inf.pixelFormat == null) {
			throw haxe_Exception.thrown("Unsupported internal format (" + this.entry.get_path() + ")");
		}
		if(hxd_res_Image.MIPMAP_MAX_SIZE != 0 && this.inf.mipLevels > 1) {
			while(((this.inf.width | this.inf.height) & 7) == 0 && this.inf.width >> 1 >= hxd_res_Image.MIPMAP_MAX_SIZE && this.inf.height >> 1 >= hxd_res_Image.MIPMAP_MAX_SIZE) {
				this.inf.width >>= 1;
				this.inf.height >>= 1;
				this.inf.mipLevels--;
				this.inf.mipOffset++;
			}
		}
		hxd_res_Image.customCheckInfo(this);
		return this.inf;
	}
	,getPixels: function(fmt,index) {
		var pixels;
		if(index == null) {
			index = 0;
		}
		switch(this.getInfo().dataFormat) {
		case 0:
			var bytes = this.entry.getBytes();
			if(this.inf.pixelFormat != hxd_PixelFormat.BGRA) {
				throw haxe_Exception.thrown("No support to decode " + Std.string(this.inf.pixelFormat) + " on this platform (" + this.entry.get_path() + ")");
			}
			var p;
			try {
				p = hxd_res_NanoJpeg.decode(bytes);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown("Failed to decode JPG " + this.entry.get_path() + " (" + Std.string(e) + ")");
			}
			pixels = new hxd_Pixels(p.width,p.height,p.pixels,hxd_PixelFormat.BGRA);
			break;
		case 1:
			var bytes = this.entry.getBytes();
			var png = new format_png_Reader(new haxe_io_BytesInput(bytes));
			png.checkCRC = false;
			pixels = hxd_Pixels.alloc(this.inf.width,this.inf.height,this.inf.pixelFormat);
			var pdata = png.read();
			switch(this.inf.pixelFormat._hx_index) {
			case 1:
				format_png_Tools.extract32(pdata,pixels.bytes,false);
				break;
			case 18:case 19:case 20:case 21:
				var pixels1 = pixels.bytes;
				var tmp;
				if(this.inf.pixelFormat == hxd_PixelFormat.RGBA16U) {
					var _g = format_png_Tools.getHeader(pdata).color;
					tmp = _g._hx_index == 1 && _g.alpha == false;
				} else {
					tmp = false;
				}
				format_png_Tools.extract(pdata,pixels1,tmp);
				break;
			default:
				throw haxe_Exception.thrown("No support to decode " + Std.string(this.inf.pixelFormat) + " on this platform (" + this.entry.get_path() + ")");
			}
			break;
		case 2:
			var bytes = this.entry.getBytes();
			var gif = new format_gif_Reader(new haxe_io_BytesInput(bytes)).read();
			if(fmt == hxd_PixelFormat.RGBA) {
				pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullRGBA(gif,0),hxd_PixelFormat.RGBA);
			} else {
				pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullBGRA(gif,0),hxd_PixelFormat.BGRA);
			}
			break;
		case 3:
			var bytes = this.entry.getBytes();
			var r = new format_tga_Reader(new haxe_io_BytesInput(bytes)).read();
			if(r.header.imageType != format_tga_ImageType.UncompressedTrueColor || r.header.bitsPerPixel != 32) {
				throw haxe_Exception.thrown("Not supported TGA " + Std.string(r.header.imageType) + "/" + r.header.bitsPerPixel);
			}
			var w = r.header.width;
			var h = r.header.height;
			if(fmt == hxd_PixelFormat.RGBA) {
				pixels = hxd_Pixels.alloc(w,h,hxd_PixelFormat.RGBA);
				var bytes = pixels.bytes;
				var _g = 0;
				var _g1 = w * h;
				while(_g < _g1) {
					var i = _g++;
					var c = r.imageData[i];
					c = c >>> 24 | c << 8;
					bytes.setInt32(i << 2,c);
				}
			} else {
				pixels = hxd_Pixels.alloc(w,h,hxd_PixelFormat.ARGB);
				var access = hxd_PixelsARGB.fromPixels(pixels);
				var p = 0;
				var _g = 0;
				var _g1 = h;
				while(_g < _g1) {
					var y = _g++;
					var _g2 = 0;
					var _g3 = w;
					while(_g2 < _g3) {
						var x = _g2++;
						var c = r.imageData[p++];
						access.bytes.setInt32((x + y * access.width << 2) + access.offset,c >>> 24 | c >> 8 & 65280 | c << 8 & 16711680 | c << 24);
					}
				}
			}
			switch(r.header.imageOrigin._hx_index) {
			case 0:
				pixels.flipY();
				break;
			case 2:
				break;
			default:
				throw haxe_Exception.thrown("Not supported " + Std.string(r.header.imageOrigin));
			}
			break;
		case 4:
			var pos = 128;
			var mipLevel = 0;
			if((this.inf.flags & 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index) != 0) {
				pos += 20;
			}
			index += this.inf.mipOffset;
			if(index > 0) {
				var totLevels = this.inf.mipLevels + this.inf.mipOffset;
				var bpp = hxd_Pixels.calcStride(1,this.inf.pixelFormat);
				var layer = index / totLevels | 0;
				mipLevel = index % totLevels;
				var totSize = 0;
				var _g = 0;
				var _g1 = totLevels;
				while(_g < _g1) {
					var i = _g++;
					var w = this.inf.width << this.inf.mipOffset >> i;
					var h = this.inf.height << this.inf.mipOffset >> i;
					if(w == 0) {
						w = 1;
					}
					if(h == 0) {
						h = 1;
					}
					var size = hxd_Pixels.calcDataSize(w,h,this.inf.pixelFormat);
					totSize += size;
					if(i < mipLevel) {
						pos += size;
					} else if(layer == 0) {
						break;
					}
				}
				pos += totSize * layer;
			}
			var bytes;
			var w = this.inf.width >> mipLevel - this.inf.mipOffset;
			var h = this.inf.height >> mipLevel - this.inf.mipOffset;
			if(w == 0) {
				w = 1;
			}
			if(h == 0) {
				h = 1;
			}
			if(this.inf.mipLevels + this.inf.mipOffset == 1 && (this.inf.flags & 1 << hxd_res_ImageInfoFlag.IsCube._hx_index) == 0) {
				bytes = this.entry.getBytes();
			} else {
				var size = hxd_Pixels.calcDataSize(w,h,this.inf.pixelFormat);
				bytes = new haxe_io_Bytes(new ArrayBuffer(size));
				this.entry.readFull(bytes,pos,size);
				pos = 0;
			}
			pixels = new hxd_Pixels(w,h,bytes,this.inf.pixelFormat,pos);
			break;
		case 5:
			var bytes = this.entry.getBytes();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,bytes,this.inf.pixelFormat);
			break;
		case 6:
			var data = hxd_fmt_hdr_Reader.decode(this.entry.getBytes(),false);
			pixels = new hxd_Pixels(data.width,data.height,data.bytes,this.inf.pixelFormat);
			break;
		}
		if(fmt != null) {
			pixels.convert(fmt);
		}
		return pixels;
	}
	,watchCallb: function() {
		var prevInfo = this.inf;
		this.inf = null;
		try {
			this.getInfo();
		} catch( _g ) {
			this.inf = prevInfo;
			return;
		}
		var s = this.getInfo();
		if(prevInfo.width != s.width || prevInfo.height != s.height) {
			this.tex.resize(s.width,s.height);
		}
		this.tex.realloc = null;
		this.loadTexture();
	}
	,loadTexture: function(asyncData) {
		var _gthis = this;
		if(this.getInfo().dataFormat == 0) {
			this.tex.flags |= 1 << h3d_mat_TextureFlags.Loading._hx_index;
			this.entry.loadBitmap(function(bmp) {
				var bmp1 = hxd_fs_LoadedBitmap.toBitmap(bmp);
				_gthis.tex.alloc();
				_gthis.tex.uploadBitmap(bmp1);
				bmp1.ctx = null;
				bmp1.pixel = null;
				_gthis.tex.realloc = function() {
					_gthis.loadTexture();
				};
				_gthis.tex.flags &= -1 - (1 << h3d_mat_TextureFlags.Loading._hx_index);
				if(_gthis.tex.waitLoads != null) {
					var arr = _gthis.tex.waitLoads;
					_gthis.tex.waitLoads = null;
					var _g = 0;
					while(_g < arr.length) {
						var f = arr[_g];
						++_g;
						f();
					}
				}
				if(hxd_res_Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			});
			return;
		}
		var load = function() {
			if((_gthis.enableAsyncLoading || (_gthis.tex.flags & 1 << h3d_mat_TextureFlags.AsyncLoading._hx_index) != 0) && asyncData == null && hxd_res_Image.ASYNC_LOADER != null && hxd_res_Image.ASYNC_LOADER.isSupported(_gthis)) {
				_gthis.tex.dispose();
				_gthis.tex.format = hxd_PixelFormat.RGBA;
				_gthis.tex.width = 1;
				_gthis.tex.height = 1;
				_gthis.tex.customMipLevels = 1;
				_gthis.tex.flags |= 1 << h3d_mat_TextureFlags.Loading._hx_index;
				_gthis.tex.alloc();
				_gthis.tex.uploadPixels(hxd_res_Image.BLACK_1x1);
				_gthis.tex.width = _gthis.inf.width;
				_gthis.tex.height = _gthis.inf.height;
				hxd_res_Image.ASYNC_LOADER.load(_gthis);
				_gthis.tex.realloc = function() {
					_gthis.loadTexture();
				};
				return;
			}
			var t0 = HxOverrides.now() / 1000;
			_gthis.tex.customMipLevels = _gthis.inf.mipLevels;
			_gthis.tex.alloc();
			if(_gthis.inf.dataFormat == 4) {
				var pos = 128;
				if((_gthis.inf.flags & 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index) != 0) {
					pos += 20;
				}
				var _g = 0;
				var _g1 = _gthis.tex.get_layerCount();
				while(_g < _g1) {
					var layer = _g++;
					var _g2 = 0;
					var _g3 = _gthis.inf.mipOffset;
					while(_g2 < _g3) {
						var mip = _g2++;
						var w = _gthis.inf.width << _gthis.inf.mipOffset >> mip;
						var h = _gthis.inf.height << _gthis.inf.mipOffset >> mip;
						var size = hxd_Pixels.calcDataSize(w,h,_gthis.inf.pixelFormat);
						pos += size;
					}
					var _g4 = 0;
					var _g5 = _gthis.inf.mipLevels;
					while(_g4 < _g5) {
						var mip1 = _g4++;
						var w1 = _gthis.inf.width >> mip1;
						var h1 = _gthis.inf.height >> mip1;
						if(w1 == 0) {
							w1 = 1;
						}
						if(h1 == 0) {
							h1 = 1;
						}
						var size1 = hxd_Pixels.calcDataSize(w1,h1,_gthis.inf.pixelFormat);
						var bytes = asyncData == null ? _gthis.entry.fetchBytes(pos,size1) : asyncData;
						_gthis.tex.uploadPixels(new hxd_Pixels(w1,h1,bytes,_gthis.inf.pixelFormat,asyncData == null ? 0 : pos),mip1,layer);
						pos += size1;
					}
				}
			} else {
				var _g = 0;
				var _g1 = _gthis.tex.get_layerCount();
				while(_g < _g1) {
					var layer = _g++;
					var _g2 = 0;
					var _g3 = _gthis.inf.mipLevels;
					while(_g2 < _g3) {
						var mip = _g2++;
						var pixels = _gthis.getPixels(_gthis.tex.format,layer * _gthis.inf.mipLevels + mip);
						_gthis.tex.uploadPixels(pixels,mip,layer);
						pixels.dispose();
					}
				}
			}
			if(hxd_res_Image.LOG_TEXTURE_LOAD && asyncData == null) {
				var time = (HxOverrides.now() / 1000 - t0) * 1000.0;
				var _g = _gthis.inf.pixelFormat;
				var fmtStr;
				if(_g._hx_index == 22) {
					var _g1 = _g.v;
					fmtStr = true;
				} else {
					fmtStr = false;
				}
				var fmtStr1 = fmtStr ? "DXT" : hxd_res_ImageFormat.getName(_gthis.inf.dataFormat);
				haxe_Log.trace(fmtStr1 + " " + (time | 0) + "." + (time * 10 | 0) % 10 + "ms " + _gthis.inf.width + "x" + _gthis.inf.height + " " + _gthis.entry.get_path(),{ fileName : "hxd/res/Image.hx", lineNumber : 625, className : "hxd.res.Image", methodName : "loadTexture"});
			}
			_gthis.tex.realloc = function() {
				_gthis.loadTexture();
			};
			if(hxd_res_Image.ENABLE_AUTO_WATCH) {
				_gthis.watch($bind(_gthis,_gthis.watchCallb));
			}
		};
		if(this.entry.get_isAvailable()) {
			load();
		} else {
			this.entry.load(load);
		}
	}
	,toTexture: function() {
		var _gthis = this;
		if(this.tex != null) {
			return this.tex;
		}
		this.getInfo();
		var flags = [h3d_mat_TextureFlags.NoAlloc];
		var fmt = this.inf.pixelFormat;
		if(fmt == hxd_PixelFormat.BGRA || fmt == hxd_PixelFormat.ARGB || fmt == hxd_PixelFormat.RGBA) {
			fmt = h3d_mat_Texture.nativeFormat;
		}
		if((this.inf.flags & 1 << hxd_res_ImageInfoFlag.IsCube._hx_index) != 0) {
			flags.push(h3d_mat_TextureFlags.Cube);
		}
		if(this.inf.mipLevels > 1) {
			flags.push(h3d_mat_TextureFlags.MipMapped);
			flags.push(h3d_mat_TextureFlags.ManualMipMapGen);
		}
		if(this.inf.layerCount > 1) {
			this.tex = new h3d_mat_TextureArray(this.inf.width,this.inf.height,this.inf.layerCount,flags,fmt);
		} else {
			this.tex = new h3d_mat_Texture(this.inf.width,this.inf.height,flags,fmt);
		}
		if(hxd_res_Image.DEFAULT_FILTER != h3d_mat_Filter.Linear) {
			this.tex.set_filter(hxd_res_Image.DEFAULT_FILTER);
		}
		this.tex.setName(this.entry.get_path());
		hxd_res_Image.setupTextureFlags(this.tex);
		if((this.tex.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0 || (this.tex.flags & 1 << h3d_mat_TextureFlags.LazyLoading._hx_index) == 0) {
			this.loadTexture();
		} else {
			this.tex.realloc = function() {
				_gthis.loadTexture();
			};
		}
		return this.tex;
	}
	,toTile: function() {
		this.getInfo();
		return h2d_Tile.fromTexture(this.toTexture()).sub(0,0,this.inf.width,this.inf.height);
	}
	,__class__: hxd_res_Image
});
var hxd_res_Loader = function(fs) {
	this.fs = fs;
	this.cache = new haxe_ds_StringMap();
};
$hxClasses["hxd.res.Loader"] = hxd_res_Loader;
hxd_res_Loader.__name__ = "hxd.res.Loader";
hxd_res_Loader.prototype = {
	exists: function(path) {
		return this.fs.exists(path);
	}
	,load: function(path) {
		return new hxd_res_Any(this,this.fs.get(path));
	}
	,loadCache: function(path,c) {
		var res = this.cache.h[path];
		if(res == null) {
			var entry = this.fs.get(path);
			var old = hxd_res_Loader.currentInstance;
			hxd_res_Loader.currentInstance = this;
			res = Type.createInstance(c,[entry]);
			hxd_res_Loader.currentInstance = old;
			this.cache.h[path] = res;
		} else if((js_Boot.__downcastCheck(res,c) ? res : null) == null) {
			throw haxe_Exception.thrown(path + " has been reintrepreted from " + Std.string(js_Boot.getClass(res)) + " to " + Std.string(c));
		}
		return res;
	}
	,__class__: hxd_res_Loader
};
var hxd_res_Filter = $hxEnums["hxd.res.Filter"] = { __ename__:true,__constructs__:null
	,Fast: {_hx_name:"Fast",_hx_index:0,__enum__:"hxd.res.Filter",toString:$estr}
	,Chromatic: {_hx_name:"Chromatic",_hx_index:1,__enum__:"hxd.res.Filter",toString:$estr}
};
hxd_res_Filter.__constructs__ = [hxd_res_Filter.Fast,hxd_res_Filter.Chromatic];
hxd_res_Filter.__empty_constructs__ = [hxd_res_Filter.Fast,hxd_res_Filter.Chromatic];
var hxd_res__$NanoJpeg_Component = function() {
};
$hxClasses["hxd.res._NanoJpeg.Component"] = hxd_res__$NanoJpeg_Component;
hxd_res__$NanoJpeg_Component.__name__ = "hxd.res._NanoJpeg.Component";
hxd_res__$NanoJpeg_Component.prototype = {
	__class__: hxd_res__$NanoJpeg_Component
};
var hxd_res_NanoJpeg = function() {
	this.comps = [new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component()].slice(0);
	this.qtab = [new Array(64),new Array(64),new Array(64),new Array(64)].slice(0);
	this.counts = new Array(16);
	this.block = new Array(64);
	this.njZZ = [0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63].slice(0);
	this.vlctab = [null,null,null,null,null,null,null,null].slice(0);
};
$hxClasses["hxd.res.NanoJpeg"] = hxd_res_NanoJpeg;
hxd_res_NanoJpeg.__name__ = "hxd.res.NanoJpeg";
hxd_res_NanoJpeg.decode = function(bytes,filter,position,size) {
	if(size == null) {
		size = -1;
	}
	if(position == null) {
		position = 0;
	}
	if(hxd_res_NanoJpeg.inst == null) {
		hxd_res_NanoJpeg.inst = new hxd_res_NanoJpeg();
	}
	hxd_res_NanoJpeg.inst.njInit(bytes,position,size,filter);
	return hxd_res_NanoJpeg.inst.njDecode();
};
hxd_res_NanoJpeg.prototype = {
	njInit: function(bytes,pos,size,filter) {
		this.bytes = bytes;
		this.pos = pos;
		this.filter = filter == null ? hxd_res_Filter.Chromatic : filter;
		if(size < 0) {
			size = bytes.length - pos;
		}
		if(this.vlctab[0] == null) {
			this.vlctab[0] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[1] == null) {
			this.vlctab[1] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[2] == null) {
			this.vlctab[2] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[3] == null) {
			this.vlctab[3] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		this.size = size;
		this.qtused = 0;
		this.qtavail = 0;
		this.rstinterval = 0;
		this.length = 0;
		this.buf = 0;
		this.bufbits = 0;
		this.progressive = false;
		this.comps[0].dcpred = 0;
		this.comps[1].dcpred = 0;
		this.comps[2].dcpred = 0;
	}
	,cleanup: function() {
		this.bytes = null;
		var _g = 0;
		var _g1 = this.comps;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.pixels != null) {
				c.pixels = null;
			}
		}
		if(this.vlctab[0] != null) {
			this.vlctab[0] = null;
		}
		if(this.vlctab[1] != null) {
			this.vlctab[1] = null;
		}
		if(this.vlctab[2] != null) {
			this.vlctab[2] = null;
		}
		if(this.vlctab[3] != null) {
			this.vlctab[3] = null;
		}
		if(this.vlctab[4] != null) {
			this.vlctab[4] = null;
		}
		if(this.vlctab[5] != null) {
			this.vlctab[5] = null;
		}
		if(this.vlctab[6] != null) {
			this.vlctab[6] = null;
		}
		if(this.vlctab[7] != null) {
			this.vlctab[7] = null;
		}
	}
	,njShowBits: function(bits) {
		if(bits == 0) {
			return 0;
		}
		while(this.bufbits < bits) {
			if(this.size <= 0) {
				this.buf = this.buf << 8 | 255;
				this.bufbits += 8;
				continue;
			}
			var newbyte = this.bytes.b[this.pos];
			this.pos++;
			this.size--;
			this.bufbits += 8;
			this.buf = this.buf << 8 | newbyte;
			if(newbyte == 255) {
				var marker = this.bytes.b[this.pos];
				this.pos++;
				this.size--;
				switch(marker) {
				case 217:
					this.size = 0;
					break;
				case 0:case 255:
					break;
				default:
					this.buf = this.buf << 8 | marker;
					this.bufbits += 8;
				}
			}
		}
		return this.buf >> this.bufbits - bits & (1 << bits) - 1;
	}
	,njDecodeSOF: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.bytes.b[this.pos] != 8) {
			this.notSupported();
		}
		this.height = this.bytes.b[this.pos + 1] << 8 | this.bytes.b[this.pos + 2];
		this.width = this.bytes.b[this.pos + 3] << 8 | this.bytes.b[this.pos + 4];
		this.ncomp = this.bytes.b[this.pos + 5];
		this.pos += 6;
		this.size -= 6;
		this.length -= 6;
		switch(this.ncomp) {
		case 1:case 3:
			break;
		default:
			this.notSupported();
		}
		var ssxmax = 0;
		var ssymax = 0;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.cid = this.bytes.b[this.pos];
			c.ssx = this.bytes.b[this.pos + 1] >> 4;
			if((c.ssx & c.ssx - 1) != 0) {
				this.notSupported();
			}
			c.ssy = this.bytes.b[this.pos + 1] & 15;
			if((c.ssy & c.ssy - 1) != 0) {
				this.notSupported();
			}
			c.qtsel = this.bytes.b[this.pos + 2];
			this.pos += 3;
			this.size -= 3;
			this.length -= 3;
			this.qtused |= 1 << c.qtsel;
			if(c.ssx > ssxmax) {
				ssxmax = c.ssx;
			}
			if(c.ssy > ssymax) {
				ssymax = c.ssy;
			}
		}
		if(this.ncomp == 1) {
			var c = this.comps[0];
			ssymax = 1;
			ssxmax = ssymax;
			c.ssx = c.ssy = ssxmax;
		}
		this.mbsizex = ssxmax << 3;
		this.mbsizey = ssymax << 3;
		this.mbwidth = (this.width + this.mbsizex - 1) / this.mbsizex | 0;
		this.mbheight = (this.height + this.mbsizey - 1) / this.mbsizey | 0;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.width = (this.width * c.ssx + ssxmax - 1) / ssxmax | 0;
			c.stride = c.width + 7 & 2147483640;
			c.height = (this.height * c.ssy + ssymax - 1) / ssymax | 0;
			c.stride = this.mbwidth * this.mbsizex * c.ssx / ssxmax | 0;
			if(c.width < 3 && c.ssx != ssxmax || c.height < 3 && c.ssy != ssymax) {
				this.notSupported();
			}
			c.pixels = new haxe_io_Bytes(new ArrayBuffer(c.stride * (this.mbheight * this.mbsizey * c.ssy / ssymax | 0)));
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	,njDecodeDQT: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		while(this.length >= 65) {
			var i = this.bytes.b[this.pos];
			this.qtavail |= 1 << i;
			var t = this.qtab[i];
			var _g = 0;
			while(_g < 64) {
				var k = _g++;
				t[k] = this.bytes.b[this.pos + (k + 1)];
			}
			this.pos += 65;
			this.size -= 65;
			this.length -= 65;
		}
	}
	,njDecodeDHT: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		while(this.length >= 17) {
			var i = this.bytes.b[this.pos];
			i = i >> 4 & 1 | (i & 3) << 1;
			this.counts[0] = this.bytes.b[this.pos + 1];
			this.counts[1] = this.bytes.b[this.pos + 2];
			this.counts[2] = this.bytes.b[this.pos + 3];
			this.counts[3] = this.bytes.b[this.pos + 4];
			this.counts[4] = this.bytes.b[this.pos + 5];
			this.counts[5] = this.bytes.b[this.pos + 6];
			this.counts[6] = this.bytes.b[this.pos + 7];
			this.counts[7] = this.bytes.b[this.pos + 8];
			this.counts[8] = this.bytes.b[this.pos + 9];
			this.counts[9] = this.bytes.b[this.pos + 10];
			this.counts[10] = this.bytes.b[this.pos + 11];
			this.counts[11] = this.bytes.b[this.pos + 12];
			this.counts[12] = this.bytes.b[this.pos + 13];
			this.counts[13] = this.bytes.b[this.pos + 14];
			this.counts[14] = this.bytes.b[this.pos + 15];
			this.counts[15] = this.bytes.b[this.pos + 16];
			this.pos += 17;
			this.size -= 17;
			this.length -= 17;
			var vlc = this.vlctab[i];
			var vpos = 0;
			var remain = 65536;
			var spread = 65536;
			var _g = 1;
			while(_g < 17) {
				var codelen = _g++;
				spread >>= 1;
				var currcnt = this.counts[codelen - 1];
				if(currcnt == 0) {
					continue;
				}
				remain -= currcnt << 16 - codelen;
				var _g1 = 0;
				var _g2 = currcnt;
				while(_g1 < _g2) {
					var i1 = _g1++;
					var code = this.bytes.b[this.pos + i1];
					var _g3 = 0;
					var _g4 = spread;
					while(_g3 < _g4) {
						var j = _g3++;
						vlc.b[vpos++] = codelen;
						vlc.b[vpos++] = code;
					}
				}
				this.pos += currcnt;
				this.size -= currcnt;
				this.length -= currcnt;
			}
			while(remain-- != 0) {
				vlc.b[vpos] = 0;
				vpos += 2;
			}
		}
	}
	,njDecodeDRI: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		this.rstinterval = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	,njDecodeBlock: function(c,po) {
		var out = c.pixels;
		var value;
		var coef = 0;
		var _g = 0;
		while(_g < 64) {
			var i = _g++;
			this.block[i] = 0;
		}
		var c1 = c;
		var c2 = c1.dcpred;
		var vlc = this.vlctab[c.dctabsel];
		var value1 = this.njShowBits(16);
		var bits = vlc.b[value1 << 1];
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value1 = vlc.b[value1 << 1 | 1];
		this.vlcCode = value1;
		bits = value1 & 15;
		var tmp;
		if(bits == 0) {
			tmp = 0;
		} else {
			var r = this.njShowBits(bits);
			this.bufbits -= bits;
			value1 = r;
			if(value1 < 1 << bits - 1) {
				value1 += (-1 << bits) + 1;
			}
			tmp = value1;
		}
		c1.dcpred = c2 + tmp;
		var qt = this.qtab[c.qtsel];
		var at = this.vlctab[c.actabsel];
		this.block[0] = c.dcpred * qt[0];
		do {
			var value1 = this.njShowBits(16);
			var bits = at.b[value1 << 1];
			if(this.bufbits < bits) {
				this.njShowBits(bits);
			}
			this.bufbits -= bits;
			value1 = at.b[value1 << 1 | 1];
			this.vlcCode = value1;
			bits = value1 & 15;
			if(bits == 0) {
				value = 0;
			} else {
				var r = this.njShowBits(bits);
				this.bufbits -= bits;
				value1 = r;
				if(value1 < 1 << bits - 1) {
					value1 += (-1 << bits) + 1;
				}
				value = value1;
			}
			if(this.vlcCode == 0) {
				break;
			}
			coef += (this.vlcCode >> 4) + 1;
			this.block[this.njZZ[coef]] = value * qt[coef];
		} while(coef < 63);
		var bp = 0;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 8;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 16;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 24;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 32;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 40;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 48;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 56;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var po1 = po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[32] << 8;
		var x2 = this.block[48];
		var x3 = this.block[16];
		var x4 = this.block[8];
		var x5 = this.block[56];
		var x6 = this.block[40];
		var x7 = this.block[24];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[0] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[0] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 1 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[33] << 8;
		var x2 = this.block[49];
		var x3 = this.block[17];
		var x4 = this.block[9];
		var x5 = this.block[57];
		var x6 = this.block[41];
		var x7 = this.block[25];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[1] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[1] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 2 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[34] << 8;
		var x2 = this.block[50];
		var x3 = this.block[18];
		var x4 = this.block[10];
		var x5 = this.block[58];
		var x6 = this.block[42];
		var x7 = this.block[26];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[2] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[2] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 3 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[35] << 8;
		var x2 = this.block[51];
		var x3 = this.block[19];
		var x4 = this.block[11];
		var x5 = this.block[59];
		var x6 = this.block[43];
		var x7 = this.block[27];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[3] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[3] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 4 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[36] << 8;
		var x2 = this.block[52];
		var x3 = this.block[20];
		var x4 = this.block[12];
		var x5 = this.block[60];
		var x6 = this.block[44];
		var x7 = this.block[28];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[4] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[4] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 5 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[37] << 8;
		var x2 = this.block[53];
		var x3 = this.block[21];
		var x4 = this.block[13];
		var x5 = this.block[61];
		var x6 = this.block[45];
		var x7 = this.block[29];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[5] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[5] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 6 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[38] << 8;
		var x2 = this.block[54];
		var x3 = this.block[22];
		var x4 = this.block[14];
		var x5 = this.block[62];
		var x6 = this.block[46];
		var x7 = this.block[30];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[6] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[6] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 7 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[39] << 8;
		var x2 = this.block[55];
		var x3 = this.block[23];
		var x4 = this.block[15];
		var x5 = this.block[63];
		var x6 = this.block[47];
		var x7 = this.block[31];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[7] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[7] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
	}
	,notSupported: function() {
		throw haxe_Exception.thrown("This JPG file is not supported");
	}
	,njDecodeScan: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.bytes.b[this.pos] != this.ncomp) {
			this.notSupported();
		}
		this.pos += 1;
		this.size -= 1;
		this.length -= 1;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.dctabsel = this.bytes.b[this.pos + 1] >> 4 << 1;
			c.actabsel = (this.bytes.b[this.pos + 1] & 3) << 1 | 1;
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
		}
		var start = this.bytes.b[this.pos];
		var count = this.bytes.b[this.pos + 1];
		var other = this.bytes.b[this.pos + 2];
		if(!this.progressive && start != 0 || count != 63 - start || other != 0) {
			this.notSupported();
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		var mbx = 0;
		var mby = 0;
		var rstcount = this.rstinterval;
		var nextrst = 0;
		while(true) {
			var _g = 0;
			var _g1 = this.ncomp;
			while(_g < _g1) {
				var i = _g++;
				var c = this.comps[i];
				var _g2 = 0;
				var _g3 = c.ssy;
				while(_g2 < _g3) {
					var sby = _g2++;
					var _g4 = 0;
					var _g5 = c.ssx;
					while(_g4 < _g5) {
						var sbx = _g4++;
						this.njDecodeBlock(c,(mby * c.ssy + sby) * c.stride + mbx * c.ssx + sbx << 3);
					}
				}
			}
			if(++mbx >= this.mbwidth) {
				mbx = 0;
				if(++mby >= this.mbheight) {
					break;
				}
			}
			if(this.rstinterval != 0 && --rstcount == 0) {
				this.bufbits &= 248;
				var r = this.njShowBits(16);
				this.bufbits -= 16;
				var i1 = r;
				nextrst = nextrst + 1 & 7;
				rstcount = this.rstinterval;
				this.comps[0].dcpred = 0;
				this.comps[1].dcpred = 0;
				this.comps[2].dcpred = 0;
			}
		}
	}
	,njUpsampleH: function(c) {
		var xmax = c.width - 3;
		var cout = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var lout = cout;
		var lin = c.pixels;
		var pi = 0;
		var po = 0;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var x = 139 * lin.b[pi] + -11 * lin.b[pi + 1] + 64 >> 7;
			lout.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
			var x1 = 104 * lin.b[pi] + 27 * lin.b[pi + 1] + -3 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 1] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			var x2 = 28 * lin.b[pi] + 109 * lin.b[pi + 1] + -9 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 2] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			var _g2 = 0;
			var _g3 = xmax;
			while(_g2 < _g3) {
				var x3 = _g2++;
				var x4 = -9 * lin.b[pi + x3] + 111 * lin.b[pi + x3 + 1] + 29 * lin.b[pi + x3 + 2] + -3 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 3] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				var x5 = -3 * lin.b[pi + x3] + 29 * lin.b[pi + x3 + 1] + 111 * lin.b[pi + x3 + 2] + -9 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 4] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			}
			pi += c.stride;
			po += c.width << 1;
			var x6 = 28 * lin.b[pi - 1] + 109 * lin.b[pi - 2] + -9 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 3] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			var x7 = 104 * lin.b[pi - 1] + 27 * lin.b[pi - 2] + -3 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 2] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			var x8 = 139 * lin.b[pi - 1] + -11 * lin.b[pi - 2] + 64 >> 7;
			lout.b[po - 1] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.width <<= 1;
		c.stride = c.width;
		c.pixels = cout;
	}
	,njUpsampleV: function(c) {
		var w = c.width;
		var s1 = c.stride;
		var s2 = s1 + s1;
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var pi = 0;
		var po = 0;
		var cout = out;
		var cin = c.pixels;
		var _g = 0;
		var _g1 = w;
		while(_g < _g1) {
			var x = _g++;
			po = x;
			pi = po;
			var x1 = 139 * cin.b[pi] + -11 * cin.b[pi + s1] + 64 >> 7;
			cout.b[po] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po += w;
			var x2 = 104 * cin.b[pi] + 27 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po += w;
			var x3 = 28 * cin.b[pi] + 109 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po += w;
			pi += s1;
			var _g2 = 0;
			var _g3 = c.height - 2;
			while(_g2 < _g3) {
				var y = _g2++;
				var x4 = -9 * cin.b[pi - s1] + 111 * cin.b[pi] + 29 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				po += w;
				var x5 = -3 * cin.b[pi - s1] + 29 * cin.b[pi] + 111 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
				po += w;
				pi += s1;
			}
			pi += s1;
			var x6 = 28 * cin.b[pi] + 109 * cin.b[pi - s1] + -9 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po += w;
			var x7 = 104 * cin.b[pi] + 27 * cin.b[pi - s1] + -3 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			po += w;
			var x8 = 139 * cin.b[pi] + -11 * cin.b[pi - s1] + 64 >> 7;
			cout.b[po] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.height <<= 1;
		c.stride = c.width;
		c.pixels = out;
	}
	,njUpsample: function(c) {
		var xshift = 0;
		var yshift = 0;
		while(c.width < this.width) {
			c.width <<= 1;
			++xshift;
		}
		while(c.height < this.height) {
			c.height <<= 1;
			++yshift;
		}
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height));
		var lin = c.pixels;
		var pout = 0;
		var lout = out;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var pin = (y >> yshift) * c.stride;
			var _g2 = 0;
			var _g3 = c.width;
			while(_g2 < _g3) {
				var x = _g2++;
				lout.b[pout++] = lin.b[(x >> xshift) + pin];
			}
		}
		c.stride = c.width;
		c.pixels = out;
	}
	,njConvert: function() {
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			switch(this.filter._hx_index) {
			case 0:
				if(c.width < this.width || c.height < this.height) {
					this.njUpsample(c);
				}
				break;
			case 1:
				while(c.width < this.width || c.height < this.height) {
					if(c.width < this.width) {
						this.njUpsampleH(c);
					}
					if(c.height < this.height) {
						this.njUpsampleV(c);
					}
				}
				break;
			}
			if(c.width < this.width || c.height < this.height) {
				throw haxe_Exception.thrown("assert");
			}
		}
		var pixels = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height * 4));
		if(this.ncomp == 3) {
			var py = this.comps[0].pixels;
			var pcb = this.comps[1].pixels;
			var pcr = this.comps[2].pixels;
			var pix = pixels;
			var k1 = 0;
			var k2 = 0;
			var k3 = 0;
			var out = 0;
			var _g = 0;
			var _g1 = this.height;
			while(_g < _g1) {
				var yy = _g++;
				var _g2 = 0;
				var _g3 = this.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var y = py.b[k1++] << 8;
					var cb = pcb.b[k2++] - 128;
					var cr = pcr.b[k3++] - 128;
					var x1 = y + 359 * cr + 128 >> 8;
					var r = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
					var x2 = y - 88 * cb - 183 * cr + 128 >> 8;
					var g = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
					var x3 = y + 454 * cb + 128 >> 8;
					var b = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
					pix.b[out++] = b;
					pix.b[out++] = g;
					pix.b[out++] = r;
					pix.b[out++] = 255;
				}
				k1 += this.comps[0].stride - this.width;
				k2 += this.comps[1].stride - this.width;
				k3 += this.comps[2].stride - this.width;
			}
		} else {
			throw haxe_Exception.thrown("TODO");
		}
		return pixels;
	}
	,njDecode: function() {
		if(this.size < 2 || this.bytes.b[this.pos] != 255 || this.bytes.b[this.pos + 1] != 216) {
			throw haxe_Exception.thrown("This file is not a JPEG");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		_hx_loop1: while(true) {
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			switch(this.bytes.b[this.pos + (-1)]) {
			case 192:
				this.njDecodeSOF();
				break;
			case 194:
				this.progressive = true;
				if(this.progressive) {
					throw haxe_Exception.thrown("Unsupported progressive JPG");
				}
				if(this.vlctab[4] == null) {
					this.vlctab[4] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[5] == null) {
					this.vlctab[5] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[6] == null) {
					this.vlctab[6] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[7] == null) {
					this.vlctab[7] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				this.njDecodeSOF();
				break;
			case 195:
				throw haxe_Exception.thrown("Unsupported lossless JPG");
			case 196:
				this.njDecodeDHT();
				break;
			case 218:
				this.njDecodeScan();
				break _hx_loop1;
			case 219:
				this.njDecodeDQT();
				break;
			case 221:
				this.njDecodeDRI();
				break;
			case 254:
				this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
				this.pos += 2;
				this.size -= 2;
				this.length -= 2;
				var count = this.length;
				this.pos += count;
				this.size -= count;
				this.length -= count;
				break;
			default:
				switch(this.bytes.b[this.pos + (-1)] & 240) {
				case 192:
					throw haxe_Exception.thrown("Unsupported jpeg type " + (this.bytes.b[this.pos + (-1)] & 15));
				case 224:
					this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
					this.pos += 2;
					this.size -= 2;
					this.length -= 2;
					var count1 = this.length;
					this.pos += count1;
					this.size -= count1;
					this.length -= count1;
					break;
				default:
					throw haxe_Exception.thrown("Unsupported jpeg tag 0x" + StringTools.hex(this.bytes.b[this.pos + (-1)],2));
				}
			}
		}
		var pixels = this.njConvert();
		this.cleanup();
		return { pixels : pixels, width : this.width, height : this.height};
	}
	,__class__: hxd_res_NanoJpeg
};
var hxparse_LexerTokenSource = function(lexer,ruleset) {
	this.lexer = lexer;
	this.ruleset = ruleset;
};
$hxClasses["hxparse.LexerTokenSource"] = hxparse_LexerTokenSource;
hxparse_LexerTokenSource.__name__ = "hxparse.LexerTokenSource";
hxparse_LexerTokenSource.prototype = {
	token: function() {
		return this.lexer.token(this.ruleset);
	}
	,curPos: function() {
		var _this = this.lexer;
		return new hxparse_Position(_this.source,_this.pos - _this.current.length,_this.pos);
	}
	,__class__: hxparse_LexerTokenSource
};
var hxparse_NoMatch = function(pos,token) {
	hxparse_ParserError.call(this,pos);
	this.token = token;
};
$hxClasses["hxparse.NoMatch"] = hxparse_NoMatch;
hxparse_NoMatch.__name__ = "hxparse.NoMatch";
hxparse_NoMatch.__super__ = hxparse_ParserError;
hxparse_NoMatch.prototype = $extend(hxparse_ParserError.prototype,{
	toString: function() {
		return "No match: " + Std.string(this.token);
	}
	,__class__: hxparse_NoMatch
});
var hxparse_State = function() {
	this.finalId = -1;
	this.trans = new Array(256);
};
$hxClasses["hxparse.State"] = hxparse_State;
hxparse_State.__name__ = "hxparse.State";
hxparse_State.prototype = {
	__class__: hxparse_State
};
var hxparse_UnexpectedChar = function(char,pos) {
	hxparse_ParserError.call(this,pos);
	this.char = char;
};
$hxClasses["hxparse.UnexpectedChar"] = hxparse_UnexpectedChar;
hxparse_UnexpectedChar.__name__ = "hxparse.UnexpectedChar";
hxparse_UnexpectedChar.__super__ = hxparse_ParserError;
hxparse_UnexpectedChar.prototype = $extend(hxparse_ParserError.prototype,{
	toString: function() {
		return "Unexpected " + this.char;
	}
	,__class__: hxparse_UnexpectedChar
});
var hxsl_BufferKind = $hxEnums["hxsl.BufferKind"] = { __ename__:true,__constructs__:null
	,Uniform: {_hx_name:"Uniform",_hx_index:0,__enum__:"hxsl.BufferKind",toString:$estr}
	,Storage: {_hx_name:"Storage",_hx_index:1,__enum__:"hxsl.BufferKind",toString:$estr}
	,RW: {_hx_name:"RW",_hx_index:2,__enum__:"hxsl.BufferKind",toString:$estr}
	,Partial: {_hx_name:"Partial",_hx_index:3,__enum__:"hxsl.BufferKind",toString:$estr}
	,StoragePartial: {_hx_name:"StoragePartial",_hx_index:4,__enum__:"hxsl.BufferKind",toString:$estr}
	,RWPartial: {_hx_name:"RWPartial",_hx_index:5,__enum__:"hxsl.BufferKind",toString:$estr}
};
hxsl_BufferKind.__constructs__ = [hxsl_BufferKind.Uniform,hxsl_BufferKind.Storage,hxsl_BufferKind.RW,hxsl_BufferKind.Partial,hxsl_BufferKind.StoragePartial,hxsl_BufferKind.RWPartial];
hxsl_BufferKind.__empty_constructs__ = [hxsl_BufferKind.Uniform,hxsl_BufferKind.Storage,hxsl_BufferKind.RW,hxsl_BufferKind.Partial,hxsl_BufferKind.StoragePartial,hxsl_BufferKind.RWPartial];
var hxsl_TexDimension = $hxEnums["hxsl.TexDimension"] = { __ename__:true,__constructs__:null
	,T1D: {_hx_name:"T1D",_hx_index:0,__enum__:"hxsl.TexDimension",toString:$estr}
	,T2D: {_hx_name:"T2D",_hx_index:1,__enum__:"hxsl.TexDimension",toString:$estr}
	,T3D: {_hx_name:"T3D",_hx_index:2,__enum__:"hxsl.TexDimension",toString:$estr}
	,TCube: {_hx_name:"TCube",_hx_index:3,__enum__:"hxsl.TexDimension",toString:$estr}
};
hxsl_TexDimension.__constructs__ = [hxsl_TexDimension.T1D,hxsl_TexDimension.T2D,hxsl_TexDimension.T3D,hxsl_TexDimension.TCube];
hxsl_TexDimension.__empty_constructs__ = [hxsl_TexDimension.T1D,hxsl_TexDimension.T2D,hxsl_TexDimension.T3D,hxsl_TexDimension.TCube];
var hxsl_Type = $hxEnums["hxsl.Type"] = { __ename__:true,__constructs__:null
	,TVoid: {_hx_name:"TVoid",_hx_index:0,__enum__:"hxsl.Type",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"hxsl.Type",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:2,__enum__:"hxsl.Type",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:3,__enum__:"hxsl.Type",toString:$estr}
	,TString: {_hx_name:"TString",_hx_index:4,__enum__:"hxsl.Type",toString:$estr}
	,TVec: ($_=function(size,t) { return {_hx_index:5,size:size,t:t,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TVec",$_.__params__ = ["size","t"],$_)
	,TMat3: {_hx_name:"TMat3",_hx_index:6,__enum__:"hxsl.Type",toString:$estr}
	,TMat4: {_hx_name:"TMat4",_hx_index:7,__enum__:"hxsl.Type",toString:$estr}
	,TMat3x4: {_hx_name:"TMat3x4",_hx_index:8,__enum__:"hxsl.Type",toString:$estr}
	,TBytes: ($_=function(size) { return {_hx_index:9,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TBytes",$_.__params__ = ["size"],$_)
	,TSampler: ($_=function(dim,isArray) { return {_hx_index:10,dim:dim,isArray:isArray,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TSampler",$_.__params__ = ["dim","isArray"],$_)
	,TRWTexture: ($_=function(dim,isArray,channels) { return {_hx_index:11,dim:dim,isArray:isArray,channels:channels,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TRWTexture",$_.__params__ = ["dim","isArray","channels"],$_)
	,TMat2: {_hx_name:"TMat2",_hx_index:12,__enum__:"hxsl.Type",toString:$estr}
	,TStruct: ($_=function(vl) { return {_hx_index:13,vl:vl,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TStruct",$_.__params__ = ["vl"],$_)
	,TFun: ($_=function(variants) { return {_hx_index:14,variants:variants,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TFun",$_.__params__ = ["variants"],$_)
	,TArray: ($_=function(t,size) { return {_hx_index:15,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TArray",$_.__params__ = ["t","size"],$_)
	,TBuffer: ($_=function(t,size,kind) { return {_hx_index:16,t:t,size:size,kind:kind,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TBuffer",$_.__params__ = ["t","size","kind"],$_)
	,TChannel: ($_=function(size) { return {_hx_index:17,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_._hx_name="TChannel",$_.__params__ = ["size"],$_)
};
hxsl_Type.__constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TVec,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TBytes,hxsl_Type.TSampler,hxsl_Type.TRWTexture,hxsl_Type.TMat2,hxsl_Type.TStruct,hxsl_Type.TFun,hxsl_Type.TArray,hxsl_Type.TBuffer,hxsl_Type.TChannel];
hxsl_Type.__empty_constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TMat2];
var hxsl_VecType = $hxEnums["hxsl.VecType"] = { __ename__:true,__constructs__:null
	,VInt: {_hx_name:"VInt",_hx_index:0,__enum__:"hxsl.VecType",toString:$estr}
	,VFloat: {_hx_name:"VFloat",_hx_index:1,__enum__:"hxsl.VecType",toString:$estr}
	,VBool: {_hx_name:"VBool",_hx_index:2,__enum__:"hxsl.VecType",toString:$estr}
};
hxsl_VecType.__constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
hxsl_VecType.__empty_constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
var hxsl_SizeDecl = $hxEnums["hxsl.SizeDecl"] = { __ename__:true,__constructs__:null
	,SConst: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_._hx_name="SConst",$_.__params__ = ["v"],$_)
	,SVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_._hx_name="SVar",$_.__params__ = ["v"],$_)
};
hxsl_SizeDecl.__constructs__ = [hxsl_SizeDecl.SConst,hxsl_SizeDecl.SVar];
hxsl_SizeDecl.__empty_constructs__ = [];
var hxsl_Error = function(msg,pos) {
	this.msg = msg;
	this.pos = pos;
};
$hxClasses["hxsl.Error"] = hxsl_Error;
hxsl_Error.__name__ = "hxsl.Error";
hxsl_Error.t = function(msg,pos) {
	throw haxe_Exception.thrown(new hxsl_Error(msg,pos));
};
hxsl_Error.prototype = {
	toString: function() {
		return "Error(" + this.msg + ")@" + Std.string(this.pos);
	}
	,__class__: hxsl_Error
};
var hxsl_VarKind = $hxEnums["hxsl.VarKind"] = { __ename__:true,__constructs__:null
	,Global: {_hx_name:"Global",_hx_index:0,__enum__:"hxsl.VarKind",toString:$estr}
	,Input: {_hx_name:"Input",_hx_index:1,__enum__:"hxsl.VarKind",toString:$estr}
	,Param: {_hx_name:"Param",_hx_index:2,__enum__:"hxsl.VarKind",toString:$estr}
	,Var: {_hx_name:"Var",_hx_index:3,__enum__:"hxsl.VarKind",toString:$estr}
	,Local: {_hx_name:"Local",_hx_index:4,__enum__:"hxsl.VarKind",toString:$estr}
	,Output: {_hx_name:"Output",_hx_index:5,__enum__:"hxsl.VarKind",toString:$estr}
	,Function: {_hx_name:"Function",_hx_index:6,__enum__:"hxsl.VarKind",toString:$estr}
};
hxsl_VarKind.__constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
hxsl_VarKind.__empty_constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
var hxsl_VarQualifier = $hxEnums["hxsl.VarQualifier"] = { __ename__:true,__constructs__:null
	,Const: ($_=function(max) { return {_hx_index:0,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Const",$_.__params__ = ["max"],$_)
	,Private: {_hx_name:"Private",_hx_index:1,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Nullable: {_hx_name:"Nullable",_hx_index:2,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerObject: {_hx_name:"PerObject",_hx_index:3,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Name: ($_=function(n) { return {_hx_index:4,n:n,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Name",$_.__params__ = ["n"],$_)
	,Shared: {_hx_name:"Shared",_hx_index:5,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Precision: ($_=function(p) { return {_hx_index:6,p:p,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Precision",$_.__params__ = ["p"],$_)
	,Range: ($_=function(min,max) { return {_hx_index:7,min:min,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Range",$_.__params__ = ["min","max"],$_)
	,Ignore: {_hx_name:"Ignore",_hx_index:8,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerInstance: ($_=function(v) { return {_hx_index:9,v:v,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="PerInstance",$_.__params__ = ["v"],$_)
	,Doc: ($_=function(s) { return {_hx_index:10,s:s,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Doc",$_.__params__ = ["s"],$_)
	,Borrow: ($_=function(source) { return {_hx_index:11,source:source,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Borrow",$_.__params__ = ["source"],$_)
	,Sampler: ($_=function(name) { return {_hx_index:12,name:name,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_._hx_name="Sampler",$_.__params__ = ["name"],$_)
	,Final: {_hx_name:"Final",_hx_index:13,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Flat: {_hx_name:"Flat",_hx_index:14,__enum__:"hxsl.VarQualifier",toString:$estr}
};
hxsl_VarQualifier.__constructs__ = [hxsl_VarQualifier.Const,hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Name,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Precision,hxsl_VarQualifier.Range,hxsl_VarQualifier.Ignore,hxsl_VarQualifier.PerInstance,hxsl_VarQualifier.Doc,hxsl_VarQualifier.Borrow,hxsl_VarQualifier.Sampler,hxsl_VarQualifier.Final,hxsl_VarQualifier.Flat];
hxsl_VarQualifier.__empty_constructs__ = [hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Ignore,hxsl_VarQualifier.Final,hxsl_VarQualifier.Flat];
var hxsl_Prec = $hxEnums["hxsl.Prec"] = { __ename__:true,__constructs__:null
	,Low: {_hx_name:"Low",_hx_index:0,__enum__:"hxsl.Prec",toString:$estr}
	,Medium: {_hx_name:"Medium",_hx_index:1,__enum__:"hxsl.Prec",toString:$estr}
	,High: {_hx_name:"High",_hx_index:2,__enum__:"hxsl.Prec",toString:$estr}
};
hxsl_Prec.__constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
hxsl_Prec.__empty_constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
var hxsl_Const = $hxEnums["hxsl.Const"] = { __ename__:true,__constructs__:null
	,CNull: {_hx_name:"CNull",_hx_index:0,__enum__:"hxsl.Const",toString:$estr}
	,CBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"hxsl.Const",toString:$estr}; },$_._hx_name="CBool",$_.__params__ = ["b"],$_)
	,CInt: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_._hx_name="CInt",$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_._hx_name="CFloat",$_.__params__ = ["v"],$_)
	,CString: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_._hx_name="CString",$_.__params__ = ["v"],$_)
};
hxsl_Const.__constructs__ = [hxsl_Const.CNull,hxsl_Const.CBool,hxsl_Const.CInt,hxsl_Const.CFloat,hxsl_Const.CString];
hxsl_Const.__empty_constructs__ = [hxsl_Const.CNull];
var hxsl_ExprDef = $hxEnums["hxsl.ExprDef"] = { __ename__:true,__constructs__:null
	,EConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EConst",$_.__params__ = ["c"],$_)
	,EIdent: ($_=function(i) { return {_hx_index:1,i:i,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EIdent",$_.__params__ = ["i"],$_)
	,EParenthesis: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EParenthesis",$_.__params__ = ["e"],$_)
	,EField: ($_=function(e,f) { return {_hx_index:3,e:e,f:f,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EField",$_.__params__ = ["e","f"],$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:4,op:op,e1:e1,e2:e2,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EBinop",$_.__params__ = ["op","e1","e2"],$_)
	,EUnop: ($_=function(op,e1) { return {_hx_index:5,op:op,e1:e1,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EUnop",$_.__params__ = ["op","e1"],$_)
	,ECall: ($_=function(e,args) { return {_hx_index:6,e:e,args:args,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="ECall",$_.__params__ = ["e","args"],$_)
	,EBlock: ($_=function(el) { return {_hx_index:7,el:el,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EBlock",$_.__params__ = ["el"],$_)
	,EVars: ($_=function(v) { return {_hx_index:8,v:v,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EVars",$_.__params__ = ["v"],$_)
	,EFunction: ($_=function(f) { return {_hx_index:9,f:f,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EFunction",$_.__params__ = ["f"],$_)
	,EIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EIf",$_.__params__ = ["econd","eif","eelse"],$_)
	,EDiscard: {_hx_name:"EDiscard",_hx_index:11,__enum__:"hxsl.ExprDef",toString:$estr}
	,EFor: ($_=function(v,loop,block) { return {_hx_index:12,v:v,loop:loop,block:block,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EFor",$_.__params__ = ["v","loop","block"],$_)
	,EReturn: ($_=function(e) { return {_hx_index:13,e:e,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EReturn",$_.__params__ = ["e"],$_)
	,EBreak: {_hx_name:"EBreak",_hx_index:14,__enum__:"hxsl.ExprDef",toString:$estr}
	,EContinue: {_hx_name:"EContinue",_hx_index:15,__enum__:"hxsl.ExprDef",toString:$estr}
	,EArray: ($_=function(e,eindex) { return {_hx_index:16,e:e,eindex:eindex,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EArray",$_.__params__ = ["e","eindex"],$_)
	,EArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EArrayDecl",$_.__params__ = ["el"],$_)
	,ESwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="ESwitch",$_.__params__ = ["e","cases","def"],$_)
	,EWhile: ($_=function(cond,loop,normalWhile) { return {_hx_index:19,cond:cond,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EWhile",$_.__params__ = ["cond","loop","normalWhile"],$_)
	,EMeta: ($_=function(name,args,e) { return {_hx_index:20,name:name,args:args,e:e,__enum__:"hxsl.ExprDef",toString:$estr}; },$_._hx_name="EMeta",$_.__params__ = ["name","args","e"],$_)
};
hxsl_ExprDef.__constructs__ = [hxsl_ExprDef.EConst,hxsl_ExprDef.EIdent,hxsl_ExprDef.EParenthesis,hxsl_ExprDef.EField,hxsl_ExprDef.EBinop,hxsl_ExprDef.EUnop,hxsl_ExprDef.ECall,hxsl_ExprDef.EBlock,hxsl_ExprDef.EVars,hxsl_ExprDef.EFunction,hxsl_ExprDef.EIf,hxsl_ExprDef.EDiscard,hxsl_ExprDef.EFor,hxsl_ExprDef.EReturn,hxsl_ExprDef.EBreak,hxsl_ExprDef.EContinue,hxsl_ExprDef.EArray,hxsl_ExprDef.EArrayDecl,hxsl_ExprDef.ESwitch,hxsl_ExprDef.EWhile,hxsl_ExprDef.EMeta];
hxsl_ExprDef.__empty_constructs__ = [hxsl_ExprDef.EDiscard,hxsl_ExprDef.EBreak,hxsl_ExprDef.EContinue];
var hxsl_TExprDef = $hxEnums["hxsl.TExprDef"] = { __ename__:true,__constructs__:null
	,TConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TConst",$_.__params__ = ["c"],$_)
	,TVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TVar",$_.__params__ = ["v"],$_)
	,TGlobal: ($_=function(g) { return {_hx_index:2,g:g,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TGlobal",$_.__params__ = ["g"],$_)
	,TParenthesis: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TParenthesis",$_.__params__ = ["e"],$_)
	,TBlock: ($_=function(el) { return {_hx_index:4,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TBlock",$_.__params__ = ["el"],$_)
	,TBinop: ($_=function(op,e1,e2) { return {_hx_index:5,op:op,e1:e1,e2:e2,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TBinop",$_.__params__ = ["op","e1","e2"],$_)
	,TUnop: ($_=function(op,e1) { return {_hx_index:6,op:op,e1:e1,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TUnop",$_.__params__ = ["op","e1"],$_)
	,TVarDecl: ($_=function(v,init) { return {_hx_index:7,v:v,init:init,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TVarDecl",$_.__params__ = ["v","init"],$_)
	,TCall: ($_=function(e,args) { return {_hx_index:8,e:e,args:args,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TCall",$_.__params__ = ["e","args"],$_)
	,TSwiz: ($_=function(e,regs) { return {_hx_index:9,e:e,regs:regs,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TSwiz",$_.__params__ = ["e","regs"],$_)
	,TIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TIf",$_.__params__ = ["econd","eif","eelse"],$_)
	,TDiscard: {_hx_name:"TDiscard",_hx_index:11,__enum__:"hxsl.TExprDef",toString:$estr}
	,TReturn: ($_=function(e) { return {_hx_index:12,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TReturn",$_.__params__ = ["e"],$_)
	,TFor: ($_=function(v,it,loop) { return {_hx_index:13,v:v,it:it,loop:loop,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TFor",$_.__params__ = ["v","it","loop"],$_)
	,TContinue: {_hx_name:"TContinue",_hx_index:14,__enum__:"hxsl.TExprDef",toString:$estr}
	,TBreak: {_hx_name:"TBreak",_hx_index:15,__enum__:"hxsl.TExprDef",toString:$estr}
	,TArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TArray",$_.__params__ = ["e","index"],$_)
	,TArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TArrayDecl",$_.__params__ = ["el"],$_)
	,TSwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TSwitch",$_.__params__ = ["e","cases","def"],$_)
	,TWhile: ($_=function(e,loop,normalWhile) { return {_hx_index:19,e:e,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TWhile",$_.__params__ = ["e","loop","normalWhile"],$_)
	,TMeta: ($_=function(m,args,e) { return {_hx_index:20,m:m,args:args,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TMeta",$_.__params__ = ["m","args","e"],$_)
	,TField: ($_=function(e,name) { return {_hx_index:21,e:e,name:name,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TField",$_.__params__ = ["e","name"],$_)
	,TSyntax: ($_=function(target,code,args) { return {_hx_index:22,target:target,code:code,args:args,__enum__:"hxsl.TExprDef",toString:$estr}; },$_._hx_name="TSyntax",$_.__params__ = ["target","code","args"],$_)
};
hxsl_TExprDef.__constructs__ = [hxsl_TExprDef.TConst,hxsl_TExprDef.TVar,hxsl_TExprDef.TGlobal,hxsl_TExprDef.TParenthesis,hxsl_TExprDef.TBlock,hxsl_TExprDef.TBinop,hxsl_TExprDef.TUnop,hxsl_TExprDef.TVarDecl,hxsl_TExprDef.TCall,hxsl_TExprDef.TSwiz,hxsl_TExprDef.TIf,hxsl_TExprDef.TDiscard,hxsl_TExprDef.TReturn,hxsl_TExprDef.TFor,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak,hxsl_TExprDef.TArray,hxsl_TExprDef.TArrayDecl,hxsl_TExprDef.TSwitch,hxsl_TExprDef.TWhile,hxsl_TExprDef.TMeta,hxsl_TExprDef.TField,hxsl_TExprDef.TSyntax];
hxsl_TExprDef.__empty_constructs__ = [hxsl_TExprDef.TDiscard,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak];
var hxsl_FunctionKind = $hxEnums["hxsl.FunctionKind"] = { __ename__:true,__constructs__:null
	,Vertex: {_hx_name:"Vertex",_hx_index:0,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Fragment: {_hx_name:"Fragment",_hx_index:1,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Init: {_hx_name:"Init",_hx_index:2,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Helper: {_hx_name:"Helper",_hx_index:3,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Main: {_hx_name:"Main",_hx_index:4,__enum__:"hxsl.FunctionKind",toString:$estr}
};
hxsl_FunctionKind.__constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper,hxsl_FunctionKind.Main];
hxsl_FunctionKind.__empty_constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper,hxsl_FunctionKind.Main];
var hxsl_TGlobal = $hxEnums["hxsl.TGlobal"] = { __ename__:true,__constructs__:null
	,Radians: {_hx_name:"Radians",_hx_index:0,__enum__:"hxsl.TGlobal",toString:$estr}
	,Degrees: {_hx_name:"Degrees",_hx_index:1,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sin: {_hx_name:"Sin",_hx_index:2,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cos: {_hx_name:"Cos",_hx_index:3,__enum__:"hxsl.TGlobal",toString:$estr}
	,Tan: {_hx_name:"Tan",_hx_index:4,__enum__:"hxsl.TGlobal",toString:$estr}
	,Asin: {_hx_name:"Asin",_hx_index:5,__enum__:"hxsl.TGlobal",toString:$estr}
	,Acos: {_hx_name:"Acos",_hx_index:6,__enum__:"hxsl.TGlobal",toString:$estr}
	,Atan: {_hx_name:"Atan",_hx_index:7,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pow: {_hx_name:"Pow",_hx_index:8,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp: {_hx_name:"Exp",_hx_index:9,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log: {_hx_name:"Log",_hx_index:10,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp2: {_hx_name:"Exp2",_hx_index:11,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log2: {_hx_name:"Log2",_hx_index:12,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sqrt: {_hx_name:"Sqrt",_hx_index:13,__enum__:"hxsl.TGlobal",toString:$estr}
	,Inversesqrt: {_hx_name:"Inversesqrt",_hx_index:14,__enum__:"hxsl.TGlobal",toString:$estr}
	,Abs: {_hx_name:"Abs",_hx_index:15,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sign: {_hx_name:"Sign",_hx_index:16,__enum__:"hxsl.TGlobal",toString:$estr}
	,Floor: {_hx_name:"Floor",_hx_index:17,__enum__:"hxsl.TGlobal",toString:$estr}
	,Ceil: {_hx_name:"Ceil",_hx_index:18,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fract: {_hx_name:"Fract",_hx_index:19,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mod: {_hx_name:"Mod",_hx_index:20,__enum__:"hxsl.TGlobal",toString:$estr}
	,Min: {_hx_name:"Min",_hx_index:21,__enum__:"hxsl.TGlobal",toString:$estr}
	,Max: {_hx_name:"Max",_hx_index:22,__enum__:"hxsl.TGlobal",toString:$estr}
	,Clamp: {_hx_name:"Clamp",_hx_index:23,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mix: {_hx_name:"Mix",_hx_index:24,__enum__:"hxsl.TGlobal",toString:$estr}
	,InvLerp: {_hx_name:"InvLerp",_hx_index:25,__enum__:"hxsl.TGlobal",toString:$estr}
	,Step: {_hx_name:"Step",_hx_index:26,__enum__:"hxsl.TGlobal",toString:$estr}
	,Smoothstep: {_hx_name:"Smoothstep",_hx_index:27,__enum__:"hxsl.TGlobal",toString:$estr}
	,Length: {_hx_name:"Length",_hx_index:28,__enum__:"hxsl.TGlobal",toString:$estr}
	,Distance: {_hx_name:"Distance",_hx_index:29,__enum__:"hxsl.TGlobal",toString:$estr}
	,Dot: {_hx_name:"Dot",_hx_index:30,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cross: {_hx_name:"Cross",_hx_index:31,__enum__:"hxsl.TGlobal",toString:$estr}
	,Normalize: {_hx_name:"Normalize",_hx_index:32,__enum__:"hxsl.TGlobal",toString:$estr}
	,LReflect: {_hx_name:"LReflect",_hx_index:33,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texture: {_hx_name:"Texture",_hx_index:34,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureLod: {_hx_name:"TextureLod",_hx_index:35,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texel: {_hx_name:"Texel",_hx_index:36,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureSize: {_hx_name:"TextureSize",_hx_index:37,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToInt: {_hx_name:"ToInt",_hx_index:38,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToFloat: {_hx_name:"ToFloat",_hx_index:39,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToBool: {_hx_name:"ToBool",_hx_index:40,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec2: {_hx_name:"Vec2",_hx_index:41,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec3: {_hx_name:"Vec3",_hx_index:42,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec4: {_hx_name:"Vec4",_hx_index:43,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec2: {_hx_name:"IVec2",_hx_index:44,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec3: {_hx_name:"IVec3",_hx_index:45,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec4: {_hx_name:"IVec4",_hx_index:46,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec2: {_hx_name:"BVec2",_hx_index:47,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec3: {_hx_name:"BVec3",_hx_index:48,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec4: {_hx_name:"BVec4",_hx_index:49,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat2: {_hx_name:"Mat2",_hx_index:50,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3: {_hx_name:"Mat3",_hx_index:51,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat4: {_hx_name:"Mat4",_hx_index:52,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3x4: {_hx_name:"Mat3x4",_hx_index:53,__enum__:"hxsl.TGlobal",toString:$estr}
	,Saturate: {_hx_name:"Saturate",_hx_index:54,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pack: {_hx_name:"Pack",_hx_index:55,__enum__:"hxsl.TGlobal",toString:$estr}
	,Unpack: {_hx_name:"Unpack",_hx_index:56,__enum__:"hxsl.TGlobal",toString:$estr}
	,PackNormal: {_hx_name:"PackNormal",_hx_index:57,__enum__:"hxsl.TGlobal",toString:$estr}
	,UnpackNormal: {_hx_name:"UnpackNormal",_hx_index:58,__enum__:"hxsl.TGlobal",toString:$estr}
	,ScreenToUv: {_hx_name:"ScreenToUv",_hx_index:59,__enum__:"hxsl.TGlobal",toString:$estr}
	,UvToScreen: {_hx_name:"UvToScreen",_hx_index:60,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdx: {_hx_name:"DFdx",_hx_index:61,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdy: {_hx_name:"DFdy",_hx_index:62,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fwidth: {_hx_name:"Fwidth",_hx_index:63,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelRead: {_hx_name:"ChannelRead",_hx_index:64,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelReadLod: {_hx_name:"ChannelReadLod",_hx_index:65,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetch: {_hx_name:"ChannelFetch",_hx_index:66,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelTextureSize: {_hx_name:"ChannelTextureSize",_hx_index:67,__enum__:"hxsl.TGlobal",toString:$estr}
	,Trace: {_hx_name:"Trace",_hx_index:68,__enum__:"hxsl.TGlobal",toString:$estr}
	,VertexID: {_hx_name:"VertexID",_hx_index:69,__enum__:"hxsl.TGlobal",toString:$estr}
	,InstanceID: {_hx_name:"InstanceID",_hx_index:70,__enum__:"hxsl.TGlobal",toString:$estr}
	,FragCoord: {_hx_name:"FragCoord",_hx_index:71,__enum__:"hxsl.TGlobal",toString:$estr}
	,FrontFacing: {_hx_name:"FrontFacing",_hx_index:72,__enum__:"hxsl.TGlobal",toString:$estr}
	,FloatBitsToInt: {_hx_name:"FloatBitsToInt",_hx_index:73,__enum__:"hxsl.TGlobal",toString:$estr}
	,FloatBitsToUint: {_hx_name:"FloatBitsToUint",_hx_index:74,__enum__:"hxsl.TGlobal",toString:$estr}
	,IntBitsToFloat: {_hx_name:"IntBitsToFloat",_hx_index:75,__enum__:"hxsl.TGlobal",toString:$estr}
	,UintBitsToFloat: {_hx_name:"UintBitsToFloat",_hx_index:76,__enum__:"hxsl.TGlobal",toString:$estr}
	,RoundEven: {_hx_name:"RoundEven",_hx_index:77,__enum__:"hxsl.TGlobal",toString:$estr}
	,SetLayout: {_hx_name:"SetLayout",_hx_index:78,__enum__:"hxsl.TGlobal",toString:$estr}
	,ImageStore: {_hx_name:"ImageStore",_hx_index:79,__enum__:"hxsl.TGlobal",toString:$estr}
	,ComputeVar_GlobalInvocation: {_hx_name:"ComputeVar_GlobalInvocation",_hx_index:80,__enum__:"hxsl.TGlobal",toString:$estr}
	,ComputeVar_LocalInvocation: {_hx_name:"ComputeVar_LocalInvocation",_hx_index:81,__enum__:"hxsl.TGlobal",toString:$estr}
	,ComputeVar_WorkGroup: {_hx_name:"ComputeVar_WorkGroup",_hx_index:82,__enum__:"hxsl.TGlobal",toString:$estr}
	,ComputeVar_LocalInvocationIndex: {_hx_name:"ComputeVar_LocalInvocationIndex",_hx_index:83,__enum__:"hxsl.TGlobal",toString:$estr}
	,AtomicAdd: {_hx_name:"AtomicAdd",_hx_index:84,__enum__:"hxsl.TGlobal",toString:$estr}
	,GroupMemoryBarrier: {_hx_name:"GroupMemoryBarrier",_hx_index:85,__enum__:"hxsl.TGlobal",toString:$estr}
	,UnpackSnorm4x8: {_hx_name:"UnpackSnorm4x8",_hx_index:86,__enum__:"hxsl.TGlobal",toString:$estr}
	,UnpackUnorm4x8: {_hx_name:"UnpackUnorm4x8",_hx_index:87,__enum__:"hxsl.TGlobal",toString:$estr}
};
hxsl_TGlobal.__constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.InvLerp,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture,hxsl_TGlobal.TextureLod,hxsl_TGlobal.Texel,hxsl_TGlobal.TextureSize,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.ScreenToUv,hxsl_TGlobal.UvToScreen,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.ChannelReadLod,hxsl_TGlobal.ChannelFetch,hxsl_TGlobal.ChannelTextureSize,hxsl_TGlobal.Trace,hxsl_TGlobal.VertexID,hxsl_TGlobal.InstanceID,hxsl_TGlobal.FragCoord,hxsl_TGlobal.FrontFacing,hxsl_TGlobal.FloatBitsToInt,hxsl_TGlobal.FloatBitsToUint,hxsl_TGlobal.IntBitsToFloat,hxsl_TGlobal.UintBitsToFloat,hxsl_TGlobal.RoundEven,hxsl_TGlobal.SetLayout,hxsl_TGlobal.ImageStore,hxsl_TGlobal.ComputeVar_GlobalInvocation,hxsl_TGlobal.ComputeVar_LocalInvocation,hxsl_TGlobal.ComputeVar_WorkGroup,hxsl_TGlobal.ComputeVar_LocalInvocationIndex,hxsl_TGlobal.AtomicAdd,hxsl_TGlobal.GroupMemoryBarrier,hxsl_TGlobal.UnpackSnorm4x8,hxsl_TGlobal.UnpackUnorm4x8];
hxsl_TGlobal.__empty_constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.InvLerp,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture,hxsl_TGlobal.TextureLod,hxsl_TGlobal.Texel,hxsl_TGlobal.TextureSize,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.ScreenToUv,hxsl_TGlobal.UvToScreen,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.ChannelReadLod,hxsl_TGlobal.ChannelFetch,hxsl_TGlobal.ChannelTextureSize,hxsl_TGlobal.Trace,hxsl_TGlobal.VertexID,hxsl_TGlobal.InstanceID,hxsl_TGlobal.FragCoord,hxsl_TGlobal.FrontFacing,hxsl_TGlobal.FloatBitsToInt,hxsl_TGlobal.FloatBitsToUint,hxsl_TGlobal.IntBitsToFloat,hxsl_TGlobal.UintBitsToFloat,hxsl_TGlobal.RoundEven,hxsl_TGlobal.SetLayout,hxsl_TGlobal.ImageStore,hxsl_TGlobal.ComputeVar_GlobalInvocation,hxsl_TGlobal.ComputeVar_LocalInvocation,hxsl_TGlobal.ComputeVar_WorkGroup,hxsl_TGlobal.ComputeVar_LocalInvocationIndex,hxsl_TGlobal.AtomicAdd,hxsl_TGlobal.GroupMemoryBarrier,hxsl_TGlobal.UnpackSnorm4x8,hxsl_TGlobal.UnpackUnorm4x8];
var hxsl_SyntaxArgAccess = $hxEnums["hxsl.SyntaxArgAccess"] = { __ename__:true,__constructs__:null
	,Read: {_hx_name:"Read",_hx_index:0,__enum__:"hxsl.SyntaxArgAccess",toString:$estr}
	,Write: {_hx_name:"Write",_hx_index:1,__enum__:"hxsl.SyntaxArgAccess",toString:$estr}
	,ReadWrite: {_hx_name:"ReadWrite",_hx_index:2,__enum__:"hxsl.SyntaxArgAccess",toString:$estr}
};
hxsl_SyntaxArgAccess.__constructs__ = [hxsl_SyntaxArgAccess.Read,hxsl_SyntaxArgAccess.Write,hxsl_SyntaxArgAccess.ReadWrite];
hxsl_SyntaxArgAccess.__empty_constructs__ = [hxsl_SyntaxArgAccess.Read,hxsl_SyntaxArgAccess.Write,hxsl_SyntaxArgAccess.ReadWrite];
var hxsl_Component = $hxEnums["hxsl.Component"] = { __ename__:true,__constructs__:null
	,X: {_hx_name:"X",_hx_index:0,__enum__:"hxsl.Component",toString:$estr}
	,Y: {_hx_name:"Y",_hx_index:1,__enum__:"hxsl.Component",toString:$estr}
	,Z: {_hx_name:"Z",_hx_index:2,__enum__:"hxsl.Component",toString:$estr}
	,W: {_hx_name:"W",_hx_index:3,__enum__:"hxsl.Component",toString:$estr}
};
hxsl_Component.__constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_Component.__empty_constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
var hxsl_Tools = function() { };
$hxClasses["hxsl.Tools"] = hxsl_Tools;
hxsl_Tools.__name__ = "hxsl.Tools";
hxsl_Tools.allocVarId = function() {
	return ++hxsl_Tools.UID;
};
hxsl_Tools.getDimSize = function(dim,arr) {
	if(arr == null) {
		arr = false;
	}
	var size;
	switch(dim._hx_index) {
	case 0:
		size = 1;
		break;
	case 2:
		size = 3;
		break;
	case 1:case 3:
		size = 2;
		break;
	}
	if(arr) {
		++size;
	}
	return size;
};
hxsl_Tools.getName = function(v) {
	if(v.qualifiers == null) {
		return v.name;
	}
	var _g = 0;
	var _g1 = v.qualifiers;
	while(_g < _g1.length) {
		var q = _g1[_g];
		++_g;
		if(q._hx_index == 4) {
			var n = q.n;
			return n;
		}
	}
	return v.name;
};
hxsl_Tools.getConstBits = function(v) {
	var _g = v.type;
	switch(_g._hx_index) {
	case 1:
		var _g1 = 0;
		var _g2 = v.qualifiers;
		while(_g1 < _g2.length) {
			var q = _g2[_g1];
			++_g1;
			if(q._hx_index == 0) {
				var n = q.max;
				if(n != null) {
					var bits = 0;
					while(n >= 1 << bits) ++bits;
					return bits;
				}
				return 8;
			}
		}
		break;
	case 2:
		return 1;
	case 16:
		var _g1 = _g.t;
		var _g1 = _g.size;
		switch(_g.kind._hx_index) {
		case 3:case 4:case 5:
			return hxsl_Tools.MAX_PARTIAL_MAPPINGS_BITS;
		default:
		}
		break;
	case 17:
		var _g1 = _g.size;
		return 3 + hxsl_Tools.MAX_CHANNELS_BITS;
	default:
	}
	return 0;
};
hxsl_Tools.isConst = function(v) {
	var _g = v.type;
	var tmp;
	switch(_g._hx_index) {
	case 16:
		var _g1 = _g.t;
		var _g1 = _g.size;
		switch(_g.kind._hx_index) {
		case 3:case 4:case 5:
			tmp = true;
			break;
		default:
			tmp = false;
		}
		break;
	case 17:
		var _g1 = _g.size;
		tmp = true;
		break;
	default:
		tmp = false;
	}
	if(tmp) {
		return true;
	}
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q._hx_index == 0) {
				var _g2 = q.max;
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.isStruct = function(v) {
	var _g = v.type;
	if(_g._hx_index == 13) {
		var _g1 = _g.vl;
		return true;
	} else {
		return false;
	}
};
hxsl_Tools.hasQualifier = function(v,q) {
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q2 = _g1[_g];
			++_g;
			if(q2 == q) {
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.hasBorrowQualifier = function(v,path) {
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q._hx_index == 11) {
				var s = q.source;
				return path == s;
			}
		}
	}
	return false;
};
hxsl_Tools.isTexture = function(t) {
	switch(t._hx_index) {
	case 10:
		var _g = t.dim;
		var _g = t.isArray;
		return true;
	case 11:
		var _g = t.dim;
		var _g = t.isArray;
		var _g = t.channels;
		return true;
	case 17:
		var _g = t.size;
		return true;
	default:
		return false;
	}
};
hxsl_Tools.toString = function(t) {
	switch(t._hx_index) {
	case 5:
		var size = t.size;
		var t1 = t.t;
		var prefix;
		switch(t1._hx_index) {
		case 0:
			prefix = "i";
			break;
		case 1:
			prefix = "";
			break;
		case 2:
			prefix = "b";
			break;
		}
		return prefix + "vec" + size;
	case 9:
		var n = t.size;
		return "Bytes" + n;
	case 10:
		var dim = t.dim;
		var arr = t.isArray;
		return "Sampler" + HxOverrides.substr($hxEnums[dim.__enum__].__constructs__[dim._hx_index]._hx_name,1,null) + (arr ? "Array" : "");
	case 11:
		var dim = t.dim;
		var arr = t.isArray;
		var dims = t.channels;
		return "RWTexture" + HxOverrides.substr($hxEnums[dim.__enum__].__constructs__[dim._hx_index]._hx_name,1,null) + (arr ? "Array" : "") + "<" + (dims == 1 ? "Float" : "Vec" + dims) + ">";
	case 13:
		var vl = t.vl;
		var _g = [];
		var _g1 = 0;
		while(_g1 < vl.length) {
			var v = vl[_g1];
			++_g1;
			_g.push(v.name + " : " + hxsl_Tools.toString(v.type));
		}
		return "{" + _g.join(",") + "}";
	case 15:
		var t1 = t.t;
		var s = t.size;
		var tmp = hxsl_Tools.toString(t1) + "[";
		var tmp1;
		switch(s._hx_index) {
		case 0:
			var i = s.v;
			tmp1 = "" + i;
			break;
		case 1:
			var v = s.v;
			tmp1 = v.name;
			break;
		}
		return tmp + tmp1 + "]";
	case 16:
		var t1 = t.t;
		var s = t.size;
		var k = t.kind;
		var prefix;
		switch(k._hx_index) {
		case 0:
			prefix = "Buffer";
			break;
		case 1:
			prefix = "StorageBuffer";
			break;
		case 2:
			prefix = "RWBuffer";
			break;
		case 3:
			prefix = "PartialBuffer";
			break;
		case 4:
			prefix = "StoragePartialBuffer";
			break;
		case 5:
			prefix = "RWPartialBuffer";
			break;
		}
		var tmp = prefix + " " + hxsl_Tools.toString(t1) + "[";
		var tmp1;
		switch(s._hx_index) {
		case 0:
			var i = s.v;
			tmp1 = "" + i;
			break;
		case 1:
			var v = s.v;
			tmp1 = v.name;
			break;
		}
		return tmp + tmp1 + "]";
	default:
		return HxOverrides.substr($hxEnums[t.__enum__].__constructs__[t._hx_index]._hx_name,1,null);
	}
};
hxsl_Tools.toType = function(t) {
	switch(t._hx_index) {
	case 0:
		return hxsl_Type.TInt;
	case 1:
		return hxsl_Type.TFloat;
	case 2:
		return hxsl_Type.TBool;
	}
};
hxsl_Tools.hasSideEffect = function(e) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g1 = _g.c;
		return false;
	case 1:
		var _g1 = _g.v;
		return false;
	case 2:
		var _g1 = _g.g;
		return false;
	case 3:
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e)) {
				return true;
			}
		}
		return false;
	case 5:
		var _g1 = _g.op;
		var _g2 = _g.e1;
		var _g3 = _g.e2;
		switch(_g1._hx_index) {
		case 4:
			return true;
		case 20:
			var _g4 = _g1.op;
			return true;
		default:
			var e1 = _g2;
			var e2 = _g3;
			if(!hxsl_Tools.hasSideEffect(e1)) {
				return hxsl_Tools.hasSideEffect(e2);
			} else {
				return true;
			}
		}
		break;
	case 6:
		var _g1 = _g.op;
		var e1 = _g.e1;
		return hxsl_Tools.hasSideEffect(e1);
	case 7:
		var _g1 = _g.v;
		var _g1 = _g.init;
		return true;
	case 8:
		var _g1 = _g.e;
		var _g2 = _g.args;
		var _g3 = _g1.e;
		var _g4 = _g1.p;
		var _g4 = _g1.t;
		if(_g3._hx_index == 2) {
			if(_g3.g._hx_index == 78) {
				return true;
			} else {
				var e = _g1;
				var pl = _g2;
				var _g3 = e.e;
				if(_g3._hx_index == 2) {
					var _g4 = _g3.g;
					switch(_g4._hx_index) {
					case 79:case 84:case 85:
						return true;
					default:
						var g = _g4;
					}
				} else {
					return true;
				}
				var _g3 = 0;
				while(_g3 < pl.length) {
					var p = pl[_g3];
					++_g3;
					if(hxsl_Tools.hasSideEffect(p)) {
						return true;
					}
				}
				return false;
			}
		} else {
			var e = _g1;
			var pl = _g2;
			var _g1 = e.e;
			if(_g1._hx_index == 2) {
				var _g2 = _g1.g;
				switch(_g2._hx_index) {
				case 79:case 84:case 85:
					return true;
				default:
					var g = _g2;
				}
			} else {
				return true;
			}
			var _g1 = 0;
			while(_g1 < pl.length) {
				var p = pl[_g1];
				++_g1;
				if(hxsl_Tools.hasSideEffect(p)) {
					return true;
				}
			}
			return false;
		}
		break;
	case 9:
		var _g1 = _g.regs;
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	case 10:
		var econd = _g.econd;
		var eif = _g.eif;
		var eelse = _g.eelse;
		if(!(hxsl_Tools.hasSideEffect(econd) || hxsl_Tools.hasSideEffect(eif))) {
			if(eelse != null) {
				return hxsl_Tools.hasSideEffect(eelse);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 12:
		var _g1 = _g.e;
		return true;
	case 13:
		var _g1 = _g.v;
		var it = _g.it;
		var loop = _g.loop;
		if(!hxsl_Tools.hasSideEffect(it)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 11:case 14:case 15:
		return true;
	case 16:
		var e = _g.e;
		var index = _g.index;
		if(!hxsl_Tools.hasSideEffect(e)) {
			return hxsl_Tools.hasSideEffect(index);
		} else {
			return true;
		}
		break;
	case 17:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e)) {
				return true;
			}
		}
		return false;
	case 18:
		var e = _g.e;
		var cases = _g.cases;
		var def = _g.def;
		var _g1 = 0;
		while(_g1 < cases.length) {
			var c = cases[_g1];
			++_g1;
			var _g2 = 0;
			var _g3 = c.values;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				if(hxsl_Tools.hasSideEffect(v)) {
					return true;
				}
			}
			if(hxsl_Tools.hasSideEffect(c.expr)) {
				return true;
			}
		}
		if(!hxsl_Tools.hasSideEffect(e)) {
			if(def != null) {
				return hxsl_Tools.hasSideEffect(def);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 19:
		var _g1 = _g.normalWhile;
		var e = _g.e;
		var loop = _g.loop;
		if(!hxsl_Tools.hasSideEffect(e)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 20:
		var _g1 = _g.m;
		var _g1 = _g.args;
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	case 21:
		var _g1 = _g.name;
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	case 22:
		var _g1 = _g.target;
		var _g1 = _g.code;
		var _g1 = _g.args;
		return true;
	}
};
hxsl_Tools.iter = function(e,f) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g1 = _g.c;
		break;
	case 1:
		var _g1 = _g.v;
		break;
	case 2:
		var _g1 = _g.g;
		break;
	case 3:
		var e = _g.e;
		f(e);
		break;
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			f(e);
		}
		break;
	case 5:
		var _g1 = _g.op;
		var e1 = _g.e1;
		var e2 = _g.e2;
		f(e1);
		f(e2);
		break;
	case 6:
		var _g1 = _g.op;
		var e1 = _g.e1;
		f(e1);
		break;
	case 7:
		var _g1 = _g.v;
		var init = _g.init;
		if(init != null) {
			f(init);
		}
		break;
	case 8:
		var e = _g.e;
		var args = _g.args;
		f(e);
		var _g1 = 0;
		while(_g1 < args.length) {
			var a = args[_g1];
			++_g1;
			f(a);
		}
		break;
	case 9:
		var _g1 = _g.regs;
		var e = _g.e;
		f(e);
		break;
	case 10:
		var econd = _g.econd;
		var eif = _g.eif;
		var eelse = _g.eelse;
		f(econd);
		f(eif);
		if(eelse != null) {
			f(eelse);
		}
		break;
	case 12:
		var e = _g.e;
		if(e != null) {
			f(e);
		}
		break;
	case 13:
		var _g1 = _g.v;
		var it = _g.it;
		var loop = _g.loop;
		f(it);
		f(loop);
		break;
	case 11:case 14:case 15:
		break;
	case 16:
		var e = _g.e;
		var index = _g.index;
		f(e);
		f(index);
		break;
	case 17:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			f(e);
		}
		break;
	case 18:
		var e = _g.e;
		var cases = _g.cases;
		var def = _g.def;
		f(e);
		var _g1 = 0;
		while(_g1 < cases.length) {
			var c = cases[_g1];
			++_g1;
			var _g2 = 0;
			var _g3 = c.values;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				f(v);
			}
			f(c.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 19:
		var _g1 = _g.normalWhile;
		var e = _g.e;
		var loop = _g.loop;
		f(e);
		f(loop);
		break;
	case 20:
		var _g1 = _g.m;
		var _g1 = _g.args;
		var e = _g.e;
		f(e);
		break;
	case 21:
		var _g1 = _g.name;
		var e = _g.e;
		f(e);
		break;
	case 22:
		var _g1 = _g.target;
		var _g1 = _g.code;
		var args = _g.args;
		var _g = 0;
		while(_g < args.length) {
			var arg = args[_g];
			++_g;
			f(arg.e);
		}
		break;
	}
};
hxsl_Tools.map = function(e,f) {
	var ed;
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g1 = _g.c;
		ed = e.e;
		break;
	case 1:
		var _g1 = _g.v;
		ed = e.e;
		break;
	case 2:
		var _g1 = _g.g;
		ed = e.e;
		break;
	case 3:
		var e1 = _g.e;
		ed = hxsl_TExprDef.TParenthesis(f(e1));
		break;
	case 4:
		var el = _g.el;
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < el.length) {
			var e1 = el[_g2];
			++_g2;
			_g1.push(f(e1));
		}
		ed = hxsl_TExprDef.TBlock(_g1);
		break;
	case 5:
		var op = _g.op;
		var e1 = _g.e1;
		var e2 = _g.e2;
		ed = hxsl_TExprDef.TBinop(op,f(e1),f(e2));
		break;
	case 6:
		var op = _g.op;
		var e1 = _g.e1;
		ed = hxsl_TExprDef.TUnop(op,f(e1));
		break;
	case 7:
		var v = _g.v;
		var init = _g.init;
		ed = hxsl_TExprDef.TVarDecl(v,init != null ? f(init) : null);
		break;
	case 8:
		var e1 = _g.e;
		var args = _g.args;
		var ed1 = f(e1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < args.length) {
			var a = args[_g2];
			++_g2;
			_g1.push(f(a));
		}
		ed = hxsl_TExprDef.TCall(ed1,_g1);
		break;
	case 9:
		var e1 = _g.e;
		var c = _g.regs;
		ed = hxsl_TExprDef.TSwiz(f(e1),c);
		break;
	case 10:
		var econd = _g.econd;
		var eif = _g.eif;
		var eelse = _g.eelse;
		ed = hxsl_TExprDef.TIf(f(econd),f(eif),eelse != null ? f(eelse) : null);
		break;
	case 12:
		var e1 = _g.e;
		ed = hxsl_TExprDef.TReturn(e1 != null ? f(e1) : null);
		break;
	case 13:
		var v = _g.v;
		var it = _g.it;
		var loop = _g.loop;
		ed = hxsl_TExprDef.TFor(v,f(it),f(loop));
		break;
	case 11:case 14:case 15:
		ed = e.e;
		break;
	case 16:
		var e1 = _g.e;
		var index = _g.index;
		ed = hxsl_TExprDef.TArray(f(e1),f(index));
		break;
	case 17:
		var el = _g.el;
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < el.length) {
			var e1 = el[_g2];
			++_g2;
			_g1.push(f(e1));
		}
		ed = hxsl_TExprDef.TArrayDecl(_g1);
		break;
	case 18:
		var e1 = _g.e;
		var cases = _g.cases;
		var def = _g.def;
		var ed1 = f(e1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < cases.length) {
			var c = cases[_g2];
			++_g2;
			var _g3 = [];
			var _g4 = 0;
			var _g5 = c.values;
			while(_g4 < _g5.length) {
				var v = _g5[_g4];
				++_g4;
				_g3.push(f(v));
			}
			_g1.push({ values : _g3, expr : f(c.expr)});
		}
		ed = hxsl_TExprDef.TSwitch(ed1,_g1,def == null ? null : f(def));
		break;
	case 19:
		var e1 = _g.e;
		var loop = _g.loop;
		var normalWhile = _g.normalWhile;
		ed = hxsl_TExprDef.TWhile(f(e1),f(loop),normalWhile);
		break;
	case 20:
		var m = _g.m;
		var args = _g.args;
		var e1 = _g.e;
		ed = hxsl_TExprDef.TMeta(m,args,f(e1));
		break;
	case 21:
		var e1 = _g.e;
		var name = _g.name;
		ed = hxsl_TExprDef.TField(f(e1),name);
		break;
	case 22:
		var target = _g.target;
		var code = _g.code;
		var args = _g.args;
		var _g = [];
		var _g1 = 0;
		while(_g1 < args.length) {
			var arg = args[_g1];
			++_g1;
			_g.push({ e : f(arg.e), access : arg.access});
		}
		ed = hxsl_TExprDef.TSyntax(target,code,_g);
		break;
	}
	return { e : ed, t : e.t, p : e.p};
};
hxsl_Tools.size = function(t) {
	switch(t._hx_index) {
	case 0:
		return 0;
	case 1:case 3:
		return 1;
	case 2:case 4:
		return 0;
	case 5:
		var _g = t.t;
		var n = t.size;
		return n;
	case 6:
		return 9;
	case 7:
		return 16;
	case 8:
		return 12;
	case 9:
		var s = t.size;
		return s;
	case 10:
		var _g = t.dim;
		var _g = t.isArray;
		return 0;
	case 11:
		var _g = t.dim;
		var _g = t.isArray;
		var _g = t.channels;
		return 0;
	case 12:
		return 4;
	case 13:
		var vl = t.vl;
		var s = 0;
		var _g = 0;
		while(_g < vl.length) {
			var v = vl[_g];
			++_g;
			s += hxsl_Tools.size(v.type);
		}
		return s;
	case 14:
		var _g = t.variants;
		return 0;
	case 15:
		var _g = t.t;
		var _g1 = t.size;
		switch(_g1._hx_index) {
		case 0:
			var v = _g1.v;
			var t1 = _g;
			return hxsl_Tools.size(t1) * v;
		case 1:
			var _g = _g1.v;
			return 0;
		}
		break;
	case 16:
		var _g = t.size;
		var _g1 = t.kind;
		if(_g._hx_index == 0) {
			var v = _g.v;
			var t1 = t.t;
			return hxsl_Tools.size(t1) * v;
		} else {
			return 0;
		}
		break;
	case 17:
		var n = t.size;
		return n;
	}
};
var hxsl_Tools2 = function() { };
$hxClasses["hxsl.Tools2"] = hxsl_Tools2;
hxsl_Tools2.__name__ = "hxsl.Tools2";
hxsl_Tools2.toString = function(g) {
	var n = $hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name;
	return n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
};
var hxsl_BatchShader = function() {
	this.Batch_Count__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["hxsl.BatchShader"] = hxsl_BatchShader;
hxsl_BatchShader.__name__ = "hxsl.BatchShader";
hxsl_BatchShader.__super__ = hxsl_Shader;
hxsl_BatchShader.prototype = $extend(hxsl_Shader.prototype,{
	get_Batch_HasOffset: function() {
		return this.Batch_HasOffset__;
	}
	,set_Batch_HasOffset: function(_v) {
		this.constModified = true;
		return this.Batch_HasOffset__ = _v;
	}
	,get_Batch_UseStorage: function() {
		return this.Batch_UseStorage__;
	}
	,set_Batch_UseStorage: function(_v) {
		this.constModified = true;
		return this.Batch_UseStorage__ = _v;
	}
	,get_Batch_Count: function() {
		return this.Batch_Count__;
	}
	,set_Batch_Count: function(_v) {
		this.constModified = true;
		return this.Batch_Count__ = _v;
	}
	,get_Batch_Buffer: function() {
		return this.Batch_Buffer__;
	}
	,set_Batch_Buffer: function(_v) {
		return this.Batch_Buffer__ = _v;
	}
	,get_Batch_StorageBuffer: function() {
		return this.Batch_StorageBuffer__;
	}
	,set_Batch_StorageBuffer: function(_v) {
		return this.Batch_StorageBuffer__ = _v;
	}
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.Batch_HasOffset__) {
			this.constBits |= 1;
		}
		if(this.Batch_UseStorage__) {
			this.constBits |= 2;
		}
		var v = this.Batch_Count__;
		if(v >>> 13 != 0) {
			throw haxe_Exception.thrown("Batch_Count" + " is out of range " + v + ">" + 8191 + ", consider using @const(MAX_VALUE)");
		}
		this.constBits |= v << 2;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.Batch_HasOffset__;
		case 1:
			return this.Batch_UseStorage__;
		case 2:
			return this.Batch_Count__;
		case 3:
			return this.Batch_Buffer__;
		case 4:
			return this.Batch_StorageBuffer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 2) {
			return this.Batch_Count__;
		}
		return 0.;
	}
	,__class__: hxsl_BatchShader
});
var hxsl_SearchMap = function() {
	this.minId = 0;
	this.nexts = [];
};
$hxClasses["hxsl.SearchMap"] = hxsl_SearchMap;
hxsl_SearchMap.__name__ = "hxsl.SearchMap";
hxsl_SearchMap.prototype = {
	set: function(id,s) {
		if(this.minId == 0) {
			this.minId = id;
			this.nexts = [s];
			return;
		}
		var offset = id - this.minId;
		if(offset < 0) {
			var n = [];
			var _g = 0;
			var _g1 = this.nexts.length;
			while(_g < _g1) {
				var i = _g++;
				n[i - offset] = this.nexts[i];
			}
			this.nexts = n;
			this.minId += offset;
			offset = 0;
		}
		this.nexts[offset] = s;
	}
	,__class__: hxsl_SearchMap
};
var hxsl_Cache = function() {
	this.linkCache = new hxsl_SearchMap();
	this.linkShaders = new haxe_ds_StringMap();
	this.batchShaders = new haxe_ds_ObjectMap();
	this.batchShadersParams = new haxe_ds_StringMap();
	this.byID = new haxe_ds_StringMap();
};
$hxClasses["hxsl.Cache"] = hxsl_Cache;
hxsl_Cache.__name__ = "hxsl.Cache";
hxsl_Cache.get = function() {
	var c = hxsl_Cache.INST;
	if(c == null) {
		c = new hxsl_Cache();
		hxsl_Cache.INST = c;
	}
	return c;
};
hxsl_Cache.prototype = {
	getLinkShader: function(vars) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < vars.length) {
			var v = vars[_g1];
			++_g1;
			_g.push(Std.string(v));
		}
		var key = _g.join(",");
		var shader = this.linkShaders.h[key];
		if(shader != null) {
			return shader;
		}
		var s = new hxsl_SharedShader("");
		var id = HxOverrides.substr(haxe_crypto_Md5.encode(key),0,8);
		s.data = { name : "shaderLinker_" + id, vars : [], funs : []};
		var pos = null;
		var outVars_h = Object.create(null);
		var outputCount = 0;
		var tvec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
		var makeVec = function(g,size,args,makeOutExpr) {
			var out = [];
			var rem = size;
			var _g = 0;
			var _g1 = args.length;
			while(_g < _g1) {
				var i = _g++;
				var e = makeOutExpr(args[args.length - 1 - i],rem - (args.length - 1 - i));
				rem -= hxsl_Tools.size(e.t);
				out.unshift(e);
			}
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},out), t : hxsl_Type.TVec(size,hxsl_VecType.VFloat), p : pos};
		};
		var makeVar = function(name,t,parent) {
			var path = parent == null ? name : hxsl_Tools.getName(parent) + "." + name;
			var v = outVars_h[path];
			if(v != null) {
				return v;
			}
			v = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Var, parent : parent};
			if(parent == null) {
				s.data.vars.push(v);
			} else {
				var _g = parent.type;
				if(_g._hx_index == 13) {
					var vl = _g.vl;
					vl.push(v);
				} else {
					throw haxe_Exception.thrown("assert");
				}
			}
			outVars_h[path] = v;
			return v;
		};
		var makeOutExpr = null;
		makeOutExpr = function(v,rem) {
			switch(v._hx_index) {
			case 0:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(v1)), t : hxsl_Type.TFloat, p : pos};
			case 1:
				var vname = v.v;
				var size = v.size;
				var v1 = outVars_h[vname];
				if(v1 != null) {
					return { e : hxsl_TExprDef.TVar(v1), t : v1.type, p : pos};
				}
				var path = vname.split(".");
				var parent = null;
				while(path.length > 1) parent = makeVar(path.shift(),hxsl_Type.TStruct([]),parent);
				if(size != null) {
					rem = size;
				}
				v1 = makeVar(path.shift(),rem == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(rem,hxsl_VecType.VFloat),parent);
				return { e : hxsl_TExprDef.TVar(v1), t : v1.type, p : pos};
			case 2:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.PackNormal), t : hxsl_Type.TVoid, p : pos},[makeOutExpr(v1,3)]), t : tvec4, p : pos};
			case 3:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Pack), t : hxsl_Type.TVoid, p : pos},[makeOutExpr(v1,1)]), t : tvec4, p : pos};
			case 4:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec2,2,args,makeOutExpr);
			case 5:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec3,3,args,makeOutExpr);
			case 6:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec4,4,args,makeOutExpr);
			case 7:
				var v1 = v.a;
				var comps = v.swiz;
				return { e : hxsl_TExprDef.TSwiz(makeOutExpr(v1,4),comps), t : hxsl_Type.TVec(comps.length,hxsl_VecType.VFloat), p : pos};
			}
		};
		var makeOutput = function(v) {
			outputCount += 1;
			var ov = { id : hxsl_Tools.allocVarId(), type : tvec4, name : "OUTPUT" + (outputCount - 1), kind : hxsl_VarKind.Output};
			s.data.vars.push(ov);
			return { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(ov), t : tvec4, p : pos},makeOutExpr(v,4)), t : hxsl_Type.TVoid, p : pos};
		};
		var defineFun = function(kind,vars) {
			var fv = { id : hxsl_Tools.allocVarId(), type : hxsl_Type.TFun([]), name : ("" + Std.string(kind)).toLowerCase(), kind : hxsl_VarKind.Function};
			var _g = [];
			var _g1 = 0;
			while(_g1 < vars.length) {
				var v = vars[_g1];
				++_g1;
				_g.push(makeOutput(v));
			}
			var f = { kind : kind, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(_g), p : pos, t : hxsl_Type.TVoid}};
			s.data.funs.push(f);
		};
		defineFun(hxsl_FunctionKind.Vertex,[hxsl_Output.Value("output.position")]);
		defineFun(hxsl_FunctionKind.Fragment,vars);
		shader = Object.create(hxsl_Shader.prototype);
		shader.shader = s;
		this.linkShaders.h[key] = shader;
		shader.updateConstantsFinal(null);
		return shader;
	}
	,link: function(shaders,mode) {
		var c = this.linkCache;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			var cs = c.nexts[i.id - c.minId];
			if(cs == null) {
				cs = new hxsl_SearchMap();
				c.set(i.id,cs);
			}
			c = cs;
		}
		if(c.linked == null) {
			c.linked = this.compileRuntimeShader(shaders,mode);
		}
		return c.linked;
	}
	,compileRuntimeShader: function(shaders,mode) {
		var shaderDatas = [];
		var index = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			shaderDatas.push({ inst : i, p : s1.priority, index : index++});
		}
		shaderDatas.reverse();
		haxe_ds_ArraySort.sort(shaderDatas,function(s1,s2) {
			return s2.p - s1.p;
		});
		var linker = new hxsl_Linker(mode);
		var s;
		try {
			var _g = [];
			var _g1 = 0;
			while(_g1 < shaderDatas.length) {
				var s1 = shaderDatas[_g1];
				++_g1;
				_g.push(s1.inst.shader);
			}
			s = linker.link(_g);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl_Error)) {
				var e = _g1;
				var _g1 = [];
				var _g2 = 0;
				while(_g2 < shaderDatas.length) {
					var s1 = shaderDatas[_g2];
					++_g2;
					_g1.push(hxsl_Printer.shaderToString(s1.inst.shader));
				}
				var shaders1 = _g1;
				e.msg += "\n\nin\n\n" + shaders1.join("\n-----\n");
				throw haxe_Exception.thrown(e);
			} else {
				throw _g;
			}
		}
		if(mode == hxsl_LinkMode.Batch) {
			var checkRec = null;
			checkRec = function(v) {
				if(v.qualifiers != null && v.qualifiers.indexOf(hxsl_VarQualifier.PerObject) >= 0) {
					if(v.qualifiers.length == 1) {
						v.qualifiers = null;
					} else {
						v.qualifiers = v.qualifiers.slice();
						HxOverrides.remove(v.qualifiers,hxsl_VarQualifier.PerObject);
					}
					if(v.kind != hxsl_VarKind.Var) {
						v.kind = hxsl_VarKind.Local;
					}
				}
				var _g = v.type;
				if(_g._hx_index == 13) {
					var vl = _g.vl;
					var _g = 0;
					while(_g < vl.length) {
						var v = vl[_g];
						++_g;
						checkRec(v);
					}
				}
			};
			var _g = 0;
			var _g1 = s.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				checkRec(v);
			}
		}
		var prev = s;
		var splitter = new hxsl_Splitter();
		var sl;
		try {
			sl = splitter.split(s,mode == hxsl_LinkMode.Batch);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl_Error)) {
				var e = _g1;
				e.msg += "\n\nin\n\n" + hxsl_Printer.shaderToString(s);
				throw haxe_Exception.thrown(e);
			} else {
				throw _g;
			}
		}
		var paramVars = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = linker.allVars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			if(v.v.kind == hxsl_VarKind.Param) {
				var _g2 = v.v.type;
				if(_g2._hx_index == 13) {
					var _g3 = _g2.vl;
					continue;
				}
				var inf = shaderDatas[v.instanceIndex];
				var nv = splitter.varMap.h[v.v.__id__];
				paramVars.h[nv == null ? v.id : nv.id] = { instance : inf.index, index : inf.inst.params.h[v.merged[0].id]};
			}
		}
		var prev = sl;
		var sl1 = new hxsl_Dce().dce(sl);
		var r = this.buildRuntimeShader(sl1,paramVars);
		r.mode = mode;
		var _g = [];
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			_g.push(new hxsl_ShaderInstanceDesc(s1.shader,s1.constBits));
		}
		r.spec = { instances : _g, signature : null};
		var _g = 0;
		var _g1 = shaderDatas.length;
		while(_g < _g1) {
			var i = _g++;
			var s = shaderDatas[shaderDatas.length - 1 - i];
			r.spec.instances[s.index].index = i;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = r.spec.instances;
		while(_g1 < _g2.length) {
			var i = _g2[_g1];
			++_g1;
			_g.push(i.shader.data.name + "_" + i.bits + "_" + i.index);
		}
		var signParts = _g;
		var tmp = signParts.join(":");
		r.spec.signature = haxe_crypto_Md5.encode(tmp);
		var _g = [];
		var _g1 = 0;
		var _g2 = r.getShaders();
		while(_g1 < _g2.length) {
			var s = _g2[_g1];
			++_g1;
			_g.push(hxsl_Printer.shaderToString(s.data));
		}
		r.signature = haxe_crypto_Md5.encode(_g.join(""));
		var r2 = this.byID.h[r.signature];
		if(r2 != null) {
			r.id = r2.id;
		} else {
			this.byID.h[r.signature] = r;
		}
		return r;
	}
	,buildRuntimeShader: function(shaders,paramVars) {
		var r = new hxsl_RuntimeShader();
		r.globals = new haxe_ds_IntMap();
		var _g = 0;
		while(_g < shaders.length) {
			var s = shaders[_g];
			++_g;
			var kind;
			switch(s.name) {
			case "fragment":
				kind = hxsl_FunctionKind.Fragment;
				break;
			case "main":
				kind = hxsl_FunctionKind.Main;
				break;
			case "vertex":
				kind = hxsl_FunctionKind.Vertex;
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			var fl = this.flattenShader(s,kind,paramVars);
			fl.kind = kind;
			switch(kind._hx_index) {
			case 0:
				r.vertex = fl;
				break;
			case 1:
				r.fragment = fl;
				break;
			case 4:
				r.vertex = fl;
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			this.initGlobals(r,fl);
		}
		return r;
	}
	,initGlobals: function(r,s) {
		var p = s.globals;
		while(p != null) {
			r.globals.h[p.gid] = true;
			p = p.next;
		}
		var p = s.params;
		while(p != null) {
			if(p.perObjectGlobal != null) {
				r.globals.h[p.perObjectGlobal.gid] = true;
			}
			p = p.next;
		}
	}
	,getPath: function(v) {
		if(v.parent == null) {
			return v.name;
		}
		return this.getPath(v.parent) + "." + v.name;
	}
	,flattenShader: function(s,kind,params) {
		var flat = new hxsl_Flatten();
		var c = new hxsl_RuntimeShaderData();
		var data = flat.flatten(s,kind);
		var textures = [];
		var buffers = [];
		c.texturesCount = 0;
		var g = flat.allocData.keys();
		while(g.hasNext()) {
			var g1 = g.next();
			var alloc = flat.allocData.h[g1.__id__];
			switch(g1.kind._hx_index) {
			case 0:
				var _g = [];
				var _g1 = 0;
				while(_g1 < alloc.length) {
					var a = alloc[_g1];
					++_g1;
					if(a.v != null) {
						_g.push(new hxsl_AllocGlobal(a.pos,this.getPath(a.v),a.v.type));
					}
				}
				var out = _g;
				var _g2 = 0;
				var _g3 = out.length - 1;
				while(_g2 < _g3) {
					var i = _g2++;
					out[i].next = out[i + 1];
				}
				var _g4 = g1.type;
				if(_g4._hx_index == 15) {
					var _g5 = _g4.t;
					var _g6 = _g4.size;
					if(_g5._hx_index == 5) {
						if(_g5.size == 4) {
							if(_g5.t._hx_index == 1) {
								if(_g6._hx_index == 0) {
									var size = _g6.v;
									c.globals = out[0];
									c.globalsSize = size;
								} else {
									throw haxe_Exception.thrown("assert");
								}
							} else {
								throw haxe_Exception.thrown("assert");
							}
						} else {
							throw haxe_Exception.thrown("assert");
						}
					} else {
						throw haxe_Exception.thrown("assert");
					}
				} else {
					throw haxe_Exception.thrown("assert");
				}
				break;
			case 2:
				var out1 = [];
				var count = 0;
				var _g7 = 0;
				while(_g7 < alloc.length) {
					var a1 = alloc[_g7];
					++_g7;
					if(a1.v == null) {
						continue;
					}
					var p = params.h[a1.v.id];
					if(p == null) {
						var ap = new hxsl_AllocParam(a1.v.name,a1.pos,-1,-1,a1.v.type);
						ap.perObjectGlobal = new hxsl_AllocGlobal(-1,this.getPath(a1.v),a1.v.type);
						out1.push(ap);
						++count;
						continue;
					}
					var ap1 = new hxsl_AllocParam(a1.v.name,a1.pos,p.instance,p.index,a1.v.type);
					var _g8 = a1.v.type;
					if(_g8._hx_index == 15) {
						var _g9 = _g8.size;
						var t = _g8.t;
						if(hxsl_Tools.isTexture(t)) {
							ap1.pos = -a1.size;
							count += a1.size;
						} else {
							++count;
						}
					} else {
						++count;
					}
					out1.push(ap1);
				}
				var _g10 = 0;
				var _g11 = out1.length - 1;
				while(_g10 < _g11) {
					var i1 = _g10++;
					out1[i1].next = out1[i1 + 1];
				}
				var _g12 = g1.type;
				if(_g12._hx_index == 15) {
					var _g13 = _g12.t;
					var _g14 = _g12.size;
					var t1 = _g13;
					if(hxsl_Tools.isTexture(t1)) {
						textures.push({ t : t1, all : out1});
						c.texturesCount += count;
					} else {
						switch(_g13._hx_index) {
						case 5:
							if(_g13.size == 4) {
								if(_g13.t._hx_index == 1) {
									if(_g14._hx_index == 0) {
										var size1 = _g14.v;
										c.params = out1[0];
										c.paramsSize = size1;
									} else {
										throw haxe_Exception.thrown("assert");
									}
								} else {
									throw haxe_Exception.thrown("assert");
								}
							} else {
								throw haxe_Exception.thrown("assert");
							}
							break;
						case 16:
							var _g15 = _g13.t;
							var _g16 = _g13.size;
							var kind = _g13.kind;
							var _g17 = 0;
							while(_g17 < out1.length) {
								var outBuf = out1[_g17];
								++_g17;
								if(outBuf != null) {
									buffers.push(outBuf);
								}
							}
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
					}
				} else {
					throw haxe_Exception.thrown("assert");
				}
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
		}
		if(textures.length > 0) {
			textures.sort(function(t1,t2) {
				var _g = t1.t;
				var _g1 = t2.t;
				switch(_g._hx_index) {
				case 10:
					if(_g1._hx_index == 10) {
						var t21 = _g1.dim;
						var a2 = _g1.isArray;
						var a1 = _g.isArray;
						var t11 = _g.dim;
						if(a1 != a2) {
							if(a1) {
								return 1;
							} else {
								return -1;
							}
						} else {
							return t11._hx_index - t21._hx_index;
						}
					} else {
						return t1.t._hx_index - t2.t._hx_index;
					}
					break;
				case 11:
					var _g2 = _g.channels;
					if(_g1._hx_index == 11) {
						var _g2 = _g1.channels;
						var t21 = _g1.dim;
						var a2 = _g1.isArray;
						var a1 = _g.isArray;
						var t11 = _g.dim;
						if(a1 != a2) {
							if(a1) {
								return 1;
							} else {
								return -1;
							}
						} else {
							return t11._hx_index - t21._hx_index;
						}
					} else {
						return t1.t._hx_index - t2.t._hx_index;
					}
					break;
				default:
					return t1.t._hx_index - t2.t._hx_index;
				}
			});
			c.textures = textures[0].all[0];
			var _g = 1;
			var _g1 = textures.length;
			while(_g < _g1) {
				var i = _g++;
				var prevAll = textures[i - 1].all;
				var prev = prevAll[prevAll.length - 1];
				prev.next = textures[i].all[0];
			}
		}
		if(buffers.length > 0) {
			buffers.sort(function(b1,b2) {
				var _g = b1.type;
				var _g1 = b2.type;
				if(_g._hx_index == 16) {
					var _g2 = _g.t;
					var _g2 = _g.size;
					if(_g1._hx_index == 16) {
						var _g2 = _g1.t;
						var _g2 = _g1.size;
						var k2 = _g1.kind;
						var k1 = _g.kind;
						return k1._hx_index - k2._hx_index;
					} else {
						return b1.type._hx_index - b2.type._hx_index;
					}
				} else {
					return b1.type._hx_index - b2.type._hx_index;
				}
			});
		}
		var p = null;
		var _g = 0;
		while(_g < buffers.length) {
			var b = buffers[_g];
			++_g;
			if(c.buffers == null) {
				c.buffers = b;
				p = c.buffers;
			} else {
				p.next = b;
				p = p.next;
			}
		}
		c.bufferCount = buffers.length;
		if(c.globals == null) {
			c.globalsSize = 0;
		}
		if(c.params == null) {
			c.paramsSize = 0;
		}
		c.data = data;
		return c;
	}
	,__class__: hxsl_Cache
};
var hxsl_Channel = $hxEnums["hxsl.Channel"] = { __ename__:true,__constructs__:null
	,Unknown: {_hx_name:"Unknown",_hx_index:0,__enum__:"hxsl.Channel",toString:$estr}
	,R: {_hx_name:"R",_hx_index:1,__enum__:"hxsl.Channel",toString:$estr}
	,G: {_hx_name:"G",_hx_index:2,__enum__:"hxsl.Channel",toString:$estr}
	,B: {_hx_name:"B",_hx_index:3,__enum__:"hxsl.Channel",toString:$estr}
	,A: {_hx_name:"A",_hx_index:4,__enum__:"hxsl.Channel",toString:$estr}
	,PackedFloat: {_hx_name:"PackedFloat",_hx_index:5,__enum__:"hxsl.Channel",toString:$estr}
	,PackedNormal: {_hx_name:"PackedNormal",_hx_index:6,__enum__:"hxsl.Channel",toString:$estr}
};
hxsl_Channel.__constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
hxsl_Channel.__empty_constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
var hxsl__$Checker_FieldAccess = $hxEnums["hxsl._Checker.FieldAccess"] = { __ename__:true,__constructs__:null
	,FField: ($_=function(e) { return {_hx_index:0,e:e,__enum__:"hxsl._Checker.FieldAccess",toString:$estr}; },$_._hx_name="FField",$_.__params__ = ["e"],$_)
	,FGlobal: ($_=function(g,arg,variants) { return {_hx_index:1,g:g,arg:arg,variants:variants,__enum__:"hxsl._Checker.FieldAccess",toString:$estr}; },$_._hx_name="FGlobal",$_.__params__ = ["g","arg","variants"],$_)
};
hxsl__$Checker_FieldAccess.__constructs__ = [hxsl__$Checker_FieldAccess.FField,hxsl__$Checker_FieldAccess.FGlobal];
hxsl__$Checker_FieldAccess.__empty_constructs__ = [];
var hxsl__$Checker_WithType = $hxEnums["hxsl._Checker.WithType"] = { __ename__:true,__constructs__:null
	,NoValue: {_hx_name:"NoValue",_hx_index:0,__enum__:"hxsl._Checker.WithType",toString:$estr}
	,Value: {_hx_name:"Value",_hx_index:1,__enum__:"hxsl._Checker.WithType",toString:$estr}
	,InBlock: {_hx_name:"InBlock",_hx_index:2,__enum__:"hxsl._Checker.WithType",toString:$estr}
	,With: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"hxsl._Checker.WithType",toString:$estr}; },$_._hx_name="With",$_.__params__ = ["t"],$_)
};
hxsl__$Checker_WithType.__constructs__ = [hxsl__$Checker_WithType.NoValue,hxsl__$Checker_WithType.Value,hxsl__$Checker_WithType.InBlock,hxsl__$Checker_WithType.With];
hxsl__$Checker_WithType.__empty_constructs__ = [hxsl__$Checker_WithType.NoValue,hxsl__$Checker_WithType.Value,hxsl__$Checker_WithType.InBlock];
var hxsl_Checker = function() {
	this.globals = hxsl_Checker.initGlobals();
};
$hxClasses["hxsl.Checker"] = hxsl_Checker;
hxsl_Checker.__name__ = "hxsl.Checker";
hxsl_Checker.initGlobals = function() {
	var globals = hxsl_Checker.GLOBALS;
	if(hxsl_Checker.GLOBALS != null) {
		return hxsl_Checker.GLOBALS;
	}
	var globals = new haxe_ds_StringMap();
	var genType = [hxsl_Type.TFloat,hxsl_Checker.vec2,hxsl_Checker.vec3,hxsl_Checker.vec4];
	var genIType = [hxsl_Type.TInt,hxsl_Checker.ivec2,hxsl_Checker.ivec3,hxsl_Checker.ivec4];
	var baseType = [hxsl_Type.TFloat,hxsl_Type.TBool,hxsl_Type.TInt];
	var _g = [];
	var _g1 = 0;
	while(_g1 < genType.length) {
		var t = genType[_g1];
		++_g1;
		_g.push({ args : [{ name : "value", type : t}], ret : t});
	}
	var genFloat = _g;
	var _g = [];
	var _g1 = 0;
	while(_g1 < genType.length) {
		var t = genType[_g1];
		++_g1;
		_g.push({ args : [{ name : "a", type : t},{ name : "b", type : t}], ret : t});
	}
	var genFloat2 = _g;
	var _g = [];
	var _g1 = 0;
	while(_g1 < genType.length) {
		var t = genType[_g1];
		++_g1;
		_g.push({ args : [{ name : "a", type : t},{ name : "b", type : hxsl_Type.TFloat}], ret : t});
	}
	var genWithFloat = _g;
	var texDefs = [{ dim : hxsl_TexDimension.T1D, arr : false, uv : hxsl_Type.TFloat, iuv : hxsl_Type.TInt},{ dim : hxsl_TexDimension.T2D, arr : false, uv : hxsl_Checker.vec2, iuv : hxsl_Checker.ivec2},{ dim : hxsl_TexDimension.T3D, arr : false, uv : hxsl_Checker.vec3, iuv : hxsl_Checker.ivec3},{ dim : hxsl_TexDimension.TCube, arr : false, uv : hxsl_Checker.vec3, iuv : hxsl_Checker.ivec3},{ dim : hxsl_TexDimension.T1D, arr : true, uv : hxsl_Checker.vec2, iuv : hxsl_Checker.ivec2},{ dim : hxsl_TexDimension.T2D, arr : true, uv : hxsl_Checker.vec3, iuv : hxsl_Checker.ivec3},{ dim : hxsl_TexDimension.TCube, arr : true, uv : hxsl_Checker.vec4, iuv : hxsl_Checker.ivec4}];
	var gvars_h = Object.create(null);
	var _g = 0;
	var _g1 = hxsl_TGlobal.__empty_constructs__.slice();
	while(_g < _g1.length) {
		var g = _g1[_g];
		++_g;
		var def;
		switch(g._hx_index) {
		case 7:
			def = genFloat.concat(genFloat2);
			break;
		case 8:
			def = genFloat2;
			break;
		case 20:case 21:case 22:
			def = genFloat2.concat(genWithFloat);
			break;
		case 23:
			var r = [{ args : [{ name : "value", type : hxsl_Type.TInt},{ name : "min", type : hxsl_Type.TInt},{ name : "max", type : hxsl_Type.TInt}], ret : hxsl_Type.TInt}];
			var _g2 = 0;
			while(_g2 < genType.length) {
				var t = genType[_g2];
				++_g2;
				r.push({ args : [{ name : "value", type : t},{ name : "min", type : t},{ name : "max", type : t}], ret : t});
				if(t != hxsl_Type.TFloat) {
					r.push({ args : [{ name : "value", type : t},{ name : "min", type : hxsl_Type.TFloat},{ name : "max", type : hxsl_Type.TFloat}], ret : t});
				}
			}
			def = r;
			break;
		case 24:
			var r1 = [];
			var _g3 = 0;
			while(_g3 < genType.length) {
				var t1 = genType[_g3];
				++_g3;
				r1.push({ args : [{ name : "x", type : t1},{ name : "y", type : t1},{ name : "a", type : t1}], ret : t1});
				if(t1 != hxsl_Type.TFloat) {
					r1.push({ args : [{ name : "x", type : t1},{ name : "y", type : t1},{ name : "a", type : hxsl_Type.TFloat}], ret : t1});
				}
			}
			def = r1;
			break;
		case 25:
			def = [{ args : [{ name : "a", type : hxsl_Type.TFloat},{ name : "x", type : hxsl_Type.TFloat},{ name : "y", type : hxsl_Type.TFloat}], ret : hxsl_Type.TFloat}];
			break;
		case 26:
			var r2 = [];
			var _g4 = 0;
			while(_g4 < genType.length) {
				var t2 = genType[_g4];
				++_g4;
				r2.push({ args : [{ name : "edge", type : t2},{ name : "x", type : t2}], ret : t2});
				if(t2 != hxsl_Type.TFloat) {
					r2.push({ args : [{ name : "edge", type : hxsl_Type.TFloat},{ name : "x", type : t2}], ret : t2});
				}
			}
			def = r2;
			break;
		case 27:
			var r3 = [];
			var _g5 = 0;
			while(_g5 < genType.length) {
				var t3 = genType[_g5];
				++_g5;
				r3.push({ args : [{ name : "edge0", type : t3},{ name : "edge1", type : t3},{ name : "x", type : t3}], ret : t3});
				if(t3 != hxsl_Type.TFloat) {
					r3.push({ args : [{ name : "edge0", type : hxsl_Type.TFloat},{ name : "edge1", type : hxsl_Type.TFloat},{ name : "x", type : t3}], ret : t3});
				}
			}
			def = r3;
			break;
		case 28:
			var _g6 = [];
			var _g7 = 0;
			while(_g7 < genType.length) {
				var t4 = genType[_g7];
				++_g7;
				_g6.push({ args : [{ name : "value", type : t4}], ret : hxsl_Type.TFloat});
			}
			def = _g6;
			break;
		case 29:case 30:
			var _g8 = [];
			var _g9 = 0;
			while(_g9 < genType.length) {
				var t5 = genType[_g9];
				++_g9;
				_g8.push({ args : [{ name : "a", type : t5},{ name : "b", type : t5}], ret : hxsl_Type.TFloat});
			}
			def = _g8;
			break;
		case 31:
			def = [{ args : [{ name : "a", type : hxsl_Checker.vec3},{ name : "b", type : hxsl_Checker.vec3}], ret : hxsl_Checker.vec3}];
			break;
		case 32:
			def = genFloat;
			break;
		case 33:
			def = genFloat2;
			break;
		case 34:
			var _g10 = [];
			var _g11 = 0;
			while(_g11 < texDefs.length) {
				var t6 = texDefs[_g11];
				++_g11;
				_g10.push({ args : [{ name : "tex", type : hxsl_Type.TSampler(t6.dim,t6.arr)},{ name : "uv", type : t6.uv}], ret : hxsl_Checker.vec4});
			}
			def = _g10;
			break;
		case 35:
			var _g12 = [];
			var _g13 = 0;
			while(_g13 < texDefs.length) {
				var t7 = texDefs[_g13];
				++_g13;
				_g12.push({ args : [{ name : "tex", type : hxsl_Type.TSampler(t7.dim,t7.arr)},{ name : "uv", type : t7.uv},{ name : "lod", type : hxsl_Type.TFloat}], ret : hxsl_Checker.vec4});
			}
			def = _g12;
			break;
		case 36:
			var _g14 = [];
			var _g15 = 0;
			while(_g15 < texDefs.length) {
				var t8 = texDefs[_g15];
				++_g15;
				_g14.push({ args : [{ name : "tex", type : hxsl_Type.TSampler(t8.dim,t8.arr)},{ name : "pos", type : t8.iuv}], ret : hxsl_Checker.vec4});
			}
			def = _g14;
			break;
		case 37:
			def = [];
			break;
		case 38:
			var _g16 = [];
			var _g17 = 0;
			while(_g17 < baseType.length) {
				var t9 = baseType[_g17];
				++_g17;
				_g16.push({ args : [{ name : "value", type : t9}], ret : hxsl_Type.TInt});
			}
			def = _g16;
			break;
		case 39:
			var _g18 = [];
			var _g19 = 0;
			while(_g19 < baseType.length) {
				var t10 = baseType[_g19];
				++_g19;
				_g18.push({ args : [{ name : "value", type : t10}], ret : hxsl_Type.TFloat});
			}
			def = _g18;
			break;
		case 40:
			var _g20 = [];
			var _g21 = 0;
			while(_g21 < baseType.length) {
				var t11 = baseType[_g21];
				++_g21;
				_g20.push({ args : [{ name : "value", type : t11}], ret : hxsl_Type.TBool});
			}
			def = _g20;
			break;
		case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 48:case 49:case 50:case 51:case 52:case 53:
			def = [];
			break;
		case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 54:case 77:
			def = genFloat;
			break;
		case 55:
			def = [{ args : [{ name : "value", type : hxsl_Type.TFloat}], ret : hxsl_Checker.vec4}];
			break;
		case 56:
			def = [{ args : [{ name : "value", type : hxsl_Checker.vec4}], ret : hxsl_Type.TFloat}];
			break;
		case 57:
			def = [{ args : [{ name : "value", type : hxsl_Checker.vec3}], ret : hxsl_Checker.vec4}];
			break;
		case 58:
			def = [{ args : [{ name : "value", type : hxsl_Checker.vec4}], ret : hxsl_Checker.vec3}];
			break;
		case 59:
			def = [{ args : [{ name : "screenPos", type : hxsl_Checker.vec2}], ret : hxsl_Checker.vec2}];
			break;
		case 60:
			def = [{ args : [{ name : "uv", type : hxsl_Checker.vec2}], ret : hxsl_Checker.vec2}];
			break;
		case 61:case 62:case 63:
			def = genFloat;
			break;
		case 64:
			def = [{ args : [{ name : "channel", type : hxsl_Type.TChannel(1)},{ name : "uv", type : hxsl_Checker.vec2}], ret : hxsl_Type.TFloat},{ args : [{ name : "channel", type : hxsl_Type.TChannel(2)},{ name : "uv", type : hxsl_Checker.vec2}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(3)},{ name : "uv", type : hxsl_Checker.vec2}], ret : hxsl_Checker.vec3},{ args : [{ name : "channel", type : hxsl_Type.TChannel(4)},{ name : "uv", type : hxsl_Checker.vec2}], ret : hxsl_Checker.vec4}];
			break;
		case 65:
			def = [{ args : [{ name : "channel", type : hxsl_Type.TChannel(1)},{ name : "uv", type : hxsl_Checker.vec2},{ name : "lod", type : hxsl_Type.TFloat}], ret : hxsl_Type.TFloat},{ args : [{ name : "channel", type : hxsl_Type.TChannel(2)},{ name : "uv", type : hxsl_Checker.vec2},{ name : "lod", type : hxsl_Type.TFloat}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(3)},{ name : "uv", type : hxsl_Checker.vec2},{ name : "lod", type : hxsl_Type.TFloat}], ret : hxsl_Checker.vec3},{ args : [{ name : "channel", type : hxsl_Type.TChannel(4)},{ name : "uv", type : hxsl_Checker.vec2},{ name : "lod", type : hxsl_Type.TFloat}], ret : hxsl_Checker.vec4}];
			break;
		case 66:
			def = [{ args : [{ name : "channel", type : hxsl_Type.TChannel(1)},{ name : "pos", type : hxsl_Checker.ivec2}], ret : hxsl_Type.TFloat},{ args : [{ name : "channel", type : hxsl_Type.TChannel(2)},{ name : "pos", type : hxsl_Checker.ivec2}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(3)},{ name : "pos", type : hxsl_Checker.ivec2}], ret : hxsl_Checker.vec3},{ args : [{ name : "channel", type : hxsl_Type.TChannel(4)},{ name : "pos", type : hxsl_Checker.ivec2}], ret : hxsl_Checker.vec4},{ args : [{ name : "channel", type : hxsl_Type.TChannel(1)},{ name : "pos", type : hxsl_Checker.ivec2},{ name : "lod", type : hxsl_Type.TInt}], ret : hxsl_Type.TFloat},{ args : [{ name : "channel", type : hxsl_Type.TChannel(2)},{ name : "pos", type : hxsl_Checker.ivec2},{ name : "lod", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(3)},{ name : "pos", type : hxsl_Checker.ivec2},{ name : "lod", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec3},{ args : [{ name : "channel", type : hxsl_Type.TChannel(4)},{ name : "pos", type : hxsl_Checker.ivec2},{ name : "lod", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec4}];
			break;
		case 67:
			def = [{ args : [{ name : "channel", type : hxsl_Type.TChannel(1)}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(2)}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(3)}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(4)}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(1)},{ name : "lod", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(2)},{ name : "lod", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(3)},{ name : "lod", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec2},{ args : [{ name : "channel", type : hxsl_Type.TChannel(4)},{ name : "lod", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec2}];
			break;
		case 69:case 70:case 71:case 72:
			def = null;
			break;
		case 73:case 74:
			var _g22 = [];
			var _g_current = 0;
			var _g_array = genType;
			while(_g_current < _g_array.length) {
				var _g_value = _g_array[_g_current];
				var _g_key = _g_current++;
				var i = _g_key;
				var t12 = _g_value;
				_g22.push({ args : [{ name : "x", type : t12}], ret : genIType[i]});
			}
			def = _g22;
			break;
		case 75:case 76:
			var _g23 = [];
			var _g_current1 = 0;
			var _g_array1 = genType;
			while(_g_current1 < _g_array1.length) {
				var _g_value1 = _g_array1[_g_current1];
				var _g_key1 = _g_current1++;
				var i1 = _g_key1;
				var t13 = _g_value1;
				_g23.push({ args : [{ name : "x", type : genIType[i1]}], ret : t13});
			}
			def = _g23;
			break;
		case 78:
			def = [{ args : [{ name : "x", type : hxsl_Type.TInt},{ name : "y", type : hxsl_Type.TInt},{ name : "z", type : hxsl_Type.TInt}], ret : hxsl_Type.TVoid},{ args : [{ name : "x", type : hxsl_Type.TInt},{ name : "y", type : hxsl_Type.TInt}], ret : hxsl_Type.TVoid},{ args : [{ name : "x", type : hxsl_Type.TInt}], ret : hxsl_Type.TVoid}];
			break;
		case 79:
			def = [];
			break;
		case 84:
			def = [{ args : [{ name : "buf", type : hxsl_Type.TBuffer(hxsl_Type.TInt,hxsl_SizeDecl.SConst(0),hxsl_BufferKind.RW)},{ name : "index", type : hxsl_Type.TInt},{ name : "data", type : hxsl_Type.TInt}], ret : hxsl_Type.TInt}];
			break;
		case 68:case 85:
			def = [];
			break;
		case 86:
			if($hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name.indexOf("_") > 0) {
				var name = $hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name;
				var idx = name.indexOf("_");
				var vname = HxOverrides.substr(name,0,idx);
				vname = vname.charAt(0).toLowerCase() + HxOverrides.substr(vname,1,null);
				var vl = gvars_h[vname];
				if(vl == null) {
					vl = [];
					gvars_h[vname] = vl;
				}
				var vt;
				switch(g._hx_index) {
				case 80:case 81:case 82:
					vt = hxsl_Checker.ivec3;
					break;
				case 83:
					vt = hxsl_Type.TInt;
					break;
				default:
					throw haxe_Exception.thrown("Unknown type for global var " + Std.string(g));
				}
				var fname = HxOverrides.substr(name,idx + 1,null);
				fname = fname.charAt(0).toLowerCase() + HxOverrides.substr(fname,1,null);
				vl.push({ name : fname, type : vt});
				def = null;
			} else {
				def = [{ args : [{ name : "value", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec4}];
			}
			break;
		case 87:
			if($hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name.indexOf("_") > 0) {
				var name1 = $hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name;
				var idx1 = name1.indexOf("_");
				var vname1 = HxOverrides.substr(name1,0,idx1);
				vname1 = vname1.charAt(0).toLowerCase() + HxOverrides.substr(vname1,1,null);
				var vl1 = gvars_h[vname1];
				if(vl1 == null) {
					vl1 = [];
					gvars_h[vname1] = vl1;
				}
				var vt1;
				switch(g._hx_index) {
				case 80:case 81:case 82:
					vt1 = hxsl_Checker.ivec3;
					break;
				case 83:
					vt1 = hxsl_Type.TInt;
					break;
				default:
					throw haxe_Exception.thrown("Unknown type for global var " + Std.string(g));
				}
				var fname1 = HxOverrides.substr(name1,idx1 + 1,null);
				fname1 = fname1.charAt(0).toLowerCase() + HxOverrides.substr(fname1,1,null);
				vl1.push({ name : fname1, type : vt1});
				def = null;
			} else {
				def = [{ args : [{ name : "value", type : hxsl_Type.TInt}], ret : hxsl_Checker.vec4}];
			}
			break;
		default:
			if($hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name.indexOf("_") > 0) {
				var name2 = $hxEnums[g.__enum__].__constructs__[g._hx_index]._hx_name;
				var idx2 = name2.indexOf("_");
				var vname2 = HxOverrides.substr(name2,0,idx2);
				vname2 = vname2.charAt(0).toLowerCase() + HxOverrides.substr(vname2,1,null);
				var vl2 = gvars_h[vname2];
				if(vl2 == null) {
					vl2 = [];
					gvars_h[vname2] = vl2;
				}
				var vt2;
				switch(g._hx_index) {
				case 80:case 81:case 82:
					vt2 = hxsl_Checker.ivec3;
					break;
				case 83:
					vt2 = hxsl_Type.TInt;
					break;
				default:
					throw haxe_Exception.thrown("Unknown type for global var " + Std.string(g));
				}
				var fname2 = HxOverrides.substr(name2,idx2 + 1,null);
				fname2 = fname2.charAt(0).toLowerCase() + HxOverrides.substr(fname2,1,null);
				vl2.push({ name : fname2, type : vt2});
				def = null;
			} else {
				throw haxe_Exception.thrown("Unsupported global " + Std.string(g));
			}
		}
		if(def != null) {
			var key = hxsl_Tools2.toString(g);
			globals.h[key] = { t : hxsl_Type.TFun(def), g : g};
		}
	}
	globals.h["vertexID"] = { t : hxsl_Type.TInt, g : hxsl_TGlobal.VertexID};
	globals.h["instanceID"] = { t : hxsl_Type.TInt, g : hxsl_TGlobal.InstanceID};
	globals.h["fragCoord"] = { t : hxsl_Checker.vec4, g : hxsl_TGlobal.FragCoord};
	globals.h["frontFacing"] = { t : hxsl_Type.TBool, g : hxsl_TGlobal.FrontFacing};
	var h = gvars_h;
	var _g_h = h;
	var _g_keys = Object.keys(h);
	var _g_length = _g_keys.length;
	var _g_current = 0;
	while(_g_current < _g_length) {
		var key = _g_keys[_g_current++];
		var _g_key = key;
		var _g_value = _g_h[key];
		var gname = _g_key;
		var vl = _g_value;
		var _g = [];
		var _g1 = 0;
		while(_g1 < vl.length) {
			var v = vl[_g1];
			++_g1;
			_g.push({ name : v.name, kind : hxsl_VarKind.Global, type : v.type, id : 0});
		}
		globals.h[gname] = { t : hxsl_Type.TStruct(_g), g : null};
	}
	globals.h["int"] = globals.h["toInt"];
	globals.h["float"] = globals.h["toFloat"];
	globals.h["reflect"] = globals.h["lReflect"];
	globals.h["ivec" + 2] = globals.h["iVec" + 2];
	var key = "iVec" + 2;
	if(Object.prototype.hasOwnProperty.call(globals.h,key)) {
		delete(globals.h[key]);
	}
	globals.h["ivec" + 3] = globals.h["iVec" + 3];
	var key = "iVec" + 3;
	if(Object.prototype.hasOwnProperty.call(globals.h,key)) {
		delete(globals.h[key]);
	}
	globals.h["ivec" + 4] = globals.h["iVec" + 4];
	var key = "iVec" + 4;
	if(Object.prototype.hasOwnProperty.call(globals.h,key)) {
		delete(globals.h[key]);
	}
	if(Object.prototype.hasOwnProperty.call(globals.h,"lReflect")) {
		delete(globals.h["lReflect"]);
	}
	if(Object.prototype.hasOwnProperty.call(globals.h,"toInt")) {
		delete(globals.h["toInt"]);
	}
	if(Object.prototype.hasOwnProperty.call(globals.h,"toFloat")) {
		delete(globals.h["toFloat"]);
	}
	hxsl_Checker.GLOBALS = globals;
	return globals;
};
hxsl_Checker.prototype = {
	error: function(msg,pos) {
		return hxsl_Error.t(msg,pos);
	}
	,warning: function(msg,pos) {
	}
	,loadShader: function(path) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,check: function(name,shader) {
		this.vars = new haxe_ds_StringMap();
		this.inits = [];
		this.inLoop = false;
		this.inWhile = false;
		var funs = [];
		this.checkExpr(shader,funs,false,false);
		var tfuns = [];
		var _g = 0;
		while(_g < funs.length) {
			var f = funs[_g];
			++_g;
			var pos = f.p;
			var f1 = f.f;
			var _g1 = [];
			var _g2 = 0;
			var _g3 = f1.args;
			while(_g2 < _g3.length) {
				var a = _g3[_g2];
				++_g2;
				if(a.type == null) {
					this.error("Argument type required",pos);
				}
				if(a.expr != null) {
					this.error("Optional argument not supported",pos);
				}
				if(a.kind == null) {
					a.kind = hxsl_VarKind.Local;
				}
				if(a.kind != hxsl_VarKind.Local) {
					this.error("Argument should be local",pos);
				}
				if(a.qualifiers.length != 0) {
					this.error("No qualifier allowed for argument",pos);
				}
				_g1.push({ id : hxsl_Tools.allocVarId(), name : a.name, kind : hxsl_VarKind.Local, type : a.type});
			}
			var args = _g1;
			var kind;
			switch(f1.name) {
			case "fragment":
				kind = hxsl_FunctionKind.Fragment;
				break;
			case "main":
				kind = hxsl_FunctionKind.Main;
				break;
			case "vertex":
				kind = hxsl_FunctionKind.Vertex;
				break;
			default:
				kind = StringTools.startsWith(f1.name,"__init__") ? hxsl_FunctionKind.Init : hxsl_FunctionKind.Helper;
			}
			if(args.length != 0 && kind != hxsl_FunctionKind.Helper) {
				this.error(Std.string(kind) + " function should have no argument",pos);
			}
			var fv = hxsl_Tools.allocVarId();
			var f2 = f1.name;
			var _g4 = [];
			var _g5 = 0;
			while(_g5 < args.length) {
				var a1 = args[_g5];
				++_g5;
				_g4.push({ type : a1.type, name : a1.name});
			}
			var fv1 = { id : fv, name : f2, kind : hxsl_VarKind.Function, type : hxsl_Type.TFun([{ args : _g4, ret : f1.ret == null ? hxsl_Type.TVoid : f1.ret}])};
			var f3 = { kind : kind, ref : fv1, args : args, ret : f1.ret == null ? hxsl_Type.TVoid : f1.ret, expr : null};
			if(Object.prototype.hasOwnProperty.call(this.vars.h,fv1.name)) {
				this.error("Duplicate function name",pos);
			}
			this.vars.h[fv1.name] = fv1;
			tfuns.push(f3);
		}
		var _g = 0;
		var _g1 = tfuns.length;
		while(_g < _g1) {
			var i = _g++;
			this.typeFun(tfuns[i],funs[i].f.expr);
		}
		var localInits = [];
		var _g = 0;
		var _g1 = this.inits.slice();
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.v.kind == hxsl_VarKind.Local) {
				localInits.push({ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(i.v), p : i.e.p, t : i.v.type},i.e), p : i.e.p, t : i.v.type});
				HxOverrides.remove(this.inits,i);
			}
		}
		if(localInits.length > 0) {
			var fv = { id : hxsl_Tools.allocVarId(), name : "__init__consts__", kind : hxsl_VarKind.Function, type : hxsl_Type.TFun([{ args : [], ret : hxsl_Type.TVoid}])};
			if(Object.prototype.hasOwnProperty.call(this.vars.h,fv.name)) {
				this.error("assert",localInits[0].p);
			}
			this.vars.h[fv.name] = fv;
			tfuns.push({ kind : hxsl_FunctionKind.Init, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(localInits), p : localInits[0].p, t : hxsl_Type.TVoid}});
		}
		var vars = Lambda.array(this.vars);
		vars.sort(function(v1,v2) {
			return (v1.id < 0 ? -v1.id : v1.id) - (v2.id < 0 ? -v2.id : v2.id);
		});
		return { name : name, vars : vars, funs : tfuns};
	}
	,saveVars: function() {
		var old = new haxe_ds_StringMap();
		var h = this.vars.h;
		var v_h = h;
		var v_keys = Object.keys(h);
		var v_length = v_keys.length;
		var v_current = 0;
		while(v_current < v_length) {
			var v = v_keys[v_current++];
			old.h[v] = this.vars.h[v];
		}
		return old;
	}
	,typeFun: function(f,e) {
		var old = this.saveVars();
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.vars.h[a.name] = a;
		}
		this.curFun = f;
		f.expr = this.typeExpr(e,hxsl__$Checker_WithType.NoValue);
		this.vars = old;
	}
	,tryUnify: function(t1,t2) {
		if(Type.enumEq(t1,t2)) {
			return true;
		}
		switch(t1._hx_index) {
		case 5:
			if(t2._hx_index == 5) {
				var s2 = t2.size;
				var t21 = t2.t;
				var t11 = t1.t;
				var s1 = t1.size;
				if(s1 == s2 && t11 == t21) {
					return true;
				}
			}
			break;
		case 10:
			if(t2._hx_index == 10) {
				var dim2 = t2.dim;
				var arr2 = t2.isArray;
				var arr1 = t1.isArray;
				var dim1 = t1.dim;
				if(dim1 == dim2) {
					return arr1 == arr2;
				} else {
					return false;
				}
			}
			break;
		case 11:
			if(t2._hx_index == 11) {
				var dim2 = t2.dim;
				var arr2 = t2.isArray;
				var chans2 = t2.channels;
				var chans1 = t1.channels;
				var arr1 = t1.isArray;
				var dim1 = t1.dim;
				if(dim1 == dim2 && arr1 == arr2) {
					return chans1 == chans2;
				} else {
					return false;
				}
			}
			break;
		case 15:
			if(t2._hx_index == 15) {
				var t21 = t2.t;
				var size2 = t2.size;
				var size1 = t1.size;
				var t11 = t1.t;
				switch(size1._hx_index) {
				case 0:
					if(size2._hx_index == 0) {
						var b = size2.v;
						var a = size1.v;
						if(a != b) {
							return false;
						}
					} else {
						return false;
					}
					break;
				case 1:
					if(size2._hx_index == 1) {
						var v2 = size2.v;
						var v1 = size1.v;
						if(v1 != v2) {
							return false;
						}
					} else {
						return false;
					}
					break;
				default:
					return false;
				}
				return this.tryUnify(t11,t21);
			}
			break;
		case 17:
			if(t2._hx_index == 17) {
				var n2 = t2.size;
				var n1 = t1.size;
				if(n1 == n2) {
					return true;
				}
			}
			break;
		default:
		}
		return false;
	}
	,unify: function(t1,t2,p) {
		if(!this.tryUnify(t1,t2)) {
			this.error(hxsl_Tools.toString(t1) + " should be " + hxsl_Tools.toString(t2),p);
		}
	}
	,unifyExpr: function(e,t) {
		if(!this.tryUnify(e.t,t)) {
			if(e.t == hxsl_Type.TInt && t == hxsl_Type.TFloat) {
				this.toFloat(e);
				return;
			}
			this.error(hxsl_Tools.toString(e.t) + " should be " + hxsl_Tools.toString(t),e.p);
		}
	}
	,checkWrite: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			switch(v.kind._hx_index) {
			case 2:
				var _g1 = v.type;
				var tmp;
				switch(_g1._hx_index) {
				case 11:
					var _g2 = _g1.dim;
					var _g2 = _g1.isArray;
					var _g2 = _g1.channels;
					tmp = true;
					break;
				case 16:
					var _g2 = _g1.t;
					var _g2 = _g1.size;
					switch(_g1.kind._hx_index) {
					case 2:case 5:
						tmp = true;
						break;
					default:
						tmp = false;
					}
					break;
				default:
					tmp = false;
				}
				if(tmp) {
					return;
				}
				break;
			case 4:
				if(v.qualifiers == null || v.qualifiers.indexOf(hxsl_VarQualifier.Final) < 0) {
					return;
				} else {
					var _g1 = v.type;
					var tmp;
					switch(_g1._hx_index) {
					case 11:
						var _g2 = _g1.dim;
						var _g2 = _g1.isArray;
						var _g2 = _g1.channels;
						tmp = true;
						break;
					case 16:
						var _g2 = _g1.t;
						var _g2 = _g1.size;
						switch(_g1.kind._hx_index) {
						case 2:case 5:
							tmp = true;
							break;
						default:
							tmp = false;
						}
						break;
					default:
						tmp = false;
					}
					if(tmp) {
						return;
					}
				}
				break;
			case 3:case 5:
				return;
			default:
			}
			break;
		case 9:
			var _g1 = _g.regs;
			var e1 = _g.e;
			this.checkWrite(e1);
			return;
		case 16:
			var _g1 = _g.index;
			var e1 = _g.e;
			this.checkWrite(e1);
			return;
		case 21:
			var _g1 = _g.name;
			var e1 = _g.e;
			this.checkWrite(e1);
			return;
		default:
		}
		this.error("This expression cannot be assigned",e.p);
	}
	,typeWith: function(e,t) {
		if(t == null) {
			return this.typeExpr(e,hxsl__$Checker_WithType.Value);
		}
		var e1 = this.typeExpr(e,hxsl__$Checker_WithType.With(t));
		this.unifyExpr(e1,t);
		return e1;
	}
	,typeExpr: function(e,$with) {
		var _gthis = this;
		var type = null;
		var ed;
		var _g = e.expr;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 0:
				type = hxsl_Type.TVoid;
				break;
			case 1:
				var _g1 = c.b;
				type = hxsl_Type.TBool;
				break;
			case 2:
				var i = c.v;
				if($with._hx_index == 3) {
					if($with.t._hx_index == 3) {
						c = hxsl_Const.CFloat(i);
						type = hxsl_Type.TFloat;
					} else {
						type = hxsl_Type.TInt;
					}
				} else {
					type = hxsl_Type.TInt;
				}
				break;
			case 3:
				var _g1 = c.v;
				type = hxsl_Type.TFloat;
				break;
			case 4:
				var _g1 = c.v;
				type = hxsl_Type.TString;
				break;
			}
			ed = hxsl_TExprDef.TConst(c);
			break;
		case 1:
			var name = _g.i;
			var v = this.vars.h[name];
			if(v != null) {
				var canCall;
				switch(name) {
				case "fragment":case "main":case "vertex":
					canCall = false;
					break;
				default:
					canCall = !StringTools.startsWith(name,"__init__");
				}
				if(!canCall) {
					this.error("Function cannot be accessed",e.pos);
				}
				type = v.type;
				ed = hxsl_TExprDef.TVar(v);
			} else {
				var g = this.globals.h[name];
				if(g != null && g.g != null) {
					type = g.t;
					ed = hxsl_TExprDef.TGlobal(g.g);
				} else if(name == "PI") {
					type = hxsl_Type.TFloat;
					ed = hxsl_TExprDef.TConst(hxsl_Const.CFloat(Math.PI));
				} else {
					ed = this.error("Unknown identifier '" + name + "'",e.pos);
				}
			}
			break;
		case 2:
			var e1 = _g.e;
			var e2 = this.typeExpr(e1,$with);
			type = e2.t;
			ed = hxsl_TExprDef.TParenthesis(e2);
			break;
		case 3:
			var _g1 = _g.e;
			var _g2 = _g.f;
			var _g3 = _g1.expr;
			var _g4 = _g1.pos;
			if(_g3._hx_index == 1) {
				var name = _g3.i;
				var f = _g2;
				if(this.vars.h[name] == null && this.globals.h[name] != null && this.globals.h[name].g == null) {
					var _g3 = this.globals.h[name].t;
					if(_g3._hx_index == 13) {
						var vl = _g3.vl;
						var _g3 = 0;
						while(_g3 < vl.length) {
							var v = vl[_g3];
							++_g3;
							if(v.name == f) {
								var g = name.charAt(0).toUpperCase() + HxOverrides.substr(name,1,null) + "_" + f.charAt(0).toUpperCase() + HxOverrides.substr(f,1,null);
								return { e : hxsl_TExprDef.TGlobal(Type.createEnum(hxsl_TGlobal,g,null)), t : v.type, p : e.pos};
							}
						}
						var ed1 = name + " field should be ";
						var _g3 = [];
						var _g4 = 0;
						while(_g4 < vl.length) {
							var v = vl[_g4];
							++_g4;
							_g3.push(v.name);
						}
						ed = this.error(ed1 + _g3.join("|"),e.pos);
					} else {
						throw haxe_Exception.thrown("assert");
					}
				} else {
					var e1 = _g1;
					var f = _g2;
					var e11 = this.typeExpr(e1,hxsl__$Checker_WithType.Value);
					var ef = this.fieldAccess(e11,f,$with,e.pos);
					if(ef == null) {
						this.error(hxsl_Tools.toString(e11.t) + " has no field '" + f + "'",e.pos);
					}
					switch(ef._hx_index) {
					case 0:
						var ef1 = ef.e;
						type = ef1.t;
						ed = ef1.e;
						break;
					case 1:
						var _g3 = ef.g;
						var _g3 = ef.arg;
						var _g3 = ef.variants;
						ed = this.error("Global function must be called immediately",e.pos);
						break;
					}
				}
			} else {
				var e1 = _g1;
				var f = _g2;
				var e11 = this.typeExpr(e1,hxsl__$Checker_WithType.Value);
				var ef = this.fieldAccess(e11,f,$with,e.pos);
				if(ef == null) {
					this.error(hxsl_Tools.toString(e11.t) + " has no field '" + f + "'",e.pos);
				}
				switch(ef._hx_index) {
				case 0:
					var ef1 = ef.e;
					type = ef1.t;
					ed = ef1.e;
					break;
				case 1:
					var _g1 = ef.g;
					var _g1 = ef.arg;
					var _g1 = ef.variants;
					ed = this.error("Global function must be called immediately",e.pos);
					break;
				}
			}
			break;
		case 4:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			var e11 = this.typeExpr(e1,hxsl__$Checker_WithType.Value);
			var e21 = this.typeExpr(e2,hxsl__$Checker_WithType.With(e11.t));
			switch(op._hx_index) {
			case 4:
				this.checkWrite(e11);
				this.unify(e21.t,e11.t,e21.p);
				type = e11.t;
				break;
			case 20:
				var op1 = op.op;
				this.checkWrite(e11);
				this.unify(this.typeBinop(op1,e11,e21,e.pos),e11.t,e21.p);
				type = e11.t;
				break;
			default:
				type = this.typeBinop(op,e11,e21,e.pos);
			}
			ed = hxsl_TExprDef.TBinop(op,e11,e21);
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e11 = this.typeExpr(e1,hxsl__$Checker_WithType.Value);
			switch(op._hx_index) {
			case 0:case 1:
				switch(e11.t._hx_index) {
				case 1:case 3:
					break;
				default:
					this.error("Cannot increment " + hxsl_Tools.toString(e11.t),e.pos);
				}
				type = hxsl_Type.TVoid;
				ed = hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssignOp(op == haxe_macro_Unop.OpIncrement ? haxe_macro_Binop.OpAdd : haxe_macro_Binop.OpSub),e11,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(1)), t : hxsl_Type.TInt, p : e11.p});
				break;
			case 2:
				this.unifyExpr(e11,hxsl_Type.TBool);
				type = hxsl_Type.TBool;
				ed = hxsl_TExprDef.TUnop(op,e11);
				break;
			case 3:
				var _g1 = e11.t;
				switch(_g1._hx_index) {
				case 1:case 3:
					break;
				case 5:
					var _g2 = _g1.size;
					switch(_g1.t._hx_index) {
					case 0:case 1:
						break;
					default:
						this.error("Cannot negate " + hxsl_Tools.toString(e11.t),e.pos);
					}
					break;
				default:
					this.error("Cannot negate " + hxsl_Tools.toString(e11.t),e.pos);
				}
				type = e11.t;
				ed = hxsl_TExprDef.TUnop(op,e11);
				break;
			default:
				ed = this.error("Operation non supported",e.pos);
			}
			break;
		case 6:
			var _g1 = _g.e;
			var _g2 = _g.args;
			var _g3 = _g1.expr;
			var _g4 = _g1.pos;
			if(_g3._hx_index == 3) {
				var _g4 = _g3.e;
				var _g5 = _g4.expr;
				var _g6 = _g4.pos;
				if(_g5._hx_index == 1) {
					if(_g5.i == "Syntax") {
						var target = _g3.f;
						var args = _g2;
						if(args.length == 0) {
							this.error("Syntax." + target + " should have a string as first argument",e.pos);
						}
						var code;
						var _g3 = args[0].expr;
						if(_g3._hx_index == 0) {
							var _g4 = _g3.c;
							if(_g4._hx_index == 4) {
								var code1 = _g4.v;
								code = code1;
							} else {
								code = this.error("Syntax." + target + " should have a string as first argument",args[0].pos);
							}
						} else {
							code = this.error("Syntax." + target + " should have a string as first argument",args[0].pos);
						}
						var sargs = [];
						var _g3 = 1;
						var _g4 = args.length;
						while(_g3 < _g4) {
							var i = _g3++;
							var arg = args[i];
							var _g5 = arg.expr;
							if(_g5._hx_index == 20) {
								var _g6 = _g5.name;
								var _g7 = _g5.args;
								var _g8 = _g5.e;
								switch(_g6) {
								case "r":case "rw":case "w":
									var flags = _g6;
									var flaggedArg = _g8;
									var ed1 = this.typeExpr(flaggedArg,hxsl__$Checker_WithType.Value);
									var ed2;
									switch(flags) {
									case "r":
										ed2 = hxsl_SyntaxArgAccess.Read;
										break;
									case "rw":
										ed2 = hxsl_SyntaxArgAccess.ReadWrite;
										break;
									case "w":
										ed2 = hxsl_SyntaxArgAccess.Write;
										break;
									default:
										throw haxe_Exception.thrown("assert");
									}
									sargs.push({ e : ed1, access : ed2});
									break;
								default:
									this.error("Syntax." + target + " arguments should have an access meta of @r, @w or @rw",arg.pos);
								}
							} else {
								this.error("Syntax." + target + " arguments should have an access meta of @r, @w or @rw",arg.pos);
							}
						}
						return { e : hxsl_TExprDef.TSyntax(target,code,sargs), t : hxsl_Type.TVoid, p : e.pos};
					} else {
						var e1 = _g1;
						var args = _g2;
						var makeCall = function(e1) {
							var _g = e1.t;
							if(_g._hx_index == 14) {
								var variants = _g.variants;
								var e2 = _gthis.unifyCallParams(e1,args,variants,e.pos);
								type = e2.t;
								return e2.e;
							} else {
								return _gthis.error(hxsl_Tools.toString(e1.t) + " cannot be called",e.pos);
							}
						};
						var _g3 = e1.expr;
						if(_g3._hx_index == 3) {
							var e11 = _g3.e;
							var f = _g3.f;
							var e12 = this.typeExpr(e11,hxsl__$Checker_WithType.Value);
							var ef = this.fieldAccess(e12,f,$with,e.pos);
							if(ef == null) {
								this.error(hxsl_Tools.toString(e12.t) + " has no field '" + f + "'",e.pos);
							}
							switch(ef._hx_index) {
							case 0:
								var ef1 = ef.e;
								ed = makeCall(ef1);
								break;
							case 1:
								var g = ef.g;
								var arg = ef.arg;
								var variants = ef.variants;
								var eg = { e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TFun(variants), p : e12.p};
								if(variants.length == 0) {
									var _g3 = [];
									var _g4 = 0;
									while(_g4 < args.length) {
										var a = args[_g4];
										++_g4;
										_g3.push(this.typeExpr(a,hxsl__$Checker_WithType.Value));
									}
									var args1 = _g3;
									args1.unshift(arg);
									var e2 = this.specialGlobal(g,eg,args1,e.pos);
									type = e2.t;
									ed = e2.e;
								} else {
									var e2 = this.unifyCallParams(eg,args,variants,e.pos);
									var _g3 = e2.e;
									var _g4 = eg.t;
									if(_g3._hx_index == 8) {
										var _g5 = _g3.e;
										if(_g4._hx_index == 14) {
											var _g5 = _g4.variants;
											if(_g5.length == 1) {
												var f = _g5[0];
												var args1 = _g3.args;
												args1.unshift(arg);
												f.args.unshift({ name : "_", type : arg.t});
											} else {
												throw haxe_Exception.thrown("assert");
											}
										} else {
											throw haxe_Exception.thrown("assert");
										}
									} else {
										throw haxe_Exception.thrown("assert");
									}
									type = e2.t;
									ed = e2.e;
								}
								break;
							}
						} else {
							ed = makeCall(this.typeExpr(e1,hxsl__$Checker_WithType.Value));
						}
					}
				} else {
					var e1 = _g1;
					var args1 = _g2;
					var makeCall1 = function(e1) {
						var _g = e1.t;
						if(_g._hx_index == 14) {
							var variants = _g.variants;
							var e2 = _gthis.unifyCallParams(e1,args1,variants,e.pos);
							type = e2.t;
							return e2.e;
						} else {
							return _gthis.error(hxsl_Tools.toString(e1.t) + " cannot be called",e.pos);
						}
					};
					var _g3 = e1.expr;
					if(_g3._hx_index == 3) {
						var e11 = _g3.e;
						var f = _g3.f;
						var e12 = this.typeExpr(e11,hxsl__$Checker_WithType.Value);
						var ef = this.fieldAccess(e12,f,$with,e.pos);
						if(ef == null) {
							this.error(hxsl_Tools.toString(e12.t) + " has no field '" + f + "'",e.pos);
						}
						switch(ef._hx_index) {
						case 0:
							var ef1 = ef.e;
							ed = makeCall1(ef1);
							break;
						case 1:
							var g = ef.g;
							var arg = ef.arg;
							var variants = ef.variants;
							var eg = { e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TFun(variants), p : e12.p};
							if(variants.length == 0) {
								var _g3 = [];
								var _g4 = 0;
								while(_g4 < args1.length) {
									var a = args1[_g4];
									++_g4;
									_g3.push(this.typeExpr(a,hxsl__$Checker_WithType.Value));
								}
								var args2 = _g3;
								args2.unshift(arg);
								var e2 = this.specialGlobal(g,eg,args2,e.pos);
								type = e2.t;
								ed = e2.e;
							} else {
								var e2 = this.unifyCallParams(eg,args1,variants,e.pos);
								var _g3 = e2.e;
								var _g4 = eg.t;
								if(_g3._hx_index == 8) {
									var _g5 = _g3.e;
									if(_g4._hx_index == 14) {
										var _g5 = _g4.variants;
										if(_g5.length == 1) {
											var f = _g5[0];
											var args2 = _g3.args;
											args2.unshift(arg);
											f.args.unshift({ name : "_", type : arg.t});
										} else {
											throw haxe_Exception.thrown("assert");
										}
									} else {
										throw haxe_Exception.thrown("assert");
									}
								} else {
									throw haxe_Exception.thrown("assert");
								}
								type = e2.t;
								ed = e2.e;
							}
							break;
						}
					} else {
						ed = makeCall1(this.typeExpr(e1,hxsl__$Checker_WithType.Value));
					}
				}
			} else {
				var e1 = _g1;
				var args2 = _g2;
				var makeCall2 = function(e1) {
					var _g = e1.t;
					if(_g._hx_index == 14) {
						var variants = _g.variants;
						var e2 = _gthis.unifyCallParams(e1,args2,variants,e.pos);
						type = e2.t;
						return e2.e;
					} else {
						return _gthis.error(hxsl_Tools.toString(e1.t) + " cannot be called",e.pos);
					}
				};
				var _g1 = e1.expr;
				if(_g1._hx_index == 3) {
					var e11 = _g1.e;
					var f = _g1.f;
					var e12 = this.typeExpr(e11,hxsl__$Checker_WithType.Value);
					var ef = this.fieldAccess(e12,f,$with,e.pos);
					if(ef == null) {
						this.error(hxsl_Tools.toString(e12.t) + " has no field '" + f + "'",e.pos);
					}
					switch(ef._hx_index) {
					case 0:
						var ef1 = ef.e;
						ed = makeCall2(ef1);
						break;
					case 1:
						var g = ef.g;
						var arg = ef.arg;
						var variants = ef.variants;
						var eg = { e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TFun(variants), p : e12.p};
						if(variants.length == 0) {
							var _g1 = [];
							var _g2 = 0;
							while(_g2 < args2.length) {
								var a = args2[_g2];
								++_g2;
								_g1.push(this.typeExpr(a,hxsl__$Checker_WithType.Value));
							}
							var args3 = _g1;
							args3.unshift(arg);
							var e2 = this.specialGlobal(g,eg,args3,e.pos);
							type = e2.t;
							ed = e2.e;
						} else {
							var e2 = this.unifyCallParams(eg,args2,variants,e.pos);
							var _g1 = e2.e;
							var _g2 = eg.t;
							if(_g1._hx_index == 8) {
								var _g3 = _g1.e;
								if(_g2._hx_index == 14) {
									var _g3 = _g2.variants;
									if(_g3.length == 1) {
										var f = _g3[0];
										var args3 = _g1.args;
										args3.unshift(arg);
										f.args.unshift({ name : "_", type : arg.t});
									} else {
										throw haxe_Exception.thrown("assert");
									}
								} else {
									throw haxe_Exception.thrown("assert");
								}
							} else {
								throw haxe_Exception.thrown("assert");
							}
							type = e2.t;
							ed = e2.e;
						}
						break;
					}
				} else {
					ed = makeCall2(this.typeExpr(e1,hxsl__$Checker_WithType.Value));
				}
			}
			break;
		case 7:
			var el = _g.el;
			var old = this.saveVars();
			var el1 = el.slice();
			var tl = [];
			$with = this.propagate($with);
			if(el1.length == 0 && $with != hxsl__$Checker_WithType.NoValue) {
				this.error("Value expected",e.pos);
			}
			while(true) {
				var e1 = el1.shift();
				if(e1 == null) {
					break;
				}
				var _g1 = e1.expr;
				if(_g1._hx_index == 8) {
					var vl = _g1.v;
					if(vl.length > 1) {
						var v0 = vl.shift();
						el1.unshift(e1);
						e1 = { expr : hxsl_ExprDef.EVars([v0]), pos : e1.pos};
					}
				}
				var ew;
				var _g2 = e1.expr;
				if(_g2._hx_index == 8) {
					var _g3 = _g2.v;
					ew = hxsl__$Checker_WithType.InBlock;
				} else {
					ew = el1.length == 0 ? $with : hxsl__$Checker_WithType.NoValue;
				}
				var et = this.typeExpr(e1,ew);
				if(el1.length != 0 && !hxsl_Tools.hasSideEffect(et)) {
					this.warning("This expression has no side effect",e1.pos);
				}
				tl.push(et);
			}
			this.vars = old;
			type = $with == hxsl__$Checker_WithType.NoValue ? hxsl_Type.TVoid : tl[tl.length - 1].t;
			ed = hxsl_TExprDef.TBlock(tl);
			break;
		case 8:
			var vl = _g.v;
			if($with != hxsl__$Checker_WithType.InBlock) {
				this.error("Cannot declare a variable outside of a block",e.pos);
			}
			if(vl.length != 1) {
				throw haxe_Exception.thrown("assert");
			}
			var v = vl[0];
			if(v.kind == null) {
				v.kind = hxsl_VarKind.Local;
			}
			if(v.kind != hxsl_VarKind.Local) {
				this.error("Should be local var",e.pos);
			}
			if(v.qualifiers.length != 0) {
				this.error("Unexpected qualifier",e.pos);
			}
			var tv = this.makeVar(vl[0],e.pos);
			var init = v.expr == null ? null : this.typeWith(v.expr,tv.type);
			if(tv.type == null) {
				if(init == null) {
					this.error("Type required for unitialized local var",e.pos);
				}
				tv.type = init.t;
			}
			this.vars.h[tv.name] = tv;
			type = hxsl_Type.TVoid;
			ed = hxsl_TExprDef.TVarDecl(tv,init);
			break;
		case 9:
			var _g1 = _g.f;
			throw haxe_Exception.thrown("assert");
		case 10:
			var cond = _g.econd;
			var e1 = _g.eif;
			var e2 = _g.eelse;
			$with = this.propagate($with);
			var cond1 = this.typeWith(cond,hxsl_Type.TBool);
			var e11 = this.typeExpr(e1,$with);
			var e21 = e2 == null ? null : this.typeExpr(e2,$with);
			if($with == hxsl__$Checker_WithType.NoValue) {
				type = hxsl_Type.TVoid;
				ed = hxsl_TExprDef.TIf(cond1,e11,e21);
			} else {
				if(e21 == null) {
					this.error("Missing else",e.pos);
				}
				if(this.tryUnify(e11.t,e21.t)) {
					type = e11.t;
				} else {
					this.unifyExpr(e21,e11.t);
					type = e21.t;
				}
				ed = hxsl_TExprDef.TIf(cond1,e11,e21);
			}
			break;
		case 11:
			type = hxsl_Type.TVoid;
			ed = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			var v = _g.v;
			var it = _g.loop;
			var block = _g.block;
			type = hxsl_Type.TVoid;
			var it1 = this.typeExpr(it,hxsl__$Checker_WithType.Value);
			var _g1 = it1.t;
			if(_g1._hx_index == 15) {
				var _g2 = _g1.size;
				var t = _g1.t;
				var v1 = { id : hxsl_Tools.allocVarId(), name : v, type : t, kind : hxsl_VarKind.Local};
				var old = this.vars.h[v1.name];
				this.vars.h[v1.name] = v1;
				var oldL = this.inLoop;
				this.inLoop = true;
				var block1 = this.typeExpr(block,hxsl__$Checker_WithType.NoValue);
				this.inLoop = oldL;
				if(old == null) {
					var key = v1.name;
					var _this = this.vars;
					if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
						delete(_this.h[key]);
					}
				} else {
					this.vars.h[v1.name] = old;
				}
				ed = hxsl_TExprDef.TFor(v1,it1,block1);
			} else {
				ed = this.error("Cannot iterate on " + hxsl_Tools.toString(it1.t),it1.p);
			}
			break;
		case 13:
			var e1 = _g.e;
			if(e1 == null != (this.curFun.ret == hxsl_Type.TVoid)) {
				this.error("This function should return " + hxsl_Tools.toString(this.curFun.ret),e.pos);
			}
			var e2 = e1 == null ? null : this.typeWith(e1,this.curFun.ret);
			type = hxsl_Type.TVoid;
			ed = hxsl_TExprDef.TReturn(e2);
			break;
		case 14:
			if(!this.inLoop) {
				this.error("Break outside loop",e.pos);
			}
			type = hxsl_Type.TVoid;
			ed = hxsl_TExprDef.TBreak;
			break;
		case 15:
			if(!this.inLoop) {
				this.error("Continue outside loop",e.pos);
			}
			type = hxsl_Type.TVoid;
			ed = hxsl_TExprDef.TContinue;
			break;
		case 16:
			var e1 = _g.e;
			var e2 = _g.eindex;
			var e11 = this.typeExpr(e1,hxsl__$Checker_WithType.Value);
			var e21 = this.typeExpr(e2,hxsl__$Checker_WithType.With(hxsl_Type.TInt));
			this.unify(e21.t,hxsl_Type.TInt,e21.p);
			var _g1 = e11.t;
			switch(_g1._hx_index) {
			case 5:
				var _g2 = _g1.size;
				switch(_g1.t._hx_index) {
				case 0:
					type = hxsl_Type.TInt;
					break;
				case 1:
					type = hxsl_Type.TFloat;
					break;
				default:
					this.error("Cannot index " + hxsl_Tools.toString(e11.t) + " : should be an array",e.pos);
				}
				break;
			case 6:
				type = hxsl_Checker.vec3;
				break;
			case 7:case 8:
				type = hxsl_Checker.vec4;
				break;
			case 12:
				type = hxsl_Checker.vec2;
				break;
			case 15:
				var t = _g1.t;
				var size = _g1.size;
				var _g2 = e21.e;
				if(size._hx_index == 0) {
					if(_g2._hx_index == 0) {
						var _g3 = _g2.c;
						if(_g3._hx_index == 2) {
							var _g4 = _g3.v;
							var i = _g4;
							var v = size.v;
							if(i >= v) {
								this.error("Indexing outside array bounds",e.pos);
							} else {
								var i = _g4;
								if(i < 0) {
									this.error("Cannot index with negative value",e.pos);
								}
							}
						}
					}
				} else if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 2) {
						var i = _g3.v;
						if(i < 0) {
							this.error("Cannot index with negative value",e.pos);
						}
					}
				}
				type = t;
				break;
			case 16:
				var _g2 = _g1.t;
				var _g3 = _g1.size;
				switch(_g1.kind._hx_index) {
				case 0:case 3:
					var size = _g3;
					var t = _g2;
					var _g1 = e21.e;
					if(size._hx_index == 0) {
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							if(_g4._hx_index == 2) {
								var _g5 = _g4.v;
								var i = _g5;
								var v = size.v;
								if(i >= v) {
									this.error("Indexing outside array bounds",e.pos);
								} else {
									var i = _g5;
									if(i < 0) {
										this.error("Cannot index with negative value",e.pos);
									}
								}
							}
						}
					} else if(_g1._hx_index == 0) {
						var _g4 = _g1.c;
						if(_g4._hx_index == 2) {
							var i = _g4.v;
							if(i < 0) {
								this.error("Cannot index with negative value",e.pos);
							}
						}
					}
					type = t;
					break;
				default:
					var size = _g3;
					var t = _g2;
					type = t;
				}
				break;
			default:
				this.error("Cannot index " + hxsl_Tools.toString(e11.t) + " : should be an array",e.pos);
			}
			ed = hxsl_TExprDef.TArray(e11,e21);
			break;
		case 17:
			var el = _g.el;
			if(el.length == 0) {
				this.error("Empty array not supported",e.pos);
			}
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < el.length) {
				var e1 = el[_g2];
				++_g2;
				_g1.push(this.typeExpr(e1,hxsl__$Checker_WithType.Value));
			}
			var el = _g1;
			var t = el[0].t;
			var _g1 = 1;
			var _g2 = el.length;
			while(_g1 < _g2) {
				var i = _g1++;
				this.unifyExpr(el[i],t);
			}
			type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(el.length));
			ed = hxsl_TExprDef.TArrayDecl(el);
			break;
		case 18:
			var e1 = _g.e;
			var cases = _g.cases;
			var def = _g.def;
			var et = this.typeExpr(e1,hxsl__$Checker_WithType.Value);
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < cases.length) {
				var c = cases[_g2];
				++_g2;
				var _g3 = [];
				var _g4 = 0;
				var _g5 = c.values;
				while(_g4 < _g5.length) {
					var v = _g5[_g4];
					++_g4;
					_g3.push(this.typeWith(v,et.t));
				}
				_g1.push({ values : _g3, expr : this.typeExpr(c.expr,$with)});
			}
			var cases = _g1;
			var def1 = def == null ? null : this.typeExpr(def,$with);
			type = hxsl_Type.TVoid;
			ed = hxsl_TExprDef.TSwitch(et,cases,def1);
			break;
		case 19:
			var cond = _g.cond;
			var loop = _g.loop;
			var normalWhile = _g.normalWhile;
			type = hxsl_Type.TVoid;
			var cond1 = this.typeWith(cond,hxsl_Type.TBool);
			var oldL = this.inLoop;
			var oldW = this.inWhile;
			this.inLoop = true;
			this.inWhile = true;
			var loop1 = this.typeExpr(loop,hxsl__$Checker_WithType.NoValue);
			this.inLoop = oldL;
			this.inWhile = oldW;
			ed = hxsl_TExprDef.TWhile(cond1,loop1,normalWhile);
			break;
		case 20:
			var name = _g.name;
			var args3 = _g.args;
			var e1 = _g.e;
			var e2 = this.typeExpr(e1,$with);
			type = e2.t;
			var _g = [];
			var _g1 = 0;
			while(_g1 < args3.length) {
				var c = args3[_g1];
				++_g1;
				var _g2 = c.expr;
				var ed1;
				switch(_g2._hx_index) {
				case 0:
					var c1 = _g2.c;
					ed1 = c1;
					break;
				case 1:
					var i = _g2.i;
					ed1 = hxsl_Const.CString(i);
					break;
				default:
					ed1 = this.error("Metadata parameter should be constant",c.pos);
				}
				_g.push(ed1);
			}
			ed = hxsl_TExprDef.TMeta(name,_g,e2);
			break;
		}
		if(type == null) {
			throw haxe_Exception.thrown("assert");
		}
		return { e : ed, t : type, p : e.pos};
	}
	,propagate: function($with) {
		if($with._hx_index == 2) {
			return hxsl__$Checker_WithType.NoValue;
		} else {
			return $with;
		}
	}
	,checkExpr: function(e,funs,isImport,isExtends) {
		var _gthis = this;
		var _g = e.expr;
		switch(_g._hx_index) {
		case 6:
			var _g1 = _g.e;
			var _g2 = _g.args;
			var _g3 = _g1.expr;
			var _g4 = _g1.pos;
			if(_g3._hx_index == 1) {
				switch(_g3.i) {
				case "extends":
					if(_g2.length == 1) {
						var e1 = _g2[0];
						var path = [];
						var loop = null;
						loop = function(e) {
							var _g = e.expr;
							switch(_g._hx_index) {
							case 0:
								var _g1 = _g.c;
								if(_g1._hx_index == 4) {
									var s = _g1.v;
									path.push(s);
								} else {
									_gthis.error("Should be a shader type path",e.pos);
								}
								break;
							case 1:
								var n = _g.i;
								path.push(n);
								break;
							case 3:
								var e1 = _g.e;
								var f = _g.f;
								loop(e1);
								path.push(f);
								break;
							default:
								_gthis.error("Should be a shader type path",e.pos);
							}
						};
						loop(e1);
						var sexpr = null;
						try {
							sexpr = this.loadShader(path.join("."));
						} catch( _g1 ) {
							var _g3 = haxe_Exception.caught(_g1).unwrap();
							if(((_g3) instanceof hxsl_Error)) {
								var err = _g3;
								this.error(Std.string(err),e1.pos);
							} else {
								throw _g1;
							}
						}
						if(sexpr != null) {
							this.checkExpr(sexpr,funs,isImport,true);
						}
					} else {
						this.error("This expression is not allowed at shader declaration level",e.pos);
					}
					break;
				case "import":
					if(_g2.length == 1) {
						var e1 = _g2[0];
						var path1 = [];
						var loop1 = null;
						loop1 = function(e) {
							var _g = e.expr;
							switch(_g._hx_index) {
							case 1:
								var n = _g.i;
								path1.push(n);
								break;
							case 3:
								var e1 = _g.e;
								var f = _g.f;
								loop1(e1);
								path1.push(f);
								break;
							default:
								_gthis.error("Should be a shader type path",e.pos);
							}
						};
						loop1(e1);
						var sexpr = null;
						try {
							sexpr = this.loadShader(path1.join("."));
						} catch( _g1 ) {
							var _g2 = haxe_Exception.caught(_g1);
							var _g3 = _g2.unwrap();
							if(((_g2) instanceof haxe_macro_Error)) {
								var err = _g2;
								throw err;
							} else {
								var err = _g3;
								this.error(Std.string(err),e1.pos);
							}
						}
						if(sexpr != null) {
							this.checkExpr(sexpr,funs,true,isExtends);
						}
					} else {
						this.error("This expression is not allowed at shader declaration level",e.pos);
					}
					break;
				default:
					this.error("This expression is not allowed at shader declaration level",e.pos);
				}
			} else {
				this.error("This expression is not allowed at shader declaration level",e.pos);
			}
			break;
		case 7:
			var el = _g.el;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				this.checkExpr(e1,funs,isImport,isExtends);
			}
			break;
		case 8:
			var vl = _g.v;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				if(v.kind == null) {
					v.kind = hxsl_VarKind.Local;
					var _g2 = 0;
					var _g3 = v.qualifiers;
					while(_g2 < _g3.length) {
						var q = _g3[_g2];
						++_g2;
						if(q._hx_index == 0) {
							var _g4 = q.max;
							v.kind = hxsl_VarKind.Param;
						}
					}
				}
				var einit = null;
				if(v.expr != null) {
					if(v.kind != hxsl_VarKind.Param && v.kind != hxsl_VarKind.Local) {
						this.error("Cannot initialize variable declaration if not @param or local",v.expr.pos);
					}
					var e1 = this.typeExpr(v.expr,v.type == null ? hxsl__$Checker_WithType.Value : hxsl__$Checker_WithType.With(v.type));
					if(v.type == null) {
						v.type = e1.t;
					} else {
						this.unify(e1.t,v.type,v.expr.pos);
					}
					this.checkConst(e1);
					einit = e1;
				}
				if(v.type == null) {
					this.error("Type required for variable declaration",e.pos);
				}
				if(isImport && v.kind == hxsl_VarKind.Param) {
					continue;
				}
				if(Object.prototype.hasOwnProperty.call(this.vars.h,v.name)) {
					this.error("Duplicate var decl '" + v.name + "'",e.pos);
				}
				var v1 = this.makeVar(v,e.pos);
				var _g5 = v1.type;
				switch(_g5._hx_index) {
				case 10:
					if(_g5.dim._hx_index == 2) {
						if(_g5.isArray == true) {
							this.error("Unsupported texture type",e.pos);
						}
					}
					break;
				case 11:
					var _g6 = _g5.channels;
					if(_g5.dim._hx_index == 2) {
						if(_g5.isArray == true) {
							this.error("Unsupported texture type",e.pos);
						} else if(_g6 == 3) {
							this.error("Unsupported texture type",e.pos);
						}
					} else if(_g6 == 3) {
						this.error("Unsupported texture type",e.pos);
					}
					break;
				default:
				}
				if(einit != null) {
					this.inits.push({ v : v1, e : einit});
				} else if(v1.qualifiers != null && v1.qualifiers.indexOf(hxsl_VarQualifier.Final) >= 0) {
					this.error("Final variable needs initializer",e.pos);
				}
				this.vars.h[v1.name] = v1;
			}
			break;
		case 9:
			var f = _g.f;
			if(isImport && (f.name == "fragment" || f.name == "vertex" || StringTools.startsWith(f.name,"__init__"))) {
				return;
			}
			var _g = 0;
			var _g1 = funs.slice();
			while(_g < _g1.length) {
				var f2 = _g1[_g];
				++_g;
				if(f2.f.name == f.name && f2.inherit) {
					HxOverrides.remove(funs,f2);
				}
			}
			funs.push({ f : f, p : e.pos, inherit : isExtends || isImport});
			break;
		default:
			this.error("This expression is not allowed at shader declaration level",e.pos);
		}
	}
	,checkConst: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.c;
			break;
		case 3:
			var e1 = _g.e;
			this.checkConst(e1);
			break;
		case 8:
			var _g1 = _g.e;
			var _g2 = _g.args;
			var _g3 = _g1.e;
			var _g4 = _g1.p;
			var _g4 = _g1.t;
			if(_g3._hx_index == 2) {
				switch(_g3.g._hx_index) {
				case 41:case 42:case 43:case 44:case 45:case 46:
					var args = _g2;
					var _g1 = 0;
					while(_g1 < args.length) {
						var a = args[_g1];
						++_g1;
						this.checkConst(a);
					}
					break;
				default:
					this.error("This expression should be constant",e.p);
				}
			} else {
				this.error("This expression should be constant",e.p);
			}
			break;
		case 17:
			var el = _g.el;
			var _g = 0;
			while(_g < el.length) {
				var e1 = el[_g];
				++_g;
				this.checkConst(e1);
			}
			break;
		default:
			this.error("This expression should be constant",e.p);
		}
	}
	,makeVar: function(v,pos,parent) {
		var tv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type, qualifiers : v.qualifiers};
		if(parent != null) {
			tv.parent = parent;
		}
		if(tv.kind == null) {
			if(parent == null) {
				tv.kind = hxsl_VarKind.Local;
			} else {
				tv.kind = parent.kind;
			}
		} else if(parent != null && tv.kind != parent.kind) {
			if(parent.kind._hx_index == 0) {
				if(tv.kind._hx_index != 3) {
					this.error("Variable " + Std.string(parent.kind) + " cannot be changed to " + Std.string(tv.kind),pos);
				}
			} else {
				this.error("Variable " + Std.string(parent.kind) + " cannot be changed to " + Std.string(tv.kind),pos);
			}
		}
		if(v.qualifiers.length > 0) {
			tv.qualifiers = v.qualifiers;
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				switch(q._hx_index) {
				case 0:
					var _g2 = q.max;
					var p = parent;
					while(p != null) {
						if(!hxsl_Tools.isStruct(p)) {
							this.error("@const only allowed in structure",pos);
						}
						p = p.parent;
					}
					if(tv.kind != hxsl_VarKind.Global && tv.kind != hxsl_VarKind.Param) {
						this.error("@const only allowed on parameter or global",pos);
					}
					break;
				case 1:
					break;
				case 2:
					if(tv.kind != hxsl_VarKind.Param) {
						this.error("@nullable only allowed on parameter or global",pos);
					}
					break;
				case 3:
					if(tv.kind != hxsl_VarKind.Global) {
						this.error("@perObject only allowed on global",pos);
					}
					break;
				case 4:
					var _g3 = q.n;
					if(parent != null) {
						this.error("Cannot have an explicit name for a structure variable",pos);
					}
					if(tv.kind != hxsl_VarKind.Global) {
						this.error("Explicit name is only allowed for global var",pos);
					}
					break;
				case 5:
					if(parent != null) {
						this.error("Cannot share a structure field",pos);
					}
					if(tv.kind != hxsl_VarKind.Param) {
						this.error("Can only share a @param",pos);
					}
					break;
				case 6:
					var _g4 = q.p;
					var _g5 = v.type;
					if(_g5 == null) {
						this.error("Precision qualifier not supported on " + Std.string(v.type),pos);
					} else {
						switch(_g5._hx_index) {
						case 3:
							break;
						case 5:
							var _g6 = _g5.size;
							if(_g5.t._hx_index != 1) {
								this.error("Precision qualifier not supported on " + Std.string(v.type),pos);
							}
							break;
						default:
							this.error("Precision qualifier not supported on " + Std.string(v.type),pos);
						}
					}
					break;
				case 7:
					var min = q.min;
					var max = q.max;
					var _g7 = v.type;
					if(_g7 == null) {
						this.error("Precision qualifier not supported on " + Std.string(v.type),pos);
					} else {
						switch(_g7._hx_index) {
						case 1:case 3:
							break;
						case 5:
							var _g8 = _g7.size;
							if(_g7.t._hx_index != 1) {
								this.error("Precision qualifier not supported on " + Std.string(v.type),pos);
							}
							break;
						default:
							this.error("Precision qualifier not supported on " + Std.string(v.type),pos);
						}
					}
					break;
				case 8:
					break;
				case 9:
					var _g9 = q.v;
					if(tv.kind != hxsl_VarKind.Input && tv.kind != hxsl_VarKind.Param && (tv.kind != hxsl_VarKind.Global || v.qualifiers.indexOf(hxsl_VarQualifier.PerObject) < 0)) {
						this.error("@perInstance only allowed on input/param",pos);
					}
					break;
				case 10:
					var _g10 = q.s;
					break;
				case 11:
					var source = q.source;
					if(v.kind != hxsl_VarKind.Local) {
						this.error("Borrow should not have a type qualifier",pos);
					}
					break;
				case 12:
					var _g11 = q.name;
					var _g12 = v.type;
					if(_g12 == null) {
						this.error("Sampler should be on sampler type or sampler array",pos);
					} else {
						switch(_g12._hx_index) {
						case 10:
							var _g13 = _g12.dim;
							var _g14 = _g12.isArray;
							break;
						case 15:
							var _g15 = _g12.t;
							var _g16 = _g12.size;
							if(_g15._hx_index == 10) {
								var _g17 = _g15.dim;
								var _g18 = _g15.isArray;
							} else {
								this.error("Sampler should be on sampler type or sampler array",pos);
							}
							break;
						default:
							this.error("Sampler should be on sampler type or sampler array",pos);
						}
					}
					break;
				case 13:
					if(tv.kind != hxsl_VarKind.Local) {
						this.error("final only allowed on local",pos);
					}
					break;
				case 14:
					if(tv.kind != hxsl_VarKind.Local) {
						this.error("flat only allowed on local",pos);
					}
					break;
				}
			}
		}
		if(tv.type != null) {
			tv.type = this.makeVarType(tv.type,tv,pos);
		}
		return tv;
	}
	,makeVarType: function(vt,parent,pos) {
		switch(vt._hx_index) {
		case 13:
			var vl = vt.vl;
			var vl1 = vl.slice();
			parent.type = hxsl_Type.TStruct(vl1);
			var _g = 0;
			var _g1 = vl1.length;
			while(_g < _g1) {
				var i = _g++;
				var v = vl1[i];
				vl1[i] = this.makeVar({ type : v.type, qualifiers : v.qualifiers, name : v.name, kind : v.kind, expr : null},pos,parent);
			}
			return parent.type;
		case 15:
			var t = vt.t;
			var size = vt.size;
			if(t._hx_index == 15) {
				var _g = t.t;
				var _g = t.size;
				this.error("Multidimentional arrays are not allowed",pos);
			}
			var s;
			switch(size._hx_index) {
			case 0:
				var _g = size.v;
				s = size;
				break;
			case 1:
				var v = size.v;
				var path = v.name.split(".");
				var v2 = null;
				var _g = 0;
				while(_g < path.length) {
					var n = path[_g];
					++_g;
					if(v2 == null) {
						v2 = this.vars.h[n];
						if(v2 == null && parent != null) {
							var p = parent;
							while(p.parent != null) p = p.parent;
							if(p.name == n) {
								v2 = p;
							}
						}
					} else {
						var _g1 = v2.type;
						if(_g1._hx_index == 13) {
							var vl = _g1.vl;
							var f = null;
							var _g2 = 0;
							while(_g2 < vl.length) {
								var v1 = vl[_g2];
								++_g2;
								if(v1.name == n) {
									f = v1;
									break;
								}
							}
							v2 = f;
						} else {
							v2 = null;
						}
					}
					if(v2 == null) {
						break;
					}
				}
				if(v2 == null) {
					this.error("Array size variable '" + v.name + "'not found",pos);
				}
				if(!hxsl_Tools.isConst(v2)) {
					this.error("Array size variable '" + v.name + "'should be a constant",pos);
				}
				s = hxsl_SizeDecl.SVar(v2);
				break;
			}
			t = this.makeVarType(t,parent,pos);
			switch(vt._hx_index) {
			case 15:
				var _g = vt.t;
				var _g = vt.size;
				return hxsl_Type.TArray(t,s);
			case 16:
				var _g = vt.t;
				var _g = vt.size;
				var kind = vt.kind;
				return hxsl_Type.TBuffer(t,s,kind);
			default:
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 16:
			var _g = vt.kind;
			var t = vt.t;
			var size = vt.size;
			if(t._hx_index == 15) {
				var _g = t.t;
				var _g = t.size;
				this.error("Multidimentional arrays are not allowed",pos);
			}
			var s;
			switch(size._hx_index) {
			case 0:
				var _g = size.v;
				s = size;
				break;
			case 1:
				var v = size.v;
				var path = v.name.split(".");
				var v2 = null;
				var _g = 0;
				while(_g < path.length) {
					var n = path[_g];
					++_g;
					if(v2 == null) {
						v2 = this.vars.h[n];
						if(v2 == null && parent != null) {
							var p = parent;
							while(p.parent != null) p = p.parent;
							if(p.name == n) {
								v2 = p;
							}
						}
					} else {
						var _g1 = v2.type;
						if(_g1._hx_index == 13) {
							var vl = _g1.vl;
							var f = null;
							var _g2 = 0;
							while(_g2 < vl.length) {
								var v1 = vl[_g2];
								++_g2;
								if(v1.name == n) {
									f = v1;
									break;
								}
							}
							v2 = f;
						} else {
							v2 = null;
						}
					}
					if(v2 == null) {
						break;
					}
				}
				if(v2 == null) {
					this.error("Array size variable '" + v.name + "'not found",pos);
				}
				if(!hxsl_Tools.isConst(v2)) {
					this.error("Array size variable '" + v.name + "'should be a constant",pos);
				}
				s = hxsl_SizeDecl.SVar(v2);
				break;
			}
			t = this.makeVarType(t,parent,pos);
			switch(vt._hx_index) {
			case 15:
				var _g = vt.t;
				var _g = vt.size;
				return hxsl_Type.TArray(t,s);
			case 16:
				var _g = vt.t;
				var _g = vt.size;
				var kind = vt.kind;
				return hxsl_Type.TBuffer(t,s,kind);
			default:
				throw haxe_Exception.thrown("assert");
			}
			break;
		default:
			return vt;
		}
	}
	,isParentArray: function(v) {
		if(v.parent == null) {
			return false;
		}
		var _g = v.parent.type;
		switch(_g._hx_index) {
		case 13:
			var _g1 = _g.vl;
			return this.isParentArray(v.parent);
		case 15:
			var _g1 = _g.t;
			var _g1 = _g.size;
			return true;
		case 16:
			var _g1 = _g.t;
			var _g1 = _g.size;
			var _g1 = _g.kind;
			return true;
		default:
			return false;
		}
	}
	,fieldAccess: function(e,f,$with,pos) {
		var ef;
		var _g = e.t;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var found = null;
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				if(v.name == f) {
					found = v;
					break;
				}
			}
			ef = found == null ? null : this.isParentArray(found) ? { e : hxsl_TExprDef.TField(e,f), t : found.type, p : pos} : { e : hxsl_TExprDef.TVar(found), t : found.type, p : pos};
		} else {
			ef = null;
		}
		if(ef != null) {
			return hxsl__$Checker_FieldAccess.FField(ef);
		}
		var g = this.globals.h[f];
		if(g == null) {
			var gl;
			var _g = e.t;
			switch(f) {
			case "fetch":
				switch(_g._hx_index) {
				case 10:
					var _g1 = _g.dim;
					var _g1 = _g.isArray;
					gl = hxsl_TGlobal.Texel;
					break;
				case 17:
					var _g1 = _g.size;
					gl = hxsl_TGlobal.ChannelFetch;
					break;
				default:
					gl = null;
				}
				break;
			case "fetchLod":
				switch(_g._hx_index) {
				case 10:
					var _g1 = _g.dim;
					var _g1 = _g.isArray;
					gl = hxsl_TGlobal.Texel;
					break;
				case 17:
					var _g1 = _g.size;
					gl = hxsl_TGlobal.ChannelFetch;
					break;
				default:
					gl = null;
				}
				break;
			case "get":
				switch(_g._hx_index) {
				case 10:
					var _g1 = _g.dim;
					var _g1 = _g.isArray;
					gl = hxsl_TGlobal.Texture;
					break;
				case 17:
					var _g1 = _g.size;
					gl = hxsl_TGlobal.ChannelRead;
					break;
				default:
					gl = null;
				}
				break;
			case "getLod":
				switch(_g._hx_index) {
				case 10:
					var _g1 = _g.dim;
					var _g1 = _g.isArray;
					gl = hxsl_TGlobal.TextureLod;
					break;
				case 17:
					var _g1 = _g.size;
					gl = hxsl_TGlobal.ChannelReadLod;
					break;
				default:
					gl = null;
				}
				break;
			case "size":
				switch(_g._hx_index) {
				case 10:
					var _g1 = _g.dim;
					var _g1 = _g.isArray;
					gl = hxsl_TGlobal.TextureSize;
					break;
				case 11:
					var _g1 = _g.dim;
					var _g1 = _g.isArray;
					var _g1 = _g.channels;
					gl = hxsl_TGlobal.TextureSize;
					break;
				case 17:
					var _g1 = _g.size;
					gl = hxsl_TGlobal.ChannelTextureSize;
					break;
				default:
					gl = null;
				}
				break;
			case "store":
				if(_g._hx_index == 11) {
					var _g1 = _g.dim;
					var _g1 = _g.isArray;
					var _g1 = _g.channels;
					gl = hxsl_TGlobal.ImageStore;
				} else {
					gl = null;
				}
				break;
			default:
				gl = null;
			}
			if(gl != null) {
				if(f == "get" && this.inWhile) {
					this.error("Cannot use .get() in while loop, use .getLod instead",pos);
				}
				var this1 = this.globals;
				var key = hxsl_Tools2.toString(gl);
				g = this1.h[key];
			}
		}
		if(g != null) {
			var _g = g.t;
			if(_g._hx_index == 14) {
				var variants = _g.variants;
				var sel = [];
				var _g = 0;
				while(_g < variants.length) {
					var v = variants[_g];
					++_g;
					if(v.args.length == 0 || !this.tryUnify(e.t,v.args[0].type)) {
						continue;
					}
					var args = v.args.slice();
					args.shift();
					sel.push({ args : args, ret : v.ret});
				}
				if(sel.length > 0 || variants.length == 0) {
					return hxsl__$Checker_FieldAccess.FGlobal(g.g,e,sel);
				}
			}
			var _g = e.t;
			if(g.g._hx_index == 28) {
				if(_g._hx_index == 15) {
					var _g1 = _g.t;
					var _g1 = _g.size;
					return hxsl__$Checker_FieldAccess.FField({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Length), t : hxsl_Type.TVoid, p : pos},[e]), t : hxsl_Type.TInt, p : pos});
				}
			}
		}
		var stype;
		var ncomps;
		var _g = e.t;
		switch(_g._hx_index) {
		case 1:
			stype = hxsl_VecType.VInt;
			ncomps = 1;
			break;
		case 2:
			stype = hxsl_VecType.VBool;
			ncomps = 1;
			break;
		case 3:
			stype = hxsl_VecType.VFloat;
			ncomps = 1;
			break;
		case 5:
			var size = _g.size;
			var t = _g.t;
			stype = t;
			ncomps = size;
			break;
		case 9:
			var size = _g.size;
			stype = hxsl_VecType.VFloat;
			ncomps = size;
			break;
		default:
			stype = null;
			ncomps = 0;
		}
		if(ncomps > 0 && f.length <= 4) {
			var str = "xrsygtzbpwaq";
			var comps = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
			var cat = -1;
			var out = [];
			var _g = 0;
			var _g1 = f.length;
			while(_g < _g1) {
				var i = _g++;
				var idx = str.indexOf(f.charAt(i));
				if(idx < 0) {
					return null;
				}
				var icat = idx % 3;
				if(cat < 0) {
					cat = icat;
				} else if(icat != cat) {
					return null;
				}
				var cid = idx / 3 | 0;
				if(cid >= ncomps) {
					this.error(hxsl_Tools.toString(e.t) + " does not have component " + f.charAt(i),pos);
				}
				out.push(comps[cid]);
			}
			return hxsl__$Checker_FieldAccess.FField({ e : hxsl_TExprDef.TSwiz(e,out), t : out.length == 1 ? hxsl_Tools.toType(stype) : hxsl_Type.TVec(out.length,stype), p : pos});
		}
		return null;
	}
	,getSizeType: function(size,vtype) {
		switch(size) {
		case 1:
			if(vtype == hxsl_VecType.VInt) {
				return hxsl_Type.TInt;
			} else {
				return hxsl_Type.TFloat;
			}
			break;
		case 2:
			if(vtype == hxsl_VecType.VInt) {
				return hxsl_Checker.ivec2;
			} else {
				return hxsl_Checker.vec2;
			}
			break;
		case 3:
			if(vtype == hxsl_VecType.VInt) {
				return hxsl_Checker.ivec3;
			} else {
				return hxsl_Checker.vec3;
			}
			break;
		case 4:
			if(vtype == hxsl_VecType.VInt) {
				return hxsl_Checker.ivec4;
			} else {
				return hxsl_Checker.vec4;
			}
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,specialGlobal: function(g,e,args,pos) {
		var _gthis = this;
		var type = null;
		switch(g._hx_index) {
		case 37:
			if(args.length != 1) {
				this.error("TextureSize() requires one single argument",pos);
			}
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:
				var dim = _g.dim;
				var arr = _g.isArray;
				type = this.getSizeType(hxsl_Tools.getDimSize(dim,arr),hxsl_VecType.VFloat);
				break;
			case 11:
				var _g1 = _g.channels;
				var dim = _g.dim;
				var arr = _g.isArray;
				type = this.getSizeType(hxsl_Tools.getDimSize(dim,arr),hxsl_VecType.VFloat);
				break;
			default:
				this.unify(args[0].t,hxsl_Type.TSampler(hxsl_TexDimension.T2D,false),args[0].p);
				type = hxsl_Checker.vec2;
			}
			break;
		case 41:
			var t = hxsl_Type.TFloat;
			var skip = false;
			if(args.length == 1 && (t == hxsl_Type.TInt || t == hxsl_Type.TFloat)) {
				var _g = args[0].t;
				if(_g._hx_index == 5) {
					var n2 = _g.size;
					var t2 = _g.t;
					if((t2 == hxsl_VecType.VInt || t2 == hxsl_VecType.VFloat) && n2 == 2) {
						skip = true;
					}
				}
			}
			if(!skip) {
				var tsize = 0;
				var _g = 0;
				while(_g < args.length) {
					var a = args[_g];
					++_g;
					var _g1 = a.t;
					if(_g1._hx_index == 5) {
						var size = _g1.size;
						var k = _g1.t;
						if(hxsl_Tools.toType(k) != t) {
							_gthis.unify(a.t,t,a.p);
						}
						tsize += size;
					} else {
						_gthis.unifyExpr(a,t);
						++tsize;
					}
				}
				if(tsize != 2 && tsize > 1) {
					_gthis.error(hxsl_Tools2.toString(g) + " requires " + 2 + " " + hxsl_Tools.toString(t) + " values but has " + tsize,pos);
				}
			}
			type = hxsl_Type.TVec(2,hxsl_VecType.VFloat);
			break;
		case 42:
			var t = hxsl_Type.TFloat;
			var skip = false;
			if(args.length == 1 && (t == hxsl_Type.TInt || t == hxsl_Type.TFloat)) {
				var _g = args[0].t;
				if(_g._hx_index == 5) {
					var n2 = _g.size;
					var t2 = _g.t;
					if((t2 == hxsl_VecType.VInt || t2 == hxsl_VecType.VFloat) && n2 == 3) {
						skip = true;
					}
				}
			}
			if(!skip) {
				var tsize = 0;
				var _g = 0;
				while(_g < args.length) {
					var a = args[_g];
					++_g;
					var _g1 = a.t;
					if(_g1._hx_index == 5) {
						var size = _g1.size;
						var k = _g1.t;
						if(hxsl_Tools.toType(k) != t) {
							_gthis.unify(a.t,t,a.p);
						}
						tsize += size;
					} else {
						_gthis.unifyExpr(a,t);
						++tsize;
					}
				}
				if(tsize != 3 && tsize > 1) {
					_gthis.error(hxsl_Tools2.toString(g) + " requires " + 3 + " " + hxsl_Tools.toString(t) + " values but has " + tsize,pos);
				}
			}
			type = hxsl_Type.TVec(3,hxsl_VecType.VFloat);
			break;
		case 43:
			var t = hxsl_Type.TFloat;
			var skip = false;
			if(args.length == 1 && (t == hxsl_Type.TInt || t == hxsl_Type.TFloat)) {
				var _g = args[0].t;
				if(_g._hx_index == 5) {
					var n2 = _g.size;
					var t2 = _g.t;
					if((t2 == hxsl_VecType.VInt || t2 == hxsl_VecType.VFloat) && n2 == 4) {
						skip = true;
					}
				}
			}
			if(!skip) {
				var tsize = 0;
				var _g = 0;
				while(_g < args.length) {
					var a = args[_g];
					++_g;
					var _g1 = a.t;
					if(_g1._hx_index == 5) {
						var size = _g1.size;
						var k = _g1.t;
						if(hxsl_Tools.toType(k) != t) {
							_gthis.unify(a.t,t,a.p);
						}
						tsize += size;
					} else {
						_gthis.unifyExpr(a,t);
						++tsize;
					}
				}
				if(tsize != 4 && tsize > 1) {
					_gthis.error(hxsl_Tools2.toString(g) + " requires " + 4 + " " + hxsl_Tools.toString(t) + " values but has " + tsize,pos);
				}
			}
			type = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
			break;
		case 44:case 45:case 46:
			var k;
			switch(g._hx_index) {
			case 44:
				k = 2;
				break;
			case 45:
				k = 3;
				break;
			case 46:
				k = 4;
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			if(args.length == 1) {
				switch(args[0].t._hx_index) {
				case 1:case 3:
					break;
				default:
					var t = hxsl_Type.TInt;
					var skip = false;
					if(args.length == 1 && (t == hxsl_Type.TInt || t == hxsl_Type.TFloat)) {
						var _g = args[0].t;
						if(_g._hx_index == 5) {
							var n2 = _g.size;
							var t2 = _g.t;
							if((t2 == hxsl_VecType.VInt || t2 == hxsl_VecType.VFloat) && n2 == k) {
								skip = true;
							}
						}
					}
					if(!skip) {
						var tsize = 0;
						var _g = 0;
						while(_g < args.length) {
							var a = args[_g];
							++_g;
							var _g1 = a.t;
							if(_g1._hx_index == 5) {
								var size = _g1.size;
								var k1 = _g1.t;
								if(hxsl_Tools.toType(k1) != t) {
									_gthis.unify(a.t,t,a.p);
								}
								tsize += size;
							} else {
								_gthis.unifyExpr(a,t);
								++tsize;
							}
						}
						if(tsize != k && tsize > 1) {
							_gthis.error(hxsl_Tools2.toString(g) + " requires " + k + " " + hxsl_Tools.toString(t) + " values but has " + tsize,pos);
						}
					}
				}
			} else {
				var t = hxsl_Type.TInt;
				var skip = false;
				if(args.length == 1 && (t == hxsl_Type.TInt || t == hxsl_Type.TFloat)) {
					var _g = args[0].t;
					if(_g._hx_index == 5) {
						var n2 = _g.size;
						var t2 = _g.t;
						if((t2 == hxsl_VecType.VInt || t2 == hxsl_VecType.VFloat) && n2 == k) {
							skip = true;
						}
					}
				}
				if(!skip) {
					var tsize = 0;
					var _g = 0;
					while(_g < args.length) {
						var a = args[_g];
						++_g;
						var _g1 = a.t;
						if(_g1._hx_index == 5) {
							var size = _g1.size;
							var k1 = _g1.t;
							if(hxsl_Tools.toType(k1) != t) {
								_gthis.unify(a.t,t,a.p);
							}
							tsize += size;
						} else {
							_gthis.unifyExpr(a,t);
							++tsize;
						}
					}
					if(tsize != k && tsize > 1) {
						_gthis.error(hxsl_Tools2.toString(g) + " requires " + k + " " + hxsl_Tools.toString(t) + " values but has " + tsize,pos);
					}
				}
			}
			type = hxsl_Type.TVec(k,hxsl_VecType.VInt);
			break;
		case 47:
			var t = hxsl_Type.TBool;
			var skip = false;
			if(args.length == 1 && (t == hxsl_Type.TInt || t == hxsl_Type.TFloat)) {
				var _g = args[0].t;
				if(_g._hx_index == 5) {
					var n2 = _g.size;
					var t2 = _g.t;
					if((t2 == hxsl_VecType.VInt || t2 == hxsl_VecType.VFloat) && n2 == 2) {
						skip = true;
					}
				}
			}
			if(!skip) {
				var tsize = 0;
				var _g = 0;
				while(_g < args.length) {
					var a = args[_g];
					++_g;
					var _g1 = a.t;
					if(_g1._hx_index == 5) {
						var size = _g1.size;
						var k = _g1.t;
						if(hxsl_Tools.toType(k) != t) {
							_gthis.unify(a.t,t,a.p);
						}
						tsize += size;
					} else {
						_gthis.unifyExpr(a,t);
						++tsize;
					}
				}
				if(tsize != 2 && tsize > 1) {
					_gthis.error(hxsl_Tools2.toString(g) + " requires " + 2 + " " + hxsl_Tools.toString(t) + " values but has " + tsize,pos);
				}
			}
			type = hxsl_Type.TVec(2,hxsl_VecType.VBool);
			break;
		case 48:
			var t = hxsl_Type.TBool;
			var skip = false;
			if(args.length == 1 && (t == hxsl_Type.TInt || t == hxsl_Type.TFloat)) {
				var _g = args[0].t;
				if(_g._hx_index == 5) {
					var n2 = _g.size;
					var t2 = _g.t;
					if((t2 == hxsl_VecType.VInt || t2 == hxsl_VecType.VFloat) && n2 == 3) {
						skip = true;
					}
				}
			}
			if(!skip) {
				var tsize = 0;
				var _g = 0;
				while(_g < args.length) {
					var a = args[_g];
					++_g;
					var _g1 = a.t;
					if(_g1._hx_index == 5) {
						var size = _g1.size;
						var k = _g1.t;
						if(hxsl_Tools.toType(k) != t) {
							_gthis.unify(a.t,t,a.p);
						}
						tsize += size;
					} else {
						_gthis.unifyExpr(a,t);
						++tsize;
					}
				}
				if(tsize != 3 && tsize > 1) {
					_gthis.error(hxsl_Tools2.toString(g) + " requires " + 3 + " " + hxsl_Tools.toString(t) + " values but has " + tsize,pos);
				}
			}
			type = hxsl_Type.TVec(3,hxsl_VecType.VBool);
			break;
		case 49:
			var t = hxsl_Type.TBool;
			var skip = false;
			if(args.length == 1 && (t == hxsl_Type.TInt || t == hxsl_Type.TFloat)) {
				var _g = args[0].t;
				if(_g._hx_index == 5) {
					var n2 = _g.size;
					var t2 = _g.t;
					if((t2 == hxsl_VecType.VInt || t2 == hxsl_VecType.VFloat) && n2 == 4) {
						skip = true;
					}
				}
			}
			if(!skip) {
				var tsize = 0;
				var _g = 0;
				while(_g < args.length) {
					var a = args[_g];
					++_g;
					var _g1 = a.t;
					if(_g1._hx_index == 5) {
						var size = _g1.size;
						var k = _g1.t;
						if(hxsl_Tools.toType(k) != t) {
							_gthis.unify(a.t,t,a.p);
						}
						tsize += size;
					} else {
						_gthis.unifyExpr(a,t);
						++tsize;
					}
				}
				if(tsize != 4 && tsize > 1) {
					_gthis.error(hxsl_Tools2.toString(g) + " requires " + 4 + " " + hxsl_Tools.toString(t) + " values but has " + tsize,pos);
				}
			}
			type = hxsl_Type.TVec(4,hxsl_VecType.VBool);
			break;
		case 50:
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var a = args[_g1];
				++_g1;
				_g.push(a.t);
			}
			var _g1 = _g;
			switch(_g1.length) {
			case 1:
				if(_g1[0]._hx_index == 12) {
					type = hxsl_Type.TMat2;
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			case 2:
				var _g = _g1[0];
				var _g2 = _g1[1];
				if(_g._hx_index == 5) {
					if(_g.size == 2) {
						if(_g.t._hx_index == 1) {
							if(_g2._hx_index == 5) {
								if(_g2.size == 2) {
									if(_g2.t._hx_index == 1) {
										type = hxsl_Type.TMat2;
									} else {
										this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
									}
								} else {
									this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
								}
							} else {
								this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
							}
						} else {
							this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
						}
					} else {
						this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
					}
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			case 4:
				if(_g1[0]._hx_index == 3) {
					if(_g1[1]._hx_index == 3) {
						if(_g1[2]._hx_index == 3) {
							if(_g1[3]._hx_index == 3) {
								type = hxsl_Type.TMat2;
							} else {
								this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
							}
						} else {
							this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
						}
					} else {
						this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
					}
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			default:
				this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
			}
			break;
		case 51:
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var a = args[_g1];
				++_g1;
				_g.push(a.t);
			}
			var _g1 = _g;
			switch(_g1.length) {
			case 1:
				switch(_g1[0]._hx_index) {
				case 7:case 8:
					type = hxsl_Type.TMat3;
					break;
				default:
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			case 3:
				var _g = _g1[0];
				var _g2 = _g1[1];
				var _g3 = _g1[2];
				if(_g._hx_index == 5) {
					if(_g.size == 3) {
						if(_g.t._hx_index == 1) {
							if(_g2._hx_index == 5) {
								if(_g2.size == 3) {
									if(_g2.t._hx_index == 1) {
										if(_g3._hx_index == 5) {
											if(_g3.size == 3) {
												if(_g3.t._hx_index == 1) {
													type = hxsl_Type.TMat3;
												} else {
													this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
												}
											} else {
												this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
											}
										} else {
											this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
										}
									} else {
										this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
									}
								} else {
									this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
								}
							} else {
								this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
							}
						} else {
							this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
						}
					} else {
						this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
					}
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			case 9:
				if(_g1[0]._hx_index == 3) {
					if(_g1[1]._hx_index == 3) {
						if(_g1[2]._hx_index == 3) {
							if(_g1[3]._hx_index == 3) {
								if(_g1[4]._hx_index == 3) {
									if(_g1[5]._hx_index == 3) {
										if(_g1[6]._hx_index == 3) {
											if(_g1[7]._hx_index == 3) {
												if(_g1[8]._hx_index == 3) {
													type = hxsl_Type.TMat3;
												} else {
													this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
												}
											} else {
												this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
											}
										} else {
											this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
										}
									} else {
										this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
									}
								} else {
									this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
								}
							} else {
								this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
							}
						} else {
							this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
						}
					} else {
						this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
					}
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			default:
				this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
			}
			break;
		case 52:
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var a = args[_g1];
				++_g1;
				_g.push(a.t);
			}
			var _g1 = _g;
			switch(_g1.length) {
			case 1:
				if(_g1[0]._hx_index == 7) {
					type = hxsl_Type.TMat4;
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			case 4:
				var _g = _g1[0];
				var _g2 = _g1[1];
				var _g3 = _g1[2];
				var _g4 = _g1[3];
				if(_g._hx_index == 5) {
					if(_g.size == 4) {
						if(_g.t._hx_index == 1) {
							if(_g2._hx_index == 5) {
								if(_g2.size == 4) {
									if(_g2.t._hx_index == 1) {
										if(_g3._hx_index == 5) {
											if(_g3.size == 4) {
												if(_g3.t._hx_index == 1) {
													if(_g4._hx_index == 5) {
														if(_g4.size == 4) {
															if(_g4.t._hx_index == 1) {
																type = hxsl_Type.TMat4;
															} else {
																this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
															}
														} else {
															this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
														}
													} else {
														this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
													}
												} else {
													this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
												}
											} else {
												this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
											}
										} else {
											this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
										}
									} else {
										this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
									}
								} else {
									this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
								}
							} else {
								this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
							}
						} else {
							this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
						}
					} else {
						this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
					}
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			default:
				this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
			}
			break;
		case 53:
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var a = args[_g1];
				++_g1;
				_g.push(a.t);
			}
			var _g1 = _g;
			switch(_g1.length) {
			case 1:
				if(_g1[0]._hx_index == 7) {
					type = hxsl_Type.TMat3x4;
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			case 3:
				var _g = _g1[0];
				var _g2 = _g1[1];
				var _g3 = _g1[2];
				if(_g._hx_index == 5) {
					if(_g.size == 4) {
						if(_g.t._hx_index == 1) {
							if(_g2._hx_index == 5) {
								if(_g2.size == 4) {
									if(_g2.t._hx_index == 1) {
										if(_g3._hx_index == 5) {
											if(_g3.size == 4) {
												if(_g3.t._hx_index == 1) {
													type = hxsl_Type.TMat3x4;
												} else {
													this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
												}
											} else {
												this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
											}
										} else {
											this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
										}
									} else {
										this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
									}
								} else {
									this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
								}
							} else {
								this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
							}
						} else {
							this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
						}
					} else {
						this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
					}
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
				break;
			default:
				this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
			}
			break;
		case 68:
			type = hxsl_Type.TVoid;
			break;
		case 79:
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var a = args[_g1];
				++_g1;
				_g.push(a.t);
			}
			var _g1 = _g;
			if(_g1.length == 3) {
				var _g = _g1[0];
				if(_g._hx_index == 11) {
					var dim = _g.dim;
					var arr = _g.isArray;
					var chans = _g.channels;
					var uv = _g1[1];
					var color = _g1[2];
					var szt = this.getSizeType(hxsl_Tools.getDimSize(dim,arr),hxsl_VecType.VInt);
					this.unify(uv,szt,args[1].p);
					this.unify(color,chans == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(chans,hxsl_VecType.VFloat),args[2].p);
					type = hxsl_Type.TVoid;
				} else {
					this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
				}
			} else {
				this.error("Cannot apply " + hxsl_Tools2.toString(g) + " to these parameters",pos);
			}
			break;
		default:
		}
		if(type == null) {
			throw haxe_Exception.thrown("Custom Global not supported " + Std.string(g));
		}
		return { e : hxsl_TExprDef.TCall(e,args), t : type, p : pos};
	}
	,unifyCallParams: function(efun,args,variants,pos) {
		var minArgs = 1000;
		var maxArgs = -1000;
		var sel = [];
		var _g = 0;
		while(_g < variants.length) {
			var v = variants[_g];
			++_g;
			var n = v.args.length;
			if(n < minArgs) {
				minArgs = n;
			}
			if(n > maxArgs) {
				maxArgs = n;
			}
			if(n == args.length) {
				sel.push(v);
			}
		}
		switch(sel.length) {
		case 0:
			if(variants.length == 0) {
				var _g = efun.e;
				if(_g._hx_index == 2) {
					var g = _g.g;
					var _g = [];
					var _g1 = 0;
					while(_g1 < args.length) {
						var a = args[_g1];
						++_g1;
						_g.push(this.typeExpr(a,hxsl__$Checker_WithType.Value));
					}
					return this.specialGlobal(g,efun,_g,pos);
				} else {
					throw haxe_Exception.thrown("assert");
				}
			} else {
				return this.error("Function expects " + (minArgs == maxArgs ? "" + minArgs : minArgs + "-" + maxArgs) + " arguments",pos);
			}
			break;
		case 1:
			var f = sel[0];
			var targs = [];
			var _g = 0;
			var _g1 = args.length;
			while(_g < _g1) {
				var i = _g++;
				var ft = f.args[i].type;
				var a = this.typeExpr(args[i],hxsl__$Checker_WithType.With(ft));
				try {
					this.unifyExpr(a,ft);
				} catch( _g2 ) {
					var _g3 = haxe_Exception.caught(_g2).unwrap();
					if(((_g3) instanceof hxsl_Error)) {
						var e = _g3;
						e.msg += " for argument '" + f.args[i].name + "'";
						throw haxe_Exception.thrown(e);
					} else {
						throw _g2;
					}
				}
				targs.push(a);
			}
			if(variants.length > 1) {
				efun.t = hxsl_Type.TFun([f]);
			}
			return { e : hxsl_TExprDef.TCall(efun,targs), t : f.ret, p : pos};
		default:
			var bestMatch = null;
			var mcount = -1;
			var _g = 0;
			while(_g < sel.length) {
				var f = sel[_g];
				++_g;
				var outArgs = [];
				var _g1 = 0;
				var _g2 = args.length;
				while(_g1 < _g2) {
					var i = _g1++;
					var a = this.typeExpr(args[i],hxsl__$Checker_WithType.With(f.args[i].type));
					if(!this.tryUnify(a.t,f.args[i].type)) {
						break;
					}
					outArgs.push(a);
				}
				if(outArgs.length > mcount) {
					bestMatch = f;
					mcount = outArgs.length;
					if(mcount == args.length) {
						efun.t = hxsl_Type.TFun([f]);
						return { e : hxsl_TExprDef.TCall(efun,outArgs), t : f.ret, p : pos};
					}
				}
			}
			var _g = 0;
			var _g1 = args.length;
			while(_g < _g1) {
				var i = _g++;
				try {
					var e = this.typeExpr(args[i],hxsl__$Checker_WithType.Value);
					this.unify(e.t,bestMatch.args[i].type,e.p);
				} catch( _g2 ) {
					var _g3 = haxe_Exception.caught(_g2).unwrap();
					if(((_g3) instanceof hxsl_Error)) {
						var e1 = _g3;
						e1.msg += " for argument '" + bestMatch.args[i].name + "'";
						throw haxe_Exception.thrown(e1);
					} else {
						throw _g2;
					}
				}
			}
			throw haxe_Exception.thrown("assert");
		}
	}
	,toFloat: function(e) {
		if(e.t != hxsl_Type.TInt) {
			throw haxe_Exception.thrown("assert");
		}
		var _g = e.e;
		if(_g._hx_index == 0) {
			var _g1 = _g.c;
			if(_g1._hx_index == 2) {
				var v = _g1.v;
				e.e = hxsl_TExprDef.TConst(hxsl_Const.CFloat(v));
				e.t = hxsl_Type.TFloat;
			} else {
				e.e = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : e.p},[{ e : e.e, t : e.t, p : e.p}]);
				e.t = hxsl_Type.TFloat;
			}
		} else {
			e.e = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : e.p},[{ e : e.e, t : e.t, p : e.p}]);
			e.t = hxsl_Type.TFloat;
		}
	}
	,typeBinop: function(op,e1,e2,pos) {
		switch(op._hx_index) {
		case 4:
			throw haxe_Exception.thrown("assert");
		case 5:case 6:case 7:case 8:case 9:case 10:
			var _g = e1.t;
			switch(_g._hx_index) {
			case 2:
				if((op == haxe_macro_Binop.OpEq || op == haxe_macro_Binop.OpNotEq) && e2.t != hxsl_Type.TVoid) {
					this.unifyExpr(e2,e1.t);
					return hxsl_Type.TBool;
				} else {
					var _g1 = e1.e;
					var _g2 = e2.e;
					switch(_g1._hx_index) {
					case 0:
						if(_g1.c._hx_index == 0) {
							if(_g2._hx_index == 1) {
								var v = _g2.v;
								if(!hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Nullable)) {
									this.error("Variable is not declared as nullable",e1.p);
								}
								return hxsl_Type.TBool;
							} else {
								return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					case 1:
						if(_g2._hx_index == 0) {
							if(_g2.c._hx_index == 0) {
								var v = _g1.v;
								if(!hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Nullable)) {
									this.error("Variable is not declared as nullable",e1.p);
								}
								return hxsl_Type.TBool;
							} else {
								return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					default:
						return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
				}
				break;
			case 1:case 3:case 4:
				if(e2.t != hxsl_Type.TVoid) {
					this.unifyExpr(e2,e1.t);
					return hxsl_Type.TBool;
				} else {
					var _g1 = e1.e;
					var _g2 = e2.e;
					switch(_g1._hx_index) {
					case 0:
						if(_g1.c._hx_index == 0) {
							if(_g2._hx_index == 1) {
								var v = _g2.v;
								if(!hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Nullable)) {
									this.error("Variable is not declared as nullable",e1.p);
								}
								return hxsl_Type.TBool;
							} else {
								return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					case 1:
						if(_g2._hx_index == 0) {
							if(_g2.c._hx_index == 0) {
								var v = _g1.v;
								if(!hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Nullable)) {
									this.error("Variable is not declared as nullable",e1.p);
								}
								return hxsl_Type.TBool;
							} else {
								return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					default:
						return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
				}
				break;
			case 5:
				var _g1 = _g.size;
				var _g1 = _g.t;
				if(e2.t != hxsl_Type.TVoid) {
					this.unifyExpr(e2,e1.t);
					return e1.t;
				} else {
					var _g = e1.e;
					var _g1 = e2.e;
					switch(_g._hx_index) {
					case 0:
						if(_g.c._hx_index == 0) {
							if(_g1._hx_index == 1) {
								var v = _g1.v;
								if(!hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Nullable)) {
									this.error("Variable is not declared as nullable",e1.p);
								}
								return hxsl_Type.TBool;
							} else {
								return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					case 1:
						if(_g1._hx_index == 0) {
							if(_g1.c._hx_index == 0) {
								var v = _g.v;
								if(!hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Nullable)) {
									this.error("Variable is not declared as nullable",e1.p);
								}
								return hxsl_Type.TBool;
							} else {
								return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					default:
						return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
				}
				break;
			default:
				var _g = e1.e;
				var _g1 = e2.e;
				switch(_g._hx_index) {
				case 0:
					if(_g.c._hx_index == 0) {
						if(_g1._hx_index == 1) {
							var v = _g1.v;
							if(!hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Nullable)) {
								this.error("Variable is not declared as nullable",e1.p);
							}
							return hxsl_Type.TBool;
						} else {
							return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
					} else {
						return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
					break;
				case 1:
					if(_g1._hx_index == 0) {
						if(_g1.c._hx_index == 0) {
							var v = _g.v;
							if(!hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Nullable)) {
								this.error("Variable is not declared as nullable",e1.p);
							}
							return hxsl_Type.TBool;
						} else {
							return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
					} else {
						return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
					break;
				default:
					return this.error("Cannot compare " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
				}
			}
			break;
		case 11:case 12:case 13:case 16:case 17:case 18:
			this.unifyExpr(e1,hxsl_Type.TInt);
			this.unifyExpr(e2,hxsl_Type.TInt);
			return hxsl_Type.TInt;
		case 14:case 15:
			this.unifyExpr(e1,hxsl_Type.TBool);
			this.unifyExpr(e2,hxsl_Type.TBool);
			return hxsl_Type.TBool;
		case 0:case 1:case 2:case 3:case 19:
			var _g = e1.t;
			var _g1 = e2.t;
			if(op._hx_index == 1) {
				switch(_g._hx_index) {
				case 1:
					switch(_g1._hx_index) {
					case 1:
						return hxsl_Type.TInt;
					case 3:
						this.toFloat(e1);
						return hxsl_Type.TFloat;
					case 5:
						var _g2 = _g1.size;
						if(_g1.t._hx_index == 1) {
							this.toFloat(e1);
							return e2.t;
						} else {
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					default:
						var opName;
						switch(op._hx_index) {
						case 0:
							opName = "add";
							break;
						case 1:
							opName = "multiply";
							break;
						case 2:
							opName = "divide";
							break;
						case 3:
							opName = "subtract";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
					break;
				case 3:
					switch(_g1._hx_index) {
					case 1:
						this.toFloat(e2);
						return hxsl_Type.TFloat;
					case 3:
						return hxsl_Type.TFloat;
					case 5:
						var _g2 = _g1.size;
						if(_g1.t._hx_index == 1) {
							return e2.t;
						} else {
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					default:
						var opName;
						switch(op._hx_index) {
						case 0:
							opName = "add";
							break;
						case 1:
							opName = "multiply";
							break;
						case 2:
							opName = "divide";
							break;
						case 3:
							opName = "subtract";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
					break;
				case 5:
					var _g2 = _g.size;
					var _g3 = _g.t;
					switch(_g2) {
					case 2:
						if(_g3._hx_index == 1) {
							switch(_g1._hx_index) {
							case 1:
								this.toFloat(e2);
								return e1.t;
							case 3:
								return e1.t;
							case 5:
								if(_g1.t._hx_index == 1) {
									var a = _g2;
									var b = _g1.size;
									if(a == b) {
										return hxsl_Type.TVec(a,hxsl_VecType.VFloat);
									} else {
										var opName;
										switch(op._hx_index) {
										case 0:
											opName = "add";
											break;
										case 1:
											opName = "multiply";
											break;
										case 2:
											opName = "divide";
											break;
										case 3:
											opName = "subtract";
											break;
										default:
											throw haxe_Exception.thrown("assert");
										}
										return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
									}
								} else {
									var opName;
									switch(op._hx_index) {
									case 0:
										opName = "add";
										break;
									case 1:
										opName = "multiply";
										break;
									case 2:
										opName = "divide";
										break;
									case 3:
										opName = "subtract";
										break;
									default:
										throw haxe_Exception.thrown("assert");
									}
									return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
								}
								break;
							case 12:
								return hxsl_Checker.vec2;
							default:
								var opName;
								switch(op._hx_index) {
								case 0:
									opName = "add";
									break;
								case 1:
									opName = "multiply";
									break;
								case 2:
									opName = "divide";
									break;
								case 3:
									opName = "subtract";
									break;
								default:
									throw haxe_Exception.thrown("assert");
								}
								return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					case 3:
						if(_g3._hx_index == 1) {
							switch(_g1._hx_index) {
							case 1:
								this.toFloat(e2);
								return e1.t;
							case 3:
								return e1.t;
							case 5:
								if(_g1.t._hx_index == 1) {
									var a = _g2;
									var b = _g1.size;
									if(a == b) {
										return hxsl_Type.TVec(a,hxsl_VecType.VFloat);
									} else {
										var opName;
										switch(op._hx_index) {
										case 0:
											opName = "add";
											break;
										case 1:
											opName = "multiply";
											break;
										case 2:
											opName = "divide";
											break;
										case 3:
											opName = "subtract";
											break;
										default:
											throw haxe_Exception.thrown("assert");
										}
										return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
									}
								} else {
									var opName;
									switch(op._hx_index) {
									case 0:
										opName = "add";
										break;
									case 1:
										opName = "multiply";
										break;
									case 2:
										opName = "divide";
										break;
									case 3:
										opName = "subtract";
										break;
									default:
										throw haxe_Exception.thrown("assert");
									}
									return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
								}
								break;
							case 6:
								return hxsl_Checker.vec3;
							case 8:
								return hxsl_Checker.vec3;
							default:
								var opName;
								switch(op._hx_index) {
								case 0:
									opName = "add";
									break;
								case 1:
									opName = "multiply";
									break;
								case 2:
									opName = "divide";
									break;
								case 3:
									opName = "subtract";
									break;
								default:
									throw haxe_Exception.thrown("assert");
								}
								return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					case 4:
						if(_g3._hx_index == 1) {
							switch(_g1._hx_index) {
							case 1:
								this.toFloat(e2);
								return e1.t;
							case 3:
								return e1.t;
							case 5:
								if(_g1.t._hx_index == 1) {
									var a = _g2;
									var b = _g1.size;
									if(a == b) {
										return hxsl_Type.TVec(a,hxsl_VecType.VFloat);
									} else {
										var opName;
										switch(op._hx_index) {
										case 0:
											opName = "add";
											break;
										case 1:
											opName = "multiply";
											break;
										case 2:
											opName = "divide";
											break;
										case 3:
											opName = "subtract";
											break;
										default:
											throw haxe_Exception.thrown("assert");
										}
										return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
									}
								} else {
									var opName;
									switch(op._hx_index) {
									case 0:
										opName = "add";
										break;
									case 1:
										opName = "multiply";
										break;
									case 2:
										opName = "divide";
										break;
									case 3:
										opName = "subtract";
										break;
									default:
										throw haxe_Exception.thrown("assert");
									}
									return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
								}
								break;
							case 7:
								return hxsl_Checker.vec4;
							default:
								var opName;
								switch(op._hx_index) {
								case 0:
									opName = "add";
									break;
								case 1:
									opName = "multiply";
									break;
								case 2:
									opName = "divide";
									break;
								case 3:
									opName = "subtract";
									break;
								default:
									throw haxe_Exception.thrown("assert");
								}
								return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					default:
						if(_g3._hx_index == 1) {
							switch(_g1._hx_index) {
							case 1:
								this.toFloat(e2);
								return e1.t;
							case 3:
								return e1.t;
							case 5:
								if(_g1.t._hx_index == 1) {
									var a = _g2;
									var b = _g1.size;
									if(a == b) {
										return hxsl_Type.TVec(a,hxsl_VecType.VFloat);
									} else {
										var opName;
										switch(op._hx_index) {
										case 0:
											opName = "add";
											break;
										case 1:
											opName = "multiply";
											break;
										case 2:
											opName = "divide";
											break;
										case 3:
											opName = "subtract";
											break;
										default:
											throw haxe_Exception.thrown("assert");
										}
										return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
									}
								} else {
									var opName;
									switch(op._hx_index) {
									case 0:
										opName = "add";
										break;
									case 1:
										opName = "multiply";
										break;
									case 2:
										opName = "divide";
										break;
									case 3:
										opName = "subtract";
										break;
									default:
										throw haxe_Exception.thrown("assert");
									}
									return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
								}
								break;
							default:
								var opName;
								switch(op._hx_index) {
								case 0:
									opName = "add";
									break;
								case 1:
									opName = "multiply";
									break;
								case 2:
									opName = "divide";
									break;
								case 3:
									opName = "subtract";
									break;
								default:
									throw haxe_Exception.thrown("assert");
								}
								return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
						} else {
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
					}
					break;
				case 7:
					if(_g1._hx_index == 7) {
						return hxsl_Type.TMat4;
					} else {
						var opName;
						switch(op._hx_index) {
						case 0:
							opName = "add";
							break;
						case 1:
							opName = "multiply";
							break;
						case 2:
							opName = "divide";
							break;
						case 3:
							opName = "subtract";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
					break;
				default:
					var opName;
					switch(op._hx_index) {
					case 0:
						opName = "add";
						break;
					case 1:
						opName = "multiply";
						break;
					case 2:
						opName = "divide";
						break;
					case 3:
						opName = "subtract";
						break;
					default:
						throw haxe_Exception.thrown("assert");
					}
					return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
				}
			} else {
				switch(_g._hx_index) {
				case 1:
					switch(_g1._hx_index) {
					case 1:
						return hxsl_Type.TInt;
					case 3:
						this.toFloat(e1);
						return hxsl_Type.TFloat;
					case 5:
						var _g2 = _g1.size;
						if(_g1.t._hx_index == 1) {
							this.toFloat(e1);
							return e2.t;
						} else {
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					default:
						var opName;
						switch(op._hx_index) {
						case 0:
							opName = "add";
							break;
						case 1:
							opName = "multiply";
							break;
						case 2:
							opName = "divide";
							break;
						case 3:
							opName = "subtract";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
					break;
				case 3:
					switch(_g1._hx_index) {
					case 1:
						this.toFloat(e2);
						return hxsl_Type.TFloat;
					case 3:
						return hxsl_Type.TFloat;
					case 5:
						var _g2 = _g1.size;
						if(_g1.t._hx_index == 1) {
							return e2.t;
						} else {
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
						break;
					default:
						var opName;
						switch(op._hx_index) {
						case 0:
							opName = "add";
							break;
						case 1:
							opName = "multiply";
							break;
						case 2:
							opName = "divide";
							break;
						case 3:
							opName = "subtract";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
					break;
				case 5:
					var _g2 = _g.size;
					if(_g.t._hx_index == 1) {
						switch(_g1._hx_index) {
						case 1:
							this.toFloat(e2);
							return e1.t;
						case 3:
							return e1.t;
						case 5:
							if(_g1.t._hx_index == 1) {
								var b = _g1.size;
								var a = _g2;
								if(a == b) {
									return hxsl_Type.TVec(a,hxsl_VecType.VFloat);
								} else {
									var opName;
									switch(op._hx_index) {
									case 0:
										opName = "add";
										break;
									case 1:
										opName = "multiply";
										break;
									case 2:
										opName = "divide";
										break;
									case 3:
										opName = "subtract";
										break;
									default:
										throw haxe_Exception.thrown("assert");
									}
									return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
								}
							} else {
								var opName;
								switch(op._hx_index) {
								case 0:
									opName = "add";
									break;
								case 1:
									opName = "multiply";
									break;
								case 2:
									opName = "divide";
									break;
								case 3:
									opName = "subtract";
									break;
								default:
									throw haxe_Exception.thrown("assert");
								}
								return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
							}
							break;
						default:
							var opName;
							switch(op._hx_index) {
							case 0:
								opName = "add";
								break;
							case 1:
								opName = "multiply";
								break;
							case 2:
								opName = "divide";
								break;
							case 3:
								opName = "subtract";
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
						}
					} else {
						var opName;
						switch(op._hx_index) {
						case 0:
							opName = "add";
							break;
						case 1:
							opName = "multiply";
							break;
						case 2:
							opName = "divide";
							break;
						case 3:
							opName = "subtract";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
					}
					break;
				default:
					var opName;
					switch(op._hx_index) {
					case 0:
						opName = "add";
						break;
					case 1:
						opName = "multiply";
						break;
					case 2:
						opName = "divide";
						break;
					case 3:
						opName = "subtract";
						break;
					default:
						throw haxe_Exception.thrown("assert");
					}
					return this.error("Cannot " + opName + " " + hxsl_Tools.toString(e1.t) + " and " + hxsl_Tools.toString(e2.t),pos);
				}
			}
			break;
		case 20:
			var _g = op.op;
			throw haxe_Exception.thrown("assert");
		case 21:
			this.unifyExpr(e1,hxsl_Type.TInt);
			this.unifyExpr(e2,hxsl_Type.TInt);
			return hxsl_Type.TArray(hxsl_Type.TInt,hxsl_SizeDecl.SConst(0));
		default:
			return this.error("Unsupported operator " + Std.string(op),pos);
		}
	}
	,__class__: hxsl_Checker
};
var hxsl_Clone = function() {
	this.varMap = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Clone"] = hxsl_Clone;
hxsl_Clone.__name__ = "hxsl.Clone";
hxsl_Clone.shaderData = function(s) {
	return new hxsl_Clone().shader(s);
};
hxsl_Clone.prototype = {
	tvar: function(v) {
		var v2 = this.varMap.h[v.id];
		if(v2 != null) {
			return v2;
		}
		v2 = { id : hxsl_Tools.allocVarId(), type : v.type, name : v.name, kind : v.kind};
		this.varMap.h[v.id] = v2;
		if(v.parent != null) {
			v2.parent = this.tvar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		v2.type = this.ttype(v.type);
		return v2;
	}
	,tfun: function(f) {
		var tmp = this.ttype(f.ret);
		var f1 = f.kind;
		var tmp1 = this.tvar(f.ref);
		var _g = [];
		var _g1 = 0;
		var _g2 = f.args;
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			_g.push(this.tvar(a));
		}
		return { ret : tmp, kind : f1, ref : tmp1, args : _g, expr : this.texpr(f.expr)};
	}
	,ttype: function(t) {
		switch(t._hx_index) {
		case 13:
			var vl = t.vl;
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.tvar(v));
			}
			return hxsl_Type.TStruct(_g);
		case 14:
			var vars = t.variants;
			return hxsl_Type.TFun(vars);
		case 15:
			var t1 = t.t;
			var size = t.size;
			var tmp = this.ttype(t1);
			var tmp1;
			switch(size._hx_index) {
			case 0:
				var _g = size.v;
				tmp1 = size;
				break;
			case 1:
				var v = size.v;
				tmp1 = hxsl_SizeDecl.SVar(this.tvar(v));
				break;
			}
			return hxsl_Type.TArray(tmp,tmp1);
		default:
			return t;
		}
	}
	,texpr: function(e) {
		var e2 = hxsl_Tools.map(e,$bind(this,this.texpr));
		e2.t = this.ttype(e.t);
		var _g = e2.e;
		var tmp;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			tmp = hxsl_TExprDef.TVar(this.tvar(v));
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			tmp = hxsl_TExprDef.TVarDecl(this.tvar(v),init);
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			tmp = hxsl_TExprDef.TFor(this.tvar(v),it,loop);
			break;
		default:
			tmp = e2.e;
		}
		e2.e = tmp;
		return e2;
	}
	,shader: function(s) {
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.tvar(v));
		}
		var tmp = _g;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.funs;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(this.tfun(f));
		}
		return { name : s1, vars : tmp, funs : _g};
	}
	,__class__: hxsl_Clone
};
var hxsl__$Dce_VarRel = function(v) {
	this.fields = 0;
	this.v = v;
};
$hxClasses["hxsl._Dce.VarRel"] = hxsl__$Dce_VarRel;
hxsl__$Dce_VarRel.__name__ = "hxsl._Dce.VarRel";
hxsl__$Dce_VarRel.prototype = {
	__class__: hxsl__$Dce_VarRel
};
var hxsl__$Dce_VarDeps = function(v) {
	this.used = 0;
	this.keep = 0;
	this.v = v;
	this.deps = new haxe_ds_IntMap();
	this.adeps = [];
};
$hxClasses["hxsl._Dce.VarDeps"] = hxsl__$Dce_VarDeps;
hxsl__$Dce_VarDeps.__name__ = "hxsl._Dce.VarDeps";
hxsl__$Dce_VarDeps.prototype = {
	__class__: hxsl__$Dce_VarDeps
};
var hxsl__$Dce_WriteTo = function() {
	this.vars = [];
	this.bits = [];
};
$hxClasses["hxsl._Dce.WriteTo"] = hxsl__$Dce_WriteTo;
hxsl__$Dce_WriteTo.__name__ = "hxsl._Dce.WriteTo";
hxsl__$Dce_WriteTo.prototype = {
	push: function(v,b) {
		this.vars.push(v);
		this.bits.push(b);
	}
	,pop: function() {
		this.vars.pop();
		this.bits.pop();
	}
	,append: function(v,b) {
		var _g_current = 0;
		var _g_array = this.vars;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var v2 = _g_value;
			if(v2 == v) {
				this.bits[i] |= b;
				return;
			}
		}
		this.push(v,b);
	}
	,appendTo: function(w) {
		var _g_current = 0;
		var _g_array = this.vars;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var v = _g_value;
			w.append(v,this.bits[i]);
		}
	}
	,__class__: hxsl__$Dce_WriteTo
};
var hxsl_Dce = function() {
};
$hxClasses["hxsl.Dce"] = hxsl_Dce;
hxsl_Dce.__name__ = "hxsl.Dce";
hxsl_Dce.prototype = {
	dce: function(shaders) {
		this.used = new haxe_ds_IntMap();
		this.channelVars = [];
		var inputs = [];
		var _g = 0;
		while(_g < shaders.length) {
			var s = shaders[_g];
			++_g;
			var _g1 = 0;
			var _g2 = s.vars;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				var i = this.get(v);
				if(v.kind == hxsl_VarKind.Input) {
					inputs.push(i);
				}
				var tmp;
				if(v.kind != hxsl_VarKind.Output) {
					var _g3 = v.type;
					switch(_g3._hx_index) {
					case 11:
						var _g4 = _g3.dim;
						var _g5 = _g3.isArray;
						var _g6 = _g3.channels;
						tmp = true;
						break;
					case 16:
						var _g7 = _g3.t;
						var _g8 = _g3.size;
						tmp = _g3.kind._hx_index == 2;
						break;
					default:
						tmp = false;
					}
				} else {
					tmp = true;
				}
				if(tmp) {
					i.keep = 15;
				}
			}
		}
		var _g = 0;
		while(_g < shaders.length) {
			var s = shaders[_g];
			++_g;
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				this.check(f.expr,new hxsl__$Dce_WriteTo(),new hxsl__$Dce_WriteTo());
			}
		}
		var outExprs = [];
		do {
			if(hxsl_Debug.TRACE) {
				haxe_Log.trace("DCE LOOP",{ fileName : "hxsl/Debug.hx", lineNumber : 9, className : "hxsl.Dce", methodName : "dce"});
			}
			var v = this.used.iterator();
			while(v.hasNext()) {
				var v1 = v.next();
				if(v1.keep != 0) {
					this.markRec(v1,v1.keep);
				}
			}
			while(inputs.length > 1 && inputs[inputs.length - 1].used == 0) inputs.pop();
			var _g = 0;
			while(_g < inputs.length) {
				var v2 = inputs[_g];
				++_g;
				this.markRec(v2,15);
			}
			outExprs = [];
			var _g1 = 0;
			while(_g1 < shaders.length) {
				var s = shaders[_g1];
				++_g1;
				var _g2 = 0;
				var _g3 = s.funs;
				while(_g2 < _g3.length) {
					var f = _g3[_g2];
					++_g2;
					outExprs.push(this.mapExpr(f.expr,false));
				}
			}
			this.markAsKeep = false;
			var _g4 = 0;
			while(_g4 < outExprs.length) {
				var e = outExprs[_g4];
				++_g4;
				this.checkBranches(e);
			}
		} while(this.markAsKeep);
		var _g = 0;
		while(_g < shaders.length) {
			var s = shaders[_g];
			++_g;
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				f.expr = outExprs.shift();
			}
		}
		var v = this.used.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.used != 0) {
				continue;
			}
			if(v1.v.kind == hxsl_VarKind.Input) {
				continue;
			}
			var _g = 0;
			while(_g < shaders.length) {
				var s = shaders[_g];
				++_g;
				HxOverrides.remove(s.vars,v1.v);
			}
		}
		return shaders.slice();
	}
	,get: function(v) {
		var vd = this.used.h[v.id];
		if(vd == null) {
			vd = new hxsl__$Dce_VarDeps(v);
			this.used.h[v.id] = vd;
		}
		return vd;
	}
	,varName: function(v,bits) {
		if(bits == null) {
			bits = 15;
		}
		return hxsl_Debug.varName(v,bits);
	}
	,markRec: function(v,bits) {
		if((v.used & bits) == bits) {
			return;
		}
		bits &= ~v.used;
		if(hxsl_Debug.TRACE) {
			haxe_Log.trace(this.varName(v.v,bits) + " is used",{ fileName : "hxsl/Debug.hx", lineNumber : 9, className : "hxsl.Dce", methodName : "markRec"});
		}
		v.used |= bits;
		var _g = 0;
		var _g1 = v.adeps;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			var mask = this.makeFieldsBits(15,bits);
			if((d.fields & mask) != 0) {
				this.markRec(d.v,this.extractFieldsBits(d.fields,bits));
			}
		}
	}
	,extractFieldsBits: function(fields,write) {
		return (((write & 1) == 0 ? 0 : fields) | ((write & 2) == 0 ? 0 : fields >> 4) | ((write & 4) == 0 ? 0 : fields >> 8) | ((write & 8) == 0 ? 0 : fields >> 12)) & 15;
	}
	,makeFieldsBits: function(read,write) {
		return read * ((write & 1) + ((write & 2) << 3) + ((write & 4) << 6) + ((write & 8) << 9));
	}
	,link: function(v,writeTo,bits) {
		if(bits == null) {
			bits = 15;
		}
		var vd = this.get(v);
		var _g_current = 0;
		var _g_array = writeTo.vars;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var w = _g_value;
			if(w == null) {
				if(vd.keep == 0) {
					if(hxsl_Debug.TRACE) {
						haxe_Log.trace("Force keep " + this.varName(vd.v),{ fileName : "hxsl/Debug.hx", lineNumber : 9, className : "hxsl.Dce", methodName : "link"});
					}
					vd.keep = 15;
					this.markAsKeep = true;
				}
				continue;
			}
			var d = w.deps.h[v.id];
			if(d == null) {
				d = new hxsl__$Dce_VarRel(vd);
				w.deps.h[v.id] = d;
				w.adeps.push(d);
			}
			var fields = this.makeFieldsBits(bits,writeTo.bits[i]);
			if((d.fields & fields) != fields) {
				d.fields |= fields;
				if(hxsl_Debug.TRACE) {
					haxe_Log.trace(this.varName(w.v,writeTo.bits[i]) + " depends on " + this.varName(vd.v,bits),{ fileName : "hxsl/Debug.hx", lineNumber : 9, className : "hxsl.Dce", methodName : "link"});
				}
			}
		}
	}
	,swizBits: function(sw) {
		var b = 0;
		var _g = 0;
		while(_g < sw.length) {
			var c = sw[_g];
			++_g;
			b |= 1 << c._hx_index;
		}
		return b;
	}
	,check: function(e,writeTo,isAffected) {
		var _gthis = this;
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			this.link(v,writeTo);
			break;
		case 4:
			var el = _g.el;
			var noWrite = new hxsl__$Dce_WriteTo();
			var _g1 = 0;
			var _g2 = el.length;
			while(_g1 < _g2) {
				var i = _g1++;
				this.check(el[i],i < el.length - 1 ? noWrite : writeTo,isAffected);
			}
			break;
		case 5:
			var _g1 = _g.op;
			var _g2 = _g.e1;
			var _g3 = _g.e2;
			switch(_g1._hx_index) {
			case 4:
				var _g4 = _g2.e;
				var _g5 = _g2.p;
				var _g5 = _g2.t;
				switch(_g4._hx_index) {
				case 1:
					var v = _g4.v;
					var e1 = _g3;
					var v1 = this.get(v);
					writeTo.push(v1,15);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					isAffected.append(v1,15);
					break;
				case 9:
					var _g5 = _g4.e;
					var _g6 = _g4.regs;
					var _g7 = _g5.e;
					var _g8 = _g5.p;
					var _g8 = _g5.t;
					switch(_g7._hx_index) {
					case 1:
						var v = _g7.v;
						var swiz = _g6;
						var e1 = _g3;
						var v1 = this.get(v);
						var bits = this.swizBits(swiz);
						writeTo.push(v1,bits);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						isAffected.append(v1,bits);
						break;
					case 16:
						var _g5 = _g7.e;
						var _g6 = _g5.e;
						var _g8 = _g5.p;
						var _g8 = _g5.t;
						if(_g6._hx_index == 1) {
							var v = _g6.v;
							var i = _g7.index;
							var e1 = _g3;
							var v1 = this.get(v);
							writeTo.push(v1,15);
							this.check(i,writeTo,isAffected);
							this.check(e1,writeTo,isAffected);
							writeTo.pop();
							isAffected.append(v1,15);
						} else {
							var _g5 = this;
							var writeTo1 = writeTo;
							var isAffected1 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g5.check(e,writeTo1,isAffected1);
							});
						}
						break;
					default:
						var _g6 = this;
						var writeTo2 = writeTo;
						var isAffected2 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g6.check(e,writeTo2,isAffected2);
						});
					}
					break;
				case 16:
					var _g7 = _g4.e;
					var _g8 = _g7.e;
					var _g9 = _g7.p;
					var _g9 = _g7.t;
					if(_g8._hx_index == 1) {
						var v = _g8.v;
						var i = _g4.index;
						var e1 = _g3;
						var v1 = this.get(v);
						writeTo.push(v1,15);
						this.check(i,writeTo,isAffected);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						isAffected.append(v1,15);
					} else {
						var _g7 = this;
						var writeTo3 = writeTo;
						var isAffected3 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g7.check(e,writeTo3,isAffected3);
						});
					}
					break;
				case 21:
					var _g8 = _g4.e;
					var _g9 = _g4.name;
					var _g4 = _g8.e;
					var _g9 = _g8.p;
					var _g9 = _g8.t;
					if(_g4._hx_index == 16) {
						var _g8 = _g4.e;
						var _g9 = _g8.e;
						var _g10 = _g8.p;
						var _g10 = _g8.t;
						if(_g9._hx_index == 1) {
							var v = _g9.v;
							var i = _g4.index;
							var e1 = _g3;
							var v1 = this.get(v);
							writeTo.push(v1,15);
							this.check(i,writeTo,isAffected);
							this.check(e1,writeTo,isAffected);
							writeTo.pop();
							isAffected.append(v1,15);
						} else {
							var _g4 = this;
							var writeTo4 = writeTo;
							var isAffected4 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g4.check(e,writeTo4,isAffected4);
							});
						}
					} else {
						var _g8 = this;
						var writeTo5 = writeTo;
						var isAffected5 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g8.check(e,writeTo5,isAffected5);
						});
					}
					break;
				default:
					var _g9 = this;
					var writeTo6 = writeTo;
					var isAffected6 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g9.check(e,writeTo6,isAffected6);
					});
				}
				break;
			case 20:
				var _g10 = _g1.op;
				var _g1 = _g2.e;
				var _g10 = _g2.p;
				var _g10 = _g2.t;
				switch(_g1._hx_index) {
				case 1:
					var v = _g1.v;
					var e1 = _g3;
					var v1 = this.get(v);
					writeTo.push(v1,15);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					isAffected.append(v1,15);
					break;
				case 9:
					var _g2 = _g1.e;
					var _g10 = _g1.regs;
					var _g11 = _g2.e;
					var _g12 = _g2.p;
					var _g12 = _g2.t;
					switch(_g11._hx_index) {
					case 1:
						var v = _g11.v;
						var swiz = _g10;
						var e1 = _g3;
						var v1 = this.get(v);
						var bits = this.swizBits(swiz);
						writeTo.push(v1,bits);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						isAffected.append(v1,bits);
						break;
					case 16:
						var _g2 = _g11.e;
						var _g10 = _g2.e;
						var _g12 = _g2.p;
						var _g12 = _g2.t;
						if(_g10._hx_index == 1) {
							var v = _g10.v;
							var i = _g11.index;
							var e1 = _g3;
							var v1 = this.get(v);
							writeTo.push(v1,15);
							this.check(i,writeTo,isAffected);
							this.check(e1,writeTo,isAffected);
							writeTo.pop();
							isAffected.append(v1,15);
						} else {
							var _g2 = this;
							var writeTo7 = writeTo;
							var isAffected7 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g2.check(e,writeTo7,isAffected7);
							});
						}
						break;
					default:
						var _g10 = this;
						var writeTo8 = writeTo;
						var isAffected8 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g10.check(e,writeTo8,isAffected8);
						});
					}
					break;
				case 16:
					var _g11 = _g1.e;
					var _g12 = _g11.e;
					var _g13 = _g11.p;
					var _g13 = _g11.t;
					if(_g12._hx_index == 1) {
						var v = _g12.v;
						var i = _g1.index;
						var e1 = _g3;
						var v1 = this.get(v);
						writeTo.push(v1,15);
						this.check(i,writeTo,isAffected);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						isAffected.append(v1,15);
					} else {
						var _g11 = this;
						var writeTo9 = writeTo;
						var isAffected9 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g11.check(e,writeTo9,isAffected9);
						});
					}
					break;
				case 21:
					var _g12 = _g1.e;
					var _g13 = _g1.name;
					var _g1 = _g12.e;
					var _g13 = _g12.p;
					var _g13 = _g12.t;
					if(_g1._hx_index == 16) {
						var _g12 = _g1.e;
						var _g13 = _g12.e;
						var _g14 = _g12.p;
						var _g14 = _g12.t;
						if(_g13._hx_index == 1) {
							var v = _g13.v;
							var i = _g1.index;
							var e1 = _g3;
							var v1 = this.get(v);
							writeTo.push(v1,15);
							this.check(i,writeTo,isAffected);
							this.check(e1,writeTo,isAffected);
							writeTo.pop();
							isAffected.append(v1,15);
						} else {
							var _g1 = this;
							var writeTo10 = writeTo;
							var isAffected10 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g1.check(e,writeTo10,isAffected10);
							});
						}
					} else {
						var _g3 = this;
						var writeTo11 = writeTo;
						var isAffected11 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g3.check(e,writeTo11,isAffected11);
						});
					}
					break;
				default:
					var _g12 = this;
					var writeTo12 = writeTo;
					var isAffected12 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g12.check(e,writeTo12,isAffected12);
					});
				}
				break;
			default:
				var _g13 = this;
				var writeTo13 = writeTo;
				var isAffected13 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g13.check(e,writeTo13,isAffected13);
				});
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			if(init != null) {
				writeTo.push(this.get(v),15);
				this.check(init,writeTo,isAffected);
				writeTo.pop();
			} else {
				var _g14 = this;
				var writeTo14 = writeTo;
				var isAffected14 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g14.check(e,writeTo14,isAffected14);
				});
			}
			break;
		case 8:
			var _g15 = _g.e;
			var _g16 = _g.args;
			var _g17 = _g15.e;
			var _g18 = _g15.p;
			var _g18 = _g15.t;
			if(_g17._hx_index == 2) {
				switch(_g17.g._hx_index) {
				case 64:
					if(_g16.length == 3) {
						var _g15 = _g16[0];
						var _g17 = _g16[2];
						var _g18 = _g15.e;
						var _g19 = _g15.p;
						var _g19 = _g15.t;
						if(_g18._hx_index == 1) {
							var _g15 = _g17.e;
							var _g19 = _g17.p;
							var _g19 = _g17.t;
							if(_g15._hx_index == 0) {
								var _g17 = _g15.c;
								if(_g17._hx_index == 2) {
									var cid = _g17.v;
									var uv = _g16[1];
									var c = _g18.v;
									this.check(uv,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var _g15 = this;
									var writeTo15 = writeTo;
									var isAffected15 = isAffected;
									hxsl_Tools.iter(e,function(e) {
										_g15.check(e,writeTo15,isAffected15);
									});
								}
							} else {
								var _g17 = this;
								var writeTo16 = writeTo;
								var isAffected16 = isAffected;
								hxsl_Tools.iter(e,function(e) {
									_g17.check(e,writeTo16,isAffected16);
								});
							}
						} else {
							var _g18 = this;
							var writeTo17 = writeTo;
							var isAffected17 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g18.check(e,writeTo17,isAffected17);
							});
						}
					} else {
						var _g19 = this;
						var writeTo18 = writeTo;
						var isAffected18 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g19.check(e,writeTo18,isAffected18);
						});
					}
					break;
				case 65:
					if(_g16.length == 4) {
						var _g20 = _g16[0];
						var _g21 = _g16[3];
						var _g22 = _g20.e;
						var _g23 = _g20.p;
						var _g23 = _g20.t;
						if(_g22._hx_index == 1) {
							var _g20 = _g21.e;
							var _g23 = _g21.p;
							var _g23 = _g21.t;
							if(_g20._hx_index == 0) {
								var _g21 = _g20.c;
								if(_g21._hx_index == 2) {
									var cid = _g21.v;
									var lod = _g16[2];
									var uv = _g16[1];
									var c = _g22.v;
									this.check(uv,writeTo,isAffected);
									this.check(lod,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var _g20 = this;
									var writeTo19 = writeTo;
									var isAffected19 = isAffected;
									hxsl_Tools.iter(e,function(e) {
										_g20.check(e,writeTo19,isAffected19);
									});
								}
							} else {
								var _g21 = this;
								var writeTo20 = writeTo;
								var isAffected20 = isAffected;
								hxsl_Tools.iter(e,function(e) {
									_g21.check(e,writeTo20,isAffected20);
								});
							}
						} else {
							var _g22 = this;
							var writeTo21 = writeTo;
							var isAffected21 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g22.check(e,writeTo21,isAffected21);
							});
						}
					} else {
						var _g23 = this;
						var writeTo22 = writeTo;
						var isAffected22 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g23.check(e,writeTo22,isAffected22);
						});
					}
					break;
				case 79:
					if(_g16.length == 3) {
						var _g24 = _g16[0];
						var _g25 = _g24.e;
						var _g26 = _g24.p;
						var _g26 = _g24.t;
						if(_g25._hx_index == 1) {
							var v = _g25.v;
							var uv = _g16[1];
							var val = _g16[2];
							var v1 = this.get(v);
							writeTo.push(v1,15);
							this.check(uv,writeTo,isAffected);
							this.check(val,writeTo,isAffected);
							writeTo.pop();
							isAffected.append(v1,15);
						} else {
							var _g16 = this;
							var writeTo23 = writeTo;
							var isAffected23 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g16.check(e,writeTo23,isAffected23);
							});
						}
					} else {
						var _g24 = this;
						var writeTo24 = writeTo;
						var isAffected24 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g24.check(e,writeTo24,isAffected24);
						});
					}
					break;
				default:
					var _g25 = this;
					var writeTo25 = writeTo;
					var isAffected25 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g25.check(e,writeTo25,isAffected25);
					});
				}
			} else {
				var _g26 = this;
				var writeTo26 = writeTo;
				var isAffected26 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g26.check(e,writeTo26,isAffected26);
				});
			}
			break;
		case 9:
			var _g27 = _g.e;
			var _g28 = _g27.e;
			var _g29 = _g27.p;
			var _g29 = _g27.t;
			if(_g28._hx_index == 1) {
				var v = _g28.v;
				var swiz = _g.regs;
				this.link(v,writeTo,this.swizBits(swiz));
			} else {
				var _g27 = this;
				var writeTo27 = writeTo;
				var isAffected27 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g27.check(e,writeTo27,isAffected27);
				});
			}
			break;
		case 10:
			var e1 = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			var affect = new hxsl__$Dce_WriteTo();
			this.check(eif,writeTo,affect);
			if(eelse != null) {
				this.check(eelse,writeTo,affect);
			}
			affect.appendTo(isAffected);
			writeTo.appendTo(affect);
			this.check(e1,affect,isAffected);
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			var affect = new hxsl__$Dce_WriteTo();
			this.check(loop,writeTo,affect);
			affect.appendTo(isAffected);
			this.check(it,affect,isAffected);
			break;
		case 22:
			var _g28 = _g.target;
			var _g28 = _g.code;
			var args = _g.args;
			var _g = 0;
			while(_g < args.length) {
				var arg = args[_g];
				++_g;
				if(arg.access != hxsl_SyntaxArgAccess.Read) {
					var tvars = [[]];
					var findTVars = [null];
					findTVars[0] = (function(findTVars,tvars) {
						return function(e) {
							var _g = e.e;
							if(_g._hx_index == 1) {
								var v = _g.v;
								tvars[0].push(_gthis.get(v));
							} else {
								hxsl_Tools.iter(e,findTVars[0]);
							}
						};
					})(findTVars,tvars);
					findTVars[0](arg.e);
					var _g28 = 0;
					while(_g28 < tvars[0].length) {
						var v = tvars[0][_g28];
						++_g28;
						writeTo.push(v,15);
						var _g29 = 0;
						while(_g29 < args.length) {
							var arg2 = args[_g29];
							++_g29;
							if(arg2.access != hxsl_SyntaxArgAccess.Write) {
								this.check(arg2.e,writeTo,isAffected);
							}
						}
						writeTo.pop();
						isAffected.append(v,15);
					}
				} else {
					this.check(arg.e,writeTo,isAffected);
				}
			}
			break;
		default:
			var _g = this;
			var writeTo28 = writeTo;
			var isAffected28 = isAffected;
			hxsl_Tools.iter(e,function(e) {
				_g.check(e,writeTo28,isAffected28);
			});
		}
	}
	,checkBranches: function(e) {
		var _g = e.e;
		if(_g._hx_index == 10) {
			var _g1 = _g.eif;
			var _g1 = _g.eelse;
			var cond = _g.econd;
			var writeTo = new hxsl__$Dce_WriteTo();
			writeTo.append(null,0);
			this.check(cond,writeTo,new hxsl__$Dce_WriteTo());
		}
		hxsl_Tools.iter(e,$bind(this,this.checkBranches));
	}
	,mapExpr: function(e,isVar) {
		var _gthis = this;
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var out = [];
			var count = 0;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				var isVar1 = isVar && count == el.length - 1;
				var e2 = this.mapExpr(e1,isVar1);
				if(hxsl_Tools.hasSideEffect(e2) || isVar1) {
					out.push(e2);
				}
				++count;
			}
			return { e : hxsl_TExprDef.TBlock(out), p : e.p, t : e.t};
		case 5:
			var _g1 = _g.op;
			var _g2 = _g.e1;
			var _g3 = _g.e2;
			switch(_g1._hx_index) {
			case 4:
				var _g4 = _g2.e;
				var _g5 = _g2.p;
				var _g5 = _g2.t;
				switch(_g4._hx_index) {
				case 1:
					var v = _g4.v;
					var e2 = _g3;
					if(this.get(v).used == 0) {
						if(e2 != null && hxsl_Tools.hasSideEffect(e2)) {
							return this.mapExpr(e2,false);
						} else {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 9:
					var _g5 = _g4.e;
					var _g6 = _g5.e;
					var _g7 = _g5.p;
					var _g7 = _g5.t;
					if(_g6._hx_index == 1) {
						var _g5 = _g6.v;
						var v = _g5;
						var e2 = _g3;
						if(this.get(v).used == 0) {
							if(e2 != null && hxsl_Tools.hasSideEffect(e2)) {
								return this.mapExpr(e2,false);
							} else {
								return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
							}
						} else {
							var v = _g5;
							var swiz = _g4.regs;
							var e2 = _g3;
							if((this.get(v).used & this.swizBits(swiz)) == 0) {
								if(hxsl_Tools.hasSideEffect(e2)) {
									return this.mapExpr(e2,false);
								} else {
									return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
								}
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 16:
					var _g5 = _g4.e;
					var _g6 = _g4.index;
					var _g4 = _g5.e;
					var _g6 = _g5.p;
					var _g6 = _g5.t;
					if(_g4._hx_index == 1) {
						var v = _g4.v;
						var e2 = _g3;
						if(this.get(v).used == 0) {
							if(e2 != null && hxsl_Tools.hasSideEffect(e2)) {
								return this.mapExpr(e2,false);
							} else {
								return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
				break;
			case 20:
				var _g4 = _g1.op;
				var _g1 = _g2.e;
				var _g4 = _g2.p;
				var _g4 = _g2.t;
				switch(_g1._hx_index) {
				case 1:
					var v = _g1.v;
					var e2 = _g3;
					if(this.get(v).used == 0) {
						if(e2 != null && hxsl_Tools.hasSideEffect(e2)) {
							return this.mapExpr(e2,false);
						} else {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 9:
					var _g2 = _g1.e;
					var _g4 = _g2.e;
					var _g5 = _g2.p;
					var _g5 = _g2.t;
					if(_g4._hx_index == 1) {
						var _g2 = _g4.v;
						var v = _g2;
						var e2 = _g3;
						if(this.get(v).used == 0) {
							if(e2 != null && hxsl_Tools.hasSideEffect(e2)) {
								return this.mapExpr(e2,false);
							} else {
								return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
							}
						} else {
							var v = _g2;
							var swiz = _g1.regs;
							var e2 = _g3;
							if((this.get(v).used & this.swizBits(swiz)) == 0) {
								if(hxsl_Tools.hasSideEffect(e2)) {
									return this.mapExpr(e2,false);
								} else {
									return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
								}
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 16:
					var _g2 = _g1.e;
					var _g4 = _g1.index;
					var _g1 = _g2.e;
					var _g4 = _g2.p;
					var _g4 = _g2.t;
					if(_g1._hx_index == 1) {
						var v = _g1.v;
						var e2 = _g3;
						if(this.get(v).used == 0) {
							if(e2 != null && hxsl_Tools.hasSideEffect(e2)) {
								return this.mapExpr(e2,false);
							} else {
								return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
				break;
			default:
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 7:
			var v = _g.v;
			var e2 = _g.init;
			if(this.get(v).used == 0) {
				if(e2 != null && hxsl_Tools.hasSideEffect(e2)) {
					return this.mapExpr(e2,false);
				} else {
					return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
				}
			} else {
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 8:
			var _g1 = _g.e;
			var _g2 = _g.args;
			var _g3 = _g1.e;
			var _g4 = _g1.p;
			var _g4 = _g1.t;
			if(_g3._hx_index == 2) {
				switch(_g3.g._hx_index) {
				case 64:
					if(_g2.length == 3) {
						var _g1 = _g2[0];
						var _g1 = _g2[2];
						var _g3 = _g1.e;
						var _g4 = _g1.p;
						var _g4 = _g1.t;
						if(_g3._hx_index == 0) {
							var _g1 = _g3.c;
							if(_g1._hx_index == 2) {
								var cid = _g1.v;
								var uv = _g2[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texture), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 65:
					if(_g2.length == 4) {
						var _g1 = _g2[0];
						var _g1 = _g2[3];
						var _g3 = _g1.e;
						var _g4 = _g1.p;
						var _g4 = _g1.t;
						if(_g3._hx_index == 0) {
							var _g1 = _g3.c;
							if(_g1._hx_index == 2) {
								var cid = _g1.v;
								var lod = _g2[2];
								var uv = _g2[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureLod), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true),this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 66:
					switch(_g2.length) {
					case 3:
						var _g1 = _g2[0];
						var _g1 = _g2[2];
						var _g3 = _g1.e;
						var _g4 = _g1.p;
						var _g4 = _g1.t;
						if(_g3._hx_index == 0) {
							var _g1 = _g3.c;
							if(_g1._hx_index == 2) {
								var cid = _g1.v;
								var pos = _g2[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(pos,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					case 4:
						var _g1 = _g2[0];
						var _g1 = _g2[3];
						var _g3 = _g1.e;
						var _g4 = _g1.p;
						var _g4 = _g1.t;
						if(_g3._hx_index == 0) {
							var _g1 = _g3.c;
							if(_g1._hx_index == 2) {
								var cid = _g1.v;
								var lod = _g2[2];
								var pos = _g2[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(pos,true),this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					default:
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 67:
					switch(_g2.length) {
					case 2:
						var _g1 = _g2[0];
						var _g1 = _g2[1];
						var _g3 = _g1.e;
						var _g4 = _g1.p;
						var _g4 = _g1.t;
						if(_g3._hx_index == 0) {
							var _g1 = _g3.c;
							if(_g1._hx_index == 2) {
								var cid = _g1.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureSize), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p}]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					case 3:
						var _g1 = _g2[0];
						var _g1 = _g2[2];
						var _g3 = _g1.e;
						var _g4 = _g1.p;
						var _g4 = _g1.t;
						if(_g3._hx_index == 0) {
							var _g1 = _g3.c;
							if(_g1._hx_index == 2) {
								var cid = _g1.v;
								var lod = _g2[1];
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureSize), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					default:
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
			} else {
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 10:
			var e1 = _g.econd;
			var econd = _g.eif;
			var eelse = _g.eelse;
			var e2 = this.mapExpr(e1,true);
			var econd1 = this.mapExpr(econd,isVar);
			var eelse1 = eelse == null ? null : this.mapExpr(eelse,isVar);
			if(!isVar && !hxsl_Tools.hasSideEffect(econd1) && (eelse1 == null || !hxsl_Tools.hasSideEffect(eelse1))) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e2.t, p : e2.p};
			}
			return { e : hxsl_TExprDef.TIf(e2,econd1,eelse1), p : e2.p, t : e2.t};
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			var it1 = this.mapExpr(it,true);
			var loop1 = this.mapExpr(loop,false);
			if(!hxsl_Tools.hasSideEffect(loop1)) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			}
			return { e : hxsl_TExprDef.TFor(v,it1,loop1), p : e.p, t : e.t};
		case 20:
			var m = _g.m;
			var args = _g.args;
			var em = _g.e;
			var em1 = this.mapExpr(em,isVar);
			if(!isVar && !hxsl_Tools.hasSideEffect(em1)) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			}
			return { e : hxsl_TExprDef.TMeta(m,args,em1), t : e.t, p : e.p};
		default:
			return hxsl_Tools.map(e,function(e) {
				return _gthis.mapExpr(e,true);
			});
		}
	}
	,__class__: hxsl_Dce
};
var hxsl_Debug = function() { };
$hxClasses["hxsl.Debug"] = hxsl_Debug;
hxsl_Debug.__name__ = "hxsl.Debug";
hxsl_Debug.varName = function(v,swizBits) {
	if(swizBits == null) {
		swizBits = 15;
	}
	var name = v.name;
	if(swizBits != 15) {
		name += hxsl_Debug.swizStr(swizBits);
	}
	if(hxsl_Debug.VAR_IDS) {
		return name + "@" + v.id;
	} else {
		return name;
	}
};
hxsl_Debug.swizStr = function(bits) {
	var str = ".";
	if((bits & 1) != 0) {
		str += "x";
	}
	if((bits & 2) != 0) {
		str += "y";
	}
	if((bits & 4) != 0) {
		str += "z";
	}
	if((bits & 8) != 0) {
		str += "w";
	}
	return str;
};
var hxsl_Eval = function() {
	this.mapped = [];
	this.varMap = new haxe_ds_ObjectMap();
	this.funMap = new haxe_ds_ObjectMap();
	this.constants = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Eval"] = hxsl_Eval;
hxsl_Eval.__name__ = "hxsl.Eval";
hxsl_Eval.prototype = {
	setConstant: function(v,c) {
		this.constants.h[v.id] = hxsl_TExprDef.TConst(c);
	}
	,mapVar: function(v,isLocal) {
		var v2 = this.varMap.h[v.__id__];
		if(v2 != null) {
			return v2;
		}
		if(v.parent != null) {
			this.mapVar(v.parent,isLocal);
			v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				if(v == v2) {
					return v2;
				} else {
					return this.mapVar(v2,isLocal);
				}
			}
		}
		var _g = v.type;
		var v21;
		if(_g._hx_index == 17) {
			var _g1 = _g.size;
			v21 = true;
		} else {
			v21 = false;
		}
		v2 = { id : v21 ? v.id : hxsl_Tools.allocVarId(), name : v.name, type : v.type, kind : v.kind};
		if(v.parent != null) {
			v2.parent = this.mapVar(v.parent,isLocal);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		this.varMap.set(v,v2);
		this.varMap.set(v2,v2);
		if(isLocal) {
			this.mapped.push(v);
		}
		var _g = v2.type;
		switch(_g._hx_index) {
		case 13:
			var vl = _g.vl;
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < vl.length) {
				var v = vl[_g2];
				++_g2;
				_g1.push(this.mapVar(v,isLocal));
			}
			v2.type = hxsl_Type.TStruct(_g1);
			break;
		case 15:
			var _g1 = _g.size;
			if(_g1._hx_index == 1) {
				var vs = _g1.v;
				var t = _g.t;
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						var _g1 = c.c;
						if(_g1._hx_index == 2) {
							var v = _g1.v;
							var _g1 = v2.type;
							var tmp;
							switch(_g1._hx_index) {
							case 15:
								var _g2 = _g1.t;
								var _g2 = _g1.size;
								tmp = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v));
								break;
							case 16:
								var _g2 = _g1.t;
								var _g2 = _g1.size;
								var kind = _g1.kind;
								tmp = hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(v),kind);
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							v2.type = tmp;
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs,isLocal);
					var _g1 = v2.type;
					var tmp;
					switch(_g1._hx_index) {
					case 15:
						var _g2 = _g1.t;
						var _g2 = _g1.size;
						tmp = hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2));
						break;
					case 16:
						var _g2 = _g1.t;
						var _g2 = _g1.size;
						var kind = _g1.kind;
						tmp = hxsl_Type.TBuffer(t,hxsl_SizeDecl.SVar(vs2),kind);
						break;
					default:
						throw haxe_Exception.thrown("assert");
					}
					v2.type = tmp;
				}
			}
			break;
		case 16:
			var _g1 = _g.size;
			var _g2 = _g.kind;
			if(_g1._hx_index == 1) {
				var vs = _g1.v;
				var t = _g.t;
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						var _g = c.c;
						if(_g._hx_index == 2) {
							var v = _g.v;
							var _g = v2.type;
							var tmp;
							switch(_g._hx_index) {
							case 15:
								var _g1 = _g.t;
								var _g1 = _g.size;
								tmp = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v));
								break;
							case 16:
								var _g1 = _g.t;
								var _g1 = _g.size;
								var kind = _g.kind;
								tmp = hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(v),kind);
								break;
							default:
								throw haxe_Exception.thrown("assert");
							}
							v2.type = tmp;
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs,isLocal);
					var _g = v2.type;
					var tmp;
					switch(_g._hx_index) {
					case 15:
						var _g1 = _g.t;
						var _g1 = _g.size;
						tmp = hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2));
						break;
					case 16:
						var _g1 = _g.t;
						var _g1 = _g.size;
						var kind = _g.kind;
						tmp = hxsl_Type.TBuffer(t,hxsl_SizeDecl.SVar(vs2),kind);
						break;
					default:
						throw haxe_Exception.thrown("assert");
					}
					v2.type = tmp;
				}
			}
			break;
		default:
		}
		return v2;
	}
	,checkTextureRec: function(t) {
		if(hxsl_Tools.isTexture(t)) {
			return true;
		}
		switch(t._hx_index) {
		case 13:
			var vl = t.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				if(this.checkTextureRec(v.type)) {
					return true;
				}
			}
			return false;
		case 15:
			var _g = t.size;
			var t1 = t.t;
			return this.checkTextureRec(t1);
		case 16:
			var _g = t.t;
			var _g = t.size;
			var _g = t.kind;
			return true;
		default:
		}
		return false;
	}
	,needsInline: function(f) {
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(this.checkTextureRec(a.type)) {
				return true;
			}
		}
		return false;
	}
	,'eval': function(s) {
		var funs = [];
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var f1 = f.kind;
			var f2 = this.mapVar(f.ref,false);
			var _g2 = [];
			var _g3 = 0;
			var _g4 = f.args;
			while(_g3 < _g4.length) {
				var a = _g4[_g3];
				++_g3;
				_g2.push(this.mapVar(a,false));
			}
			var f21 = { kind : f1, ref : f2, args : _g2, ret : f.ret, expr : f.expr};
			if(f.kind == hxsl_FunctionKind.Helper && this.inlineCalls || this.needsInline(f21)) {
				this.funMap.set(f21.ref,f);
			} else {
				funs.push(f21);
			}
		}
		var _g = 0;
		var _g1 = funs.length;
		while(_g < _g1) {
			var i = _g++;
			this.curFun = funs[i];
			this.curFun.expr = this.evalExpr(this.curFun.expr,false);
		}
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.mapVar(v,false));
		}
		return { name : s1, vars : _g, funs : funs};
	}
	,hasReturn: function(e) {
		this.markReturn = false;
		this.hasReturnLoop(e);
		return this.markReturn;
	}
	,hasReturnLoop: function(e) {
		var _g = e.e;
		if(_g._hx_index == 12) {
			var _g1 = _g.e;
			this.markReturn = true;
		} else if(!this.markReturn) {
			hxsl_Tools.iter(e,$bind(this,this.hasReturnLoop));
		}
	}
	,handleReturn: function(e,isFinal) {
		if(isFinal == null) {
			isFinal = false;
		}
		var _g = e.e;
		switch(_g._hx_index) {
		case 3:
			var v = _g.e;
			var v1 = this.handleReturn(v,isFinal);
			return { e : hxsl_TExprDef.TParenthesis(v1), t : v1.t, p : e.p};
		case 4:
			var el = _g.el;
			var i = 0;
			var last = el.length;
			var out = [];
			_hx_loop1: while(i < last) {
				var e1 = el[i++];
				if(i == last) {
					out.push(this.handleReturn(e1,isFinal));
				} else {
					var _g1 = e1.e;
					switch(_g1._hx_index) {
					case 10:
						if(_g1.eelse == null) {
							var eif = _g1.eif;
							var econd = _g1.econd;
							if(isFinal && this.hasReturn(eif)) {
								out.push(this.handleReturn({ e : hxsl_TExprDef.TIf(econd,eif,{ e : hxsl_TExprDef.TBlock(el.slice(i)), t : e1.t, p : e1.p}), t : e1.t, p : e1.p}));
								break _hx_loop1;
							} else {
								out.push(this.handleReturn(e1));
							}
						} else {
							out.push(this.handleReturn(e1));
						}
						break;
					case 12:
						var e2 = _g1.e;
						out.push(this.handleReturn(e2,isFinal));
						break _hx_loop1;
					default:
						out.push(this.handleReturn(e1));
					}
				}
			}
			var t = isFinal ? out.length == 0 ? hxsl_Type.TVoid : out[out.length - 1].t : e.t;
			return { e : hxsl_TExprDef.TBlock(out), t : t, p : e.p};
		case 10:
			var cond = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			if(eelse != null && isFinal) {
				var cond1 = this.handleReturn(cond);
				var eif1 = this.handleReturn(eif,isFinal);
				return { e : hxsl_TExprDef.TIf(cond1,eif1,this.handleReturn(eelse,isFinal)), t : eif1.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
			}
			break;
		case 12:
			var v = _g.e;
			if(!isFinal) {
				hxsl_Error.t("Cannot inline not final return",e.p);
			}
			if(v == null) {
				return { e : hxsl_TExprDef.TBlock([]), t : hxsl_Type.TVoid, p : e.p};
			}
			return this.handleReturn(v,true);
		default:
			return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
		}
	}
	,handleReturnDef: function(e) {
		return this.handleReturn(e);
	}
	,evalCall: function(g,args,oldArgs,pos) {
		switch(g._hx_index) {
		case 28:
			if(args.length == 1) {
				var _g = args[0];
				var _g1 = _g.e;
				var _g2 = _g.p;
				var _g2 = _g.t;
				if(_g1._hx_index == 1) {
					var v = _g1.v;
					var _g = v.type;
					if(_g._hx_index == 15) {
						var _g1 = _g.t;
						var _g1 = _g.size;
						if(_g1._hx_index == 0) {
							var v = _g1.v;
							return hxsl_TExprDef.TConst(hxsl_Const.CInt(v));
						} else {
							return null;
						}
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
			break;
		case 39:
			if(args.length == 1) {
				var _g = args[0];
				var _g1 = _g.e;
				var _g2 = _g.p;
				var _g2 = _g.t;
				if(_g1._hx_index == 0) {
					var _g = _g1.c;
					if(_g._hx_index == 2) {
						var i = _g.v;
						return hxsl_TExprDef.TConst(hxsl_Const.CFloat(i));
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
			break;
		case 64:case 65:
			var i;
			var _g = args[0].e;
			if(_g._hx_index == 0) {
				var _g1 = _g.c;
				if(_g1._hx_index == 2) {
					var i1 = _g1.v;
					i = i1;
				} else {
					hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
					throw haxe_Exception.thrown("assert");
				}
			} else {
				hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
				throw haxe_Exception.thrown("assert");
			}
			var channel = oldArgs[0];
			var _g = channel.e;
			var channel1;
			if(_g._hx_index == 1) {
				var v = _g.v;
				channel1 = hxsl_TExprDef.TVar(this.mapVar(v,false));
			} else {
				throw haxe_Exception.thrown("assert");
			}
			channel = { e : channel1, t : channel.t, p : channel.p};
			var count;
			var _g = channel.t;
			if(_g._hx_index == 17) {
				var i1 = _g.size;
				count = i1;
			} else {
				throw haxe_Exception.thrown("assert");
			}
			var channelMode = Type.createEnumIndex(hxsl_Channel,i & 7,null);
			var targs = [channel];
			var _g = 1;
			var _g1 = args.length;
			while(_g < _g1) {
				var i1 = _g++;
				targs.push(args[i1]);
			}
			targs.push({ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(i >> 3)), t : hxsl_Type.TInt, p : pos});
			var tget = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},targs), t : hxsl_Type.TVoid, p : pos};
			switch(channelMode._hx_index) {
			case 0:
				var zero = { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0.)), t : hxsl_Type.TFloat, p : pos};
				if(count == 1) {
					return zero.e;
				}
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4][count - 2]), t : hxsl_Type.TVoid, p : pos},[zero]);
			case 1:case 2:case 3:case 4:
				var tmp;
				switch(count) {
				case 1:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X];
						break;
					case 2:
						tmp = [hxsl_Component.Y];
						break;
					case 3:
						tmp = [hxsl_Component.Z];
						break;
					case 4:
						tmp = [hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 2:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 3:
						tmp = [hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 3:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				default:
					throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
				}
				return hxsl_TExprDef.TSwiz(tget,tmp);
			case 5:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Unpack), t : hxsl_Type.TVoid, p : pos},[tget]);
			case 6:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.UnpackNormal), t : hxsl_Type.TVoid, p : pos},[tget]);
			}
			break;
		case 68:
			var args1 = args;
			var _g = 0;
			while(_g < args1.length) {
				var a = args1[_g];
				++_g;
				haxe_Log.trace(hxsl_Printer.toString(a),{ fileName : a.p.file, lineNumber : 0, className : null, methodName : null});
			}
			return hxsl_TExprDef.TBlock([]);
		default:
			return null;
		}
	}
	,constantsToString: function() {
		var _g = [];
		var c = this.constants.keys();
		while(c.hasNext()) {
			var c1 = c.next();
			_g.push(c1 + " => " + hxsl_Printer.toString({ e : this.constants.h[c1], t : hxsl_Type.TVoid, p : null},true));
		}
		return _g.toString();
	}
	,ifBlock: function(e) {
		var tmp;
		if(e != null) {
			var _g = e.e;
			var tmp1;
			if(_g._hx_index == 10) {
				var _g1 = _g.econd;
				var _g1 = _g.eif;
				var _g1 = _g.eelse;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			tmp = !tmp1;
		} else {
			tmp = true;
		}
		if(tmp) {
			return e;
		}
		return { e : hxsl_TExprDef.TBlock([e]), t : e.t, p : e.p};
	}
	,evalExpr: function(e,isVal) {
		if(isVal == null) {
			isVal = true;
		}
		var _gthis = this;
		var t = e.t;
		var d;
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.c;
			d = e.e;
			break;
		case 1:
			var v = _g.v;
			var c = this.constants.h[v.id];
			if(c != null) {
				d = c;
			} else {
				var v2 = this.mapVar(v,false);
				t = v2.type;
				d = hxsl_TExprDef.TVar(v2);
			}
			break;
		case 2:
			var _g1 = _g.g;
			d = e.e;
			break;
		case 3:
			var e1 = _g.e;
			var e2 = this.evalExpr(e1,isVal);
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var _g2 = _g1.c;
				d = e2.e;
			} else {
				d = hxsl_TExprDef.TParenthesis(e2);
			}
			break;
		case 4:
			var el = _g.el;
			var index = this.mapped.length;
			var out = [];
			var last = el.length - 1;
			var _g1 = 0;
			var _g2 = el.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var isVal1 = isVal && i == last;
				var e1 = this.evalExpr(el[i],isVal1);
				var _g3 = e1.e;
				switch(_g3._hx_index) {
				case 0:
					var _g4 = _g3.c;
					if(isVal1) {
						out.push(e1);
					}
					break;
				case 1:
					var _g5 = _g3.v;
					if(isVal1) {
						out.push(e1);
					}
					break;
				default:
					out.push(e1);
				}
			}
			while(this.mapped.length > index) {
				var v = this.mapped.pop();
				var v2 = this.varMap.h[v.__id__];
				if(v2 != null) {
					this.varMap.remove(v);
					this.varMap.remove(v2);
				}
			}
			d = out.length == 1 && this.curFun.kind != hxsl_FunctionKind.Init ? out[0].e : hxsl_TExprDef.TBlock(out);
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			var e11 = this.evalExpr(e1);
			var e21 = this.evalExpr(e2);
			switch(op._hx_index) {
			case 0:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a + b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 3) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a + b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 1:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a * b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 3) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a * b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 2:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a / b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 3) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a / b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 3:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a - b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 3) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a - b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 4:case 21:
				d = hxsl_TExprDef.TBinop(op,e11,e21);
				break;
			case 5:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g1 = _g3.b;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var b = _g4.b;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var b = _g3.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 6:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g1 = _g3.b;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var b = _g4.b;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var b = _g3.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 7:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g1 = _g3.b;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var b = _g4.b;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var b = _g3.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 8:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g1 = _g3.b;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var b = _g4.b;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var b = _g3.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 9:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g1 = _g3.b;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var b = _g4.b;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var b = _g3.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 10:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g2._hx_index == 0 ? _g2.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g1 = _g3.b;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var b = _g4.b;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g4 = _g2.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var b = _g4.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g1 = _g3.v;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var b = _g3.v;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 11:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a & b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 12:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a | b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 13:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a ^ b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 14:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 1) {
						var _g1 = _g3.b;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							if(_g3._hx_index == 1) {
								var b = _g3.b;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a && b));
							} else {
								var a = _g1;
								d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
							}
						} else {
							var a = _g1;
							d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
						}
					} else if(_g2._hx_index == 0) {
						var _g1 = _g2.c;
						if(_g1._hx_index == 1) {
							var a = _g1.b;
							d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else if(_g2._hx_index == 0) {
					var _g1 = _g2.c;
					if(_g1._hx_index == 1) {
						var a = _g1.b;
						d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 15:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 1) {
						var _g1 = _g3.b;
						if(_g2._hx_index == 0) {
							var _g3 = _g2.c;
							if(_g3._hx_index == 1) {
								var b = _g3.b;
								var a = _g1;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a || b));
							} else {
								var a = _g1;
								d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
							}
						} else {
							var a = _g1;
							d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
						}
					} else if(_g2._hx_index == 0) {
						var _g1 = _g2.c;
						if(_g1._hx_index == 1) {
							var a = _g1.b;
							d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else if(_g2._hx_index == 0) {
					var _g1 = _g2.c;
					if(_g1._hx_index == 1) {
						var a = _g1.b;
						d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 16:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a << b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 17:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a >> b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 18:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 2) {
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a >>> b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 19:
				var _g1 = e11.e;
				var _g2 = e21.e;
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 2) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a % b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g2._hx_index == 0) {
							var _g1 = _g2.c;
							if(_g1._hx_index == 3) {
								var b = _g1.v;
								var a = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a % b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 20:
				var _g1 = op.op;
				d = hxsl_TExprDef.TBinop(op,e11,e21);
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 6:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = this.evalExpr(e1);
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var c = _g1.c;
				switch(op._hx_index) {
				case 2:
					if(c._hx_index == 1) {
						var b = c.b;
						d = hxsl_TExprDef.TConst(hxsl_Const.CBool(!b));
					} else {
						d = hxsl_TExprDef.TUnop(op,e2);
					}
					break;
				case 3:
					switch(c._hx_index) {
					case 2:
						var i = c.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CInt(-i));
						break;
					case 3:
						var f = c.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(-f));
						break;
					default:
						d = hxsl_TExprDef.TUnop(op,e2);
					}
					break;
				default:
					d = hxsl_TExprDef.TUnop(op,e2);
				}
			} else {
				d = hxsl_TExprDef.TUnop(op,e2);
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			d = hxsl_TExprDef.TVarDecl(this.mapVar(v,true),init == null ? null : this.evalExpr(init));
			break;
		case 8:
			var c = _g.e;
			var eargs = _g.args;
			var c1 = this.evalExpr(c);
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < eargs.length) {
				var a = eargs[_g2];
				++_g2;
				_g1.push(this.evalExpr(a));
			}
			var args = _g1;
			var _g1 = c1.e;
			switch(_g1._hx_index) {
			case 1:
				var v = _g1.v;
				if(this.funMap.h.__keys__[v.__id__] != null) {
					var f = this.funMap.h[v.__id__];
					var outExprs = [];
					var undo = [];
					var _g2 = 0;
					var _g3 = f.args.length;
					while(_g2 < _g3) {
						var i = _g2++;
						var v = [f.args[i]];
						var e1 = args[i];
						var _g4 = e1.e;
						switch(_g4._hx_index) {
						case 0:
							var _g5 = _g4.c;
							var old = [this.constants.h[v[0].id]];
							undo.push((function(old,v) {
								return function() {
									if(old[0] == null) {
										_gthis.constants.remove(v[0].id);
									} else {
										_gthis.constants.h[v[0].id] = old[0];
									}
								};
							})(old,v));
							this.constants.h[v[0].id] = e1.e;
							break;
						case 1:
							var _g6 = _g4.v;
							var _g7 = _g6.id;
							var _g8 = _g6.name;
							var _g9 = _g6.parent;
							var _g10 = _g6.qualifiers;
							var _g11 = _g6.type;
							switch(_g6.kind._hx_index) {
							case 0:case 1:case 2:
								var old1 = [this.constants.h[v[0].id]];
								undo.push((function(old,v) {
									return function() {
										if(old[0] == null) {
											_gthis.constants.remove(v[0].id);
										} else {
											_gthis.constants.h[v[0].id] = old[0];
										}
									};
								})(old1,v));
								this.constants.h[v[0].id] = e1.e;
								break;
							default:
								var old2 = [this.varMap.h[v[0].__id__]];
								if(old2[0] == null) {
									undo.push((function(v) {
										return function() {
											_gthis.varMap.remove(v[0]);
										};
									})(v));
								} else {
									this.varMap.remove(v[0]);
									undo.push((function(old,v) {
										return function() {
											_gthis.varMap.set(v[0],old[0]);
										};
									})(old2,v));
								}
								var v2 = this.mapVar(v[0],false);
								outExprs.push({ e : hxsl_TExprDef.TVarDecl(v2,e1), t : hxsl_Type.TVoid, p : e1.p});
							}
							break;
						default:
							var old3 = [this.varMap.h[v[0].__id__]];
							if(old3[0] == null) {
								undo.push((function(v) {
									return function() {
										_gthis.varMap.remove(v[0]);
									};
								})(v));
							} else {
								this.varMap.remove(v[0]);
								undo.push((function(old,v) {
									return function() {
										_gthis.varMap.set(v[0],old[0]);
									};
								})(old3,v));
							}
							var v21 = this.mapVar(v[0],false);
							outExprs.push({ e : hxsl_TExprDef.TVarDecl(v21,e1), t : hxsl_Type.TVoid, p : e1.p});
						}
					}
					var e1 = this.handleReturn(this.evalExpr(f.expr,false),true);
					var _g2 = 0;
					while(_g2 < undo.length) {
						var u = undo[_g2];
						++_g2;
						u();
					}
					var _g2 = e1.e;
					if(_g2._hx_index == 4) {
						var el = _g2.el;
						var _g2 = 0;
						while(_g2 < el.length) {
							var e2 = el[_g2];
							++_g2;
							outExprs.push(e2);
						}
					} else {
						outExprs.push(e1);
					}
					d = hxsl_TExprDef.TBlock(outExprs);
				} else {
					d = hxsl_TExprDef.TCall(c1,args);
				}
				break;
			case 2:
				var g = _g1.g;
				var v1 = this.evalCall(g,args,eargs,e.p);
				d = v1 != null ? v1 : hxsl_TExprDef.TCall(c1,args);
				break;
			default:
				d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c1) + "'",c1.p);
			}
			break;
		case 9:
			var e1 = _g.e;
			var r = _g.regs;
			d = hxsl_TExprDef.TSwiz(this.evalExpr(e1),r.slice());
			break;
		case 10:
			var econd = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			var econd1 = this.evalExpr(econd);
			var _g1 = econd1.e;
			if(_g1._hx_index == 0) {
				var _g2 = _g1.c;
				if(_g2._hx_index == 1) {
					var b = _g2.b;
					d = b ? this.evalExpr(eif,isVal).e : eelse == null ? hxsl_TExprDef.TConst(hxsl_Const.CNull) : this.evalExpr(eelse,isVal).e;
				} else if(isVal && eelse != null && this.eliminateConditionals) {
					d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
				} else {
					eif = this.evalExpr(eif,isVal);
					if(eelse != null) {
						eelse = this.evalExpr(eelse,isVal);
						var _g1 = eelse.e;
						if(_g1._hx_index == 0 && _g1.c._hx_index == 0) {
							eelse = null;
						}
					}
					eif = this.ifBlock(eif);
					eelse = this.ifBlock(eelse);
					d = hxsl_TExprDef.TIf(econd1,eif,eelse);
				}
			} else if(isVal && eelse != null && this.eliminateConditionals) {
				d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
			} else {
				eif = this.evalExpr(eif,isVal);
				if(eelse != null) {
					eelse = this.evalExpr(eelse,isVal);
					var _g1 = eelse.e;
					if(_g1._hx_index == 0 && _g1.c._hx_index == 0) {
						eelse = null;
					}
				}
				eif = this.ifBlock(eif);
				eelse = this.ifBlock(eelse);
				d = hxsl_TExprDef.TIf(econd1,eif,eelse);
			}
			break;
		case 11:
			d = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			var e1 = _g.e;
			d = hxsl_TExprDef.TReturn(e1 == null ? null : this.evalExpr(e1));
			break;
		case 13:
			var v1 = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			var v2 = this.mapVar(v1,true);
			var it1 = this.evalExpr(it);
			var e1;
			var _g1 = it1.e;
			if(_g1._hx_index == 5) {
				var _g2 = _g1.e1;
				var _g3 = _g1.e2;
				if(_g1.op._hx_index == 21) {
					var _g1 = _g2.e;
					var _g4 = _g2.p;
					var _g4 = _g2.t;
					if(_g1._hx_index == 0) {
						var _g2 = _g1.c;
						if(_g2._hx_index == 2) {
							var _g1 = _g3.e;
							var _g4 = _g3.p;
							var _g4 = _g3.t;
							if(_g1._hx_index == 0) {
								var _g3 = _g1.c;
								if(_g3._hx_index == 2) {
									var len = _g3.v;
									var start = _g2.v;
									if(this.unrollLoops) {
										var out = [];
										var _g1 = start;
										var _g2 = len;
										while(_g1 < _g2) {
											var i = _g1++;
											this.constants.h[v1.id] = hxsl_TExprDef.TConst(hxsl_Const.CInt(i));
											out.push(this.evalExpr(loop,false));
										}
										this.constants.remove(v1.id);
										e1 = hxsl_TExprDef.TBlock(out);
									} else {
										e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
									}
								} else {
									e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
								}
							} else {
								e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
							}
						} else {
							e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
						}
					} else {
						e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
					}
				} else {
					e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
				}
			} else {
				e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
			}
			this.varMap.remove(v1);
			d = e1;
			break;
		case 14:
			d = hxsl_TExprDef.TContinue;
			break;
		case 15:
			d = hxsl_TExprDef.TBreak;
			break;
		case 16:
			var e1 = _g.e;
			var e2 = _g.index;
			var e11 = this.evalExpr(e1);
			var e21 = this.evalExpr(e2);
			var _g1 = e11.e;
			var _g2 = e21.e;
			if(_g1._hx_index == 17) {
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 2) {
						var i = _g3.v;
						var el = _g1.el;
						if(i >= 0 && i < el.length) {
							d = el[i].e;
						} else {
							var _g1 = e11.t;
							switch(_g1._hx_index) {
							case 15:
								var _g2 = _g1.size;
								var at = _g1.t;
								t = at;
								break;
							case 16:
								var _g2 = _g1.size;
								var _g2 = _g1.kind;
								var at = _g1.t;
								t = at;
								break;
							default:
							}
							d = hxsl_TExprDef.TArray(e11,e21);
						}
					} else {
						var _g1 = e11.t;
						switch(_g1._hx_index) {
						case 15:
							var _g2 = _g1.size;
							var at = _g1.t;
							t = at;
							break;
						case 16:
							var _g2 = _g1.size;
							var _g2 = _g1.kind;
							var at = _g1.t;
							t = at;
							break;
						default:
						}
						d = hxsl_TExprDef.TArray(e11,e21);
					}
				} else {
					var _g1 = e11.t;
					switch(_g1._hx_index) {
					case 15:
						var _g2 = _g1.size;
						var at = _g1.t;
						t = at;
						break;
					case 16:
						var _g2 = _g1.size;
						var _g2 = _g1.kind;
						var at = _g1.t;
						t = at;
						break;
					default:
					}
					d = hxsl_TExprDef.TArray(e11,e21);
				}
			} else {
				var _g1 = e11.t;
				switch(_g1._hx_index) {
				case 15:
					var _g2 = _g1.size;
					var at = _g1.t;
					t = at;
					break;
				case 16:
					var _g2 = _g1.size;
					var _g2 = _g1.kind;
					var at = _g1.t;
					t = at;
					break;
				default:
				}
				d = hxsl_TExprDef.TArray(e11,e21);
			}
			break;
		case 17:
			var el = _g.el;
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < el.length) {
				var e1 = el[_g2];
				++_g2;
				_g1.push(this.evalExpr(e1));
			}
			d = hxsl_TExprDef.TArrayDecl(_g1);
			break;
		case 18:
			var e1 = _g.e;
			var cases = _g.cases;
			var def = _g.def;
			var e2 = this.evalExpr(e1);
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < cases.length) {
				var c = cases[_g2];
				++_g2;
				var _g3 = [];
				var _g4 = 0;
				var _g5 = c.values;
				while(_g4 < _g5.length) {
					var v1 = _g5[_g4];
					++_g4;
					_g3.push(this.evalExpr(v1));
				}
				_g1.push({ values : _g3, expr : this.evalExpr(c.expr,isVal)});
			}
			var cases = _g1;
			var def1 = def == null ? null : this.evalExpr(def,isVal);
			var hasCase = false;
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var c = _g1.c;
				if(c._hx_index == 2) {
					var val = c.v;
					var _g1 = 0;
					while(_g1 < cases.length) {
						var c1 = cases[_g1];
						++_g1;
						var _g2 = 0;
						var _g3 = c1.values;
						while(_g2 < _g3.length) {
							var v1 = _g3[_g2];
							++_g2;
							var _g4 = v1.e;
							if(_g4._hx_index == 0) {
								var cst = _g4.c;
								switch(cst._hx_index) {
								case 2:
									var k = cst.v;
									if(k == val) {
										return c1.expr;
									}
									break;
								case 3:
									var k1 = cst.v;
									if(k1 == val) {
										return c1.expr;
									}
									break;
								default:
								}
							} else {
								hasCase = true;
							}
						}
					}
				} else {
					throw haxe_Exception.thrown("Unsupported switch constant " + Std.string(c));
				}
			} else {
				hasCase = true;
			}
			d = hasCase ? hxsl_TExprDef.TSwitch(e2,cases,def1) : def1 == null ? hxsl_TExprDef.TBlock([]) : def1.e;
			break;
		case 19:
			var cond = _g.e;
			var loop = _g.loop;
			var normalWhile = _g.normalWhile;
			var cond1 = this.evalExpr(cond);
			var loop1 = this.evalExpr(loop,false);
			d = hxsl_TExprDef.TWhile(cond1,this.ifBlock(loop1),normalWhile);
			break;
		case 20:
			var name = _g.m;
			var args = _g.args;
			var e1 = _g.e;
			var e2;
			if(name == "unroll") {
				var old4 = this.unrollLoops;
				this.unrollLoops = true;
				e2 = this.evalExpr(e1,isVal);
				this.unrollLoops = false;
			} else {
				e2 = this.evalExpr(e1,isVal);
			}
			d = hxsl_TExprDef.TMeta(name,args,e2);
			break;
		case 21:
			var e1 = _g.e;
			var name = _g.name;
			d = hxsl_TExprDef.TField(this.evalExpr(e1),name);
			break;
		case 22:
			var target = _g.target;
			var code = _g.code;
			var args = _g.args;
			var _g = [];
			var _g1 = 0;
			while(_g1 < args.length) {
				var arg = args[_g1];
				++_g1;
				_g.push({ e : this.evalExpr(arg.e), access : arg.access});
			}
			d = hxsl_TExprDef.TSyntax(target,code,_g);
			break;
		}
		return { e : d, t : t, p : e.p};
	}
	,__class__: hxsl_Eval
};
var hxsl__$Flatten_Alloc = function(g,t,pos,size) {
	this.g = g;
	this.t = t;
	this.pos = pos;
	this.size = size;
};
$hxClasses["hxsl._Flatten.Alloc"] = hxsl__$Flatten_Alloc;
hxsl__$Flatten_Alloc.__name__ = "hxsl._Flatten.Alloc";
hxsl__$Flatten_Alloc.prototype = {
	__class__: hxsl__$Flatten_Alloc
};
var hxsl_ARead = $hxEnums["hxsl.ARead"] = { __ename__:true,__constructs__:null
	,AIndex: ($_=function(a) { return {_hx_index:0,a:a,__enum__:"hxsl.ARead",toString:$estr}; },$_._hx_name="AIndex",$_.__params__ = ["a"],$_)
	,AOffset: ($_=function(a,stride,delta) { return {_hx_index:1,a:a,stride:stride,delta:delta,__enum__:"hxsl.ARead",toString:$estr}; },$_._hx_name="AOffset",$_.__params__ = ["a","stride","delta"],$_)
};
hxsl_ARead.__constructs__ = [hxsl_ARead.AIndex,hxsl_ARead.AOffset];
hxsl_ARead.__empty_constructs__ = [];
var hxsl_Flatten = function() {
};
$hxClasses["hxsl.Flatten"] = hxsl_Flatten;
hxsl_Flatten.__name__ = "hxsl.Flatten";
hxsl_Flatten.prototype = {
	flatten: function(s,kind) {
		this.globals = [];
		this.params = [];
		this.outVars = [];
		this.textureFormats = [];
		this.varMap = new haxe_ds_ObjectMap();
		this.allocData = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.gatherVar(v);
		}
		var prefix;
		switch(kind._hx_index) {
		case 0:
			prefix = "vertex";
			break;
		case 1:
			prefix = "fragment";
			break;
		case 4:
			prefix = "compute";
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
		this.pack(prefix + "Globals",hxsl_VarKind.Global,this.globals,hxsl_VecType.VFloat);
		this.pack(prefix + "Params",hxsl_VarKind.Param,this.params,hxsl_VecType.VFloat);
		var allVars = this.globals.concat(this.params);
		this.textureFormats.sort(function(t1,t2) {
			if(t1.rw != t2.rw) {
				return t1.rw - t2.rw;
			}
			if(t1.arr != t2.arr) {
				if(t1.arr) {
					return 1;
				} else {
					return -1;
				}
			}
			return t1.dim._hx_index - t2.dim._hx_index;
		});
		var _g = 0;
		var _g1 = this.textureFormats;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			var name;
			if(t.dim == hxsl_TexDimension.T2D) {
				name = "";
			} else {
				var e = t.dim;
				name = HxOverrides.substr($hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name,1,null);
			}
			if(t.rw > 0) {
				name = "RW" + name + t.rw;
			}
			if(t.arr) {
				name += "Array";
			}
			this.packTextures(prefix + "Textures" + name,allVars,t.rw == 0 ? hxsl_Type.TSampler(t.dim,t.arr) : hxsl_Type.TRWTexture(t.dim,t.arr,t.rw));
		}
		this.packBuffers("buffers",allVars,hxsl_BufferKind.Uniform);
		this.packBuffers("storagebuffers",allVars,hxsl_BufferKind.Storage);
		this.packBuffers("rwbuffers",allVars,hxsl_BufferKind.RW);
		var _g = [];
		var _g1 = 0;
		var _g2 = s.funs;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(this.mapFun(f,$bind(this,this.mapExpr)));
		}
		var funs = _g;
		return { name : s.name, vars : this.outVars, funs : funs};
	}
	,mapFun: function(f,mapExpr) {
		return { kind : f.kind, ret : f.ret, args : f.args, ref : f.ref, expr : mapExpr(f.expr)};
	}
	,mkOp: function(e,by,f,binop,pos) {
		var _g = e.e;
		if(_g._hx_index == 0) {
			var _g1 = _g.c;
			if(_g1._hx_index == 2) {
				var i = _g1.v;
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CInt(f(i,by))), t : hxsl_Type.TInt, p : pos};
			}
		}
		return { e : hxsl_TExprDef.TBinop(binop,e,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(by)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
	}
	,mkAdd: function(e,offset,pos) {
		if(offset == 0) {
			return e;
		}
		return this.mkOp(e,offset,function(x,y) {
			return x + y;
		},haxe_macro_Binop.OpAdd,pos);
	}
	,mkMult: function(e,by,pos) {
		if(by == 1) {
			return e;
		}
		return this.mkOp(e,by,function(x,y) {
			return x * y;
		},haxe_macro_Binop.OpMult,pos);
	}
	,mapExpr: function(e) {
		var _gthis = this;
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var a = this.varMap.h[v.__id__];
			if(a != null) {
				e = this.access(a,v.type,e.p,hxsl_ARead.AIndex(a));
			}
			break;
		case 5:
			if(_g.op._hx_index == 4) {
				var e1 = _g.e1;
				var e2 = _g.e2;
				var e3;
				if(e.t._hx_index == 7) {
					var _g1 = e1.e;
					if(_g1._hx_index == 21) {
						var _g2 = _g1.e;
						var _g2 = _g1.name;
						e3 = true;
					} else {
						e3 = false;
					}
				} else {
					e3 = false;
				}
				if(e3) {
					var _g1 = e1.e;
					var _g2 = e1.p;
					if(_g1._hx_index == 21) {
						if(e1.t._hx_index == 7) {
							var name = _g1.name;
							var expr = _g1.e;
							var pos = -1;
							var _g1 = expr.t;
							if(_g1._hx_index == 13) {
								var vl = _g1.vl;
								var cur = 0;
								var _g1 = 0;
								while(_g1 < vl.length) {
									var v = vl[_g1];
									++_g1;
									if(v.name == name) {
										pos = cur;
										break;
									}
									cur += hxsl_Tools.size(v.type);
								}
							}
							if(pos < 0) {
								throw haxe_Exception.thrown("assert");
							}
							var pos1 = pos;
							var expr1 = this.mapExpr(expr);
							var idx = pos1 >> 2;
							var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
							var e1;
							if((pos1 & 3) == 0) {
								e1 = arr;
							} else {
								var sw = hxsl_Flatten.SWIZ.slice(pos1 & 3,(pos1 & 3) + 4);
								e1 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
							}
							var e3 = { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,e1,{ e : hxsl_TExprDef.TArray(e2,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(0)), t : hxsl_Type.TInt, p : null}), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : null}), t : e.t, p : e.p};
							var pos = pos1 + 4;
							var idx = pos >> 2;
							var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
							var e1;
							if((pos & 3) == 0) {
								e1 = arr;
							} else {
								var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + 4);
								e1 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
							}
							var e4 = { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,e1,{ e : hxsl_TExprDef.TArray(e2,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(1)), t : hxsl_Type.TInt, p : null}), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : null}), t : e.t, p : e.p};
							var pos = pos1 + 8;
							var idx = pos >> 2;
							var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
							var e1;
							if((pos & 3) == 0) {
								e1 = arr;
							} else {
								var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + 4);
								e1 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
							}
							var e5 = { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,e1,{ e : hxsl_TExprDef.TArray(e2,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(2)), t : hxsl_Type.TInt, p : null}), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : null}), t : e.t, p : e.p};
							var pos = pos1 + 12;
							var idx = pos >> 2;
							var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
							var e1;
							if((pos & 3) == 0) {
								e1 = arr;
							} else {
								var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + 4);
								e1 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
							}
							e = { e : hxsl_TExprDef.TBlock([e3,e4,e5,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,e1,{ e : hxsl_TExprDef.TArray(e2,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(3)), t : hxsl_Type.TInt, p : null}), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : null}), t : e.t, p : e.p}]), t : e.t, p : e.p};
						} else {
							throw haxe_Exception.thrown("assert");
						}
					} else {
						throw haxe_Exception.thrown("assert");
					}
				} else {
					e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
				}
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			var _g1 = v.type;
			var e1;
			if(_g1._hx_index == 13) {
				var _g2 = _g1.vl;
				e1 = true;
			} else {
				e1 = false;
			}
			if(e1) {
				var size = Math.ceil(hxsl_Tools.size(v.type) / 4);
				var v2 = { id : hxsl_Tools.allocVarId(), name : v.name, type : hxsl_Type.TArray(hxsl_Type.TVec(4,hxsl_VecType.VFloat),hxsl_SizeDecl.SConst(size)), kind : v.kind, qualifiers : v.qualifiers};
				var a = new hxsl__$Flatten_Alloc(v2,hxsl_VecType.VFloat,0,0);
				a.v = v;
				this.varMap.set(v,a);
				e = { e : hxsl_TExprDef.TVarDecl(v2,init == null ? null : this.mapExpr(init)), t : hxsl_Type.TVoid, p : e.p};
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		case 16:
			var _g1 = _g.e;
			var _g2 = _g1.e;
			var _g3 = _g1.t;
			if(_g2._hx_index == 1) {
				var v = _g2.v;
				var vp = _g1.p;
				var eindex = _g.index;
				var a = this.varMap.h[v.__id__];
				var e1;
				if(a != null) {
					var _g1 = v.type;
					var e2;
					if(_g1._hx_index == 16) {
						var _g2 = _g1.t;
						var _g2 = _g1.size;
						var _g2 = _g1.kind;
						e2 = true;
					} else {
						e2 = false;
					}
					if(!e2) {
						var _g1 = eindex.e;
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var _g1 = _g2.v;
								e1 = true;
							} else {
								e1 = false;
							}
						} else {
							e1 = false;
						}
					} else {
						e1 = false;
					}
				} else {
					e1 = true;
				}
				if(e1) {
					e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
				} else {
					var _g1 = v.type;
					switch(_g1._hx_index) {
					case 5:
						var _g2 = _g1.size;
						switch(_g1.t._hx_index) {
						case 0:case 1:
							e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						break;
					case 15:
						var _g2 = _g1.t;
						var _g3 = _g1.size;
						var t = _g2;
						if(hxsl_Tools.isTexture(t)) {
							eindex = this.toInt(this.mapExpr(eindex));
							e = this.access(a,t,vp,hxsl_ARead.AOffset(a,1,eindex));
						} else {
							var t = _g2;
							var stride = this.varSize4Bytes(t,a.t);
							var e1;
							if(stride != 0) {
								var _g2 = v.type;
								var e2;
								if(_g2._hx_index == 15) {
									var _g3 = _g2.t;
									var _g3 = _g2.size;
									e2 = true;
								} else {
									e2 = false;
								}
								e1 = e2 && (stride & 3) != 0;
							} else {
								e1 = true;
							}
							if(e1) {
								throw haxe_Exception.thrown(new hxsl_Error("Dynamic access to an Array which size is not 4 components-aligned is not allowed",e.p));
							}
							stride = stride + 3 >> 2;
							eindex = this.toInt(this.mapExpr(eindex));
							e = this.access(a,t,vp,hxsl_ARead.AOffset(a,stride,this.mkMult(eindex,stride,vp)));
						}
						break;
					case 16:
						var _g2 = _g1.t;
						var _g3 = _g1.size;
						var _g3 = _g1.kind;
						switch(_g2._hx_index) {
						case 1:case 3:
							e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
							break;
						default:
							var t = _g2;
							var stride = this.varSize4Bytes(t,a.t);
							var e1;
							if(stride != 0) {
								var _g1 = v.type;
								var e2;
								if(_g1._hx_index == 15) {
									var _g2 = _g1.t;
									var _g2 = _g1.size;
									e2 = true;
								} else {
									e2 = false;
								}
								e1 = e2 && (stride & 3) != 0;
							} else {
								e1 = true;
							}
							if(e1) {
								throw haxe_Exception.thrown(new hxsl_Error("Dynamic access to an Array which size is not 4 components-aligned is not allowed",e.p));
							}
							stride = stride + 3 >> 2;
							eindex = this.toInt(this.mapExpr(eindex));
							e = this.access(a,t,vp,hxsl_ARead.AOffset(a,stride,this.mkMult(eindex,stride,vp)));
						}
						break;
					default:
						throw haxe_Exception.thrown("assert");
					}
				}
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		case 21:
			var expr = _g.e;
			var name = _g.name;
			var pos = -1;
			var _g = expr.t;
			if(_g._hx_index == 13) {
				var vl = _g.vl;
				var cur = 0;
				var _g = 0;
				while(_g < vl.length) {
					var v = vl[_g];
					++_g;
					if(v.name == name) {
						pos = cur;
						break;
					}
					cur += hxsl_Tools.size(v.type);
				}
			}
			if(pos < 0) {
				throw haxe_Exception.thrown("assert");
			}
			var pos1 = pos;
			var expr1 = this.mapExpr(expr);
			var _g = e.t;
			switch(_g._hx_index) {
			case 3:
				var idx = pos1 >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var sw = hxsl_Flatten.SWIZ.slice(pos1 & 3,(pos1 & 3) + 1);
				e = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TFloat, p : e.p};
				break;
			case 5:
				if(_g.t._hx_index == 1) {
					var size = _g.size;
					var idx = pos1 >> 2;
					var idx2 = pos1 + size - 1 >> 2;
					if(idx == idx2) {
						var idx = pos1 >> 2;
						var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
						if(size == 4 && (pos1 & 3) == 0) {
							e = arr;
						} else {
							var sw = hxsl_Flatten.SWIZ.slice(pos1 & 3,(pos1 & 3) + size);
							e = { e : hxsl_TExprDef.TSwiz(arr,sw), t : size == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(size,hxsl_VecType.VFloat), p : e.p};
						}
					} else {
						var k = (idx2 << 2) - pos1;
						var type;
						switch(size) {
						case 2:
							type = hxsl_TGlobal.Vec2;
							break;
						case 3:
							type = hxsl_TGlobal.Vec3;
							break;
						case 4:
							type = hxsl_TGlobal.Vec4;
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						var e1 = { e : hxsl_TExprDef.TGlobal(type), p : e.p, t : hxsl_Type.TVoid};
						var idx = pos1 >> 2;
						var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
						var e2;
						if(k == 4 && (pos1 & 3) == 0) {
							e2 = arr;
						} else {
							var sw = hxsl_Flatten.SWIZ.slice(pos1 & 3,(pos1 & 3) + k);
							e2 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : k == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(k,hxsl_VecType.VFloat), p : e.p};
						}
						var pos = pos1 + k;
						var size1 = size - k;
						var idx = pos >> 2;
						var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
						var e3;
						if(size1 == 4 && (pos & 3) == 0) {
							e3 = arr;
						} else {
							var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + size1);
							e3 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : size1 == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(size1,hxsl_VecType.VFloat), p : e.p};
						}
						e = { e : hxsl_TExprDef.TCall(e1,[e2,e3]), t : e.t, p : e.p};
					}
				} else {
					throw haxe_Exception.thrown("Unsupported type " + hxsl_Tools.toString(e.t));
				}
				break;
			case 7:
				var e1 = { e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4), p : e.p, t : hxsl_Type.TVoid};
				var idx = pos1 >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var e2;
				if((pos1 & 3) == 0) {
					e2 = arr;
				} else {
					var sw = hxsl_Flatten.SWIZ.slice(pos1 & 3,(pos1 & 3) + 4);
					e2 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
				}
				var pos = pos1 + 4;
				var idx = pos >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var e3;
				if((pos & 3) == 0) {
					e3 = arr;
				} else {
					var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + 4);
					e3 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
				}
				var pos = pos1 + 8;
				var idx = pos >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var e4;
				if((pos & 3) == 0) {
					e4 = arr;
				} else {
					var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + 4);
					e4 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
				}
				var pos = pos1 + 12;
				var idx = pos >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var e5;
				if((pos & 3) == 0) {
					e5 = arr;
				} else {
					var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + 4);
					e5 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
				}
				e = { e : hxsl_TExprDef.TCall(e1,[e2,e3,e4,e5]), t : e.t, p : e.p};
				break;
			case 8:
				var e1 = { e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3x4), p : e.p, t : hxsl_Type.TVoid};
				var idx = pos1 >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var e2;
				if((pos1 & 3) == 0) {
					e2 = arr;
				} else {
					var sw = hxsl_Flatten.SWIZ.slice(pos1 & 3,(pos1 & 3) + 4);
					e2 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
				}
				var pos = pos1 + 4;
				var idx = pos >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var e3;
				if((pos & 3) == 0) {
					e3 = arr;
				} else {
					var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + 4);
					e3 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
				}
				var pos = pos1 + 8;
				var idx = pos >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var e4;
				if((pos & 3) == 0) {
					e4 = arr;
				} else {
					var sw = hxsl_Flatten.SWIZ.slice(pos & 3,(pos & 3) + 4);
					e4 = { e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : e.p};
				}
				e = { e : hxsl_TExprDef.TCall(e1,[e2,e3,e4]), t : e.t, p : e.p};
				break;
			case 9:
				var size = _g.size;
				var e1 = { e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.UnpackSnorm4x8), p : e.p, t : hxsl_Type.TVec(size,hxsl_VecType.VFloat)};
				var idx = pos1 >> 2;
				var arr = _gthis.optimize({ e : hxsl_TExprDef.TArray(expr1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(idx)), p : e.p, t : hxsl_Type.TInt}), p : e.p, t : hxsl_Type.TVec(4,hxsl_VecType.VFloat)});
				var sw = hxsl_Flatten.SWIZ.slice(pos1 & 3,(pos1 & 3) + 1);
				e = { e : hxsl_TExprDef.TCall(e1,[this.floatBitsToUint({ e : hxsl_TExprDef.TSwiz(arr,sw), t : hxsl_Type.TFloat, p : e.p})]), t : e.t, p : e.p};
				break;
			default:
				throw haxe_Exception.thrown("Unsupported type " + hxsl_Tools.toString(e.t));
			}
			break;
		default:
			e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
		}
		return this.optimize(e);
	}
	,access: function(a,t,pos,acc) {
		var _gthis = this;
		switch(t._hx_index) {
		case 6:
			var tmp = this.access(a,hxsl_Type.TMat3x4,pos,acc);
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3), t : hxsl_Type.TFun([]), p : pos},[tmp]), t : hxsl_Type.TMat3, p : pos};
		case 7:
			var tmp = { e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4), t : hxsl_Type.TFun([]), p : pos};
			var tmp1;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index;
				var _g = a1.g.type;
				if(_g._hx_index == 16) {
					var _g1 = _g.t;
					var _g1 = _g.size;
					var _g1 = _g.kind;
					index = 0;
				} else {
					index = a1.t == null ? a1.pos : a1.pos >> 2;
				}
				var offset = _gthis.mkAdd(delta,index,pos);
				tmp1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp2;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index;
				var _g = a1.g.type;
				if(_g._hx_index == 16) {
					var _g1 = _g.t;
					var _g1 = _g.size;
					var _g1 = _g.kind;
					index = 1;
				} else {
					index = (a1.t == null ? a1.pos : a1.pos >> 2) + 1;
				}
				var offset = _gthis.mkAdd(delta,index,pos);
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp3;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index;
				var _g = a1.g.type;
				if(_g._hx_index == 16) {
					var _g1 = _g.t;
					var _g1 = _g.size;
					var _g1 = _g.kind;
					index = 2;
				} else {
					index = (a1.t == null ? a1.pos : a1.pos >> 2) + 2;
				}
				var offset = _gthis.mkAdd(delta,index,pos);
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp4;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index;
				var _g = a1.g.type;
				if(_g._hx_index == 16) {
					var _g1 = _g.t;
					var _g1 = _g.size;
					var _g1 = _g.kind;
					index = 3;
				} else {
					index = (a1.t == null ? a1.pos : a1.pos >> 2) + 3;
				}
				var offset = _gthis.mkAdd(delta,index,pos);
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall(tmp,[tmp1,tmp2,tmp3,tmp4]), t : hxsl_Type.TMat4, p : pos};
		case 8:
			var tmp = { e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3x4), t : hxsl_Type.TFun([]), p : pos};
			var tmp1;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index;
				var _g = a1.g.type;
				if(_g._hx_index == 16) {
					var _g1 = _g.t;
					var _g1 = _g.size;
					var _g1 = _g.kind;
					index = 0;
				} else {
					index = a1.t == null ? a1.pos : a1.pos >> 2;
				}
				var offset = _gthis.mkAdd(delta,index,pos);
				tmp1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp2;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index;
				var _g = a1.g.type;
				if(_g._hx_index == 16) {
					var _g1 = _g.t;
					var _g1 = _g.size;
					var _g1 = _g.kind;
					index = 1;
				} else {
					index = (a1.t == null ? a1.pos : a1.pos >> 2) + 1;
				}
				var offset = _gthis.mkAdd(delta,index,pos);
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp3;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var a1 = acc.a;
				var stride = acc.stride;
				var delta = acc.delta;
				var index;
				var _g = a1.g.type;
				if(_g._hx_index == 16) {
					var _g1 = _g.t;
					var _g1 = _g.size;
					var _g1 = _g.kind;
					index = 2;
				} else {
					index = (a1.t == null ? a1.pos : a1.pos >> 2) + 2;
				}
				var offset = _gthis.mkAdd(delta,index,pos);
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall(tmp,[tmp1,tmp2,tmp3]), t : hxsl_Type.TMat3x4, p : pos};
		case 13:
			var vl = t.vl;
			var size = 0;
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				size += this.varSize(v.type,a.t);
			}
			var stride = Math.ceil(size / 4);
			var _g = [];
			var _g1 = 0;
			var _g2 = stride;
			while(_g1 < _g2) {
				var i = _g1++;
				var tmp;
				switch(acc._hx_index) {
				case 0:
					var a1 = acc.a;
					var offs = a1.t == null ? a1.pos : a1.pos >> 2;
					tmp = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + i)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				case 1:
					var a2 = acc.a;
					var stride1 = acc.stride;
					var delta = acc.delta;
					var index;
					var _g3 = a2.g.type;
					if(_g3._hx_index == 16) {
						var _g4 = _g3.t;
						var _g5 = _g3.size;
						var _g6 = _g3.kind;
						index = i;
					} else {
						index = (a2.t == null ? a2.pos : a2.pos >> 2) + i;
					}
					var offset = _gthis.mkAdd(delta,index,pos);
					tmp = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a2.g), t : a2.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a2.t), p : pos};
					break;
				}
				_g.push(tmp);
			}
			var earr = _g;
			return { e : hxsl_TExprDef.TArrayDecl(earr), t : hxsl_Type.TArray(hxsl_Type.TVec(4,hxsl_VecType.VFloat),hxsl_SizeDecl.SConst(stride)), p : pos};
		case 15:
			var _g = t.size;
			if(_g._hx_index == 0) {
				var len = _g.v;
				var t1 = t.t;
				var stride = a.size / len | 0;
				var _g = [];
				var _g1 = 0;
				var _g2 = len;
				while(_g1 < _g2) {
					var i = _g1++;
					var a1 = new hxsl__$Flatten_Alloc(a.g,a.t,a.pos + stride * i,stride);
					_g.push(this.access(a1,t1,pos,hxsl_ARead.AIndex(a1)));
				}
				var earr = _g;
				return { e : hxsl_TExprDef.TArrayDecl(earr), t : t1, p : pos};
			} else {
				var t1 = t;
				if(hxsl_Tools.isTexture(t1)) {
					var e;
					switch(acc._hx_index) {
					case 0:
						var a1 = acc.a;
						var offs = a1.t == null ? a1.pos : a1.pos >> 2;
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
						break;
					case 1:
						var a1 = acc.a;
						var stride = acc.stride;
						var delta = acc.delta;
						var index;
						var _g = a1.g.type;
						if(_g._hx_index == 16) {
							var _g1 = _g.t;
							var _g1 = _g.size;
							var _g1 = _g.kind;
							index = 0;
						} else {
							index = a1.t == null ? a1.pos : a1.pos >> 2;
						}
						var offset = _gthis.mkAdd(delta,index,pos);
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
						break;
					}
					e.t = t1;
					return e;
				} else {
					var size = this.varSize(t,a.t);
					if(size > 4) {
						return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
					}
					var e;
					switch(acc._hx_index) {
					case 0:
						var a1 = acc.a;
						var offs = a1.t == null ? a1.pos : a1.pos >> 2;
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
						break;
					case 1:
						var a1 = acc.a;
						var stride = acc.stride;
						var delta = acc.delta;
						var index;
						var _g = a1.g.type;
						if(_g._hx_index == 16) {
							var _g1 = _g.t;
							var _g1 = _g.size;
							var _g1 = _g.kind;
							index = 0;
						} else {
							index = a1.t == null ? a1.pos : a1.pos >> 2;
						}
						var offset = _gthis.mkAdd(delta,index,pos);
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
						break;
					}
					if(size == 4) {
						if(a.pos == -1) {
							return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TFun([]), p : pos},[{ e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0)), t : hxsl_Type.TFloat, p : pos}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : pos};
						}
					} else {
						var sw = [];
						var _g = 0;
						var _g1 = size;
						while(_g < _g1) {
							var i = _g++;
							sw.push(hxsl_Tools.SWIZ[i + (a.pos & 3)]);
						}
						e = { e : hxsl_TExprDef.TSwiz(e,sw), t : t, p : pos};
					}
					switch(t._hx_index) {
					case 1:
						e.t = hxsl_Type.TFloat;
						e = this.toInt(e);
						break;
					case 5:
						if(t.t._hx_index == 0) {
							var size = t.size;
							e.t = hxsl_Type.TVec(size,hxsl_VecType.VFloat);
							e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size - 2]), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
						}
						break;
					default:
					}
					return e;
				}
			}
			break;
		case 16:
			var _g = t.t;
			var _g = t.size;
			var _g = t.kind;
			return { e : hxsl_TExprDef.TVar(a.g), t : t, p : pos};
		default:
			var t1 = t;
			if(hxsl_Tools.isTexture(t1)) {
				var e;
				switch(acc._hx_index) {
				case 0:
					var a1 = acc.a;
					var offs = a1.t == null ? a1.pos : a1.pos >> 2;
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				case 1:
					var a1 = acc.a;
					var stride = acc.stride;
					var delta = acc.delta;
					var index;
					var _g = a1.g.type;
					if(_g._hx_index == 16) {
						var _g1 = _g.t;
						var _g1 = _g.size;
						var _g1 = _g.kind;
						index = 0;
					} else {
						index = a1.t == null ? a1.pos : a1.pos >> 2;
					}
					var offset = _gthis.mkAdd(delta,index,pos);
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				}
				e.t = t1;
				return e;
			} else {
				var size = this.varSize(t,a.t);
				if(size > 4) {
					return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
				}
				var e;
				switch(acc._hx_index) {
				case 0:
					var a1 = acc.a;
					var offs = a1.t == null ? a1.pos : a1.pos >> 2;
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				case 1:
					var a1 = acc.a;
					var stride = acc.stride;
					var delta = acc.delta;
					var index;
					var _g = a1.g.type;
					if(_g._hx_index == 16) {
						var _g1 = _g.t;
						var _g1 = _g.size;
						var _g1 = _g.kind;
						index = 0;
					} else {
						index = a1.t == null ? a1.pos : a1.pos >> 2;
					}
					var offset = _gthis.mkAdd(delta,index,pos);
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				}
				if(size == 4) {
					if(a.pos == -1) {
						return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TFun([]), p : pos},[{ e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0)), t : hxsl_Type.TFloat, p : pos}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : pos};
					}
				} else {
					var sw = [];
					var _g = 0;
					var _g1 = size;
					while(_g < _g1) {
						var i = _g++;
						sw.push(hxsl_Tools.SWIZ[i + (a.pos & 3)]);
					}
					e = { e : hxsl_TExprDef.TSwiz(e,sw), t : t, p : pos};
				}
				switch(t._hx_index) {
				case 1:
					e.t = hxsl_Type.TFloat;
					e = this.toInt(e);
					break;
				case 5:
					if(t.t._hx_index == 0) {
						var size = t.size;
						e.t = hxsl_Type.TVec(size,hxsl_VecType.VFloat);
						e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size - 2]), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
					}
					break;
				default:
				}
				return e;
			}
		}
	}
	,floatBitsToUint: function(e) {
		return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.FloatBitsToUint), t : hxsl_Type.TFun([]), p : e.p},[e]), t : hxsl_Type.TInt, p : e.p};
	}
	,toInt: function(e) {
		if(e.t == hxsl_Type.TInt) {
			return e;
		}
		return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : e.p},[e]), t : hxsl_Type.TInt, p : e.p};
	}
	,optimize: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 8:
			var _g1 = _g.e;
			var _g2 = _g.args;
			var _g3 = _g1.e;
			var _g4 = _g1.p;
			var _g4 = _g1.t;
			if(_g3._hx_index == 2) {
				if(_g3.g._hx_index == 53) {
					if(_g2.length == 1) {
						var _g1 = _g2[0];
						var _g2 = _g1.e;
						var _g3 = _g1.p;
						var _g3 = _g1.t;
						if(_g2._hx_index == 8) {
							var _g1 = _g2.e;
							var _g3 = _g1.e;
							var _g4 = _g1.p;
							var _g4 = _g1.t;
							if(_g3._hx_index == 2) {
								if(_g3.g._hx_index == 52) {
									var args = _g2.args;
									var rem = 0;
									var size = 0;
									while(size < 4) {
										var t = args[args.length - 1 - rem].t;
										size += this.varSize(t,hxsl_VecType.VFloat);
										++rem;
									}
									if(size == 4) {
										var _g1 = 0;
										var _g2 = rem;
										while(_g1 < _g2) {
											var i = _g1++;
											args.pop();
										}
										var emat;
										var _g1 = e.e;
										if(_g1._hx_index == 8) {
											var _g2 = _g1.args;
											var e1 = _g1.e;
											emat = e1;
										} else {
											throw haxe_Exception.thrown("assert");
										}
										return { e : hxsl_TExprDef.TCall(emat,args), t : e.t, p : e.p};
									}
								}
							}
						}
					}
				}
			}
			break;
		case 16:
			var _g1 = _g.e;
			var _g2 = _g.index;
			var _g = _g1.e;
			var _g3 = _g1.p;
			var _g3 = _g1.t;
			if(_g._hx_index == 17) {
				var _g1 = _g2.e;
				var _g3 = _g2.p;
				var _g3 = _g2.t;
				if(_g1._hx_index == 0) {
					var _g2 = _g1.c;
					if(_g2._hx_index == 2) {
						var i = _g2.v;
						var el = _g.el;
						if(i >= 0 && i < el.length) {
							return el[i];
						}
						hxsl_Error.t("Reading outside array bounds",e.p);
					}
				}
			}
			break;
		default:
		}
		return e;
	}
	,packTextures: function(name,vars,t) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Param};
		var pos = 0;
		var samplers = [];
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var count = 1;
			if(!Type.enumEq(v.type,t)) {
				var _g1 = v.type;
				switch(_g1._hx_index) {
				case 15:
					var _g2 = _g1.size;
					if(_g2._hx_index == 0) {
						var n = _g2.v;
						var t2 = _g1.t;
						if(Type.enumEq(t2,t)) {
							count = n;
						} else {
							continue;
						}
					} else {
						continue;
					}
					break;
				case 17:
					var _g3 = _g1.size;
					if(!(t._hx_index == 10 && (t.dim._hx_index == 1 && t.isArray == false))) {
						continue;
					}
					break;
				default:
					continue;
				}
			}
			var a = new hxsl__$Flatten_Alloc(g,null,pos,count);
			a.v = v;
			if(v.qualifiers != null) {
				var _g4 = 0;
				var _g5 = v.qualifiers;
				while(_g4 < _g5.length) {
					var q = _g5[_g4];
					++_g4;
					if(q._hx_index == 12) {
						var name = q.name;
						var _g6 = 0;
						var _g7 = count;
						while(_g6 < _g7) {
							var i = _g6++;
							samplers[pos + i] = name;
						}
					}
				}
			}
			this.varMap.set(v,a);
			alloc.push(a);
			pos += count;
		}
		g.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(pos));
		if(samplers.length > 0) {
			var _g = 0;
			var _g1 = pos;
			while(_g < _g1) {
				var i = _g++;
				if(samplers[i] == null) {
					samplers[i] = "";
				}
			}
			if(g.qualifiers == null) {
				g.qualifiers = [];
			}
			g.qualifiers.push(hxsl_VarQualifier.Sampler(samplers.join(",")));
		}
		if(alloc.length > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return alloc;
	}
	,packBuffers: function(name,vars,kind) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TVoid, kind : hxsl_VarKind.Param};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var _g1 = v.type;
			if(_g1._hx_index == 16) {
				var _g2 = _g1.size;
				if(_g2._hx_index == 0) {
					var size = _g2.v;
					var t = _g1.t;
					var k = _g1.kind;
					if(kind == k) {
						var stride = Math.ceil(hxsl_Tools.size(t) / 4);
						var bt;
						switch(t._hx_index) {
						case 1:case 3:
							var bt1;
							switch(kind._hx_index) {
							case 1:case 2:case 4:case 5:
								bt1 = true;
								break;
							default:
								bt1 = false;
							}
							bt = bt1 ? v.type : hxsl_Type.TBuffer(hxsl_Type.TVec(4,hxsl_VecType.VFloat),hxsl_SizeDecl.SConst(size * stride),k);
							break;
						default:
							bt = hxsl_Type.TBuffer(hxsl_Type.TVec(4,hxsl_VecType.VFloat),hxsl_SizeDecl.SConst(size * stride),k);
						}
						var vbuf = { id : hxsl_Tools.allocVarId(), name : v.name, type : bt, kind : hxsl_VarKind.Param};
						var a = new hxsl__$Flatten_Alloc(vbuf,null,alloc.length,1);
						a.t = hxsl_VecType.VFloat;
						a.v = v;
						alloc.push(a);
						this.varMap.set(v,a);
						this.outVars.push(vbuf);
					}
				}
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TBuffer(hxsl_Type.TVoid,hxsl_SizeDecl.SConst(0),kind),hxsl_SizeDecl.SConst(alloc.length));
		this.allocData.set(g,alloc);
	}
	,pack: function(name,kind,vars,t) {
		var alloc = [];
		var apos = 0;
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TVec(0,t), kind : kind};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var tmp;
			if(!hxsl_Tools.isTexture(v.type)) {
				var _g1 = v.type;
				if(_g1._hx_index == 16) {
					var _g2 = _g1.t;
					var _g3 = _g1.size;
					var _g4 = _g1.kind;
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				continue;
			}
			var _g5 = v.type;
			if(_g5._hx_index == 15) {
				var _g6 = _g5.size;
				var t1 = _g5.t;
				if(hxsl_Tools.isTexture(t1)) {
					continue;
				}
			}
			var size = this.varSize(v.type,t);
			if(size == 0) {
				var a = new hxsl__$Flatten_Alloc(g,t,-1,size);
				a.v = v;
				this.varMap.set(v,a);
				continue;
			}
			var best = null;
			var _g7 = 0;
			while(_g7 < alloc.length) {
				var a1 = alloc[_g7];
				++_g7;
				if(a1.v == null && a1.size >= size && (best == null || best.size > a1.size)) {
					best = a1;
				}
			}
			if(best != null) {
				var free = best.size - size;
				if(free > 0) {
					var i = alloc.indexOf(best);
					var a2 = new hxsl__$Flatten_Alloc(g,t,best.pos + size,free);
					alloc.splice(i + 1,0,a2);
					best.size = size;
				}
				best.v = v;
				this.varMap.set(v,best);
			} else {
				var a3 = new hxsl__$Flatten_Alloc(g,t,apos,size);
				apos += size;
				a3.v = v;
				this.varMap.set(v,a3);
				alloc.push(a3);
				var pad = (4 - size % 4) % 4;
				if(pad > 0) {
					var a4 = new hxsl__$Flatten_Alloc(g,t,apos,pad);
					apos += pad;
					alloc.push(a4);
				}
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TVec(4,t),hxsl_SizeDecl.SConst(apos >> 2));
		if(apos > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return g;
	}
	,varSize: function(v,t) {
		switch(v._hx_index) {
		case 1:case 3:
			if(t == hxsl_VecType.VFloat) {
				return 1;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 5:
			var n = v.size;
			var t2 = v.t;
			if(t == t2) {
				return n;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 7:
			if(t == hxsl_VecType.VFloat) {
				return 16;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 6:case 8:
			if(t == hxsl_VecType.VFloat) {
				return 12;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 9:
			var n = v.size;
			return n;
		case 13:
			var vl = v.vl;
			var size = 0;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				size += this.varSize(v1.type,t);
			}
			return size;
		case 15:
			var _g = v.size;
			if(_g._hx_index == 0) {
				var n = _g.v;
				var at = v.t;
				return this.varSize(at,t) * n;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		default:
			throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
		}
	}
	,varSize4Bytes: function(v,t) {
		switch(v._hx_index) {
		case 9:
			if(v.size == 4) {
				return 1;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " 4 bytes size unknown for type" + Std.string(t));
			}
			break;
		case 13:
			var vl = v.vl;
			var size = 0;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				size += this.varSize4Bytes(v1.type,t);
			}
			return size;
		case 15:
			var _g = v.size;
			if(_g._hx_index == 0) {
				var n = _g.v;
				var at = v.t;
				return this.varSize4Bytes(at,t) * n;
			} else {
				return this.varSize(v,t);
			}
			break;
		default:
			return this.varSize(v,t);
		}
	}
	,addTextureFormat: function(dim,arr,rw) {
		if(rw == null) {
			rw = 0;
		}
		var _g = 0;
		var _g1 = this.textureFormats;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f.dim == dim && f.arr == arr && f.rw == rw) {
				return;
			}
		}
		this.textureFormats.push({ dim : dim, arr : arr, rw : rw});
	}
	,gatherVar: function(v) {
		var _g = v.type;
		switch(_g._hx_index) {
		case 10:
			var dim = _g.dim;
			var arr = _g.isArray;
			var rw;
			var _g1 = v.type;
			if(_g1._hx_index == 11) {
				var _g2 = _g1.dim;
				var _g2 = _g1.isArray;
				var chans = _g1.channels;
				rw = chans;
			} else {
				rw = 0;
			}
			this.addTextureFormat(dim,arr,rw);
			break;
		case 11:
			var _g1 = _g.channels;
			var dim = _g.dim;
			var arr = _g.isArray;
			var rw;
			var _g1 = v.type;
			if(_g1._hx_index == 11) {
				var _g2 = _g1.dim;
				var _g2 = _g1.isArray;
				var chans = _g1.channels;
				rw = chans;
			} else {
				rw = 0;
			}
			this.addTextureFormat(dim,arr,rw);
			break;
		case 13:
			var vl = _g.vl;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.gatherVar(v1);
			}
			return;
		case 15:
			var _g1 = _g.size;
			var type = _g.t;
			switch(type._hx_index) {
			case 10:
				var dim = type.dim;
				var arr = type.isArray;
				this.addTextureFormat(dim,arr,0);
				break;
			case 11:
				var dim = type.dim;
				var arr = type.isArray;
				var chans = type.channels;
				this.addTextureFormat(dim,arr,chans);
				break;
			default:
			}
			break;
		case 17:
			var _g1 = _g.size;
			this.addTextureFormat(hxsl_TexDimension.T2D,false);
			break;
		default:
		}
		switch(v.kind._hx_index) {
		case 0:
			if(hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.PerObject)) {
				this.params.push(v);
			} else {
				this.globals.push(v);
			}
			break;
		case 2:
			this.params.push(v);
			break;
		default:
			this.outVars.push(v);
		}
	}
	,__class__: hxsl_Flatten
};
var hxsl_Globals = function() {
	this.channels = [];
	this.map = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Globals"] = hxsl_Globals;
hxsl_Globals.__name__ = "hxsl.Globals";
hxsl_Globals.allocID = function(path) {
	if(hxsl_Globals.MAP == null) {
		hxsl_Globals.MAP = new haxe_ds_StringMap();
		hxsl_Globals.ALL = [];
	}
	var id = hxsl_Globals.MAP.h[path];
	if(id == null) {
		id = hxsl_Globals.ALL.length;
		hxsl_Globals.ALL.push(path);
		hxsl_Globals.MAP.h[path] = id;
	}
	return id;
};
hxsl_Globals.prototype = {
	set: function(path,v) {
		var this1 = this.map;
		var key = hxsl_Globals.allocID(path);
		this1.h[key] = v;
	}
	,allocChannelID: function(t) {
		var _g = 0;
		var _g1 = this.maxChannels;
		while(_g < _g1) {
			var i = _g++;
			if(this.channels[i] == t) {
				return i;
			}
		}
		if(this.maxChannels == 1 << hxsl_Tools.MAX_CHANNELS_BITS) {
			throw haxe_Exception.thrown("Too many unique channels");
		}
		var i = this.maxChannels++;
		this.channels[i] = t;
		return i;
	}
	,__class__: hxsl_Globals
};
var hxsl_GlslOut = function() {
	this.computeLayout = [1,1,1];
	this.outIndex = 0;
	this.uniformBuffer = 0;
	this.exprIds = 0;
	this.varNames = new haxe_ds_IntMap();
	this.allNames = new haxe_ds_StringMap();
};
$hxClasses["hxsl.GlslOut"] = hxsl_GlslOut;
hxsl_GlslOut.__name__ = "hxsl.GlslOut";
hxsl_GlslOut.prototype = {
	decl: function(s) {
		var _g = 0;
		var _g1 = this.decls;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d == s) {
				return;
			}
		}
		if(HxOverrides.cca(s,0) == 35) {
			this.decls.unshift(s);
		} else {
			this.decls.push(s);
		}
	}
	,getSamplerType: function(dim,arr) {
		var name = "sampler" + HxOverrides.substr($hxEnums[dim.__enum__].__constructs__[dim._hx_index]._hx_name,1,null);
		if(arr) {
			name += "Array";
		}
		return name;
	}
	,addType: function(t) {
		switch(t._hx_index) {
		case 0:
			this.buf.b += Std.string("void");
			break;
		case 1:
			this.buf.b += Std.string("int");
			break;
		case 2:
			this.buf.b += Std.string("bool");
			break;
		case 3:
			this.buf.b += Std.string("float");
			break;
		case 4:
			this.buf.b += Std.string("string");
			break;
		case 5:
			var size = t.size;
			var k = t.t;
			switch(k._hx_index) {
			case 0:
				this.buf.b += Std.string("i");
				break;
			case 1:
				break;
			case 2:
				this.buf.b += Std.string("b");
				break;
			}
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(size);
			break;
		case 6:
			this.buf.b += Std.string("mat3");
			break;
		case 7:
			this.buf.b += Std.string("mat4");
			break;
		case 8:
			this.decl(hxsl_GlslOut.MAT34);
			this.buf.b += Std.string("_mat3x4");
			break;
		case 9:
			var n = t.size;
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(n);
			break;
		case 10:
			var dim = t.dim;
			var arr = t.isArray;
			var name = this.getSamplerType(dim,arr);
			this.buf.b += Std.string(name);
			if(this.glES != null && (arr || dim == hxsl_TexDimension.T3D)) {
				this.decl("precision lowp " + name + ";");
			}
			break;
		case 11:
			var dim = t.dim;
			var arr = t.isArray;
			var chans = t.channels;
			this.buf.b += Std.string("image" + HxOverrides.substr($hxEnums[dim.__enum__].__constructs__[dim._hx_index]._hx_name,1,null) + (arr ? "Array" : ""));
			break;
		case 12:
			this.buf.b += Std.string("mat2");
			break;
		case 13:
			var vl = t.vl;
			this.buf.b += Std.string("struct { ");
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				this.addVar(v);
				this.buf.b += Std.string(";");
			}
			this.buf.b += Std.string(" }");
			break;
		case 14:
			var _g = t.variants;
			this.buf.b += Std.string("function");
			break;
		case 15:
			var t1 = t.t;
			var size = t.size;
			this.addType(t1);
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				var _g = size.v;
				switch(_g) {
				case 0:
					break;
				case 1:
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var v = _g;
						this.buf.b += Std.string(v);
					}
					break;
				default:
					var v = _g;
					this.buf.b += Std.string(v);
				}
				break;
			case 1:
				var v = size.v;
				var v1 = this.varName(v);
				this.buf.b += Std.string(v1);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var _g = t.t;
			var _g = t.size;
			var _g = t.kind;
			throw haxe_Exception.thrown("assert");
		case 17:
			var n = t.size;
			this.buf.b += Std.string("channel" + n);
			break;
		}
	}
	,addVar: function(v) {
		var _g = v.type;
		switch(_g._hx_index) {
		case 15:
			var t = _g.t;
			var size = _g.size;
			var old = v.type;
			v.type = t;
			this.addVar(v);
			v.type = old;
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				var _g1 = size.v;
				switch(_g1) {
				case 0:
					break;
				case 1:
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var n = _g1;
						this.buf.b += Std.string(n);
					}
					break;
				default:
					var n = _g1;
					this.buf.b += Std.string(n);
				}
				break;
			case 1:
				var v1 = size.v;
				var v2 = this.varName(v1);
				this.buf.b += Std.string(v2);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var t = _g.t;
			var size = _g.size;
			var kind = _g.kind;
			switch(kind._hx_index) {
			case 0:case 3:
				break;
			case 1:case 4:
				this.buf.b += Std.string("storage_");
				break;
			case 2:case 5:
				this.buf.b += Std.string("rw_");
				break;
			}
			this.buf.b += Std.string((this.isVertex ? "vertex_" : "") + "uniform_buffer" + this.uniformBuffer++);
			this.buf.b += Std.string(" { ");
			v.type = hxsl_Type.TArray(t,size);
			this.addVar(v);
			v.type = hxsl_Type.TBuffer(t,size,kind);
			this.buf.b += Std.string("; }");
			break;
		default:
			this.addType(v.type);
			this.buf.b += Std.string(" ");
			var v1 = this.varName(v);
			this.buf.b += Std.string(v1);
		}
	}
	,addValue: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var name = "_val" + this.exprIds++;
			var tmp = this.buf;
			this.buf = new StringBuf();
			this.addType(e.t);
			this.buf.b += Std.string(" ");
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("(void)");
			var el2 = el.slice();
			var last = el2[el2.length - 1];
			el2[el2.length - 1] = { e : hxsl_TExprDef.TReturn(last), t : e.t, p : last.p};
			var e2 = { t : hxsl_Type.TVoid, e : hxsl_TExprDef.TBlock(el2), p : e.p};
			this.addExpr(e2,"");
			this.exprValues.push(this.buf.b);
			this.buf = tmp;
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("()");
			break;
		case 10:
			var econd = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			this.buf.b += Std.string("( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(" ) ? ");
			this.addValue(eif,tabs);
			this.buf.b += Std.string(" : ");
			this.addValue(eelse,tabs);
			break;
		case 20:
			var _g1 = _g.m;
			var _g1 = _g.args;
			var e1 = _g.e;
			this.addValue(e1,tabs);
			break;
		default:
			this.addExpr(e,tabs);
		}
	}
	,addBlock: function(e,tabs) {
		this.addExpr(e,tabs);
	}
	,getFunName: function(g,args,rt) {
		switch(g._hx_index) {
		case 20:
			if(rt == hxsl_Type.TInt && this.glES != null) {
				this.decl("int _imod( int x, int y ) { return int(mod(float(x),float(y))); }");
				return "_imod";
			}
			break;
		case 25:
			this.decl("float invLerp(float v, float a, float b) { return clamp((v - a) / (b - a), 0.0, 1.0); }");
			break;
		case 34:
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:
				var _g1 = _g.isArray;
				switch(_g.dim._hx_index) {
				case 1:
					if(this.glES != null && this.glES <= 2) {
						return "texture2D";
					}
					break;
				case 3:
					if(this.glES != null && this.glES <= 2) {
						return "textureCube";
					}
					break;
				default:
				}
				break;
			case 17:
				var _g1 = _g.size;
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			default:
			}
			break;
		case 35:
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:
				var _g1 = _g.isArray;
				switch(_g.dim._hx_index) {
				case 1:
					if(this.glES != null && this.glES <= 2) {
						this.decl("#extension GL_EXT_shader_texture_lod : enable");
						return "texture2DLodEXT";
					}
					break;
				case 3:
					if(this.glES != null && this.glES <= 2) {
						this.decl("#extension GL_EXT_shader_texture_lod : enable");
						return "textureCubeLodEXT";
					}
					break;
				default:
				}
				break;
			case 17:
				var _g1 = _g.size;
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			default:
			}
			break;
		case 36:
			return "texelFetch";
		case 37:
			var sufix = "";
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:
				var dim = _g.dim;
				var arr = _g.isArray;
				var size = hxsl_Tools.getDimSize(dim,arr);
				sufix = arr ? "Array" : "";
				var t = "sampler" + HxOverrides.substr($hxEnums[dim.__enum__].__constructs__[dim._hx_index]._hx_name,1,null) + sufix;
				this.decl("vec" + size + " _texture" + sufix + "Size(" + t + " sampler, int lod) { return vec" + size + "(textureSize(sampler, lod)); }");
				break;
			case 11:
				var _g1 = _g.channels;
				var dim = _g.dim;
				var arr = _g.isArray;
				var size = hxsl_Tools.getDimSize(dim,arr);
				return "vec" + size + "(imageSize";
			case 17:
				var _g1 = _g.size;
				this.decl("vec2 _textureSize(sampler2D sampler, int lod) { return vec2(textureSize(sampler, lod)); }");
				break;
			default:
			}
			return "_texture" + sufix + "Size";
		case 51:
			if(args[0].t == hxsl_Type.TMat3x4) {
				this.decl(hxsl_GlslOut.MAT34);
				this.decl("mat3 _mat3( _mat3x4 v ) { return mat3(v.a.xyz,v.b.xyz,v.c.xyz); }");
				return "_mat3";
			}
			break;
		case 53:
			this.decl(hxsl_GlslOut.MAT34);
			if(args.length == 1) {
				this.decl("_mat3x4 mat_to_34( mat4 m ) { return _mat3x4(m[0],m[1],m[2]); }");
				return "mat_to_34";
			}
			break;
		case 55:
			this.decl("vec4 pack( float v ) { vec4 color = fract(v * vec4(1, 255, 255.*255., 255.*255.*255.)); return color - color.yzww * vec4(1. / 255., 1. / 255., 1. / 255., 0.); }");
			break;
		case 56:
			this.decl("float unpack( vec4 color ) { return dot(color,vec4(1., 1. / 255., 1. / (255. * 255.), 1. / (255. * 255. * 255.))); }");
			break;
		case 57:
			this.decl("vec4 packNormal( vec3 v ) { return vec4((v + vec3(1.)) * vec3(0.5),1.); }");
			break;
		case 58:
			this.decl("vec3 unpackNormal( vec4 v ) { return normalize((v.xyz - vec3(0.5)) * vec3(2.)); }");
			break;
		case 59:
			this.decl("vec2 screenToUv( vec2 v ) { return v * vec2(0.5,-0.5) + vec2(0.5,0.5); }");
			break;
		case 60:
			this.decl("vec2 uvToScreen( vec2 v ) { return v * vec2(2.,-2.) + vec2(-1., 1.); }");
			break;
		case 61:case 62:case 63:
			if(this.isVertex) {
				throw haxe_Exception.thrown("Can't use " + Std.string(g) + " in vertex shader");
			}
			if(this.version < 300) {
				this.decl("#extension GL_OES_standard_derivatives:enable");
			}
			break;
		case 74:
			if(this.version < 330) {
				this.decl("#extension GL_ARB_shader_bit_encoding :enable");
			}
			this.decl("int _floatBitsToUint( float v) { return int(floatBitsToUint(v)); }");
			this.decl("ivec2 _floatBitsToUint( vec2 v ) { return ivec2(floatBitsToUint(v)); }");
			this.decl("ivec3 _floatBitsToUint( vec3 v ) { return ivec3(floatBitsToUint(v)); }");
			this.decl("ivec4 _floatBitsToUint( vec4 v ) { return ivec4(floatBitsToUint(v)); }");
			break;
		case 73:case 75:
			if(this.version < 330) {
				this.decl("#extension GL_ARB_shader_bit_encoding :enable");
			}
			break;
		case 76:
			if(this.version < 330) {
				this.decl("#extension GL_ARB_shader_bit_encoding :enable");
			}
			this.decl("float _uintBitsToFloat( int v ) { return uintBitsToFloat(uint(v)); }");
			this.decl("vec2 _uintBitsToFloat( ivec2 v ) { return uintBitsToFloat(uvec2(v)); }");
			this.decl("vec3 _uintBitsToFloat( ivec3 v ) { return uintBitsToFloat(uvec3(v)); }");
			this.decl("vec4 _uintBitsToFloat( ivec4 v ) { return uintBitsToFloat(uvec4(v)); }");
			break;
		default:
		}
		return hxsl_GlslOut.GLOBALS[g._hx_index];
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 0:
				this.buf.b += Std.string("null");
				break;
			case 1:
				var b = c.b;
				this.buf.b += Std.string(b);
				break;
			case 2:
				var v = c.v;
				this.buf.b += Std.string(v);
				break;
			case 3:
				var f = c.v;
				var str = "" + f;
				this.buf.b += Std.string(str);
				if(str.indexOf(".") == -1 && str.indexOf("e") == -1) {
					this.buf.b += Std.string(".");
				}
				break;
			case 4:
				var v = c.v;
				this.buf.b += Std.string("\"" + v + "\"");
				break;
			}
			break;
		case 1:
			var v = _g.v;
			var v1 = this.varName(v);
			this.buf.b += Std.string(v1);
			break;
		case 2:
			var g = _g.g;
			this.buf.b += Std.string(hxsl_GlslOut.GLOBALS[g._hx_index]);
			break;
		case 3:
			var e1 = _g.e;
			this.buf.b += Std.string("(");
			this.addValue(e1,tabs);
			this.buf.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buf.b += Std.string("{\n");
			var t2 = tabs + "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				this.buf.b += Std.string(t2);
				this.addExpr(e1,t2);
				this.newLine(e1);
			}
			this.buf.b += Std.string(tabs);
			this.buf.b += Std.string("}");
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			var _g1 = e1.t;
			var _g2 = e2.t;
			switch(op._hx_index) {
			case 1:
				if(_g1._hx_index == 5) {
					if(_g1.size == 3) {
						if(_g1.t._hx_index == 1) {
							if(_g2._hx_index == 8) {
								this.decl(hxsl_GlslOut.MAT34);
								this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
								var tmp;
								if(op._hx_index == 20) {
									var _g3 = op.op;
									tmp = true;
								} else {
									tmp = false;
								}
								if(tmp) {
									this.addValue(e1,tabs);
									this.buf.b += Std.string(" = ");
								}
								this.buf.b += Std.string("m3x4mult(");
								this.addValue(e1,tabs);
								this.buf.b += Std.string(",");
								this.addValue(e2,tabs);
								this.buf.b += Std.string(")");
							} else {
								this.addValue(e1,tabs);
								this.buf.b += Std.string(" ");
								var v = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v);
								this.buf.b += Std.string(" ");
								this.addValue(e2,tabs);
							}
						} else {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" ");
							var v = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v);
							this.buf.b += Std.string(" ");
							this.addValue(e2,tabs);
						}
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 5:
				if(_g1._hx_index == 5) {
					var _g3 = _g1.t;
					if(_g2._hx_index == 5) {
						var _g3 = _g2.size;
						var _g3 = _g2.t;
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 6:
				if(_g1._hx_index == 5) {
					var _g3 = _g1.t;
					if(_g2._hx_index == 5) {
						var _g3 = _g2.size;
						var _g3 = _g2.t;
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 7:
				if(_g1._hx_index == 5) {
					var _g3 = _g1.t;
					if(_g2._hx_index == 5) {
						var _g3 = _g2.size;
						var _g3 = _g2.t;
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 8:
				if(_g1._hx_index == 5) {
					var _g3 = _g1.t;
					if(_g2._hx_index == 5) {
						var _g3 = _g2.size;
						var _g3 = _g2.t;
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 9:
				if(_g1._hx_index == 5) {
					var _g3 = _g1.t;
					if(_g2._hx_index == 5) {
						var _g3 = _g2.size;
						var _g3 = _g2.t;
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 10:
				if(_g1._hx_index == 5) {
					var _g3 = _g1.t;
					if(_g2._hx_index == 5) {
						var _g3 = _g2.size;
						var _g3 = _g2.t;
						var n = _g1.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 18:
				this.decl("int _ushr( int i, int j ) { return int(uint(i) >> uint(j)); }");
				this.buf.b += Std.string("_ushr(");
				this.addValue(e1,tabs);
				this.buf.b += Std.string(",");
				this.addValue(e2,tabs);
				this.buf.b += Std.string(")");
				break;
			case 19:
				if(e.t != hxsl_Type.TInt) {
					var tmp;
					if(op._hx_index == 20) {
						var _g3 = op.op;
						tmp = true;
					} else {
						tmp = false;
					}
					if(tmp) {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" = ");
					}
					this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e1,e2]), t : e.t, p : e.p},tabs);
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 20:
				switch(op.op._hx_index) {
				case 1:
					if(_g1._hx_index == 5) {
						if(_g1.size == 3) {
							if(_g1.t._hx_index == 1) {
								if(_g2._hx_index == 8) {
									this.decl(hxsl_GlslOut.MAT34);
									this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
									var tmp;
									if(op._hx_index == 20) {
										var _g1 = op.op;
										tmp = true;
									} else {
										tmp = false;
									}
									if(tmp) {
										this.addValue(e1,tabs);
										this.buf.b += Std.string(" = ");
									}
									this.buf.b += Std.string("m3x4mult(");
									this.addValue(e1,tabs);
									this.buf.b += Std.string(",");
									this.addValue(e2,tabs);
									this.buf.b += Std.string(")");
								} else {
									this.addValue(e1,tabs);
									this.buf.b += Std.string(" ");
									var v = hxsl_Printer.opStr(op);
									this.buf.b += Std.string(v);
									this.buf.b += Std.string(" ");
									this.addValue(e2,tabs);
								}
							} else {
								this.addValue(e1,tabs);
								this.buf.b += Std.string(" ");
								var v = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v);
								this.buf.b += Std.string(" ");
								this.addValue(e2,tabs);
							}
						} else {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" ");
							var v = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v);
							this.buf.b += Std.string(" ");
							this.addValue(e2,tabs);
						}
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
					break;
				case 19:
					if(e.t != hxsl_Type.TInt) {
						var tmp;
						if(op._hx_index == 20) {
							var _g1 = op.op;
							tmp = true;
						} else {
							tmp = false;
						}
						if(tmp) {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" = ");
						}
						this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e1,e2]), t : e.t, p : e.p},tabs);
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
					break;
				default:
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			default:
				this.addValue(e1,tabs);
				this.buf.b += Std.string(" ");
				var v = hxsl_Printer.opStr(op);
				this.buf.b += Std.string(v);
				this.buf.b += Std.string(" ");
				this.addValue(e2,tabs);
			}
			break;
		case 6:
			var op = _g.op;
			var e1 = _g.e1;
			var v;
			switch(op._hx_index) {
			case 0:
				v = "++";
				break;
			case 1:
				v = "--";
				break;
			case 2:
				v = "!";
				break;
			case 3:
				v = "-";
				break;
			case 4:
				v = "~";
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			this.buf.b += Std.string(v);
			this.addValue(e1,tabs);
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			this.locals.h[v.id] = v;
			if(init != null) {
				var v1 = this.varName(v);
				this.buf.b += Std.string(v1);
				this.buf.b += Std.string(" = ");
				this.addValue(init,tabs);
			} else {
				this.buf.b += Std.string("/*var*/");
			}
			break;
		case 8:
			var _g1 = _g.e;
			var _g2 = _g.args;
			var _g3 = _g1.e;
			var _g4 = _g1.p;
			var _g4 = _g1.t;
			if(_g3._hx_index == 2) {
				var _g4 = _g3.g;
				switch(_g4._hx_index) {
				case 36:
					var g = _g4;
					var args = _g2;
					var v = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string("(");
					this.addValue(args[0],tabs);
					this.buf.b += Std.string(", ");
					this.addValue(args[1],tabs);
					if(args.length != 2) {
						this.buf.b += Std.string(", ");
						this.addValue(args[2],tabs);
						this.buf.b += Std.string(")");
					} else {
						this.buf.b += Std.string(", 0)");
					}
					break;
				case 37:
					var g = _g4;
					var args = _g2;
					var v = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string("(");
					this.addValue(args[0],tabs);
					if(args.length != 1) {
						this.buf.b += Std.string(", ");
						this.addValue(args[1],tabs);
						this.buf.b += Std.string(")");
					} else {
						var _g3 = args[0].t;
						var tmp;
						if(_g3._hx_index == 11) {
							var _g4 = _g3.dim;
							var _g4 = _g3.isArray;
							var _g4 = _g3.channels;
							tmp = true;
						} else {
							tmp = false;
						}
						if(tmp) {
							this.buf.b += Std.string("))");
						} else {
							this.buf.b += Std.string(", 0)");
						}
					}
					break;
				case 54:
					if(_g2.length == 1) {
						var e1 = _g2[0];
						this.buf.b += Std.string("clamp(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(", 0., 1.)");
					} else {
						var v = _g1;
						var args = _g2;
						var _g3 = v.e;
						if(_g3._hx_index == 2) {
							var g = _g3.g;
							var v1 = this.getFunName(g,args,e.t);
							this.buf.b += Std.string(v1);
						} else {
							this.addValue(v,tabs);
						}
						this.buf.b += Std.string("(");
						var first = true;
						var _g3 = 0;
						while(_g3 < args.length) {
							var e1 = args[_g3];
							++_g3;
							if(first) {
								first = false;
							} else {
								this.buf.b += Std.string(", ");
							}
							this.addValue(e1,tabs);
						}
						this.buf.b += Std.string(")");
					}
					break;
				case 78:
					break;
				case 79:
					if(_g2.length == 3) {
						var tex = _g2[0];
						var uv = _g2[1];
						var color = _g2[2];
						var chans;
						var _g3 = tex.t;
						if(_g3._hx_index == 11) {
							var _g4 = _g3.dim;
							var _g4 = _g3.isArray;
							var chans1 = _g3.channels;
							chans = chans1;
						} else {
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string("imageStore(");
						this.addValue(tex,tabs);
						this.buf.b += Std.string(",");
						this.addValue(uv,tabs);
						this.buf.b += Std.string(",");
						if(chans != 4) {
							this.buf.b += Std.string("(");
						}
						this.addValue(color,tabs);
						if(chans != 4) {
							this.buf.b += Std.string(")" + (chans == 1 ? ".xx" : ".xyyy"));
						}
						this.buf.b += Std.string(")");
					} else {
						var v = _g1;
						var args = _g2;
						var _g3 = v.e;
						if(_g3._hx_index == 2) {
							var g = _g3.g;
							var v1 = this.getFunName(g,args,e.t);
							this.buf.b += Std.string(v1);
						} else {
							this.addValue(v,tabs);
						}
						this.buf.b += Std.string("(");
						var first = true;
						var _g3 = 0;
						while(_g3 < args.length) {
							var e1 = args[_g3];
							++_g3;
							if(first) {
								first = false;
							} else {
								this.buf.b += Std.string(", ");
							}
							this.addValue(e1,tabs);
						}
						this.buf.b += Std.string(")");
					}
					break;
				case 84:
					var args = _g2;
					this.buf.b += Std.string("atomicAdd(");
					this.addValue(args[0],tabs);
					this.buf.b += Std.string("[");
					this.addValue(args[1],tabs);
					this.buf.b += Std.string("],");
					this.addValue(args[2],tabs);
					this.buf.b += Std.string(")");
					break;
				default:
					var v = _g1;
					var args = _g2;
					var _g3 = v.e;
					if(_g3._hx_index == 2) {
						var g = _g3.g;
						var v1 = this.getFunName(g,args,e.t);
						this.buf.b += Std.string(v1);
					} else {
						this.addValue(v,tabs);
					}
					this.buf.b += Std.string("(");
					var first = true;
					var _g3 = 0;
					while(_g3 < args.length) {
						var e1 = args[_g3];
						++_g3;
						if(first) {
							first = false;
						} else {
							this.buf.b += Std.string(", ");
						}
						this.addValue(e1,tabs);
					}
					this.buf.b += Std.string(")");
				}
			} else {
				var v = _g1;
				var args = _g2;
				var _g1 = v.e;
				if(_g1._hx_index == 2) {
					var g = _g1.g;
					var v1 = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v1);
				} else {
					this.addValue(v,tabs);
				}
				this.buf.b += Std.string("(");
				var first = true;
				var _g1 = 0;
				while(_g1 < args.length) {
					var e1 = args[_g1];
					++_g1;
					if(first) {
						first = false;
					} else {
						this.buf.b += Std.string(", ");
					}
					this.addValue(e1,tabs);
				}
				this.buf.b += Std.string(")");
			}
			break;
		case 9:
			var e1 = _g.e;
			var regs = _g.regs;
			if(e1.t._hx_index == 3) {
				var _g1 = 0;
				while(_g1 < regs.length) {
					var r = regs[_g1];
					++_g1;
					if(r != hxsl_Component.X) {
						throw haxe_Exception.thrown("assert");
					}
				}
				switch(regs.length) {
				case 1:
					this.addValue(e1,tabs);
					break;
				case 2:
					this.decl("vec2 _vec2( float v ) { return vec2(v,v); }");
					this.buf.b += Std.string("_vec2(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				case 3:
					this.decl("vec3 _vec3( float v ) { return vec3(v,v,v); }");
					this.buf.b += Std.string("_vec3(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				case 4:
					this.decl("vec4 _vec4( float v ) { return vec4(v,v,v,v); }");
					this.buf.b += Std.string("_vec4(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
			} else {
				this.addValue(e1,tabs);
				this.buf.b += Std.string(".");
				var _g1 = 0;
				while(_g1 < regs.length) {
					var r = regs[_g1];
					++_g1;
					var _this = this.buf;
					var _this1 = _this.b;
					var tmp;
					switch(r._hx_index) {
					case 0:
						tmp = "x";
						break;
					case 1:
						tmp = "y";
						break;
					case 2:
						tmp = "z";
						break;
					case 3:
						tmp = "w";
						break;
					}
					_this.b = _this1 + Std.string(tmp);
				}
			}
			break;
		case 10:
			var econd = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			this.buf.b += Std.string("if( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(") ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				if(!this.isBlock(eif)) {
					this.buf.b += Std.string(";");
				}
				this.buf.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buf.b += Std.string("discard");
			break;
		case 12:
			var e1 = _g.e;
			if(e1 == null) {
				this.buf.b += Std.string("return");
			} else {
				this.buf.b += Std.string("return ");
				this.addValue(e1,tabs);
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			this.locals.h[v.id] = v;
			var _g1 = it.e;
			if(_g1._hx_index == 5) {
				if(_g1.op._hx_index == 21) {
					var e1 = _g1.e1;
					var e2 = _g1.e2;
					this.buf.b += Std.string("for(");
					this.buf.b += Std.string(v.name + "=");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(";" + v.name + "<");
					this.addValue(e2,tabs);
					this.buf.b += Std.string(";" + v.name + "++) ");
					this.addBlock(loop,tabs);
				} else {
					throw haxe_Exception.thrown("assert");
				}
			} else {
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 14:
			this.buf.b += Std.string("continue");
			break;
		case 15:
			this.buf.b += Std.string("break");
			break;
		case 16:
			var e1 = _g.e;
			var index = _g.index;
			this.addValue(e1,tabs);
			this.buf.b += Std.string("[");
			this.addValue(index,tabs);
			this.buf.b += Std.string("]");
			break;
		case 17:
			var el = _g.el;
			var _g1 = e.t;
			if(_g1._hx_index == 15) {
				var _g2 = _g1.size;
				var t = _g1.t;
				this.addType(t);
			} else {
				throw haxe_Exception.thrown("assert");
			}
			this.buf.b += Std.string("[" + el.length + "]");
			this.buf.b += Std.string("(");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buf.b += Std.string(", ");
				}
				this.addValue(e,tabs);
			}
			this.buf.b += Std.string(")");
			break;
		case 18:
			var _g1 = _g.e;
			var _g1 = _g.cases;
			var _g1 = _g.def;
			this.buf.b += Std.string("switch(...)");
			break;
		case 19:
			var _g1 = _g.e;
			var _g2 = _g.loop;
			if(_g.normalWhile == false) {
				var loop = _g2;
				var e = _g1;
				var old = tabs;
				tabs += "\t";
				this.buf.b += Std.string("do ");
				this.addBlock(loop,tabs);
				this.buf.b += Std.string(" while( ");
				this.addValue(e,tabs);
				this.buf.b += Std.string(" )");
			} else {
				var loop = _g2;
				var e = _g1;
				this.buf.b += Std.string("while( ");
				this.addValue(e,tabs);
				this.buf.b += Std.string(" ) ");
				this.addBlock(loop,tabs);
			}
			break;
		case 20:
			var _g1 = _g.m;
			var _g1 = _g.args;
			var e = _g.e;
			this.addExpr(e,tabs);
			break;
		case 21:
			var val = _g.e;
			var name = _g.name;
			this.addExpr(val,tabs);
			this.buf.b += Std.string(".");
			this.buf.b += Std.string(name);
			break;
		case 22:
			var _g1 = _g.code;
			var _g2 = _g.args;
			switch(_g.target) {
			case "code":case "glsl":
				var code = _g1;
				var args = _g2;
				var pos = 0;
				var argRegex = new EReg("{(\\d+)}","g");
				while(argRegex.matchSub(code,pos)) {
					var matchPos = argRegex.matchedPos();
					this.buf.b += Std.string(code.substring(pos,matchPos.pos));
					var index = Std.parseInt(argRegex.matched(1));
					if(index < args.length) {
						this.addValue(args[index].e,tabs);
					}
					pos = matchPos.pos + matchPos.len;
				}
				this.buf.b += Std.string(HxOverrides.substr(code,pos,null));
				break;
			default:
			}
			break;
		}
	}
	,varName: function(v) {
		if(v.kind == hxsl_VarKind.Output) {
			if(this.isVertex) {
				return "gl_Position";
			}
			if(this.glES != null && this.glES <= 2) {
				if(this.outIndexes == null) {
					return "gl_FragColor";
				}
				return "gl_FragData[" + this.outIndexes.h[v.id] + "]";
			}
		}
		var n = this.varNames.h[v.id];
		if(n != null) {
			return n;
		}
		n = v.name;
		if(v.kind == hxsl_VarKind.Var) {
			n += "_varying";
		}
		if(Object.prototype.hasOwnProperty.call(hxsl_GlslOut.KWDS.h,n)) {
			n = "_" + n;
		}
		if(Object.prototype.hasOwnProperty.call(this.allNames.h,n)) {
			var k = 2;
			n += "_";
			while(Object.prototype.hasOwnProperty.call(this.allNames.h,n + k)) ++k;
			n += k;
		}
		this.varNames.h[v.id] = n;
		this.allNames.h[n] = v.id;
		return n;
	}
	,newLine: function(e) {
		if(this.isBlock(e)) {
			this.buf.b += Std.string("\n");
		} else {
			this.buf.b += Std.string(";\n");
		}
	}
	,isBlock: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var _g1 = _g.el;
			return true;
		case 13:
			var _g1 = _g.v;
			var _g1 = _g.it;
			var loop = _g.loop;
			return this.isBlock(loop);
		case 19:
			var _g1 = _g.e;
			if(_g.normalWhile == true) {
				var loop = _g.loop;
				return this.isBlock(loop);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	,initVar: function(v) {
		switch(v.kind._hx_index) {
		case 0:case 2:
			var _g = v.type;
			switch(_g._hx_index) {
			case 15:
				var _g1 = _g.t;
				var _g2 = _g.size;
				if(_g1._hx_index == 11) {
					var _g2 = _g1.dim;
					var _g2 = _g1.isArray;
					var chans = _g1.channels;
					var format = HxOverrides.substr("rgba",0,chans);
					this.buf.b += Std.string("layout(" + format + "32f) uniform ");
				} else {
					this.buf.b += Std.string("uniform ");
				}
				break;
			case 16:
				var _g1 = _g.t;
				var _g1 = _g.size;
				var _g1 = _g.kind;
				switch(_g1._hx_index) {
				case 1:case 4:
					if(this.version < 430) {
						throw haxe_Exception.thrown("SSBO are available since version 4.3");
					}
					this.buf.b += Std.string("layout(std430) readonly buffer ");
					break;
				case 2:case 5:
					if(this.version < 430) {
						throw haxe_Exception.thrown("SSBO are available since version 4.3");
					}
					this.buf.b += Std.string("layout(std430) buffer ");
					break;
				default:
					var kind = _g1;
					this.buf.b += Std.string("layout(std140) ");
					switch(kind._hx_index) {
					case 0:case 3:
						this.buf.b += Std.string("uniform ");
						break;
					default:
						throw haxe_Exception.thrown("assert");
					}
				}
				break;
			default:
				this.buf.b += Std.string("uniform ");
			}
			break;
		case 1:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "attribute " : "in ");
			break;
		case 3:
			if(hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Flat)) {
				this.buf.b += Std.string("flat ");
			}
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "varying " : this.isVertex ? "out " : "in ");
			break;
		case 4:
			break;
		case 5:
			if(this.glES != null && this.glES <= 2) {
				this.outIndexes.h[v.id] = this.outIndex++;
				return;
			}
			if(this.isVertex) {
				return;
			}
			if(this.glES != null) {
				this.buf.b += Std.string("layout(location=" + this.outIndex++ + ") ");
			}
			this.buf.b += Std.string("out ");
			break;
		case 6:
			return;
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q._hx_index == 6) {
					var p = q.p;
					switch(p._hx_index) {
					case 0:
						this.buf.b += Std.string("lowp ");
						break;
					case 1:
						this.buf.b += Std.string("mediump ");
						break;
					case 2:
						this.buf.b += Std.string("highp ");
						break;
					}
				}
			}
		}
		this.addVar(v);
		this.buf.b += Std.string(";\n");
	}
	,initVars: function(s) {
		this.outIndex = 0;
		this.uniformBuffer = 0;
		this.outIndexes = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.initVar(v);
		}
		this.buf.b += Std.string("\n");
		if(this.outIndex < 2) {
			this.outIndexes = null;
		} else if(!this.isVertex && (this.glES != null && this.glES <= 2)) {
			this.decl("#extension GL_EXT_draw_buffers : enable");
		}
	}
	,collectGlobals: function(m,e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 2:
			var g = _g.g;
			m.set(g,true);
			break;
		case 8:
			var _g1 = _g.e;
			var _g2 = _g.args;
			var _g = _g1.e;
			var _g3 = _g1.p;
			var _g3 = _g1.t;
			if(_g._hx_index == 2) {
				if(_g.g._hx_index == 78) {
					switch(_g2.length) {
					case 1:
						var _g = _g2[0];
						var _g1 = _g.e;
						var _g3 = _g.p;
						var _g3 = _g.t;
						if(_g1._hx_index == 0) {
							var _g = _g1.c;
							if(_g._hx_index == 2) {
								var x = _g.v;
								this.computeLayout = [x,1,1];
							} else {
								var _g = this;
								var m1 = m;
								hxsl_Tools.iter(e,function(e) {
									_g.collectGlobals(m1,e);
								});
							}
						} else {
							var _g1 = this;
							var m2 = m;
							hxsl_Tools.iter(e,function(e) {
								_g1.collectGlobals(m2,e);
							});
						}
						break;
					case 2:
						var _g3 = _g2[0];
						var _g4 = _g2[1];
						var _g5 = _g3.e;
						var _g6 = _g3.p;
						var _g6 = _g3.t;
						if(_g5._hx_index == 0) {
							var _g3 = _g5.c;
							if(_g3._hx_index == 2) {
								var _g5 = _g4.e;
								var _g6 = _g4.p;
								var _g6 = _g4.t;
								if(_g5._hx_index == 0) {
									var _g4 = _g5.c;
									if(_g4._hx_index == 2) {
										var y = _g4.v;
										var x = _g3.v;
										this.computeLayout = [x,y,1];
									} else {
										var _g3 = this;
										var m3 = m;
										hxsl_Tools.iter(e,function(e) {
											_g3.collectGlobals(m3,e);
										});
									}
								} else {
									var _g4 = this;
									var m4 = m;
									hxsl_Tools.iter(e,function(e) {
										_g4.collectGlobals(m4,e);
									});
								}
							} else {
								var _g5 = this;
								var m5 = m;
								hxsl_Tools.iter(e,function(e) {
									_g5.collectGlobals(m5,e);
								});
							}
						} else {
							var _g6 = this;
							var m6 = m;
							hxsl_Tools.iter(e,function(e) {
								_g6.collectGlobals(m6,e);
							});
						}
						break;
					case 3:
						var _g7 = _g2[0];
						var _g8 = _g2[1];
						var _g9 = _g2[2];
						var _g2 = _g7.e;
						var _g10 = _g7.p;
						var _g10 = _g7.t;
						if(_g2._hx_index == 0) {
							var _g7 = _g2.c;
							if(_g7._hx_index == 2) {
								var _g2 = _g8.e;
								var _g10 = _g8.p;
								var _g10 = _g8.t;
								if(_g2._hx_index == 0) {
									var _g8 = _g2.c;
									if(_g8._hx_index == 2) {
										var _g2 = _g9.e;
										var _g10 = _g9.p;
										var _g10 = _g9.t;
										if(_g2._hx_index == 0) {
											var _g9 = _g2.c;
											if(_g9._hx_index == 2) {
												var z = _g9.v;
												var x = _g7.v;
												var y = _g8.v;
												this.computeLayout = [x,y,z];
											} else {
												var _g2 = this;
												var m7 = m;
												hxsl_Tools.iter(e,function(e) {
													_g2.collectGlobals(m7,e);
												});
											}
										} else {
											var _g7 = this;
											var m8 = m;
											hxsl_Tools.iter(e,function(e) {
												_g7.collectGlobals(m8,e);
											});
										}
									} else {
										var _g8 = this;
										var m9 = m;
										hxsl_Tools.iter(e,function(e) {
											_g8.collectGlobals(m9,e);
										});
									}
								} else {
									var _g9 = this;
									var m10 = m;
									hxsl_Tools.iter(e,function(e) {
										_g9.collectGlobals(m10,e);
									});
								}
							} else {
								var _g10 = this;
								var m11 = m;
								hxsl_Tools.iter(e,function(e) {
									_g10.collectGlobals(m11,e);
								});
							}
						} else {
							var _g11 = this;
							var m12 = m;
							hxsl_Tools.iter(e,function(e) {
								_g11.collectGlobals(m12,e);
							});
						}
						break;
					default:
						var _g12 = this;
						var m13 = m;
						hxsl_Tools.iter(e,function(e) {
							_g12.collectGlobals(m13,e);
						});
					}
				} else {
					var _g13 = this;
					var m14 = m;
					hxsl_Tools.iter(e,function(e) {
						_g13.collectGlobals(m14,e);
					});
				}
			} else {
				var _g14 = this;
				var m15 = m;
				hxsl_Tools.iter(e,function(e) {
					_g14.collectGlobals(m15,e);
				});
			}
			break;
		default:
			var _g15 = this;
			var m16 = m;
			hxsl_Tools.iter(e,function(e) {
				_g15.collectGlobals(m16,e);
			});
		}
	}
	,run: function(s) {
		var foundGlobals = new haxe_ds_EnumValueMap();
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.collectGlobals(foundGlobals,f.expr);
		}
		this.locals = new haxe_ds_IntMap();
		this.decls = [];
		this.buf = new StringBuf();
		this.exprValues = [];
		if(s.funs.length != 1) {
			throw haxe_Exception.thrown("assert");
		}
		var f = s.funs[0];
		this.isVertex = f.kind == hxsl_FunctionKind.Vertex;
		this.isCompute = f.kind == hxsl_FunctionKind.Main;
		if(!this.isCompute) {
			if(this.isVertex) {
				this.decl("precision highp float;");
			} else {
				this.decl("precision mediump float;");
			}
		}
		this.initVars(s);
		if(this.isCompute) {
			this.decl("layout(local_size_x = " + this.computeLayout[0] + ", local_size_y = " + this.computeLayout[1] + ", local_size_z = " + this.computeLayout[2] + ") in;");
		}
		var tmp = this.buf;
		this.buf = new StringBuf();
		this.buf.b += Std.string("void main(void) {\n");
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			var _g = 0;
			while(_g < el.length) {
				var e = el[_g];
				++_g;
				this.buf.b += Std.string("\t");
				this.addExpr(e,"\t");
				this.newLine(e);
			}
		} else {
			this.addExpr(f.expr,"");
		}
		if(this.isVertex) {
			this.buf.b += Std.string("\tgl_Position.z += gl_Position.z - gl_Position.w;\n");
		}
		this.buf.b += Std.string("}");
		this.exprValues.push(this.buf.b);
		this.buf = tmp;
		var locals = Lambda.array(this.locals);
		locals.sort(function(v1,v2) {
			return Reflect.compare(v1.name,v2.name);
		});
		var _g = 0;
		while(_g < locals.length) {
			var v = locals[_g];
			++_g;
			this.addVar(v);
			this.buf.b += Std.string(";\n");
		}
		this.buf.b += Std.string("\n");
		var _g = 0;
		var _g1 = this.exprValues;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			this.buf.b += Std.string(e);
			this.buf.b += Std.string("\n\n");
		}
		if(this.glES != null) {
			this.decl("#version " + (this.version < 100 ? 100 : this.version) + (this.version > 150 ? " es" : ""));
		} else if(this.isCompute || this.version >= 430) {
			this.decl("#version 430");
		} else if(this.version != null) {
			this.decl("#version " + (this.version > 150 ? 150 : this.version));
		} else {
			this.decl("#version 130");
		}
		this.decls.push(this.buf.b);
		this.buf = null;
		return this.decls.join("\n");
	}
	,__class__: hxsl_GlslOut
};
var hxsl__$Linker_AllocatedVar = function() {
};
$hxClasses["hxsl._Linker.AllocatedVar"] = hxsl__$Linker_AllocatedVar;
hxsl__$Linker_AllocatedVar.__name__ = "hxsl._Linker.AllocatedVar";
hxsl__$Linker_AllocatedVar.prototype = {
	__class__: hxsl__$Linker_AllocatedVar
};
var hxsl__$Linker_ShaderInfos = function(n,v) {
	this.name = n;
	this.uid = hxsl__$Linker_ShaderInfos.UID++;
	this.vertex = v;
	this.processed = new haxe_ds_IntMap();
	this.usedFunctions = [];
	this.readMap = new haxe_ds_IntMap();
	this.readVars = [];
	this.writeMap = new haxe_ds_IntMap();
	this.writeVars = [];
};
$hxClasses["hxsl._Linker.ShaderInfos"] = hxsl__$Linker_ShaderInfos;
hxsl__$Linker_ShaderInfos.__name__ = "hxsl._Linker.ShaderInfos";
hxsl__$Linker_ShaderInfos.prototype = {
	__class__: hxsl__$Linker_ShaderInfos
};
var hxsl_Linker = function(mode) {
	this.debugDepth = 0;
	this.mode = mode;
};
$hxClasses["hxsl.Linker"] = hxsl_Linker;
hxsl_Linker.__name__ = "hxsl.Linker";
hxsl_Linker.prototype = {
	error: function(msg,p) {
		return hxsl_Error.t(msg,p);
	}
	,mergeVar: function(path,v,v2,p,shaderName) {
		switch(v.kind._hx_index) {
		case 2:
			if(!(shaderName != null && hxsl_Tools.hasBorrowQualifier(v2,shaderName))) {
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 0:case 1:case 3:case 4:case 5:
			break;
		case 6:
			throw haxe_Exception.thrown("assert");
		}
		if(v.kind != v2.kind && v.kind != hxsl_VarKind.Local && v2.kind != hxsl_VarKind.Local) {
			this.error("'" + path + "' kind does not match : " + Std.string(v.kind) + " should be " + Std.string(v2.kind),p);
		}
		var _g = v.type;
		var _g1 = v2.type;
		if(_g._hx_index == 13) {
			if(_g1._hx_index == 13) {
				var fl2 = _g1.vl;
				var fl1 = _g.vl;
				var _g = 0;
				while(_g < fl1.length) {
					var f1 = fl1[_g];
					++_g;
					var ft = null;
					var _g1 = 0;
					while(_g1 < fl2.length) {
						var f2 = fl2[_g1];
						++_g1;
						if(f1.name == f2.name) {
							ft = f2;
							break;
						}
					}
					if(ft == null) {
						fl2.push(this.allocVar(f1,p,shaderName).v);
					} else {
						this.mergeVar(path + "." + ft.name,f1,ft,p,shaderName);
					}
				}
			} else if(!Type.enumEq(v.type,v2.type)) {
				this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
			}
		} else if(!Type.enumEq(v.type,v2.type)) {
			this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
		}
	}
	,allocVar: function(v,p,shaderName,path,parent) {
		var _gthis = this;
		if(v.parent != null && parent == null) {
			parent = this.allocVar(v.parent,p,shaderName);
			var p1 = parent.v;
			path = p1.name;
			p1 = p1.parent;
			while(p1 != null) {
				path = p1.name + "." + path;
				p1 = p1.parent;
			}
		}
		var key = path == null ? v.name : path + "." + v.name;
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q._hx_index == 4) {
					var n = q.n;
					key = n;
				}
			}
		}
		var ukey = key.toLowerCase();
		var v2 = this.varMap.h[ukey];
		var vname = v.name;
		if(v2 != null) {
			var _g = 0;
			var _g1 = v2.merged;
			while(_g < _g1.length) {
				var vm = _g1[_g];
				++_g;
				if(vm == v) {
					return v2;
				}
			}
			var tmp;
			var borrowed = hxsl_Tools.hasBorrowQualifier(v2.v,shaderName);
			if(!(v.kind == hxsl_VarKind.Param && !borrowed && !hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v.kind == hxsl_VarKind.Function || (v.kind == hxsl_VarKind.Var || v.kind == hxsl_VarKind.Local) && hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Private))) {
				var v1 = v2.v;
				var borrowed = hxsl_Tools.hasBorrowQualifier(v,v2.rootShaderName);
				tmp = v1.kind == hxsl_VarKind.Param && !borrowed && !hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v1.kind == hxsl_VarKind.Function || (v1.kind == hxsl_VarKind.Var || v1.kind == hxsl_VarKind.Local) && hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Private);
			} else {
				tmp = true;
			}
			if(tmp || v.kind == hxsl_VarKind.Param && v2.v.kind == hxsl_VarKind.Param) {
				var k = 2;
				while(true) {
					var a = this.varMap.h[ukey + k];
					if(a == null) {
						break;
					}
					var _g = 0;
					var _g1 = a.merged;
					while(_g < _g1.length) {
						var vm = _g1[_g];
						++_g;
						if(vm == v) {
							return a;
						}
					}
					++k;
				}
				if(v.kind == hxsl_VarKind.Input) {
					var _this = this.varMap;
					if(Object.prototype.hasOwnProperty.call(_this.h,ukey)) {
						delete(_this.h[ukey]);
					}
					this.varMap.h[ukey + k] = v2;
					v2.v.name += k;
					v2.path += k;
				} else {
					vname += k;
					key += k;
					ukey += k;
				}
			} else {
				v2.merged.push(v);
				this.mergeVar(key,v,v2.v,p,v2.rootShaderName);
				this.varIdMap.h[v.id] = v2.id;
				return v2;
			}
		}
		var v2 = { id : hxsl_Tools.allocVarId(), name : vname, type : v.type, kind : v.kind, qualifiers : v.qualifiers, parent : parent == null ? null : parent.v};
		var a = new hxsl__$Linker_AllocatedVar();
		a.v = v2;
		a.merged = [v];
		a.path = key;
		a.id = v2.id;
		a.parent = parent;
		a.instanceIndex = this.curInstance;
		a.rootShaderName = shaderName;
		this.allVars.push(a);
		this.varMap.h[ukey] = a;
		var _g = v2.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.allocVar(v,p,shaderName,key,a).v);
			}
			v2.type = hxsl_Type.TStruct(_g);
		}
		return a;
	}
	,mapExprVar: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			if(!this.locals.h.hasOwnProperty(v.id)) {
				var v1 = this.allocVar(v,e.p);
				if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
					if(hxsl_Debug.TRACE) {
						var msg = this.curShader.name + " read " + v1.path;
						var _g1 = 0;
						var _g2 = this.debugDepth;
						while(_g1 < _g2) {
							var i = _g1++;
							msg = "    " + msg;
						}
						haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "mapExprVar"});
					}
					if(!this.curShader.readMap.h.hasOwnProperty(v1.id)) {
						this.curShader.readMap.h[v1.id] = v1;
						this.curShader.readVars.push(v1);
					}
					if(this.curShader.vertex == null && v1.v.kind == hxsl_VarKind.Var) {
						if(hxsl_Debug.TRACE) {
							var msg = "Force " + this.curShader.name + " into fragment (use varying)";
							var _g1 = 0;
							var _g2 = this.debugDepth;
							while(_g1 < _g2) {
								var i = _g1++;
								msg = "    " + msg;
							}
							haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "mapExprVar"});
						}
						this.curShader.vertex = false;
					}
				}
				return { e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p};
			}
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			var _g1 = e1.e;
			switch(op._hx_index) {
			case 4:
				switch(_g1._hx_index) {
				case 1:
					var _g2 = _g1.v;
					var v = _g2;
					if(!this.locals.h.hasOwnProperty(v.id)) {
						var e21 = this.mapExprVar(e2);
						var v1 = this.allocVar(v,e1.p);
						if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
							if(hxsl_Debug.TRACE) {
								var msg = this.curShader.name + " write " + v1.path;
								var _g3 = 0;
								var _g4 = this.debugDepth;
								while(_g3 < _g4) {
									var i = _g3++;
									msg = "    " + msg;
								}
								haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "mapExprVar"});
							}
							this.curShader.writeMap.h[v1.id] = v1;
							this.curShader.writeVars.push(v1);
						}
						return { e : hxsl_TExprDef.TBinop(op,{ e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p},e21), t : e.t, p : e.p};
					} else {
						var v = _g2;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
								if(hxsl_Debug.TRACE) {
									var msg = this.curShader.name + " write " + v1.path;
									var _g2 = 0;
									var _g3 = this.debugDepth;
									while(_g2 < _g3) {
										var i = _g2++;
										msg = "    " + msg;
									}
									haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "mapExprVar"});
								}
								this.curShader.writeMap.h[v1.id] = v1;
								this.curShader.writeVars.push(v1);
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				case 9:
					var _g2 = _g1.e;
					var _g3 = _g1.regs;
					var _g3 = _g2.e;
					var _g4 = _g2.p;
					var _g4 = _g2.t;
					if(_g3._hx_index == 1) {
						var v = _g3.v;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
								if(hxsl_Debug.TRACE) {
									var msg = this.curShader.name + " write " + v1.path;
									var _g2 = 0;
									var _g3 = this.debugDepth;
									while(_g2 < _g3) {
										var i = _g2++;
										msg = "    " + msg;
									}
									haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "mapExprVar"});
								}
								this.curShader.writeMap.h[v1.id] = v1;
								this.curShader.writeVars.push(v1);
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			case 20:
				var _g2 = op.op;
				switch(_g1._hx_index) {
				case 1:
					var v = _g1.v;
					if(!this.locals.h.hasOwnProperty(v.id)) {
						var e11 = this.mapExprVar(e1);
						var e21 = this.mapExprVar(e2);
						var v1 = this.allocVar(v,e11.p);
						if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
							if(hxsl_Debug.TRACE) {
								var msg = this.curShader.name + " write " + v1.path;
								var _g2 = 0;
								var _g3 = this.debugDepth;
								while(_g2 < _g3) {
									var i = _g2++;
									msg = "    " + msg;
								}
								haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "mapExprVar"});
							}
							this.curShader.writeMap.h[v1.id] = v1;
							this.curShader.writeVars.push(v1);
						}
						return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
					}
					break;
				case 9:
					var _g2 = _g1.e;
					var _g3 = _g1.regs;
					var _g1 = _g2.e;
					var _g3 = _g2.p;
					var _g3 = _g2.t;
					if(_g1._hx_index == 1) {
						var v = _g1.v;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null && !this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
								if(hxsl_Debug.TRACE) {
									var msg = this.curShader.name + " write " + v1.path;
									var _g1 = 0;
									var _g2 = this.debugDepth;
									while(_g1 < _g2) {
										var i = _g1++;
										msg = "    " + msg;
									}
									haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "mapExprVar"});
								}
								this.curShader.writeMap.h[v1.id] = v1;
								this.curShader.writeVars.push(v1);
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			default:
			}
			break;
		case 7:
			var _g1 = _g.init;
			var v = _g.v;
			this.locals.h[v.id] = true;
			break;
		case 11:
			if(this.curShader != null) {
				this.curShader.vertex = false;
				this.curShader.hasDiscard = true;
			}
			break;
		case 13:
			var _g1 = _g.it;
			var _g1 = _g.loop;
			var v = _g.v;
			this.locals.h[v.id] = true;
			break;
		case 22:
			var target = _g.target;
			var code = _g.code;
			var args = _g.args;
			var mappedArgs = [];
			var _g = 0;
			while(_g < args.length) {
				var arg = args[_g];
				++_g;
				var e1;
				switch(arg.access._hx_index) {
				case 0:
					e1 = this.mapExprVar(arg.e);
					break;
				case 1:
					var e2 = this.curShader != null ? this.mapSyntaxWrite(arg.e) : arg.e;
					e1 = this.mapExprVar(e2);
					break;
				case 2:
					var e3 = this.mapExprVar(arg.e);
					if(this.curShader != null) {
						e3 = this.mapSyntaxWrite(e3);
					}
					e1 = e3;
					break;
				}
				mappedArgs.push({ e : e1, access : arg.access});
			}
			if(this.curShader != null) {
				this.curShader.hasSyntax = true;
			}
			return { e : hxsl_TExprDef.TSyntax(target,code,mappedArgs), t : e.t, p : e.p};
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapExprVar));
	}
	,mapSyntaxWrite: function(e) {
		var _g = e.e;
		if(_g._hx_index == 1) {
			var v = _g.v;
			var v1 = this.allocVar(v,e.p);
			if(!this.curShader.writeMap.h.hasOwnProperty(v1.id)) {
				if(hxsl_Debug.TRACE) {
					var msg = this.curShader.name + " syntax write " + v1.path;
					var _g = 0;
					var _g1 = this.debugDepth;
					while(_g < _g1) {
						var i = _g++;
						msg = "    " + msg;
					}
					haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "mapSyntaxWrite"});
				}
				this.curShader.writeMap.h[v1.id] = v1;
				this.curShader.writeVars.push(v1);
			}
			return { e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p};
		} else {
			return hxsl_Tools.map(e,$bind(this,this.mapSyntaxWrite));
		}
	}
	,addShader: function(name,vertex,e,p) {
		var s = new hxsl__$Linker_ShaderInfos(name,vertex);
		this.curShader = s;
		s.priority = p;
		s.body = this.mapExprVar(e);
		this.shaders.push(s);
		this.curShader = null;
		if(hxsl_Debug.TRACE) {
			var msg = "Adding shader " + name + " with priority " + p;
			var _g = 0;
			var _g1 = this.debugDepth;
			while(_g < _g1) {
				var i = _g++;
				msg = "    " + msg;
			}
			haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "addShader"});
		}
		return s;
	}
	,sortByPriorityDesc: function(s1,s2) {
		if(s1.priority == s2.priority) {
			return s1.uid - s2.uid;
		}
		return s2.priority - s1.priority;
	}
	,buildDependency: function(s,v,isWritten) {
		var found = !isWritten;
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var parent = _g1[_g];
			++_g;
			if(parent == s) {
				found = true;
				continue;
			} else if(!found) {
				continue;
			}
			if(!parent.writeMap.h.hasOwnProperty(v.id)) {
				continue;
			}
			if(s.vertex) {
				if(parent.vertex == false) {
					continue;
				}
				if(parent.vertex == null) {
					parent.vertex = true;
				}
			}
			if(hxsl_Debug.TRACE) {
				var msg = s.name + " => " + parent.name + " (" + v.path + ")";
				var _g2 = 0;
				var _g3 = this.debugDepth;
				while(_g2 < _g3) {
					var i = _g2++;
					msg = "    " + msg;
				}
				haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "buildDependency"});
			}
			s.deps.set(parent,true);
			this.debugDepth++;
			this.initDependencies(parent);
			this.debugDepth--;
			if(!parent.readMap.h.hasOwnProperty(v.id)) {
				return;
			}
		}
		if(v.v.kind == hxsl_VarKind.Var) {
			this.error("Variable " + v.path + " required by " + s.name + " is missing initializer",null);
		}
	}
	,initDependencies: function(s) {
		if(s.deps != null) {
			return;
		}
		s.deps = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.readVars;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			this.buildDependency(s,r,s.writeMap.h.hasOwnProperty(r.id));
		}
	}
	,collect: function(cur,out,vertex) {
		if(cur.onStack) {
			this.error("Loop in shader dependencies (" + cur.name + ")",null);
		}
		if(cur.marked == vertex) {
			return;
		}
		cur.marked = vertex;
		cur.onStack = true;
		var _g = [];
		var d = cur.deps.keys();
		while(d.hasNext()) {
			var d1 = d.next();
			_g.push(d1);
		}
		var deps = _g;
		deps.sort($bind(this,this.sortByPriorityDesc));
		var _g = 0;
		while(_g < deps.length) {
			var d = deps[_g];
			++_g;
			this.collect(d,out,vertex);
		}
		if(cur.vertex == null) {
			if(hxsl_Debug.TRACE) {
				var msg = "MARK " + cur.name + " " + (vertex ? "vertex" : "fragment");
				var _g = 0;
				var _g1 = this.debugDepth;
				while(_g < _g1) {
					var i = _g++;
					msg = "    " + msg;
				}
				haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "collect"});
			}
			cur.vertex = vertex;
		}
		if(cur.vertex == vertex) {
			if(hxsl_Debug.TRACE) {
				var msg = "COLLECT " + cur.name + " " + (vertex ? "vertex" : "fragment");
				var _g = 0;
				var _g1 = this.debugDepth;
				while(_g < _g1) {
					var i = _g++;
					msg = "    " + msg;
				}
				haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "collect"});
			}
			out.push(cur);
		}
		cur.onStack = false;
	}
	,link: function(shadersData) {
		if(hxsl_Debug.TRACE) {
			var msg = "---------------------- LINKING -----------------------";
			var _g = 0;
			var _g1 = this.debugDepth;
			while(_g < _g1) {
				var i = _g++;
				msg = "    " + msg;
			}
			haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "link"});
		}
		this.varMap = new haxe_ds_StringMap();
		this.varIdMap = new haxe_ds_IntMap();
		this.allVars = [];
		this.shaders = [];
		this.locals = new haxe_ds_IntMap();
		var dupShaders = [];
		var _g = [];
		var _g_current = 0;
		var _g_array = shadersData;
		while(_g_current < _g_array.length) {
			var _g_value = _g_array[_g_current];
			var _g_key = _g_current++;
			var i = _g_key;
			var s = _g_value;
			if(shadersData.indexOf(s) < i) {
				var s2 = hxsl_Clone.shaderData(s);
				dupShaders.push({ origin : s, cloned : s2});
				_g.push(s2);
			} else {
				_g.push(s);
			}
		}
		shadersData = _g;
		this.curInstance = 0;
		var outVars = [];
		var _g = 0;
		while(_g < shadersData.length) {
			var s = shadersData[_g];
			++_g;
			this.isBatchShader = this.mode == hxsl_LinkMode.Batch && StringTools.startsWith(s.name,"batchShader_");
			var _g1 = 0;
			var _g2 = s.vars;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				var v2 = this.allocVar(v,null,s.name);
				if(this.isBatchShader && v2.v.kind == hxsl_VarKind.Param && !StringTools.startsWith(v2.path,"Batch_")) {
					v2.v.kind = hxsl_VarKind.Local;
					if(v2.v.qualifiers == null) {
						v2.v.qualifiers = [];
					}
					v2.v.qualifiers.push(hxsl_VarQualifier.Flat);
				}
				if(v.kind == hxsl_VarKind.Output) {
					outVars.push(v);
				}
			}
			var _g3 = 0;
			var _g4 = s.funs;
			while(_g3 < _g4.length) {
				var f = _g4[_g3];
				++_g3;
				var v1 = this.allocVar(f.ref,f.expr.p);
				v1.kind = f.kind;
			}
			this.curInstance++;
		}
		var priority = 0;
		var initPrio_init = [-3000];
		var initPrio_vert = [-2000];
		var initPrio_frag = [-1000];
		var initPrio_main = [-2500];
		var shaderOffset_vert = -1500;
		var shaderOffset_frag = -500;
		var _g = 0;
		while(_g < shadersData.length) {
			var s = shadersData[_g];
			++_g;
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				var v = this.allocVar(f.ref,f.expr.p);
				if(v.kind == null) {
					throw haxe_Exception.thrown("assert");
				}
				switch(v.kind._hx_index) {
				case 0:case 1:
					if(this.mode == hxsl_LinkMode.Compute) {
						var e = v.kind;
						throw haxe_Exception.thrown("Unexpected " + $hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name.toLowerCase() + "() function in compute shader");
					}
					var offset = v.kind == hxsl_FunctionKind.Vertex ? shaderOffset_vert : shaderOffset_frag;
					this.addShader(s.name + "." + (v.kind == hxsl_FunctionKind.Vertex ? "vertex" : "fragment"),v.kind == hxsl_FunctionKind.Vertex,f.expr,priority + offset);
					break;
				case 2:
					var prio;
					var status;
					switch(f.ref.name) {
					case "__init__fragment":
						prio = initPrio_frag;
						status = false;
						break;
					case "__init__main":
						prio = initPrio_main;
						status = false;
						break;
					case "__init__vertex":
						prio = initPrio_vert;
						status = true;
						break;
					default:
						prio = initPrio_init;
						status = null;
					}
					var _g3 = f.expr.e;
					if(_g3._hx_index == 4) {
						var el = _g3.el;
						var index = 0;
						var _g4 = 0;
						while(_g4 < el.length) {
							var e1 = el[_g4];
							++_g4;
							this.addShader(s.name + "." + f.ref.name + index++,status,e1,prio[0]++);
						}
					} else {
						this.addShader(s.name + "." + f.ref.name,status,f.expr,prio[0]++);
					}
					break;
				case 3:
					throw haxe_Exception.thrown("Unexpected helper function in linker " + v.v.name);
				case 4:
					if(this.mode != hxsl_LinkMode.Compute) {
						throw haxe_Exception.thrown("Unexpected main() outside compute shader");
					}
					this.addShader(s.name,true,f.expr,priority).isCompute = true;
					break;
				}
			}
			++priority;
		}
		this.shaders.sort($bind(this,this.sortByPriorityDesc));
		var uid = 0;
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.uid = uid++;
		}
		var entry = new hxsl__$Linker_ShaderInfos("<entry>",false);
		entry.deps = new haxe_ds_ObjectMap();
		var _g = 0;
		while(_g < outVars.length) {
			var v = outVars[_g];
			++_g;
			this.buildDependency(entry,this.allocVar(v,null),false);
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.hasDiscard || s.isCompute || s.hasSyntax) {
				this.initDependencies(s);
				entry.deps.set(s,true);
			}
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.vertex != null) {
				continue;
			}
			var onlyParams = true;
			var _g2 = 0;
			var _g3 = s.readVars;
			while(_g2 < _g3.length) {
				var r = _g3[_g2];
				++_g2;
				if(r.v.kind != hxsl_VarKind.Param) {
					onlyParams = false;
					break;
				}
			}
			if(onlyParams) {
				if(hxsl_Debug.TRACE) {
					var msg = "Force " + s.name + " into fragment since it only reads params";
					var _g4 = 0;
					var _g5 = this.debugDepth;
					while(_g4 < _g5) {
						var i = _g4++;
						msg = "    " + msg;
					}
					haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "link"});
				}
				s.vertex = false;
			}
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.deps == null) {
				continue;
			}
			if(s.vertex == null) {
				var d = s.deps.keys();
				while(d.hasNext()) {
					var d1 = d.next();
					if(d1.vertex == false) {
						if(hxsl_Debug.TRACE) {
							var msg = s.name + " marked as fragment because of " + d1.name;
							var _g2 = 0;
							var _g3 = this.debugDepth;
							while(_g2 < _g3) {
								var i = _g2++;
								msg = "    " + msg;
							}
							haxe_Log.trace(msg,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "link"});
						}
						s.vertex = false;
						break;
					}
				}
			}
			if(s.vertex) {
				var d2 = s.deps.keys();
				while(d2.hasNext()) {
					var d3 = d2.next();
					if(d3.vertex == null) {
						if(hxsl_Debug.TRACE) {
							var msg1 = d3.name + " marked as vertex because of " + s.name;
							var _g4 = 0;
							var _g5 = this.debugDepth;
							while(_g4 < _g5) {
								var i1 = _g4++;
								msg1 = "    " + msg1;
							}
							haxe_Log.trace(msg1,{ fileName : "hxsl/Debug.hx", lineNumber : 31, className : "hxsl.Linker", methodName : "link"});
						}
						d3.vertex = true;
					}
				}
			}
		}
		var v = [];
		var f = [];
		this.collect(entry,v,true);
		this.collect(entry,f,false);
		if(f.pop() != entry) {
			throw haxe_Exception.thrown("assert");
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.marked = null;
		}
		var _g = 0;
		var _g1 = v.concat(f);
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.marked == null) {
					this.error(d1.name + " needed by " + s.name + " is unreachable",null);
				}
			}
			s.marked = true;
		}
		var outVars = [];
		var varMap_h = { };
		var addVar = null;
		addVar = function(v) {
			if(varMap_h.hasOwnProperty(v.id)) {
				return;
			}
			varMap_h[v.id] = true;
			if(v.v.parent != null) {
				addVar(v.parent);
			} else {
				outVars.push(v.v);
			}
		};
		var _g = 0;
		var _g1 = v.concat(f);
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = s.readVars;
			while(_g2 < _g3.length) {
				var v1 = _g3[_g2];
				++_g2;
				addVar(v1);
			}
			var _g4 = 0;
			var _g5 = s.writeVars;
			while(_g4 < _g5.length) {
				var v2 = _g5[_g4];
				++_g4;
				addVar(v2);
			}
		}
		var cleanVar = null;
		cleanVar = function(v) {
			var _g = v.type;
			if(_g._hx_index == 13) {
				var vl = _g.vl;
				if(v.kind != hxsl_VarKind.Input) {
					var vout = [];
					var _g = 0;
					while(_g < vl.length) {
						var v1 = vl[_g];
						++_g;
						if(varMap_h.hasOwnProperty(v1.id)) {
							cleanVar(v1);
							vout.push(v1);
						}
					}
					v.type = hxsl_Type.TStruct(vout);
				}
			}
		};
		var _g = 0;
		while(_g < outVars.length) {
			var v1 = outVars[_g];
			++_g;
			cleanVar(v1);
		}
		var build = function(kind,name,a) {
			var v = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TFun([{ ret : hxsl_Type.TVoid, args : []}]), kind : hxsl_VarKind.Function};
			outVars.push(v);
			var exprs = [];
			var _g = 0;
			while(_g < a.length) {
				var s = a[_g];
				++_g;
				var _g1 = s.body.e;
				if(_g1._hx_index == 4) {
					var el = _g1.el;
					var _g2 = 0;
					while(_g2 < el.length) {
						var e = el[_g2];
						++_g2;
						exprs.push(e);
					}
				} else {
					exprs.push(s.body);
				}
			}
			var expr = { e : hxsl_TExprDef.TBlock(exprs), t : hxsl_Type.TVoid, p : exprs.length == 0 ? null : exprs[0].p};
			return { kind : kind, ref : v, ret : hxsl_Type.TVoid, args : [], expr : expr};
		};
		var funs = this.mode == hxsl_LinkMode.Compute ? [build(hxsl_FunctionKind.Main,"main",v)] : [build(hxsl_FunctionKind.Vertex,"vertex",v),build(hxsl_FunctionKind.Fragment,"fragment",f)];
		var _g = 0;
		while(_g < dupShaders.length) {
			var d = dupShaders[_g];
			++_g;
			var _g1 = 0;
			var _g2 = d.cloned.vars.length;
			while(_g1 < _g2) {
				var i = _g1++;
				this.allocVar(d.cloned.vars[i],null).merged.unshift(d.origin.vars[i]);
			}
		}
		return { name : "out", vars : outVars, funs : funs};
	}
	,__class__: hxsl_Linker
};
var hxsl_Output = $hxEnums["hxsl.Output"] = { __ename__:true,__constructs__:null
	,Const: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Const",$_.__params__ = ["v"],$_)
	,Value: ($_=function(v,size) { return {_hx_index:1,v:v,size:size,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Value",$_.__params__ = ["v","size"],$_)
	,PackNormal: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="PackNormal",$_.__params__ = ["v"],$_)
	,PackFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="PackFloat",$_.__params__ = ["v"],$_)
	,Vec2: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Vec2",$_.__params__ = ["a"],$_)
	,Vec3: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Vec3",$_.__params__ = ["a"],$_)
	,Vec4: ($_=function(a) { return {_hx_index:6,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Vec4",$_.__params__ = ["a"],$_)
	,Swiz: ($_=function(a,swiz) { return {_hx_index:7,a:a,swiz:swiz,__enum__:"hxsl.Output",toString:$estr}; },$_._hx_name="Swiz",$_.__params__ = ["a","swiz"],$_)
};
hxsl_Output.__constructs__ = [hxsl_Output.Const,hxsl_Output.Value,hxsl_Output.PackNormal,hxsl_Output.PackFloat,hxsl_Output.Vec2,hxsl_Output.Vec3,hxsl_Output.Vec4,hxsl_Output.Swiz];
hxsl_Output.__empty_constructs__ = [];
var hxsl_Printer = function(varId) {
	if(varId == null) {
		varId = false;
	}
	this.varId = varId;
};
$hxClasses["hxsl.Printer"] = hxsl_Printer;
hxsl_Printer.__name__ = "hxsl.Printer";
hxsl_Printer.opStr = function(op) {
	switch(op._hx_index) {
	case 0:
		return "+";
	case 1:
		return "*";
	case 2:
		return "/";
	case 3:
		return "-";
	case 4:
		return "=";
	case 5:
		return "==";
	case 6:
		return "!=";
	case 7:
		return ">";
	case 8:
		return ">=";
	case 9:
		return "<";
	case 10:
		return "<=";
	case 11:
		return "&";
	case 12:
		return "|";
	case 13:
		return "^";
	case 14:
		return "&&";
	case 15:
		return "||";
	case 16:
		return "<<";
	case 17:
		return ">>";
	case 18:
		return ">>>";
	case 19:
		return "%";
	case 20:
		var op1 = op.op;
		return hxsl_Printer.opStr(op1) + "=";
	case 21:
		return "...";
	case 22:
		return "=>";
	default:
		return "??" + Std.string(op);
	}
};
hxsl_Printer.toString = function(e,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).exprString(e);
};
hxsl_Printer.shaderToString = function(s,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).shaderString(s);
};
hxsl_Printer.prototype = {
	shaderString: function(s) {
		this.buffer = new StringBuf();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addVar(v,null);
			this.buffer.b += Std.string(";\n");
		}
		if(s.vars.length > 0) {
			this.buffer.b += Std.string("\n");
		}
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.addFun(f);
			this.buffer.b += Std.string("\n\n");
		}
		return this.buffer.b;
	}
	,exprString: function(e) {
		this.buffer = new StringBuf();
		this.addExpr(e,"");
		return this.buffer.b;
	}
	,addVar: function(v,defKind,tabs,parent) {
		if(tabs == null) {
			tabs = "";
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				var v1;
				switch(q._hx_index) {
				case 0:
					var max = q.max;
					v1 = "const" + (max == null ? "" : "(" + max + ")");
					break;
				case 1:
					v1 = "private";
					break;
				case 2:
					v1 = "nullable";
					break;
				case 3:
					v1 = "perObject";
					break;
				case 4:
					var n = q.n;
					v1 = "name('" + n + "')";
					break;
				case 5:
					v1 = "shared";
					break;
				case 6:
					var p = q.p;
					v1 = $hxEnums[p.__enum__].__constructs__[p._hx_index]._hx_name.toLowerCase() + "p";
					break;
				case 7:
					var min = q.min;
					var max1 = q.max;
					v1 = "range(" + min + "," + max1 + ")";
					break;
				case 8:
					v1 = "ignore";
					break;
				case 9:
					var n1 = q.v;
					v1 = "perInstance(" + n1 + ")";
					break;
				case 10:
					var s = q.s;
					v1 = "doc(\"" + StringTools.replace(s,"\"","\\\"") + "\")";
					break;
				case 11:
					var s1 = q.source;
					v1 = "borrow(" + s1 + ")";
					break;
				case 12:
					var s2 = q.name;
					v1 = "sampler(" + s2 + ")";
					break;
				case 13:
					v1 = "final";
					break;
				case 14:
					v1 = "flat";
					break;
				}
				this.buffer.b += Std.string("@" + v1 + " ");
			}
		}
		if(v.kind != defKind) {
			switch(v.kind._hx_index) {
			case 0:
				this.buffer.b += Std.string("@global ");
				break;
			case 1:
				this.buffer.b += Std.string("@input ");
				break;
			case 2:
				this.buffer.b += Std.string("@param ");
				break;
			case 3:
				this.buffer.b += Std.string("@varying ");
				break;
			case 4:
				this.buffer.b += Std.string("@local ");
				break;
			case 5:
				this.buffer.b += Std.string("@output ");
				break;
			case 6:
				this.buffer.b += Std.string("@function ");
				break;
			}
		}
		this.buffer.b += Std.string("var ");
		if(v.parent == parent) {
			this.buffer.b += Std.string(v.name + (this.varId ? "@" + v.id : ""));
		} else {
			this.addVarName(v);
		}
		this.buffer.b += Std.string(" : ");
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			this.buffer.b += Std.string("{");
			var first = true;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addVar(v1,v1.kind,tabs,v1);
			}
			this.buffer.b += Std.string("}");
		} else {
			var v1 = hxsl_Tools.toString(v.type);
			this.buffer.b += Std.string(v1);
		}
	}
	,addFun: function(f) {
		this.buffer.b += Std.string("function " + f.ref.name + "(");
		var first = true;
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(first) {
				this.buffer.b += Std.string(" ");
				first = false;
			} else {
				this.buffer.b += Std.string(", ");
			}
			this.addVar(a,hxsl_VarKind.Local);
		}
		if(f.args.length > 0) {
			this.buffer.b += Std.string(" ");
		}
		var v = ") : " + hxsl_Tools.toString(f.ret) + " ";
		this.buffer.b += Std.string(v);
		this.addExpr(f.expr,"");
	}
	,addVarName: function(v) {
		if(v.parent != null) {
			this.addVarName(v.parent);
			this.buffer.b += Std.string(".");
		}
		this.buffer.b += Std.string(v.name);
		if(this.varId) {
			this.buffer.b += Std.string("@" + v.id);
		}
	}
	,addConst: function(c) {
		var _this = this.buffer;
		var _this1 = _this.b;
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "null";
			break;
		case 1:
			var b = c.b;
			tmp = b;
			break;
		case 2:
			var i = c.v;
			tmp = i;
			break;
		case 3:
			var f = c.v;
			tmp = f;
			break;
		case 4:
			var s = c.v;
			tmp = "\"" + s + "\"";
			break;
		}
		_this.b = _this1 + Std.string(tmp);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			this.addConst(c);
			break;
		case 1:
			var v = _g.v;
			this.addVarName(v);
			break;
		case 2:
			var g = _g.g;
			var v = hxsl_Tools2.toString(g);
			this.buffer.b += Std.string(v);
			break;
		case 3:
			var e = _g.e;
			this.buffer.b += Std.string("(");
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buffer.b += Std.string("{");
			tabs += "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.addExpr(e,tabs);
				this.buffer.b += Std.string(";");
			}
			tabs = HxOverrides.substr(tabs,1,null);
			if(el.length > 0) {
				this.buffer.b += Std.string("\n" + tabs);
			}
			this.buffer.b += Std.string("}");
			break;
		case 5:
			var op = _g.op;
			var e1 = _g.e1;
			var e2 = _g.e2;
			this.addExpr(e1,tabs);
			var v = " " + hxsl_Printer.opStr(op) + " ";
			this.buffer.b += Std.string(v);
			this.addExpr(e2,tabs);
			break;
		case 6:
			var op = _g.op;
			var e = _g.e1;
			var v;
			switch(op._hx_index) {
			case 0:
				v = "++";
				break;
			case 1:
				v = "--";
				break;
			case 2:
				v = "!";
				break;
			case 3:
				v = "-";
				break;
			case 4:
				v = "~";
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			this.buffer.b += Std.string(v);
			this.addExpr(e,tabs);
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			this.addVar(v,hxsl_VarKind.Local,tabs);
			if(init != null) {
				this.buffer.b += Std.string(" = ");
				this.addExpr(init,tabs);
			}
			break;
		case 8:
			var e = _g.e;
			var el = _g.args;
			this.addExpr(e,tabs);
			this.buffer.b += Std.string("(");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e,tabs);
			}
			this.buffer.b += Std.string(")");
			break;
		case 9:
			var e = _g.e;
			var regs = _g.regs;
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(".");
			var _g1 = 0;
			while(_g1 < regs.length) {
				var r = regs[_g1];
				++_g1;
				this.buffer.b += Std.string(hxsl_Printer.SWIZ[r._hx_index]);
			}
			break;
		case 10:
			var cond = _g.econd;
			var eif = _g.eif;
			var eelse = _g.eelse;
			this.buffer.b += Std.string("if( ");
			this.addExpr(cond,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				this.buffer.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buffer.b += Std.string("discard");
			break;
		case 12:
			var e = _g.e;
			this.buffer.b += Std.string("return");
			if(e != null) {
				this.buffer.b += Std.string(" ");
				this.addExpr(e,tabs);
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			this.buffer.b += Std.string("for( ");
			this.addVarName(v);
			this.buffer.b += Std.string(" in ");
			this.addExpr(it,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(loop,tabs);
			break;
		case 14:
			this.buffer.b += Std.string("continue");
			break;
		case 15:
			this.buffer.b += Std.string("break");
			break;
		case 16:
			var e1 = _g.e;
			var e2 = _g.index;
			this.addExpr(e1,tabs);
			this.buffer.b += Std.string("[");
			this.addExpr(e2,tabs);
			this.buffer.b += Std.string("]");
			break;
		case 17:
			var el = _g.el;
			this.buffer.b += Std.string("[");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e,tabs);
			}
			this.buffer.b += Std.string("]");
			break;
		case 18:
			var e = _g.e;
			var cases = _g.cases;
			var def = _g.def;
			this.buffer.b += Std.string("switch( ");
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(") {");
			var old = tabs;
			var _g1 = 0;
			while(_g1 < cases.length) {
				var c = cases[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.buffer.b += Std.string("case ");
				var first = true;
				var _g2 = 0;
				var _g3 = c.values;
				while(_g2 < _g3.length) {
					var v = _g3[_g2];
					++_g2;
					if(first) {
						first = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addExpr(v,tabs);
				}
				tabs += "\t";
				this.buffer.b += Std.string(":\n" + tabs);
				this.addExpr(c.expr,tabs);
				tabs = old;
			}
			if(def != null) {
				this.buffer.b += Std.string("\n" + tabs);
				tabs += "\t";
				this.buffer.b += Std.string("default:\n" + tabs);
				this.addExpr(def,tabs);
				tabs = old;
			}
			this.buffer.b += Std.string("\n" + tabs + "}");
			break;
		case 19:
			var _g1 = _g.e;
			var _g2 = _g.loop;
			if(_g.normalWhile == false) {
				var loop = _g2;
				var e = _g1;
				var old = tabs;
				tabs += "\t";
				this.buffer.b += Std.string("do {\n" + tabs);
				this.addExpr(loop,tabs);
				tabs = old;
				this.buffer.b += Std.string("\n" + tabs + "} while( ");
				this.addExpr(e,tabs);
				this.buffer.b += Std.string(" )");
			} else {
				var loop = _g2;
				var e = _g1;
				this.buffer.b += Std.string("while( ");
				this.addExpr(e,tabs);
				var old = tabs;
				tabs += "\t";
				this.buffer.b += Std.string(" ) {\n" + tabs);
				this.addExpr(loop,tabs);
				tabs = old;
				this.buffer.b += Std.string("\n" + tabs + "}");
			}
			break;
		case 20:
			var m = _g.m;
			var args = _g.args;
			var e = _g.e;
			this.buffer.b += Std.string("@");
			this.buffer.b += Std.string(m);
			if(args.length > 0) {
				this.buffer.b += Std.string("(");
				var first = true;
				var _g1 = 0;
				while(_g1 < args.length) {
					var c = args[_g1];
					++_g1;
					if(first) {
						first = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addConst(c);
				}
				this.buffer.b += Std.string(")");
			}
			this.buffer.b += Std.string(" ");
			this.addExpr(e,tabs);
			break;
		case 21:
			var e = _g.e;
			var name = _g.name;
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(".");
			this.buffer.b += Std.string(name);
			break;
		case 22:
			var target = _g.target;
			var code = _g.code;
			var args = _g.args;
			this.buffer.b += Std.string("Syntax.");
			this.buffer.b += Std.string(target);
			this.buffer.b += Std.string("(");
			this.addConst(hxsl_Const.CString(code));
			var _g = 0;
			while(_g < args.length) {
				var arg = args[_g];
				++_g;
				switch(arg.access._hx_index) {
				case 0:
					this.buffer.b += Std.string(", @r ");
					break;
				case 1:
					this.buffer.b += Std.string(", @w ");
					break;
				case 2:
					this.buffer.b += Std.string(", @rw ");
					break;
				}
				this.addExpr(arg.e,tabs);
			}
			this.buffer.b += Std.string(")");
			break;
		}
	}
	,__class__: hxsl_Printer
};
var hxsl_LinkMode = $hxEnums["hxsl.LinkMode"] = { __ename__:true,__constructs__:null
	,Default: {_hx_name:"Default",_hx_index:0,__enum__:"hxsl.LinkMode",toString:$estr}
	,Batch: {_hx_name:"Batch",_hx_index:1,__enum__:"hxsl.LinkMode",toString:$estr}
	,Compute: {_hx_name:"Compute",_hx_index:2,__enum__:"hxsl.LinkMode",toString:$estr}
};
hxsl_LinkMode.__constructs__ = [hxsl_LinkMode.Default,hxsl_LinkMode.Batch,hxsl_LinkMode.Compute];
hxsl_LinkMode.__empty_constructs__ = [hxsl_LinkMode.Default,hxsl_LinkMode.Batch,hxsl_LinkMode.Compute];
var hxsl_AllocParam = function(name,pos,instance,index,type) {
	this.name = name;
	this.pos = pos;
	this.instance = instance;
	this.index = index;
	this.type = type;
};
$hxClasses["hxsl.AllocParam"] = hxsl_AllocParam;
hxsl_AllocParam.__name__ = "hxsl.AllocParam";
hxsl_AllocParam.prototype = {
	__class__: hxsl_AllocParam
};
var hxsl_AllocGlobal = function(pos,path,type) {
	this.pos = pos;
	this.path = path;
	this.gid = hxsl_Globals.allocID(path);
	this.type = type;
};
$hxClasses["hxsl.AllocGlobal"] = hxsl_AllocGlobal;
hxsl_AllocGlobal.__name__ = "hxsl.AllocGlobal";
hxsl_AllocGlobal.prototype = {
	__class__: hxsl_AllocGlobal
};
var hxsl_RuntimeShaderData = function() {
};
$hxClasses["hxsl.RuntimeShaderData"] = hxsl_RuntimeShaderData;
hxsl_RuntimeShaderData.__name__ = "hxsl.RuntimeShaderData";
hxsl_RuntimeShaderData.prototype = {
	__class__: hxsl_RuntimeShaderData
};
var hxsl_ShaderInstanceDesc = function(shader,bits) {
	this.shader = shader;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderInstanceDesc"] = hxsl_ShaderInstanceDesc;
hxsl_ShaderInstanceDesc.__name__ = "hxsl.ShaderInstanceDesc";
hxsl_ShaderInstanceDesc.prototype = {
	__class__: hxsl_ShaderInstanceDesc
};
var hxsl_RuntimeShader = function() {
	this.id = hxsl_RuntimeShader.UID++;
};
$hxClasses["hxsl.RuntimeShader"] = hxsl_RuntimeShader;
hxsl_RuntimeShader.__name__ = "hxsl.RuntimeShader";
hxsl_RuntimeShader.prototype = {
	getShaders: function() {
		if(this.mode == hxsl_LinkMode.Compute) {
			return [this.vertex];
		} else {
			return [this.vertex,this.fragment];
		}
	}
	,__class__: hxsl_RuntimeShader
};
var hxsl_Serializer = function() {
};
$hxClasses["hxsl.Serializer"] = hxsl_Serializer;
hxsl_Serializer.__name__ = "hxsl.Serializer";
hxsl_Serializer.prototype = {
	readVarInt: function() {
		var b = this.input.readByte();
		if(b < 128) {
			return b;
		}
		if(b == 255) {
			return this.input.readInt32();
		}
		return (b & 127) << 8 | this.input.readByte();
	}
	,readType: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Type.TVoid;
		case 1:
			return hxsl_Type.TInt;
		case 2:
			return hxsl_Type.TBool;
		case 3:
			return hxsl_Type.TFloat;
		case 4:
			return hxsl_Type.TString;
		case 5:
			var bits = this.input.readByte();
			var v = hxsl_Serializer.TVECS.h[bits];
			if(v == null) {
				v = hxsl_Type.TVec(bits & 7,Type.createEnumIndex(hxsl_VecType,bits >> 3,null));
				hxsl_Serializer.TVECS.h[bits] = v;
			}
			return v;
		case 6:
			return hxsl_Type.TMat3;
		case 7:
			return hxsl_Type.TMat4;
		case 8:
			return hxsl_Type.TMat3x4;
		case 9:
			return hxsl_Type.TBytes(this.input.readInt32());
		case 10:
			if(this.version == 0) {
				return hxsl_Type.TSampler(hxsl_TexDimension.T2D,false);
			} else {
				var b = this.input.readByte();
				var dim = hxsl_Serializer.TDIMS[b >> 1];
				return hxsl_Type.TSampler(dim,(b & 1) != 0);
			}
			break;
		case 11:
			if(this.version == 0) {
				return hxsl_Type.TSampler(hxsl_TexDimension.T2D,true);
			} else {
				var b = this.input.readByte();
				var dim = hxsl_Serializer.TDIMS[b >> 3];
				return hxsl_Type.TRWTexture(dim,(b & 1) != 0,(b >> 1 & 3) + 1);
			}
			break;
		case 12:
			if(this.version == 0) {
				return hxsl_Type.TSampler(hxsl_TexDimension.TCube,false);
			} else {
				return hxsl_Type.TMat2;
			}
			break;
		case 13:
			var id = this.readVarInt();
			var t = this.types[id];
			if(t != null) {
				return t;
			}
			var f = $bind(this,this.readVar);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			t = hxsl_Type.TStruct(_g);
			this.types[id] = t;
			return t;
		case 14:
			return hxsl_Type.TFun(null);
		case 15:
			var t = this.readType();
			var v = this.readVar();
			return hxsl_Type.TArray(t,v == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v));
		case 16:
			var tag = this.input.readByte();
			var kind = hxsl_BufferKind.Uniform;
			if((tag & 128) == 0) {
				var fh = this.input;
				fh.set_position(fh.pos - 1);
			} else {
				kind = Type.createEnumIndex(hxsl_BufferKind,tag & 127,null);
			}
			var t = this.readType();
			var v = this.readVar();
			return hxsl_Type.TBuffer(t,v == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v),kind);
		case 17:
			return hxsl_Type.TChannel(this.input.readByte());
		case 18:
			if(this.version == 0) {
				return hxsl_Type.TMat2;
			} else {
				throw haxe_Exception.thrown("assert");
			}
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,readString: function() {
		var len = this.readVarInt();
		var s = this.input.read(len).getString(0,len);
		return s;
	}
	,readConst: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Const.CNull;
		case 1:
			return hxsl_Const.CBool(this.input.readByte() != 0);
		case 2:
			return hxsl_Const.CInt(this.input.readInt32());
		case 3:
			return hxsl_Const.CFloat(this.input.readDouble());
		case 4:
			return hxsl_Const.CString(this.readString());
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,readExpr: function() {
		var _gthis = this;
		var k = this.input.readByte();
		if(k-- == 0) {
			return null;
		}
		var e;
		switch(k) {
		case 0:
			e = hxsl_TExprDef.TConst(this.readConst());
			break;
		case 1:
			e = hxsl_TExprDef.TVar(this.readVar());
			break;
		case 2:
			e = hxsl_TExprDef.TGlobal(hxsl_Serializer.TGLOBALS[this.input.readByte()]);
			break;
		case 3:
			e = hxsl_TExprDef.TParenthesis(this.readExpr());
			break;
		case 4:
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TBlock(_g);
			break;
		case 5:
			var op = this.input.readByte();
			e = hxsl_TExprDef.TBinop(op >= 128 ? haxe_macro_Binop.OpAssignOp(hxsl_Serializer.BOPS[op & 127]) : hxsl_Serializer.BOPS[op],this.readExpr(),this.readExpr());
			break;
		case 6:
			e = hxsl_TExprDef.TUnop(hxsl_Serializer.UNOPS[this.input.readByte()],this.readExpr());
			break;
		case 7:
			e = hxsl_TExprDef.TVarDecl(this.readVar(),this.readExpr());
			break;
		case 8:
			var e1 = this.readExpr();
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TCall(e1,_g);
			break;
		case 9:
			var e1 = this.readExpr();
			var bits = this.input.readUInt16();
			var swiz = hxsl_Serializer.TSWIZ.h[bits];
			if(swiz == null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = (bits & 3) + 1;
				while(_g1 < _g2) {
					var i = _g1++;
					_g.push(hxsl_Serializer.REGS[bits >> i * 2 + 2 & 3]);
				}
				swiz = _g;
				hxsl_Serializer.TSWIZ.h[bits] = swiz;
			}
			e = hxsl_TExprDef.TSwiz(e1,swiz);
			break;
		case 10:
			e = hxsl_TExprDef.TIf(this.readExpr(),this.readExpr(),this.readExpr());
			break;
		case 11:
			e = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			e = hxsl_TExprDef.TReturn(this.readExpr());
			break;
		case 13:
			e = hxsl_TExprDef.TFor(this.readVar(),this.readExpr(),this.readExpr());
			break;
		case 14:
			e = hxsl_TExprDef.TContinue;
			break;
		case 15:
			e = hxsl_TExprDef.TBreak;
			break;
		case 16:
			e = hxsl_TExprDef.TArray(this.readExpr(),this.readExpr());
			break;
		case 17:
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TArrayDecl(_g);
			break;
		case 18:
			var e1 = this.readExpr();
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				var f = $bind(_gthis,_gthis.readExpr);
				var _g3 = [];
				var _g4 = 0;
				var _g5 = _gthis.readVarInt();
				while(_g4 < _g5) {
					var i1 = _g4++;
					_g3.push(f());
				}
				_g.push({ values : _g3, expr : _gthis.readExpr()});
			}
			e = hxsl_TExprDef.TSwitch(e1,_g,this.readExpr());
			break;
		case 19:
			e = hxsl_TExprDef.TWhile(this.readExpr(),this.readExpr(),this.input.readByte() != 0);
			break;
		case 20:
			var e1 = this.readString();
			var f = $bind(this,this.readConst);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TMeta(e1,_g,this.readExpr());
			break;
		case 21:
			e = hxsl_TExprDef.TField(this.readExpr(),this.readString());
			break;
		case 22:
			var e1 = this.readString();
			var e2 = this.readString();
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push({ e : _gthis.readExpr(), access : Type.createEnumIndex(hxsl_SyntaxArgAccess,_gthis.input.readByte(),null), read : false, write : false});
			}
			e = hxsl_TExprDef.TSyntax(e1,e2,_g);
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
		return { e : e, t : this.readType(), p : null};
	}
	,readVar: function() {
		var id = this.readVarInt();
		if(id == 0) {
			return null;
		}
		var v = this.varMap.h[id];
		if(v != null) {
			return v;
		}
		v = { id : hxsl_Tools.allocVarId(), name : this.readString(), type : null, kind : null};
		this.varMap.h[id] = v;
		v.type = this.readType();
		v.kind = hxsl_Serializer.VKINDS[this.input.readByte()];
		v.parent = this.readVar();
		var nq = this.input.readByte();
		if(nq > 0) {
			v.qualifiers = [];
			var _g = 0;
			var _g1 = nq;
			while(_g < _g1) {
				var i = _g++;
				var qid = this.input.readByte();
				var q;
				switch(qid) {
				case 0:
					var n = this.input.readInt32();
					q = hxsl_VarQualifier.Const(n == 0 ? null : n);
					break;
				case 1:
					q = hxsl_VarQualifier.Private;
					break;
				case 2:
					q = hxsl_VarQualifier.Nullable;
					break;
				case 3:
					q = hxsl_VarQualifier.PerObject;
					break;
				case 4:
					q = hxsl_VarQualifier.Name(this.readString());
					break;
				case 5:
					q = hxsl_VarQualifier.Shared;
					break;
				case 6:
					q = hxsl_VarQualifier.Precision(hxsl_Serializer.PRECS[this.input.readByte()]);
					break;
				case 7:
					q = hxsl_VarQualifier.Range(this.input.readDouble(),this.input.readDouble());
					break;
				case 8:
					q = hxsl_VarQualifier.Ignore;
					break;
				case 9:
					q = hxsl_VarQualifier.PerInstance(this.input.readInt32());
					break;
				case 10:
					q = hxsl_VarQualifier.Doc(this.readString());
					break;
				case 11:
					q = hxsl_VarQualifier.Borrow(this.readString());
					break;
				case 12:
					q = hxsl_VarQualifier.Sampler(this.readString());
					break;
				case 13:
					q = hxsl_VarQualifier.Final;
					break;
				case 14:
					q = hxsl_VarQualifier.Flat;
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
				v.qualifiers.push(q);
			}
		}
		return v;
	}
	,readFun: function() {
		var tmp = hxsl_Serializer.FKIND[this.input.readByte()];
		var tmp1 = this.readVar();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return { kind : tmp, ref : tmp1, args : _g, ret : this.readType(), expr : this.readExpr()};
	}
	,unserialize: function(data) {
		this.input = new haxe_io_BytesInput(haxe_crypto_Base64.decode(data,false));
		if(this.input.readByte() != (hxsl_Serializer.SIGN & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 8 & 255)) {
			throw haxe_Exception.thrown("Invalid HXSL data");
		}
		this.version = this.input.readByte() - 139;
		if(this.version < 0 || this.version > 1) {
			throw haxe_Exception.thrown("Invalid HXSL data");
		}
		this.varMap = new haxe_ds_IntMap();
		this.types = [];
		var tmp = this.readString();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		var tmp1 = _g;
		var f = $bind(this,this.readFun);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return { name : tmp, vars : tmp1, funs : _g};
	}
	,__class__: hxsl_Serializer
};
var hxsl_ShaderList = function(s,n) {
	this.s = s;
	this.next = n;
};
$hxClasses["hxsl.ShaderList"] = hxsl_ShaderList;
hxsl_ShaderList.__name__ = "hxsl.ShaderList";
hxsl_ShaderList.addSort = function(s,shaders) {
	var prev = null;
	var hd = shaders;
	while(hd != null && hd.s.priority < s.priority) {
		prev = hd;
		hd = hd.next;
	}
	if(prev == null) {
		var l = new hxsl_ShaderList(s,shaders);
		hxsl_ShaderList.checkSize(l);
		return l;
	}
	prev.next = new hxsl_ShaderList(s,prev.next);
	hxsl_ShaderList.checkSize(shaders);
	return shaders;
};
hxsl_ShaderList.checkSize = function(list) {
	if(hxsl_ShaderList.MAX_LIST_SIZE <= 0) {
		return;
	}
	var hd = list;
	var count = 0;
	while(hd != null) {
		if(!hxsl_ShaderList.ALLOW_DUPLICATES && hd.next != null && hd.next.s == hd.s) {
			throw haxe_Exception.thrown("Duplicate shader " + Std.string(hd.s));
		}
		++count;
		hd = hd.next;
	}
	if(count > hxsl_ShaderList.MAX_LIST_SIZE) {
		throw haxe_Exception.thrown("Too many shaders");
	}
};
hxsl_ShaderList.prototype = {
	__class__: hxsl_ShaderList
};
var hxsl_ShaderInstance = function(shader) {
	this.id = ++hxsl_ShaderInstance.UID;
	this.shader = shader;
	this.params = new haxe_ds_IntMap();
};
$hxClasses["hxsl.ShaderInstance"] = hxsl_ShaderInstance;
hxsl_ShaderInstance.__name__ = "hxsl.ShaderInstance";
hxsl_ShaderInstance.prototype = {
	__class__: hxsl_ShaderInstance
};
var hxsl_ShaderGlobal = function(v,gid) {
	this.v = v;
	this.globalId = gid;
};
$hxClasses["hxsl.ShaderGlobal"] = hxsl_ShaderGlobal;
hxsl_ShaderGlobal.__name__ = "hxsl.ShaderGlobal";
hxsl_ShaderGlobal.prototype = {
	__class__: hxsl_ShaderGlobal
};
var hxsl_ShaderConst = function(v,pos,bits) {
	this.v = v;
	this.pos = pos;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderConst"] = hxsl_ShaderConst;
hxsl_ShaderConst.__name__ = "hxsl.ShaderConst";
hxsl_ShaderConst.prototype = {
	__class__: hxsl_ShaderConst
};
var hxsl_SharedShader = function(src,module) {
	this.instanceCache = new haxe_ds_IntMap();
	this.consts = null;
	this.globals = [];
	if(src == "") {
		return;
	}
	this.module = module;
	this.data = new hxsl_Serializer().unserialize(src);
	var _g = 0;
	var _g1 = this.data.vars;
	while(_g < _g1.length) {
		var v = _g1[_g];
		++_g;
		this.initVarId(v);
	}
	this.data = hxsl_SharedShader.compactMem(this.data);
	this.initialize();
	this.initLiveReload();
};
$hxClasses["hxsl.SharedShader"] = hxsl_SharedShader;
hxsl_SharedShader.__name__ = "hxsl.SharedShader";
hxsl_SharedShader.mergeVars = function(vl,vl2) {
	if(vl.length != vl2.length) {
		return false;
	}
	var _g_current = 0;
	var _g_array = vl;
	while(_g_current < _g_array.length) {
		var _g_value = _g_array[_g_current];
		var _g_key = _g_current++;
		var i = _g_key;
		var v = _g_value;
		var v2 = vl2[i];
		if(v.name != v2.name) {
			return false;
		}
		v2.id = v.id;
		var _g = v.type;
		var _g1 = v2.type;
		if(_g._hx_index == 13) {
			if(_g1._hx_index == 13) {
				var vl21 = _g1.vl;
				var vl = _g.vl;
				if(vl.length != vl21.length) {
					return false;
				}
				if(!hxsl_SharedShader.mergeVars(vl,vl21)) {
					return false;
				}
			}
		}
	}
	return true;
};
hxsl_SharedShader.loadShader = function(fs,name) {
	var text = fs.getText();
	throw haxe_Exception.thrown("Shader live reload requires --library hscript");
};
hxsl_SharedShader.compactMem = function(mem) {
	return mem;
};
hxsl_SharedShader.prototype = {
	initialize: function() {
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.browseVar(v);
		}
	}
	,makeBufferType: function(v,tbuf,fmt) {
		var name = v.name;
		if(tbuf._hx_index == 13) {
			var vl = tbuf.vl;
			var _g = [];
			var _g_current = 0;
			var _g_array = fmt.inputs;
			while(_g_current < _g_array.length) {
				var i = _g_array[_g_current++];
				_g.push(i);
			}
			var inputs = _g;
			var vli = [];
			var p = 0;
			while(p < inputs.length) {
				var i = inputs[p++];
				var name = i.name;
				var t;
				switch(i.type) {
				case 1:
					t = hxsl_Type.TFloat;
					break;
				case 2:
					t = hxsl_Type.TVec(2,hxsl_VecType.VFloat);
					break;
				case 3:
					t = hxsl_Type.TVec(3,hxsl_VecType.VFloat);
					break;
				case 4:
					t = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
					break;
				case 9:
					t = hxsl_Type.TBytes(4);
					break;
				case 16:
					t = hxsl_Type.TMat4;
					break;
				}
				if(StringTools.endsWith(i.name,"__m0")) {
					var this1 = i.type;
					var h = this1 == js_Boot.__cast(9 , Int) ? 1 : this1;
					var w = 2;
					while(inputs[p + w - 1] != null && StringTools.endsWith(inputs[p + w - 1].name,"__m" + w)) ++w;
					switch(w) {
					case 2:
						if(h == 2) {
							t = hxsl_Type.TMat2;
						} else {
							throw haxe_Exception.thrown("Unsupported matrix format");
						}
						break;
					case 3:
						switch(h) {
						case 3:
							t = hxsl_Type.TMat3;
							break;
						case 4:
							t = hxsl_Type.TMat3x4;
							break;
						default:
							throw haxe_Exception.thrown("Unsupported matrix format");
						}
						break;
					case 4:
						if(h == 4) {
							t = hxsl_Type.TMat4;
						} else {
							throw haxe_Exception.thrown("Unsupported matrix format");
						}
						break;
					default:
						throw haxe_Exception.thrown("Unsupported matrix format");
					}
					name = HxOverrides.substr(i.name,0,-4);
					p += w - 1;
				}
				vli.push({ id : hxsl_Tools.allocVarId(), name : name, type : t, kind : v.kind, parent : v});
			}
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				var found = false;
				var _g1 = 0;
				while(_g1 < vli.length) {
					var v2 = vli[_g1];
					++_g1;
					if(v.name == v2.name) {
						var _g2 = v.type;
						var _g3 = v2.type;
						switch(_g2._hx_index) {
						case 3:
							if(_g3._hx_index != 3) {
								if(!Type.enumEq(v.type,v2.type)) {
									throw haxe_Exception.thrown("Buffer " + this.data.name + "." + v.name + ":" + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type));
								}
							}
							break;
						case 5:
							if(_g2.t._hx_index == 1) {
								if(_g3._hx_index == 5) {
									if(_g3.t._hx_index == 1) {
										var b = _g3.size;
										var a = _g2.size;
										if(a > b) {
											if(!Type.enumEq(v.type,v2.type)) {
												throw haxe_Exception.thrown("Buffer " + this.data.name + "." + v.name + ":" + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type));
											}
										}
									} else if(!Type.enumEq(v.type,v2.type)) {
										throw haxe_Exception.thrown("Buffer " + this.data.name + "." + v.name + ":" + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type));
									}
								} else if(!Type.enumEq(v.type,v2.type)) {
									throw haxe_Exception.thrown("Buffer " + this.data.name + "." + v.name + ":" + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type));
								}
							} else if(!Type.enumEq(v.type,v2.type)) {
								throw haxe_Exception.thrown("Buffer " + this.data.name + "." + v.name + ":" + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type));
							}
							break;
						default:
							if(!Type.enumEq(v.type,v2.type)) {
								throw haxe_Exception.thrown("Buffer " + this.data.name + "." + v.name + ":" + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type));
							}
						}
						found = true;
						break;
					}
				}
				if(!found) {
					throw haxe_Exception.thrown("Buffer is missing " + this.data.name + "." + v.name + ":" + hxsl_Tools.toString(v.type));
				}
			}
			return hxsl_Type.TStruct(vli);
		} else {
			throw haxe_Exception.thrown("assert");
		}
	}
	,makeInstance: function(constBits) {
		var $eval = new hxsl_Eval();
		var c = this.consts;
		var buffers = [];
		while(c != null) {
			var _g = c.v.type;
			switch(_g._hx_index) {
			case 1:
				$eval.setConstant(c.v,hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1));
				break;
			case 2:
				$eval.setConstant(c.v,hxsl_Const.CBool((constBits >>> c.pos & 1) != 0));
				break;
			case 16:
				var t = _g.t;
				var size = _g.size;
				var kind = _g.kind;
				var bits = constBits >>> c.pos & (1 << c.bits) - 1;
				var fmt = hxd_BufferFormat.fromID(bits);
				var v = { id : c.v.id, name : c.v.name, kind : c.v.kind, type : null};
				var fullT = this.makeBufferType(v,t,fmt);
				var tmp;
				switch(kind._hx_index) {
				case 3:
					tmp = hxsl_BufferKind.Uniform;
					break;
				case 4:
					tmp = hxsl_BufferKind.Storage;
					break;
				case 5:
					tmp = hxsl_BufferKind.RW;
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
				v.type = hxsl_Type.TBuffer(fullT,size,tmp);
				$eval.varMap.set(c.v,v);
				buffers.push(v);
				break;
			case 17:
				var _g1 = _g.size;
				$eval.setConstant(c.v,hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1));
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			c = c.next;
		}
		var _g = 0;
		while(_g < buffers.length) {
			var v = buffers[_g];
			++_g;
			var _g1 = v.type;
			if(_g1._hx_index == 16) {
				var _g2 = _g1.size;
				if(_g2._hx_index == 1) {
					var vs = _g2.v;
					var t = _g1.t;
					var kind = _g1.kind;
					var c = $eval.constants.h[vs.id];
					if(c != null) {
						if(c != null) {
							if(c._hx_index == 0) {
								var _g3 = c.c;
								if(_g3._hx_index == 2) {
									var i = _g3.v;
									v.type = hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(i),kind);
								}
							}
						}
					}
				}
			}
		}
		$eval.inlineCalls = true;
		$eval.unrollLoops = hxsl_SharedShader.UNROLL_LOOPS;
		var edata = $eval.eval(this.data);
		edata = hxsl_SharedShader.compactMem(edata);
		var i = new hxsl_ShaderInstance(edata);
		this.paramsCount = 0;
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addParam($eval,i,v);
		}
		this.instanceCache.h[constBits] = i;
		return i;
	}
	,addParam: function($eval,i,v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				this.addParam($eval,i,v1);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.h[$eval.varMap.h[v.__id__].id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	,initVarId: function(v) {
		v.id = hxsl_Tools.allocVarId();
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				this.initVarId(v);
			}
		}
	}
	,browseVar: function(v,path) {
		if(path == null) {
			path = hxsl_Tools.getName(v);
		} else {
			path += "." + v.name;
		}
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var vs = vl[_g];
				++_g;
				this.browseVar(vs,path);
			}
		} else {
			var globalId = 0;
			if(v.kind == hxsl_VarKind.Global) {
				globalId = hxsl_Globals.allocID(path);
				this.globals.push(new hxsl_ShaderGlobal(v,globalId));
			}
			if(!hxsl_Tools.isConst(v)) {
				return;
			}
			var bits = hxsl_Tools.getConstBits(v);
			if(bits > 0) {
				var pos = this.consts == null ? 0 : this.consts.pos + this.consts.bits;
				var c = new hxsl_ShaderConst(v,pos,bits);
				c.globalId = globalId;
				c.next = this.consts;
				this.consts = c;
			}
		}
	}
	,initLiveReload: function() {
		if(this.module == null) {
			return;
		}
		if(!hxd_fs_SourceLoader.isActive()) {
			return;
		}
		hxsl_SharedShader.SHADER_RESOLVE.h[this.data.name] = this;
		var path = this.module.split(".").join("/") + ".hx";
		this.file = hxd_fs_SourceLoader.resolve(path);
		if(this.file != null) {
			this.file.watch($bind(this,this.onFileReload));
		}
	}
	,onFileReload: function() {
		var h = hxsl_SharedShader.SHADER_RESOLVE.h;
		var sh_h = h;
		var sh_keys = Object.keys(h);
		var sh_length = sh_keys.length;
		var sh_current = 0;
		while(sh_current < sh_length) {
			var sh = sh_h[sh_keys[sh_current++]];
			if(sh.file == this.file) {
				sh.reloadShader();
			}
		}
	}
	,reloadShader: function() {
		try {
			var expr = hxsl_SharedShader.loadShader(this.file,this.data.name);
			if(expr == null) {
				return;
			}
			var checker = new hxsl_Checker();
			checker.loadShader = function(name) {
				var sh = hxsl_SharedShader.SHADER_RESOLVE.h[name];
				if(sh == null) {
					throw haxe_Exception.thrown("Could not resolve shader " + name);
				}
				if(sh.file == null) {
					throw haxe_Exception.thrown("Shader " + name + " can't be live reload because of missing live path");
				}
				return hxsl_SharedShader.loadShader(sh.file,sh.data.name);
			};
			var data = checker.check(this.data.name,expr);
			this.applyChanges(data);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl_Error)) {
				var e = _g1;
				var line = HxOverrides.substr(this.file.getText(),0,e.pos.min).split("\n").length;
				haxe_Log.trace(e.msg,{ methodName : null, className : null, fileName : e.pos.file, lineNumber : line});
				return;
			} else {
				throw _g;
			}
		}
	}
	,applyChanges: function(data2) {
		if(!hxsl_SharedShader.mergeVars(this.data.vars,data2.vars)) {
			return false;
		}
		this.data = hxsl_SharedShader.compactMem(data2);
		this.instanceCache = new haxe_ds_IntMap();
		return true;
	}
	,__class__: hxsl_SharedShader
};
var hxsl__$Splitter_VarProps = function(v) {
	this.v = v;
	this.read = 0;
	this.write = 0;
};
$hxClasses["hxsl._Splitter.VarProps"] = hxsl__$Splitter_VarProps;
hxsl__$Splitter_VarProps.__name__ = "hxsl._Splitter.VarProps";
hxsl__$Splitter_VarProps.prototype = {
	__class__: hxsl__$Splitter_VarProps
};
var hxsl_Splitter = function() {
};
$hxClasses["hxsl.Splitter"] = hxsl_Splitter;
hxsl_Splitter.__name__ = "hxsl.Splitter";
hxsl_Splitter.prototype = {
	split: function(s,isBatchShader) {
		var _gthis = this;
		this.isBatchShader = isBatchShader;
		var vfun = null;
		var vvars = new haxe_ds_IntMap();
		var avvars = [];
		var ffun = null;
		var fvars = new haxe_ds_IntMap();
		var afvars = [];
		var isCompute = false;
		this.varNames = new haxe_ds_StringMap();
		this.varMap = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			switch(f.kind._hx_index) {
			case 1:
				this.vars = fvars;
				this.avars = afvars;
				ffun = f;
				this.checkExpr(f.expr);
				break;
			case 0:case 4:
				this.vars = vvars;
				this.avars = avvars;
				vfun = f;
				this.checkExpr(f.expr);
				if(f.kind == hxsl_FunctionKind.Main) {
					isCompute = true;
				}
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
		}
		var vafterMap = [];
		var length = avvars.length;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			var inf = [avvars[i]];
			var v = [inf[0].v];
			if(inf[0].local) {
				continue;
			}
			switch(v[0].kind._hx_index) {
			case 3:case 4:
				var fv = fvars.h[inf[0].origin.id];
				v[0].kind = fv != null && fv.read > 0 ? hxsl_VarKind.Var : hxsl_VarKind.Local;
				break;
			default:
			}
			switch(v[0].kind._hx_index) {
			case 3:case 5:
				if(inf[0].read > 0 || inf[0].write > 1) {
					var nv = { id : hxsl_Tools.allocVarId(), name : v[0].name, kind : hxsl_VarKind.Local, type : v[0].type};
					this.uniqueName(nv);
					this.varMap.set(inf[0].origin,nv);
					var ninf = new hxsl__$Splitter_VarProps(nv);
					ninf.read++;
					vvars.h[nv.id] = ninf;
					var p = vfun.expr.p;
					var e = [{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(v[0]), t : nv.type, p : p},{ e : hxsl_TExprDef.TVar(nv), t : v[0].type, p : p}), t : nv.type, p : p}];
					vafterMap.push((function(e) {
						return function() {
							_gthis.addExpr(vfun,e[0]);
						};
					})(e));
					if(v[0].kind == hxsl_VarKind.Var) {
						vafterMap.push((function(v,inf) {
							return function() {
								_gthis.varMap.set(inf[0].origin,v[0]);
							};
						})(v,inf));
					}
				}
				break;
			default:
			}
		}
		vfun = { ret : vfun.ret, ref : vfun.ref, kind : vfun.kind, args : vfun.args, expr : this.mapVars(vfun.expr)};
		var _g = 0;
		while(_g < vafterMap.length) {
			var f = vafterMap[_g];
			++_g;
			f();
		}
		var finits = [];
		var _g = 0;
		while(_g < afvars.length) {
			var inf1 = afvars[_g];
			++_g;
			var v1 = inf1.v;
			switch(v1.kind._hx_index) {
			case 1:
				var nv = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Var, type : v1.type};
				this.uniqueName(nv);
				var i = vvars.h[inf1.origin.id];
				if(i == null) {
					i = new hxsl__$Splitter_VarProps(v1);
					vvars.h[inf1.origin.id] = i;
				}
				i.read++;
				this.varMap.set(inf1.origin,nv);
				var ninf = new hxsl__$Splitter_VarProps(nv);
				ninf.origin = inf1.origin;
				fvars.h[inf1.origin.id] = ninf;
				vvars.h[nv.id] = ninf;
				this.addExpr(vfun,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : v1.type, p : vfun.expr.p},{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : vfun.expr.p}), t : v1.type, p : vfun.expr.p});
				break;
			case 3:
				if(inf1.write > 0) {
					var nv1 = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Local, type : v1.type};
					this.uniqueName(nv1);
					finits.push({ e : hxsl_TExprDef.TVarDecl(nv1,{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : ffun.expr.p}), t : hxsl_Type.TVoid, p : ffun.expr.p});
					this.varMap.set(inf1.origin,nv1);
				}
				break;
			default:
			}
		}
		var v1 = vvars.iterator();
		while(v1.hasNext()) {
			var v2 = v1.next();
			this.checkVar(v2,true,vvars,vfun.expr.p);
		}
		var v1 = fvars.iterator();
		while(v1.hasNext()) {
			var v2 = v1.next();
			this.checkVar(v2,false,vvars,ffun.expr.p);
		}
		if(ffun != null) {
			ffun = { ret : ffun.ret, ref : ffun.ref, kind : ffun.kind, args : ffun.args, expr : this.mapVars(ffun.expr)};
			var _g = ffun.expr.e;
			if(_g._hx_index == 4) {
				var el = _g.el;
				var _g = 0;
				while(_g < finits.length) {
					var e1 = finits[_g];
					++_g;
					el.unshift(e1);
				}
			} else {
				finits.push(ffun.expr);
				ffun.expr = { e : hxsl_TExprDef.TBlock(finits), t : hxsl_Type.TVoid, p : ffun.expr.p};
			}
		}
		var _g = [];
		var v1 = vvars.iterator();
		while(v1.hasNext()) {
			var v2 = v1.next();
			if(!v2.local) {
				_g.push(v2);
			}
		}
		var vvars = _g;
		var _g = [];
		var v1 = fvars.iterator();
		while(v1.hasNext()) {
			var v2 = v1.next();
			if(!v2.local) {
				_g.push(v2);
			}
		}
		var fvars = _g;
		vvars.sort(function(v1,v2) {
			var result = (v1.origin == null ? v1.v.id : v1.origin.id) - (v2.origin == null ? v2.v.id : v2.origin.id);
			if(result != 0) {
				return result;
			} else {
				return v1.v.id - v2.v.id;
			}
		});
		fvars.sort(function(v1,v2) {
			var result = (v1.origin == null ? v1.v.id : v1.origin.id) - (v2.origin == null ? v2.v.id : v2.origin.id);
			if(result != 0) {
				return result;
			} else {
				return v1.v.id - v2.v.id;
			}
		});
		if(isCompute) {
			var _g = [];
			var _g1 = 0;
			while(_g1 < vvars.length) {
				var v1 = vvars[_g1];
				++_g1;
				_g.push(v1.v);
			}
			return [{ name : "main", vars : _g, funs : [vfun]}];
		} else {
			var _g = [];
			var _g1 = 0;
			while(_g1 < vvars.length) {
				var v1 = vvars[_g1];
				++_g1;
				_g.push(v1.v);
			}
			var tmp = { name : "vertex", vars : _g, funs : [vfun]};
			var _g = [];
			var _g1 = 0;
			while(_g1 < fvars.length) {
				var v1 = fvars[_g1];
				++_g1;
				_g.push(v1.v);
			}
			return [tmp,{ name : "fragment", vars : _g, funs : [ffun]}];
		}
	}
	,addExpr: function(f,e) {
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			el.push(e);
		} else {
			f.expr = { e : hxsl_TExprDef.TBlock([f.expr,e]), t : hxsl_Type.TVoid, p : f.expr.p};
		}
	}
	,checkVar: function(v,vertex,vvars,p) {
		switch(v.v.kind._hx_index) {
		case 3:
			if(!vertex) {
				var i = vvars.h[v.origin.id];
				if(i != null && i.v.kind == hxsl_VarKind.Input) {
					return;
				}
				if(v.requireInit && (i == null || i.write == 0)) {
					throw haxe_Exception.thrown(new hxsl_Error("Varying " + v.v.name + " is not written by vertex shader",p));
				}
			}
			break;
		case 4:
			if(v.requireInit) {
				if(v.origin.parent == null || v.origin.parent.name != "global" && !this.isBatchShader) {
					throw haxe_Exception.thrown(new hxsl_Error("Variable " + v.v.name + " is used without being initialized",p));
				}
			}
			break;
		default:
		}
	}
	,mapVars: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return e;
			} else {
				return { e : hxsl_TExprDef.TVar(v2), t : e.t, p : e.p};
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TVarDecl(v2,init == null ? null : this.mapVars(init)), t : e.t, p : e.p};
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TFor(v2,this.mapVars(it),this.mapVars(loop)), t : e.t, p : e.p};
			}
			break;
		default:
			return hxsl_Tools.map(e,$bind(this,this.mapVars));
		}
	}
	,get: function(v) {
		var i = this.vars.h[v.id];
		if(i == null) {
			var nv = this.varMap.h[v.__id__];
			if(nv == null) {
				if(v.kind == hxsl_VarKind.Global || v.kind == hxsl_VarKind.Output || v.kind == hxsl_VarKind.Input) {
					nv = v;
				} else {
					nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
					if(v.qualifiers != null) {
						var _g = 0;
						var _g1 = v.qualifiers;
						while(_g < _g1.length) {
							var q = _g1[_g];
							++_g;
							switch(q._hx_index) {
							case 0:
								var _g2 = q.max;
								break;
							case 4:
								var _g3 = q.n;
								break;
							case 6:
								var _g4 = q.p;
								break;
							case 7:
								var _g5 = q.min;
								var _g6 = q.max;
								break;
							case 1:case 2:case 3:case 5:case 8:
								break;
							case 9:
								var _g7 = q.v;
								break;
							case 10:
								var _g8 = q.s;
								break;
							case 11:
								var _g9 = q.source;
								break;
							case 12:
								var _g10 = q.name;
								break;
							case 13:case 14:
								if(nv.qualifiers == null) {
									nv.qualifiers = [];
								}
								nv.qualifiers.push(q);
								break;
							}
						}
					}
					this.uniqueName(nv);
				}
				this.varMap.set(v,nv);
			}
			i = new hxsl__$Splitter_VarProps(nv);
			i.origin = v;
			this.vars.h[v.id] = i;
			this.avars.push(i);
		}
		return i;
	}
	,uniqueName: function(v) {
		if(v.kind == hxsl_VarKind.Global || v.kind == hxsl_VarKind.Output || v.kind == hxsl_VarKind.Input) {
			return;
		}
		var n = this.varNames.h[v.name];
		if(n != null && n != v) {
			var prefix = v.name;
			while(HxOverrides.cca(prefix,prefix.length - 1) >= 48 && HxOverrides.cca(prefix,prefix.length - 1) <= 57) prefix = HxOverrides.substr(prefix,0,-1);
			var k = prefix == v.name ? 2 : Std.parseInt(HxOverrides.substr(v.name,prefix.length,null));
			while(Object.prototype.hasOwnProperty.call(this.varNames.h,prefix + k)) ++k;
			v.name = prefix + k;
		}
		this.varNames.h[v.name] = v;
	}
	,checkExpr: function(e) {
		var _gthis = this;
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var inf = this.get(v);
			if(inf.write == 0) {
				inf.requireInit = true;
			}
			inf.read++;
			break;
		case 5:
			var _g1 = _g.op;
			var _g2 = _g.e1;
			var _g3 = _g.e2;
			switch(_g1._hx_index) {
			case 4:
				var _g4 = _g2.e;
				var _g5 = _g2.p;
				var _g5 = _g2.t;
				switch(_g4._hx_index) {
				case 1:
					var v = _g4.v;
					var e1 = _g3;
					var inf = this.get(v);
					inf.write++;
					this.checkExpr(e1);
					break;
				case 9:
					var _g5 = _g4.e;
					var _g6 = _g4.regs;
					var _g4 = _g5.e;
					var _g6 = _g5.p;
					var _g6 = _g5.t;
					if(_g4._hx_index == 1) {
						var v = _g4.v;
						var e1 = _g3;
						var inf = this.get(v);
						inf.write++;
						this.checkExpr(e1);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			case 20:
				var _g4 = _g1.op;
				var _g1 = _g2.e;
				var _g4 = _g2.p;
				var _g4 = _g2.t;
				switch(_g1._hx_index) {
				case 1:
					var v = _g1.v;
					var e1 = _g3;
					var inf = this.get(v);
					if(inf.write == 0) {
						inf.requireInit = true;
					}
					inf.read++;
					inf.write++;
					this.checkExpr(e1);
					break;
				case 9:
					var _g2 = _g1.e;
					var _g4 = _g1.regs;
					var _g1 = _g2.e;
					var _g4 = _g2.p;
					var _g4 = _g2.t;
					if(_g1._hx_index == 1) {
						var v = _g1.v;
						var e1 = _g3;
						var inf = this.get(v);
						if(inf.write == 0) {
							inf.requireInit = true;
						}
						inf.read++;
						inf.write++;
						this.checkExpr(e1);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			default:
				hxsl_Tools.iter(e,$bind(this,this.checkExpr));
			}
			break;
		case 7:
			var v = _g.v;
			var init = _g.init;
			var inf = this.get(v);
			inf.local = true;
			if(init != null) {
				this.checkExpr(init);
				inf.write++;
			}
			break;
		case 13:
			var v = _g.v;
			var it = _g.it;
			var loop = _g.loop;
			this.checkExpr(it);
			var inf = this.get(v);
			inf.local = true;
			inf.write++;
			this.checkExpr(loop);
			break;
		case 22:
			var _g1 = _g.target;
			var _g1 = _g.code;
			var args = _g.args;
			var arg = null;
			var checkSyntaxExpr = null;
			checkSyntaxExpr = function(e) {
				var _g = e.e;
				if(_g._hx_index == 1) {
					var v = _g.v;
					var inf = _gthis.get(v);
					switch(arg.access._hx_index) {
					case 0:
						inf.read--;
						break;
					case 1:
						inf.write++;
						break;
					case 2:
						inf.read--;
						inf.write++;
						break;
					}
				} else {
					hxsl_Tools.iter(e,checkSyntaxExpr);
				}
			};
			var _g = 0;
			var _g1 = args.length;
			while(_g < _g1) {
				var i = _g++;
				arg = args[i];
				checkSyntaxExpr(arg.e);
				this.checkExpr(arg.e);
			}
			break;
		default:
			hxsl_Tools.iter(e,$bind(this,this.checkExpr));
		}
	}
	,__class__: hxsl_Splitter
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
Math.__name__ = "Math";
var screens_ButtonTestScreen = function(screenManager,layers) {
	bh_ui_screens_UIScreenBase.call(this,screenManager,layers);
};
$hxClasses["screens.ButtonTestScreen"] = screens_ButtonTestScreen;
screens_ButtonTestScreen.__name__ = "screens.ButtonTestScreen";
screens_ButtonTestScreen.__super__ = bh_ui_screens_UIScreenBase;
screens_ButtonTestScreen.prototype = $extend(bh_ui_screens_UIScreenBase.prototype,{
	load: function() {
		var _gthis = this;
		this.builder = this.screenManager.buildFromResourceName("std.manim",false);
		var buttonBuilder = this.screenManager.buildFromResourceName("button.manim",false);
		var generatedByMacroBuildWithParametersload824Builder = function() {
			var disableCheckbox;
			var button;
			var buttonBuilder1 = buttonBuilder;
			var builderResults = new haxe_ds_StringMap();
			var _g = new haxe_ds_StringMap();
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addCheckbox(_gthis.builder,settings,false);
				_gthis.addElement(element,null);
				disableCheckbox = element;
				return element.getObject();
			});
			_g.h["disableCheckbox"] = value;
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addButton(buttonBuilder,"Click Me!",settings);
				_gthis.addElement(element,null);
				button = element;
				return element.getObject();
			});
			_g.h["button"] = value;
			var builderResults1 = buttonBuilder1.buildWithParameters("ui",builderResults,{ placeholderObjects : _g});
			var retVal = { disableCheckbox : disableCheckbox, button : button, builderResults : builderResults1};
			if(retVal.disableCheckbox == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "disableCheckbox" + " is null (check if placeholder object is named correctly)");
			}
			if(retVal.button == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "button" + " is null (check if placeholder object is named correctly)");
			}
			return retVal;
		};
		var ui = generatedByMacroBuildWithParametersload824Builder();
		this.updatableText = ui.builderResults.getUpdatable("buttonVal");
		this.disableCheckbox = ui.disableCheckbox;
		this.button = ui.button;
		this.addBuilderResult(ui.builderResults);
	}
	,onScreenEvent: function(event,source) {
		switch(event._hx_index) {
		case 0:
			this.updatableText.updateText("Button Clicked!");
			break;
		case 2:
			var pressed = event.pressed;
			if(source == this.disableCheckbox) {
				this.updatableText.updateText("Disabled checkbox toggled: " + (pressed == null ? "null" : "" + pressed));
				this.button.set_disabled(pressed);
			}
			break;
		default:
		}
	}
	,__class__: screens_ButtonTestScreen
});
var screens_CheckboxTestScreen = function(screenManager,layers) {
	bh_ui_screens_UIScreenBase.call(this,screenManager,layers);
};
$hxClasses["screens.CheckboxTestScreen"] = screens_CheckboxTestScreen;
screens_CheckboxTestScreen.__name__ = "screens.CheckboxTestScreen";
screens_CheckboxTestScreen.__super__ = bh_ui_screens_UIScreenBase;
screens_CheckboxTestScreen.prototype = $extend(bh_ui_screens_UIScreenBase.prototype,{
	load: function() {
		var _gthis = this;
		this.builder = this.screenManager.buildFromResourceName("std.manim",false);
		var checkboxBuilder = this.screenManager.buildFromResourceName("checkbox.manim",false);
		var generatedByMacroBuildWithParametersload747Builder = function() {
			var checkbox;
			var checkboxBuilder1 = checkboxBuilder;
			var builderResults = new haxe_ds_StringMap();
			var _g = new haxe_ds_StringMap();
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addCheckbox(_gthis.builder,settings,false);
				_gthis.addElement(element,null);
				checkbox = element;
				return element.getObject();
			});
			_g.h["checkbox"] = value;
			var builderResults1 = checkboxBuilder1.buildWithParameters("ui",builderResults,{ placeholderObjects : _g});
			var retVal = { checkbox : checkbox, builderResults : builderResults1};
			if(retVal.checkbox == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "checkbox" + " is null (check if placeholder object is named correctly)");
			}
			return retVal;
		};
		var ui = generatedByMacroBuildWithParametersload747Builder();
		this.updatableText = ui.builderResults.getUpdatable("checkboxVal");
		this.addBuilderResult(ui.builderResults);
	}
	,onScreenEvent: function(event,source) {
		if(event._hx_index == 2) {
			var pressed = event.pressed;
			this.updatableText.updateText("" + (pressed == null ? "null" : "" + pressed));
		}
	}
	,__class__: screens_CheckboxTestScreen
});
var screens_ComponentsTestScreen = function(screenManager,layers) {
	bh_ui_screens_UIScreenBase.call(this,screenManager,layers);
};
$hxClasses["screens.ComponentsTestScreen"] = screens_ComponentsTestScreen;
screens_ComponentsTestScreen.__name__ = "screens.ComponentsTestScreen";
screens_ComponentsTestScreen.__super__ = bh_ui_screens_UIScreenBase;
screens_ComponentsTestScreen.prototype = $extend(bh_ui_screens_UIScreenBase.prototype,{
	createCross: function(color) {
		var x = 0;
		var y = 0;
		var size = 4.;
		var pointGraphics = new h2d_Graphics();
		pointGraphics.lineStyle(1,color,1.0);
		var x1 = x - size;
		pointGraphics.flush();
		pointGraphics.addVertex(x1,y,pointGraphics.curR,pointGraphics.curG,pointGraphics.curB,pointGraphics.curA,x1 * pointGraphics.ma + y * pointGraphics.mc + pointGraphics.mx,x1 * pointGraphics.mb + y * pointGraphics.md + pointGraphics.my);
		var x1 = x + size;
		pointGraphics.addVertex(x1,y,pointGraphics.curR,pointGraphics.curG,pointGraphics.curB,pointGraphics.curA,x1 * pointGraphics.ma + y * pointGraphics.mc + pointGraphics.mx,x1 * pointGraphics.mb + y * pointGraphics.md + pointGraphics.my);
		var y1 = y - size;
		pointGraphics.flush();
		pointGraphics.addVertex(x,y1,pointGraphics.curR,pointGraphics.curG,pointGraphics.curB,pointGraphics.curA,x * pointGraphics.ma + y1 * pointGraphics.mc + pointGraphics.mx,x * pointGraphics.mb + y1 * pointGraphics.md + pointGraphics.my);
		var y1 = y + size;
		pointGraphics.addVertex(x,y1,pointGraphics.curR,pointGraphics.curG,pointGraphics.curB,pointGraphics.curA,x * pointGraphics.ma + y1 * pointGraphics.mc + pointGraphics.mx,x * pointGraphics.mb + y1 * pointGraphics.md + pointGraphics.my);
		return pointGraphics;
	}
	,load: function() {
		var _gthis = this;
		var list4 = [{ name : "10"},{ name : "50"},{ name : "100"},{ name : "1000"}];
		var _g = [];
		_g.push({ name : "" + 1});
		_g.push({ name : "" + 2});
		_g.push({ name : "" + 3});
		_g.push({ name : "" + 4});
		_g.push({ name : "" + 5});
		_g.push({ name : "" + 6});
		_g.push({ name : "" + 7});
		_g.push({ name : "" + 8});
		_g.push({ name : "" + 9});
		_g.push({ name : "" + 10});
		_g.push({ name : "" + 11});
		_g.push({ name : "" + 12});
		_g.push({ name : "" + 13});
		_g.push({ name : "" + 14});
		_g.push({ name : "" + 15});
		_g.push({ name : "" + 16});
		_g.push({ name : "" + 17});
		_g.push({ name : "" + 18});
		_g.push({ name : "" + 19});
		var list20 = _g;
		var _g = [];
		var _g1 = 1;
		while(_g1 < 100) {
			var i = _g1++;
			_g.push({ name : "" + i});
		}
		var list100 = _g;
		var _g = [];
		var _g1 = 1;
		while(_g1 < 20) {
			var i = _g1++;
			_g.push({ name : "" + i, disabled : i < 3 || i > 15});
		}
		var list20disabled = _g;
		this.builder = this.screenManager.buildFromResourceName("std.manim",false);
		var componentsBuilder = this.screenManager.buildFromResourceName("components.manim",false);
		var tileGroupTest1 = componentsBuilder.buildWithParameters("testTileGroup1",new haxe_ds_StringMap());
		this.addBuilderResult(tileGroupTest1);
		var tileGroupTest2 = componentsBuilder.buildWithParameters("testTileGroup2",new haxe_ds_StringMap());
		this.addBuilderResult(tileGroupTest2);
		var tileGroupTest3 = componentsBuilder.buildWithParameters("testTileGroup3",new haxe_ds_StringMap());
		this.addBuilderResult(tileGroupTest3);
		var tileGroupTest4 = componentsBuilder.buildWithParameters("testTileGroup4",new haxe_ds_StringMap());
		this.addBuilderResult(tileGroupTest4);
		var tileGroupTest5 = componentsBuilder.buildWithParameters("testTileGroup5",new haxe_ds_StringMap());
		this.addBuilderResult(tileGroupTest5);
		var tileGroupTest6 = componentsBuilder.buildWithParameters("testTileGroup6",new haxe_ds_StringMap());
		this.addBuilderResult(tileGroupTest6);
		var mainLayout = componentsBuilder.getLayouts();
		var buttonsIterator = mainLayout.getIterator("buttons");
		var dropDownIterator = mainLayout.getIterator("mainDropDown");
		var checkboxesIterator = mainLayout.getIterator("checkboxes");
		var generatedByMacroBuildWithParametersload2738Builder = function() {
			var scroll4;
			var scroll3;
			var scroll2;
			var scroll1;
			var checkboxWithLabel;
			var checkbox5;
			var checkbox4;
			var checkbox3;
			var checkbox2;
			var checkbox1;
			var componentsBuilder1 = componentsBuilder;
			var builderResults = new haxe_ds_StringMap();
			var _g = new haxe_ds_StringMap();
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addScrollableList(_gthis.builder,100,120,list20disabled,settings,3);
				_gthis.addElement(element,null);
				scroll4 = element;
				return element.getObject();
			});
			_g.h["scroll4"] = value;
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addScrollableList(_gthis.builder,100,120,list20,settings,3);
				_gthis.addElement(element,null);
				scroll3 = element;
				return element.getObject();
			});
			_g.h["scroll3"] = value;
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addScrollableList(_gthis.builder,100,120,list100,settings,10);
				_gthis.addElement(element,null);
				scroll2 = element;
				return element.getObject();
			});
			_g.h["scroll2"] = value;
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addScrollableList(_gthis.builder,100,120,list4,settings,-1);
				_gthis.addElement(element,null);
				scroll1 = element;
				return element.getObject();
			});
			_g.h["scroll1"] = value;
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addCheckboxWithText(_gthis.builder,settings,"my label",true);
				_gthis.addElement(element,null);
				checkboxWithLabel = element;
				return element.getObject();
			});
			_g.h["checkboxWithLabel"] = value;
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addCheckbox(_gthis.builder,settings,true);
				_gthis.addElement(element,null);
				checkbox5 = element;
				return element.getObject();
			});
			_g.h["checkbox5"] = value;
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addCheckbox(_gthis.builder,settings,true);
				_gthis.addElement(element,null);
				checkbox4 = element;
				return element.getObject();
			});
			_g.h["checkbox4"] = value;
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addCheckbox(_gthis.builder,settings,true);
				_gthis.addElement(element,null);
				checkbox3 = element;
				return element.getObject();
			});
			_g.h["checkbox3"] = value;
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addCheckbox(_gthis.builder,settings,true);
				_gthis.addElement(element,null);
				checkbox2 = element;
				return element.getObject();
			});
			_g.h["checkbox2"] = value;
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addCheckbox(_gthis.builder,settings,true);
				_gthis.addElement(element,null);
				checkbox1 = element;
				return element.getObject();
			});
			_g.h["checkbox1"] = value;
			var builderResults1 = componentsBuilder1.buildWithParameters("ui",builderResults,{ placeholderObjects : _g});
			var retVal = { scroll4 : scroll4, scroll3 : scroll3, scroll2 : scroll2, scroll1 : scroll1, checkboxWithLabel : checkboxWithLabel, checkbox5 : checkbox5, checkbox4 : checkbox4, checkbox3 : checkbox3, checkbox2 : checkbox2, checkbox1 : checkbox1, builderResults : builderResults1};
			if(retVal.scroll4 == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "scroll4" + " is null (check if placeholder object is named correctly)");
			}
			if(retVal.scroll3 == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "scroll3" + " is null (check if placeholder object is named correctly)");
			}
			if(retVal.scroll2 == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "scroll2" + " is null (check if placeholder object is named correctly)");
			}
			if(retVal.scroll1 == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "scroll1" + " is null (check if placeholder object is named correctly)");
			}
			if(retVal.checkboxWithLabel == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "checkboxWithLabel" + " is null (check if placeholder object is named correctly)");
			}
			if(retVal.checkbox5 == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "checkbox5" + " is null (check if placeholder object is named correctly)");
			}
			if(retVal.checkbox4 == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "checkbox4" + " is null (check if placeholder object is named correctly)");
			}
			if(retVal.checkbox3 == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "checkbox3" + " is null (check if placeholder object is named correctly)");
			}
			if(retVal.checkbox2 == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "checkbox2" + " is null (check if placeholder object is named correctly)");
			}
			if(retVal.checkbox1 == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "checkbox1" + " is null (check if placeholder object is named correctly)");
			}
			return retVal;
		};
		var res = generatedByMacroBuildWithParametersload2738Builder();
		var ui = res.builderResults;
		this.addBuilderResult(res.builderResults);
		this.reset = this.addElementWithIterator(bh_ui_UIStandardMultiAnimButton.create(this.builder,"button","Reset"),buttonsIterator);
		this.disable = this.addElementWithIterator(bh_ui_UIStandardMultiAnimButton.create(this.builder,"button","disable"),buttonsIterator);
		this.slider = this.addElementWithPos(bh_ui_UIStandardMultiAnimSlider.create(this.builder,"slider",200),1000,200);
		this.addElementWithIterator(bh_ui_UIStandardMultiAnimDropdown.create(this.builder,"dropdown","list-panel","list-item-120",[{ name : "item A"},{ name : "item B"},{ name : "item C"}]),dropDownIterator);
		this.addElementWithIterator(bh_ui_UIStandardMultiAnimDropdown.create(this.builder,"dropdown","list-panel","list-item-120",[{ name : "Krava"},{ name : "Trava"},{ name : "Zelena Jama"},{ name : "XXXXX"}]),dropDownIterator);
		var dd3 = this.addElementWithIterator(bh_ui_UIStandardMultiAnimDropdown.create(this.builder,"dropdown","list-panel","list-item-120",[{ name : "10"},{ name : "50"},{ name : "100"},{ name : "1000"}]),dropDownIterator);
		dd3.autoOpen = false;
		this.checkbox1 = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(this.builder,"checkbox",true),checkboxesIterator);
		this.checkbox2 = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(this.builder,"checkbox",true),checkboxesIterator);
		this.checkbox3 = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(this.builder,"checkbox",true),checkboxesIterator);
		var radioBox = bh_ui_UIMultiAnimRadioButtons.create(this.builder,"radioButtons","radio2",list4,1);
		this.addElementWithPos(radioBox,300,300);
		var h2dObj = this.createCross(-65536);
		var testCheckbox = bh_ui_UIStandardMultiCheckbox.create(this.builder,"checkbox",true);
		var generatedByMacroBuildWithParametersload5336Builder = function() {
			var factoryElement;
			var h2dObjectFactory;
			var componentsBuilder1 = componentsBuilder;
			var builderResults = new haxe_ds_StringMap();
			var _g = new haxe_ds_StringMap();
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.createCross(-16776961);
				h2dObjectFactory = element;
				return element;
			});
			_g.h["h2dObjectFactory"] = value;
			_g.h["h2dObject"] = bh_multianim_PlaceholderValues.PVObject(h2dObj);
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addCheckbox(_gthis.builder,settings,true);
				_gthis.addElement(element,null);
				factoryElement = element;
				return element.getObject();
			});
			_g.h["factoryElement"] = value;
			var value = bh_multianim_PlaceholderValues.PVObject(testCheckbox.getObject());
			_g.h["element"] = value;
			var builderResults1 = componentsBuilder1.buildWithParameters("macroTest",builderResults,{ placeholderObjects : _g});
			var retVal = { h2dObject : h2dObj, element : testCheckbox, factoryElement : factoryElement, h2dObjectFactory : h2dObjectFactory, builderResults : builderResults1};
			_gthis.addElement(retVal.element,null);
			if(retVal.factoryElement == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "factoryElement" + " is null (check if placeholder object is named correctly)");
			}
			if(retVal.h2dObjectFactory == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters h2d.Object value " + "h2dObjectFactory" + " is null (check if placeholder object is named correctly)");
			}
			return retVal;
		};
		var macroRes = generatedByMacroBuildWithParametersload5336Builder();
		this.addBuilderResult(macroRes.builderResults);
	}
	,onScreenEvent: function(event,source) {
		haxe_Log.trace(event,{ fileName : "src/screens/ComponentsTestScreen.hx", lineNumber : 139, className : "screens.ComponentsTestScreen", methodName : "onScreenEvent", customParams : [source]});
		switch(event._hx_index) {
		case 0:
			if(source == this.reset) {
				this.checkbox1.set_selected(true);
				this.checkbox2.set_selected(true);
				this.checkbox3.set_selected(true);
				this.slider.setIntValue(20);
			}
			if(source == this.disable) {
				this.checkbox1.set_disabled(!this.checkbox1.disabled);
				this.checkbox2.set_selected(!this.checkbox2.selected);
				this.checkbox3.set_selected(!this.checkbox3.selected);
				this.slider.set_disabled(!this.slider.disabled);
				this.reset.set_disabled(!this.reset.disabled);
			}
			break;
		case 1:
			var eventName = event.eventName;
			var data = event.data;
			break;
		case 2:
			var pressed = event.pressed;
			break;
		case 3:
			var value = event.value;
			break;
		case 4:
			var index = event.index;
			var items = event.items;
			break;
		case 5:
			var keyCode = event.keyCode;
			var release = event.release;
			break;
		case 6:
			var result = event.event;
			break;
		}
	}
	,__class__: screens_ComponentsTestScreen
});
var screens_Examples1Screen = function(screenManager,layers) {
	this.last = 0.;
	bh_ui_screens_UIScreenBase.call(this,screenManager,layers);
};
$hxClasses["screens.Examples1Screen"] = screens_Examples1Screen;
screens_Examples1Screen.__name__ = "screens.Examples1Screen";
screens_Examples1Screen.__super__ = bh_ui_screens_UIScreenBase;
screens_Examples1Screen.prototype = $extend(bh_ui_screens_UIScreenBase.prototype,{
	load: function() {
		this.rand = new hxd_Rand(17);
		this.builder = this.screenManager.buildFromResourceName("examples1.manim",false);
		var stdBuilder = this.screenManager.buildFromResourceName("std.manim",false);
		var ui = this.addBuilderResult(this.builder.buildWithParameters("ui",new haxe_ds_StringMap()));
		this.updatableText = ui.getUpdatable("textToUpdate");
		this.updatableTile = ui.getUpdatable("bitmapToUpdate");
	}
	,onScreenEvent: function(event,source) {
		if(event._hx_index == 6) {
			var event1 = event.event;
			haxe_Log.trace(event1,{ fileName : "src/screens/Examples1Screen.hx", lineNumber : 43, className : "screens.Examples1Screen", methodName : "onScreenEvent"});
		}
	}
	,update: function(dt) {
		bh_ui_screens_UIScreenBase.prototype.update.call(this,dt);
		var t = HxOverrides.now() / 1000;
		if(t - this.last > 1) {
			this.updatableText.updateText("" + t);
			var x = 1.;
			var _this = this.rand;
			_this.seed = 36969 * (_this.seed & 65535) + (_this.seed >> 16);
			_this.seed2 = 18000 * (_this.seed2 & 65535) + (_this.seed2 >> 16);
			var y = (((_this.seed << 16) + _this.seed2 | 0) & 1073741823) % 10007 / 10007.0;
			var _this = this.rand;
			_this.seed = 36969 * (_this.seed & 65535) + (_this.seed >> 16);
			_this.seed2 = 18000 * (_this.seed2 & 65535) + (_this.seed2 >> 16);
			var z = (((_this.seed << 16) + _this.seed2 | 0) & 1073741823) % 10007 / 10007.0;
			var _this = this.rand;
			_this.seed = 36969 * (_this.seed & 65535) + (_this.seed >> 16);
			_this.seed2 = 18000 * (_this.seed2 & 65535) + (_this.seed2 >> 16);
			var w = (((_this.seed << 16) + _this.seed2 | 0) & 1073741823) % 10007 / 10007.0;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var x1 = x;
			var y1 = y;
			var z1 = z;
			var w1 = w;
			if(w1 == null) {
				w1 = 1.;
			}
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var _this_x = x1;
			var _this_y = y1;
			var _this_z = z1;
			var _this_w = w1;
			var f = _this_w;
			var f1 = _this_x;
			var f2 = _this_y;
			var f3 = _this_z;
			var c = ((f < 0. ? 0. : f > 1. ? 1. : f) * 255 + 0.499 | 0) << 24 | ((f1 < 0. ? 0. : f1 > 1. ? 1. : f1) * 255 + 0.499 | 0) << 16 | ((f2 < 0. ? 0. : f2 > 1. ? 1. : f2) * 255 + 0.499 | 0) << 8 | ((f3 < 0. ? 0. : f3 > 1. ? 1. : f3) * 255 + 0.499 | 0);
			this.updatableTile.updateTile(h2d_Tile.fromColor(c,30,30,1.));
			this.last = t;
		}
	}
	,__class__: screens_Examples1Screen
});
var screens_FontsScreen = function(screenManager,layers) {
	bh_ui_screens_UIScreenBase.call(this,screenManager,layers);
};
$hxClasses["screens.FontsScreen"] = screens_FontsScreen;
screens_FontsScreen.__name__ = "screens.FontsScreen";
screens_FontsScreen.__super__ = bh_ui_screens_UIScreenBase;
screens_FontsScreen.prototype = $extend(bh_ui_screens_UIScreenBase.prototype,{
	load: function() {
		this.builder = this.screenManager.buildFromResourceName("std.manim",false);
		var fontsBuilder = this.screenManager.buildFromResourceName("fonts.manim",false);
		var fontsIterator = fontsBuilder.getLayouts().getIterator("fonts");
		var fontNamesIterator = fontsBuilder.getLayouts().getIterator("fontNames");
		var names = bh_base_FontManager.getRegisteredFontNames();
		var _g = 0;
		while(_g < names.length) {
			var fontName = names[_g];
			++_g;
			var font = bh_base_FontManager.getFontByName(fontName);
			var t = new h2d_Text(font);
			t.set_text("When zombies arrive, quickly fax Judge Pat." + "   The five boxing wizards jump quickly!?".toUpperCase() + "73/124 0123456789  ! # / | (-)");
			this.addObjectToLayerWithIterator(t,fontsIterator);
			var tname = new h2d_Text(bh_base_FontManager.getFontByName("default"));
			tname.set_text("" + fontName);
			this.addObjectToLayerWithIterator(tname,fontNamesIterator);
		}
	}
	,update: function(dt) {
		bh_ui_screens_UIScreenBase.prototype.update.call(this,dt);
	}
	,onScreenEvent: function(event,source) {
	}
	,__class__: screens_FontsScreen
});
var screens_ParticlesScreen = function(screenManager,layers) {
	bh_ui_screens_UIScreenBase.call(this,screenManager,layers);
};
$hxClasses["screens.ParticlesScreen"] = screens_ParticlesScreen;
screens_ParticlesScreen.__name__ = "screens.ParticlesScreen";
screens_ParticlesScreen.__super__ = bh_ui_screens_UIScreenBase;
screens_ParticlesScreen.prototype = $extend(bh_ui_screens_UIScreenBase.prototype,{
	load: function() {
		this.builder = this.screenManager.buildFromResourceName("std.manim",false);
		var particlesBuilder = this.screenManager.buildFromResourceName("particles.manim",false);
		var res = particlesBuilder.buildWithParameters("ui",new haxe_ds_StringMap());
		var updatable = res.getUpdatable("particles1");
		var particles = particlesBuilder.createParticles("test1");
		updatable.setObject(particles);
		this.addBuilderResult(res);
	}
	,update: function(dt) {
		bh_ui_screens_UIScreenBase.prototype.update.call(this,dt);
	}
	,onScreenEvent: function(event,source) {
	}
	,__class__: screens_ParticlesScreen
});
var screens__$PathsScreen_RadioAnimatedPathPositionMode = $hxEnums["screens._PathsScreen.RadioAnimatedPathPositionMode"] = { __ename__:true,__constructs__:null
	,Absolute: {_hx_name:"Absolute",_hx_index:0,__enum__:"screens._PathsScreen.RadioAnimatedPathPositionMode",toString:$estr}
	,RelativeToRef1: {_hx_name:"RelativeToRef1",_hx_index:1,__enum__:"screens._PathsScreen.RadioAnimatedPathPositionMode",toString:$estr}
	,RelativeToRef2: {_hx_name:"RelativeToRef2",_hx_index:2,__enum__:"screens._PathsScreen.RadioAnimatedPathPositionMode",toString:$estr}
};
screens__$PathsScreen_RadioAnimatedPathPositionMode.__constructs__ = [screens__$PathsScreen_RadioAnimatedPathPositionMode.Absolute,screens__$PathsScreen_RadioAnimatedPathPositionMode.RelativeToRef1,screens__$PathsScreen_RadioAnimatedPathPositionMode.RelativeToRef2];
screens__$PathsScreen_RadioAnimatedPathPositionMode.__empty_constructs__ = [screens__$PathsScreen_RadioAnimatedPathPositionMode.Absolute,screens__$PathsScreen_RadioAnimatedPathPositionMode.RelativeToRef1,screens__$PathsScreen_RadioAnimatedPathPositionMode.RelativeToRef2];
var screens_PathsScreen = function(screenManager,layers) {
	this.animatedPathPositionMode = bh_paths_AnimatedPathPositionMode.Absolute;
	this.angle = 0;
	this.endPoint = null;
	this.startPoint = null;
	this.currentPathIndex = 0;
	this.graphics = new h2d_Graphics();
	this.animObjs = [];
	this.animatedPaths = [];
	bh_ui_screens_UIScreenBase.call(this,screenManager,layers);
};
$hxClasses["screens.PathsScreen"] = screens_PathsScreen;
screens_PathsScreen.__name__ = "screens.PathsScreen";
screens_PathsScreen.__super__ = bh_ui_screens_UIScreenBase;
screens_PathsScreen.prototype = $extend(bh_ui_screens_UIScreenBase.prototype,{
	load: function() {
		var _gthis = this;
		this.builder = this.screenManager.buildFromResourceName("std.manim",false);
		var pathsBuilder = this.screenManager.buildFromResourceName("paths.manim",false);
		this.cross1 = pathsBuilder.buildWithParameters("cross1",new haxe_ds_StringMap()).object;
		this.cross2 = pathsBuilder.buildWithParameters("cross2",new haxe_ds_StringMap()).object;
		this.root.addChild(this.cross1);
		this.root.addChild(this.cross2);
		var animRes = pathsBuilder.buildWithParameters("anim",new haxe_ds_StringMap());
		this.animObjs.push(animRes.object);
		var animRes = pathsBuilder.buildWithParameters("anim",new haxe_ds_StringMap());
		this.animObjs.push(animRes.object);
		var animRes2 = pathsBuilder.buildWithParameters("animRect",new haxe_ds_StringMap());
		this.animObjs.push(animRes2.object);
		this.paths = pathsBuilder.getPaths();
		var pathItems = [{ name : "path1", data : 0},{ name : "path2", data : 1},{ name : "path3", data : 2},{ name : "pathX", data : 3}];
		this.addObjectToLayer(this.graphics,bh_ui_screens_LayersEnum.DefaultLayer);
		var points = [new bh_base_FPoint(0,0),new bh_base_FPoint(100,100),new bh_base_FPoint(200,100),new bh_base_FPoint(100,200),new bh_base_FPoint(400,200),new bh_base_FPoint(200,400),new bh_base_FPoint(777,777),null];
		var _g = [];
		var _g1 = 0;
		while(_g1 < points.length) {
			var p = points[_g1];
			++_g1;
			_g.push({ name : p != null ? p.toString() : null, data : p});
		}
		var pointItems = _g;
		this.selectedPath = this.getPath(this.currentPathIndex);
		this.endPoint = pointItems[0].data;
		this.startPoint = pointItems[0].data;
		var positionModes = [{ name : "Absolute", data : screens__$PathsScreen_RadioAnimatedPathPositionMode.Absolute},{ name : "Relative #ref1", data : screens__$PathsScreen_RadioAnimatedPathPositionMode.RelativeToRef1},{ name : "Relative #ref2", data : screens__$PathsScreen_RadioAnimatedPathPositionMode.RelativeToRef2}];
		this.onPathChanged();
		var generatedByMacroBuildWithParametersload3040Builder = function() {
			var startPoint;
			var positionMode;
			var path;
			var endPoint;
			var animate;
			var angleSlider;
			var pathsBuilder1 = pathsBuilder;
			var builderResults = new haxe_ds_StringMap();
			var _g = new haxe_ds_StringMap();
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addDropdown(_gthis.builder,pointItems,settings,0);
				_gthis.addElement(element,null);
				startPoint = element;
				return element.getObject();
			});
			_g.h["startPoint"] = value;
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addRadio(_gthis.builder,settings,positionModes,true,0);
				_gthis.addElement(element,null);
				positionMode = element;
				return element.getObject();
			});
			_g.h["positionMode"] = value;
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addDropdown(_gthis.builder,pathItems,settings,0);
				_gthis.addElement(element,null);
				path = element;
				return element.getObject();
			});
			_g.h["path"] = value;
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addDropdown(_gthis.builder,pointItems,settings,0);
				_gthis.addElement(element,null);
				endPoint = element;
				return element.getObject();
			});
			_g.h["endPoint"] = value;
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addButton(_gthis.builder,"Animate",settings);
				_gthis.addElement(element,null);
				animate = element;
				return element.getObject();
			});
			_g.h["animate"] = value;
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addSlider(_gthis.builder,settings,0);
				_gthis.addElement(element,null);
				angleSlider = element;
				return element.getObject();
			});
			_g.h["angleSlider"] = value;
			var builderResults1 = pathsBuilder1.buildWithParameters("ui",builderResults,{ placeholderObjects : _g});
			var retVal = { startPoint : startPoint, positionMode : positionMode, path : path, endPoint : endPoint, animate : animate, angleSlider : angleSlider, builderResults : builderResults1};
			if(retVal.startPoint == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "startPoint" + " is null (check if placeholder object is named correctly)");
			}
			if(retVal.positionMode == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "positionMode" + " is null (check if placeholder object is named correctly)");
			}
			if(retVal.path == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "path" + " is null (check if placeholder object is named correctly)");
			}
			if(retVal.endPoint == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "endPoint" + " is null (check if placeholder object is named correctly)");
			}
			if(retVal.animate == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "animate" + " is null (check if placeholder object is named correctly)");
			}
			if(retVal.angleSlider == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "angleSlider" + " is null (check if placeholder object is named correctly)");
			}
			return retVal;
		};
		var res = generatedByMacroBuildWithParametersload3040Builder();
		this.addBuilderResult(res.builderResults);
		var ref1 = res.builderResults.getSingleItemByName("ref1").object;
		var ref2 = res.builderResults.getSingleItemByName("ref2").object;
		res.path.onItemChanged = function(newIndex,items) {
			_gthis.currentPathIndex = newIndex;
			_gthis.onPathChanged();
		};
		res.startPoint.onItemChanged = function(newIndex,items) {
			_gthis.startPoint = items[newIndex].data;
			_gthis.onPathChanged();
		};
		res.endPoint.onItemChanged = function(newIndex,items) {
			_gthis.endPoint = items[newIndex].data;
			_gthis.onPathChanged();
		};
		res.animate.onClick = function() {
			_gthis.root.addChild(_gthis.animObjs[0]);
			_gthis.animatedPaths.push(pathsBuilder.createAnimatedPath("panim",_gthis.selectedPath,50,_gthis.animatedPathPositionMode,bh_multianim_BuiltHeapsComponent.HeapsObject(_gthis.animObjs[0])));
		};
		res.positionMode.onItemChanged = function(newIndex,items) {
			var mode = items[newIndex].data;
			var tmp;
			switch(mode._hx_index) {
			case 0:
				tmp = bh_paths_AnimatedPathPositionMode.Absolute;
				break;
			case 1:
				tmp = bh_paths_AnimatedPathPositionMode.RelativeTo(bh_multianim_MultiAnimParser_toh2dObject(ref1));
				break;
			case 2:
				tmp = bh_paths_AnimatedPathPositionMode.RelativeTo(bh_multianim_MultiAnimParser_toh2dObject(ref2));
				break;
			}
			_gthis.animatedPathPositionMode = tmp;
		};
		res.angleSlider.onChange = function(value,wrapper) {
			_gthis.angle = value;
			_gthis.onPathChanged();
		};
	}
	,getPath: function(index) {
		switch(index) {
		case 0:
			return this.paths.getPath("line1",this.startPoint,this.angle,this.endPoint);
		case 1:
			return this.paths.getPath("line2",this.startPoint,this.angle,this.endPoint);
		case 2:
			return this.paths.getPath("line3",this.startPoint,this.angle,this.endPoint);
		case 3:
			return this.paths.getPath("lineX",this.startPoint,this.angle,this.endPoint);
		default:
			throw haxe_Exception.thrown("Unknown path index $index");
		}
	}
	,onPathChanged: function() {
		this.selectedPath = this.getPath(this.currentPathIndex);
		this.graphics.clear();
		this.graphics.lineStyle(3.0,-1);
		this.selectedPath.drawToGraphics(this.graphics);
		if(this.startPoint != null) {
			this.cross1.set_visible(true);
			var _this = this.cross1;
			_this.posChanged = true;
			_this.x = this.startPoint.x;
			_this.posChanged = true;
			_this.y = this.startPoint.y;
		} else {
			this.cross1.set_visible(false);
		}
		if(this.endPoint != null) {
			this.cross2.set_visible(true);
			var _this = this.cross2;
			_this.posChanged = true;
			_this.x = this.endPoint.x;
			_this.posChanged = true;
			_this.y = this.endPoint.y;
		} else {
			this.cross2.set_visible(false);
		}
	}
	,update: function(dt) {
		bh_ui_screens_UIScreenBase.prototype.update.call(this,dt);
		var _g = 0;
		var _g1 = this.animatedPaths;
		while(_g < _g1.length) {
			var path = _g1[_g];
			++_g;
			path.update(dt);
		}
	}
	,onScreenEvent: function(event,source) {
	}
	,onClear: function() {
		this.builder = null;
		this.animObjs = [];
		this.animatedPaths = [];
	}
	,__class__: screens_PathsScreen
});
var screens_Room1Screen = function(screenManager,layers) {
	this.panelFlags = 0;
	this.cornerFlags = 0;
	this.roomFlags = 0;
	bh_ui_screens_UIScreenBase.call(this,screenManager,layers);
};
$hxClasses["screens.Room1Screen"] = screens_Room1Screen;
screens_Room1Screen.__name__ = "screens.Room1Screen";
screens_Room1Screen.__super__ = bh_ui_screens_UIScreenBase;
screens_Room1Screen.prototype = $extend(bh_ui_screens_UIScreenBase.prototype,{
	load: function() {
		var _gthis = this;
		this.builder = this.screenManager.buildFromResourceName("room1.manim",false);
		var stdBuilder = this.screenManager.buildFromResourceName("std.manim",false);
		var layouts = this.builder.getLayouts();
		var itRoom = layouts.getIterator("roomCheckboxes");
		var itCorner = layouts.getIterator("cornerCheckboxes");
		var itPanel = layouts.getIterator("panelCheckboxes");
		var itButtons = layouts.getIterator("panelButtons");
		var checkboxes = [];
		var roomCheckboxes = [];
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itRoom);
		checkboxes.push(c);
		roomCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.roomFlags;
			_gthis.roomFlags = checked ? bits | 1 : bits & -2;
			_gthis.redraw();
		};
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itRoom);
		checkboxes.push(c);
		roomCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.roomFlags;
			_gthis.roomFlags = checked ? bits | 2 : bits & -3;
			_gthis.redraw();
		};
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itRoom);
		checkboxes.push(c);
		roomCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.roomFlags;
			_gthis.roomFlags = checked ? bits | 4 : bits & -5;
			_gthis.redraw();
		};
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itRoom);
		checkboxes.push(c);
		roomCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.roomFlags;
			_gthis.roomFlags = checked ? bits | 8 : bits & -9;
			_gthis.redraw();
		};
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itRoom);
		checkboxes.push(c);
		roomCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.roomFlags;
			_gthis.roomFlags = checked ? bits | 16 : bits & -17;
			_gthis.redraw();
		};
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itRoom);
		checkboxes.push(c);
		roomCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.roomFlags;
			_gthis.roomFlags = checked ? bits | 32 : bits & -33;
			_gthis.redraw();
		};
		var cornerCheckboxes = [];
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itCorner);
		checkboxes.push(c);
		cornerCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.cornerFlags;
			_gthis.cornerFlags = checked ? bits | 1 : bits & -2;
			_gthis.redraw();
		};
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itCorner);
		checkboxes.push(c);
		cornerCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.cornerFlags;
			_gthis.cornerFlags = checked ? bits | 2 : bits & -3;
			_gthis.redraw();
		};
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itCorner);
		checkboxes.push(c);
		cornerCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.cornerFlags;
			_gthis.cornerFlags = checked ? bits | 4 : bits & -5;
			_gthis.redraw();
		};
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itCorner);
		checkboxes.push(c);
		cornerCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.cornerFlags;
			_gthis.cornerFlags = checked ? bits | 8 : bits & -9;
			_gthis.redraw();
		};
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itCorner);
		checkboxes.push(c);
		cornerCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.cornerFlags;
			_gthis.cornerFlags = checked ? bits | 16 : bits & -17;
			_gthis.redraw();
		};
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itCorner);
		checkboxes.push(c);
		cornerCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.cornerFlags;
			_gthis.cornerFlags = checked ? bits | 32 : bits & -33;
			_gthis.redraw();
		};
		var panelCheckboxes = [];
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itPanel);
		checkboxes.push(c);
		panelCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.panelFlags;
			_gthis.panelFlags = checked ? bits | 1 : bits & -2;
			_gthis.redraw();
		};
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itPanel);
		checkboxes.push(c);
		panelCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.panelFlags;
			_gthis.panelFlags = checked ? bits | 2 : bits & -3;
			_gthis.redraw();
		};
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itPanel);
		checkboxes.push(c);
		panelCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.panelFlags;
			_gthis.panelFlags = checked ? bits | 4 : bits & -5;
			_gthis.redraw();
		};
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itPanel);
		checkboxes.push(c);
		panelCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.panelFlags;
			_gthis.panelFlags = checked ? bits | 8 : bits & -9;
			_gthis.redraw();
		};
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itPanel);
		checkboxes.push(c);
		panelCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.panelFlags;
			_gthis.panelFlags = checked ? bits | 16 : bits & -17;
			_gthis.redraw();
		};
		var c = this.addElementWithIterator(bh_ui_UIStandardMultiCheckbox.create(stdBuilder,"checkbox",false),itPanel);
		checkboxes.push(c);
		panelCheckboxes.push(c);
		c.onToggle = function(checked) {
			var bits = _gthis.panelFlags;
			_gthis.panelFlags = checked ? bits | 32 : bits & -33;
			_gthis.redraw();
		};
		var clearAllButton = this.addElementWithIterator(bh_ui_UIStandardMultiAnimButton.create(stdBuilder,"button","clearAll"),itButtons);
		clearAllButton.onClick = function() {
			_gthis.roomFlags = 0;
			_gthis.cornerFlags = 0;
			_gthis.panelFlags = 0;
			var _g = 0;
			while(_g < checkboxes.length) {
				var value = checkboxes[_g];
				++_g;
				value.set_selected(false);
			}
			_gthis.redraw();
		};
		var s1 = this.addElementWithIterator(bh_ui_UIStandardMultiAnimButton.create(stdBuilder,"button","set all panels"),itButtons);
		s1.onClick = function() {
			_gthis.panelFlags = 127;
			var _g = 0;
			while(_g < panelCheckboxes.length) {
				var value = panelCheckboxes[_g];
				++_g;
				value.set_selected(true);
			}
			_gthis.redraw();
		};
		var s2 = this.addElementWithIterator(bh_ui_UIStandardMultiAnimButton.create(stdBuilder,"button","set all rooms"),itButtons);
		s2.onClick = function() {
			_gthis.roomFlags = 127;
			var _g = 0;
			while(_g < roomCheckboxes.length) {
				var value = roomCheckboxes[_g];
				++_g;
				value.set_selected(true);
			}
			_gthis.redraw();
		};
		var s3 = this.addElementWithIterator(bh_ui_UIStandardMultiAnimButton.create(stdBuilder,"button","set all corners"),itButtons);
		s3.onClick = function() {
			_gthis.cornerFlags = 127;
			var _g = 0;
			while(_g < cornerCheckboxes.length) {
				var value = cornerCheckboxes[_g];
				++_g;
				value.set_selected(true);
			}
			_gthis.redraw();
		};
		var ui = this.addBuilderResult(this.builder.buildWithParameters("ui",new haxe_ds_StringMap()));
		this.updatableText = ui.getUpdatable("testNumber");
		this.redraw();
	}
	,redraw: function() {
		if(this.room != null) {
			var _this = this.room.object;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		var _g = new haxe_ds_StringMap();
		_g.h["wallDirections"] = this.roomFlags;
		_g.h["cornerDirections"] = this.cornerFlags;
		_g.h["panelDirections"] = this.panelFlags;
		var params = _g;
		if(this.updatableText != null) {
			this.updatableText.updateText("" + (params == null ? "null" : haxe_ds_StringMap.stringify(params.h)));
		}
		this.room = this.addBuilderResult(this.builder.buildWithParameters("room",params));
	}
	,onScreenEvent: function(event,source) {
	}
	,__class__: screens_Room1Screen
});
var screens_SliderTestScreen = function(screenManager,layers) {
	bh_ui_screens_UIScreenBase.call(this,screenManager,layers);
};
$hxClasses["screens.SliderTestScreen"] = screens_SliderTestScreen;
screens_SliderTestScreen.__name__ = "screens.SliderTestScreen";
screens_SliderTestScreen.__super__ = bh_ui_screens_UIScreenBase;
screens_SliderTestScreen.prototype = $extend(bh_ui_screens_UIScreenBase.prototype,{
	load: function() {
		var _gthis = this;
		this.builder = this.screenManager.buildFromResourceName("std.manim",false);
		var sliderBuilder = this.screenManager.buildFromResourceName("slider.manim",false);
		var generatedByMacroBuildWithParametersload762Builder = function() {
			var slider;
			var sliderBuilder1 = sliderBuilder;
			var builderResults = new haxe_ds_StringMap();
			var _g = new haxe_ds_StringMap();
			var value = bh_multianim_PlaceholderValues.PVFactory(function(settings) {
				var element = _gthis.addSlider(_gthis.builder,settings,0);
				_gthis.addElement(element,null);
				slider = element;
				return element.getObject();
			});
			_g.h["slider"] = value;
			var builderResults1 = sliderBuilder1.buildWithParameters("ui",builderResults,{ placeholderObjects : _g});
			var retVal = { slider : slider, builderResults : builderResults1};
			if(retVal.slider == null) {
				throw haxe_Exception.thrown("macroBuildWithParameters UIElement value  " + "slider" + " is null (check if placeholder object is named correctly)");
			}
			return retVal;
		};
		var ui = generatedByMacroBuildWithParametersload762Builder();
		this.updatableText = ui.builderResults.getUpdatable("sliderVal");
		this.addBuilderResult(ui.builderResults);
	}
	,onScreenEvent: function(event,source) {
		if(event._hx_index == 3) {
			var value = event.value;
			this.updatableText.updateText(value == null ? "null" : "" + value);
		}
	}
	,__class__: screens_SliderTestScreen
});
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : $hxClasses["String"] = String, enumerable : false, writable : true});
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
haxe_Resource.content = [{ name : "R_button_png", data : "iVBORw0KGgoAAAANSUhEUgAAAEAAAAAPCAYAAABUZ8lnAAAAAXNSR0IArs4c6QAAAItJREFUSIntl6ENgDAUBa8NKzAAigFI2IUB0MyCZgA8A6BQJAyAQqDwJEgQpCFhgD7Rnvzq7rlvALKmvAmQrZ2NcfF9nat9vFJ1KwAJvPHDvkiFfNPXBVW3YoHg4uFrtmIPOXEAtYCaOIBaQE0cQC2gxgIcZ6r28I5rTv6H0LAA43SpPbzjmg2E/Q0+WSUjEug14pMAAAAASUVORK5CYII"},{ name : "R_fonts_exo2_black_30_png", data : ""},{ name : "R_fonts_kreon_30_png", data : ""},{ name : "R_png_Panel_060_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQyNkAAZLSRAJGeVwAAhgDjqBQAAAD///9AM0cyNkApQjJFNi4AAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNKNCaEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXGSMuM0dLU2Bpc3qHlJSltK3D1Mfh9eEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdHyE7P0NZX2V3f4eVn6m4v8Xb3+L///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADVD/WhAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAAsdJREFUeNrt3EFS6kAYhVG3Rne6/yzD/a/ChBAQC5280eOeM7AsnfX9CESr8vEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAECm1pxBsN7XVQLB81fN+ZzA58bJBM2/eyTQ2rqRQM78S+/LPYF9/iMICbz7R7/bq3//OpbzKnBeEfafS+Ct9z9e6dvsY/uun28Evc8pgYgARj8SqHWMWs7RJRAUQDsSqHWtx+YSyAmgt1sCP0ggIoDtw78Egl2uAfyRwBgSSAhAAvEBSCA+AAnEByCB+AAkEB/AlQRiAhi9S0AAEhCABEILuHQJSEACEpBAcgASiJ5//1uABGLnn3NZJBC7f82xkUBsAEufEsgOoEsgPQAJxAcggViPfwdLIFSXgAQkIAEJSEACEviXBO6PmJBAZALfHzEhgcAEPGIiPIHHIya2K4AEAhO4PWJifwPYPCWwP3DMyWa8ERzzPyWw/W6UABIS+Db/PYF9/iGAjATGT/OYXwARCdT4nQACEvgrgCmA909AAOEJCCA8gSmA7AQEEJ6AAMITmG4DsxMQQHgCZwAlgMwEjuHnnALITKCu818uAghNoK7zt/YqAOcWkMBa+/yvAnBmIQm09ioA5xWTwKvbQWeVk8BNmT85gSrzxyaw3e6ZPzkB80cnsJo/O4Eyf3YCZf7sBKb5sxMo82cr8wMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/hS8T+lsy3Ca3xgAAAABJRU5ErkJggg"},{ name : "R_fonts_exo2_30_png", data : ""},{ name : "R_png_Corner_030_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQPUFcAZLSRAJGeVwAAhgDjqBQAAAD///8AAAAAAAAAAAAAAAAAAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNYOSeEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzerUAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAAwBJREFUeNrt3U1y4jAURtFsDcuWtAz2v4q2bBMaA1099nfOgEplyLv+E0H5+QEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuZpq8B8FK6V0CweNvrdbXBO4r70zQ+IdnAtPUVxLIGf9cyvybwBj/HoQErn7rdxz943WZH2eBxxlh/F4Cl57/fqSvY1/Wn8rjQlBKrRKICGApewKtL0ubH0OXQFAA055A6709Zy6BnADKdCRwIoGIANab//9MwBPBFd22AP6RwLJIICGAbwn0lwSaBK4bwOcEentJoLUugMsG8CmBvh32zwQEcOkA3hPotW0JCCAkgHMCawBjWbgJICaAkcDSXwJYCeCqASzlQwHlawBVAAkB3AUgAAGEFHATgATOBBCegADSAjglIICs8Y+1gJcEBJA0/lrn+ZSAAHLm3+qyOiUggJwA5lLfExBAUgDlPQEBZAXwloAA0gI4JSCAHM+Pg/9KQABJynsCAghPQADhCQggPAEBhCcggPAEBBCegADCExgB7HsGCSAygXt/7BkkgMgE1gCOPYMEEGmcAfY9gwSQGsCxZ5AAYgPwFCAAAeQG0A7rZUAAgQGMPxTeHQUIIDWAowABxAYwd2eA7AC2AgQQHMAoQADJAawFCCAsgN2zAAFkBTBP0+12q6c7wbEuIICMAMoo4HQh2DQBJASw/RcBAQQHMI8CPgVQBZARwPatYQGkBtBOTwECyF4HEIAABCAAAQhAACk3gV8DsA4QEUD/GoClYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAu7Q+pvLRorJF5kwAAAABJRU5ErkJggg"},{ name : "R_fonts_m6x11_fnt", data : "QkZOVAABBQBtNngxMRAACQBtNngxMS5wbmcQAAsAPwAAACAAAAAAAAAAAAAAAP//AAAFAAAAAAAyAAAAbgEAAAgADQD/////BwAAAAAAUAAAALIAAAAIAA0A/////wcAAAAAAFoAAAAGAQAACAANAP////8HAAAAAABsAAAAQgEAAAQADQD/////AwAAAAAAaAAAAC4BAAAIAA0A/////wcAAAAAACgAAAAGAAAABgAPAP////8FAAAAAAAxAAAAZgEAAAgADQD/////BwAAAAAANAAAAH4BAAAIAA0A/////wcAAAAAAEMAAABIAAAACAANAP////8HAAAAAAA3AAAAlgEAAAgADQD/////BwAAAAAAdQAAAEIAEAAIAAoA//8CAAcAAAAAAG4AAAAiABAACAAKAP//AgAHAAAAAAA+AAAAeAAQAAcACgD//wIABgAAAAAAZwAAACYBAAAIAA0A//8CAAcAAAAAADwAAABxABAABwAKAP//AgAGAAAAAABmAAAAHgEAAAgADQD/////BwAAAAAAagAAAAAAAAAGABAA/////wUAAAAAADsAAAD4AQAABAALAP//AgADAAAAAABvAAAAKgAQAAgACgD//wIABwAAAAAAUgAAAMMAAAAIAA0A/////wcAAAAAAHQAAABWAQAACAANAP////8HAAAAAABZAAAA/gAAAAgADQD/////BwAAAAAAJgAAAOYBAAALAA0A/////woAAAAAADgAAACeAQAACAANAP////8HAAAAAAA9AAAAjwAQAAgACAD//wIABwAAAAAATwAAAKoAAAAIAA0A/////wcAAAAAAFcAAADrAAAACgANAP////8JAAAAAABxAAAATgEAAAgADQD//wIABwAAAAAAeQAAAF4BAAAIAA0A//8CAAcAAAAAADoAAABtABAABAAKAP//AgADAAAAAABUAAAA0wAAAAgADQD/////BwAAAAAAZQAAABAAEAAIAAoA//8CAAcAAAAAACIAAACuABAABwAFAP////8GAAAAAABFAAAAWAAAAAgADQD/////BwAAAAAASgAAAIAAAAAIAA0A/////wcAAAAAAHAAAABGAQAACAANAP//AgAHAAAAAABLAAAAiAAAAAgADQD/////BwAAAAAAewAAAB4AAAAHAA8A/////wYAAAAAADAAAACuAQAACAANAP////8HAAAAAABgAAAAtQAQAAQABQD/////AwAAAAAARwAAAGgAAAAIAA0A/////wcAAAAAAC0AAAC9ABAACAAEAP//BAAHAAAAAAA2AAAAjgEAAAgADQD/////BwAAAAAATgAAAKIAAAAIAA0A/////wcAAAAAAHwAAAAsAAAABAAPAP////8DAAAAAAB2AAAASgAQAAgACgD//wIABwAAAAAANQAAAIYBAAAIAA0A/////wcAAAAAAFEAAAC6AAAACQANAP////8IAAAAAABBAAAAOAAAAAgADQD/////BwAAAAAATQAAAJgAAAAKAA0A/////wkAAAAAAC8AAADCAQAACAANAP////8HAAAAAABJAAAAeAAAAAgADQD/////BwAAAAAALAAAALUAEAAEAAUA//8IAAMAAAAAAEYAAABgAAAACAANAP////8HAAAAAABbAAAAEgAAAAYADwD/////BQAAAAAAeAAAAFwAEAAJAAoA//8CAAgAAAAAAGEAAAAAABAACAAKAP//AgAHAAAAAABIAAAAcAAAAAgADQD/////BwAAAAAAYwAAAAgAEAAIAAoA//8CAAcAAAAAAHIAAAAyABAACAAKAP//AgAHAAAAAAAhAAAAtgEAAAQADQD/////AwAAAAAAJQAAAH8AEAAIAAoA//8BAAcAAAAAAEAAAADKAQAACwANAP////8KAAAAAABeAAAAngAQAAgABgD/////BwAAAAAAbQAAABgAEAAKAAoA//8CAAkAAAAAACQAAAAwAAAACAAOAP////8HAAAAAABMAAAAkAAAAAgADQD/////BwAAAAAAXQAAABgAAAAGAA8A/////wUAAAAAAHcAAABSABAACgAKAP//AgAJAAAAAAApAAAADAAAAAYADwD/////BQAAAAAAOQAAAKYBAAAIAA0A/////wcAAAAAAEQAAABQAAAACAANAP////8HAAAAAAB6AAAAZQAQAAgACgD//wIABwAAAAAAVQAAANsAAAAIAA0A/////wcAAAAAAF8AAAC9ABAACAAEAP//CAAHAAAAAABcAAAA1QEAAAgADQD/////BwAAAAAAZAAAABYBAAAIAA0A/////wcAAAAAAHMAAAA6ABAACAAKAP//AgAHAAAAAAAKAAAAAAAAAAAAAAD//wAAAAAAAAAAKgAAAJcAEAAHAAcA/////wYAAAAAAGIAAAAOAQAACAANAP////8HAAAAAABpAAAANgEAAAQADQD/////AwAAAAAALgAAALkAEAAEAAQA//8IAAMAAAAAACcAAAC1ABAABAAFAP////8DAAAAAAA/AAAAugEAAAgADQD/////BwAAAAAAQgAAAEAAAAAIAA0A/////wcAAAAAAFMAAADLAAAACAANAP////8HAAAAAABYAAAA9QAAAAkADQD/////CAAAAAAAIwAAAN0BAAAJAA0A/////wgAAAAAADMAAAB2AQAACAANAP////8HAAAAAABrAAAAOgEAAAgADQD/////BwAAAAAAfgAAAKYAEAAIAAYA//8DAAcAAAAAACsAAACHABAACAAIAP//AgAHAAAAAABWAAAA4wAAAAgADQD/////BwAAAAAAfQAAACUAAAAHAA8A/////wYAAAAAAAAAAAA"},{ name : "R_fonts_code_7x5_regular_6_fnt", data : "QkZOVAABCABDb2RlIDd4NQYAFgBjb2RlXzd4NV9yZWd1bGFyXzYucG5nCQAIAD8AAAAgAAAAAQAIAAAAAAAAAAgAAgAAAAAAMgAAAE8AAQAFAAcAAAABAAcAAAAAAFAAAAABABEABQAHAAAAAQAHAAAAAABaAAAAPQARAAUABwAAAAEABwAAAAAAbAAAACIAGQADAAcAAQABAAYAAAAAAGgAAAANABkABQAHAAAAAQAHAAAAAAAoAAAAIAABAAQABwAAAAEABgAAAAAAMQAAAEsAAQADAAcAAQABAAYAAAAAADQAAABbAAEABQAHAAAAAQAHAAAAAABDAAAALgAJAAUABwAAAAEABwAAAAAANwAAAG0AAQAFAAcAAAABAAcAAAAAAHUAAABVABsABQAFAAAAAwAHAAAAAABuAAAALAAbAAUABQAAAAMABwAAAAAAPgAAABEACwAEAAUAAQADAAcAAAAAAGcAAAAHABkABQAHAAAAAQAHAAAAAAA8AAAABgALAAQABQAAAAMABgAAAAAAZgAAAAEAGQAFAAcAAAABAAcAAAAAAGoAAAAXABkABAAHAAAAAQAGAAAAAAA7AAAAAwALAAIABQABAAMABQAAAAAAbwAAADIAGwAFAAUAAAADAAcAAAAAAFIAAAANABEABQAHAAAAAQAHAAAAAAB0AAAAUAAZAAQABwABAAEABwAAAAAAWQAAADcAEQAFAAcAAAABAAcAAAAAACYAAAAaAAEABQAHAAAAAQAHAAAAAAA4AAAAcwABAAUABwAAAAEABwAAAAAAPQAAAAsACwAFAAQAAAADAAcAAAAAAE8AAAB2AAkABQAHAAAAAQAHAAAAAABXAAAAKwARAAUABwAAAAEABwAAAAAAcQAAAD4AGgAFAAYAAAACAAcAAAAAAHkAAABtABoABQAGAAAAAgAHAAAAAAA6AAAAAQALAAEABAACAAMABQAAAAAAVAAAABkAEQAFAAcAAAABAAcAAAAAAGUAAAB4ABMABQAFAAAAAwAHAAAAAAAiAAAABAABAAMAAwABAAEABgAAAAAARQAAADoACQAFAAcAAAABAAcAAAAAAEoAAABYAAkABQAHAAAAAQAHAAAAAABwAAAAOAAaAAUABgAAAAIABwAAAAAASwAAAF4ACQAFAAcAAAABAAcAAAAAAHsAAAB5ABkABQAHAAAAAQAHAAAAAAAwAAAARQABAAUABwAAAAEABwAAAAAAYAAAAF0AEQACAAEAAQABAAUAAAAAAEcAAABGAAkABQAHAAAAAQAHAAAAAAAtAAAANwAFAAUAAQAAAAUABwAAAAAANgAAAGcAAQAFAAcAAAABAAcAAAAAAE4AAABwAAkABQAHAAAAAQAHAAAAAAB8AAAAAQAiAAEABwACAAEABQAAAAAAdgAAAFsAGwAFAAUAAAADAAcAAAAAADUAAABhAAEABQAHAAAAAQAHAAAAAABRAAAABwARAAUABwAAAAEABwAAAAAAQQAAACIACQAFAAcAAAABAAcAAAAAAE0AAABqAAkABQAHAAAAAQAHAAAAAAAvAAAAPwABAAUABwAAAAEABwAAAAAASQAAAFIACQAFAAcAAAABAAcAAAAAACwAAAA0AAUAAgADAAEABQAFAAAAAABGAAAAQAAJAAUABwAAAAEABwAAAAAAWwAAAEMAEQADAAcAAQABAAYAAAAAAHgAAABnABsABQAFAAAAAwAHAAAAAABhAAAAYAATAAUABQAAAAMABwAAAAAASAAAAEwACQAFAAcAAAABAAcAAAAAAGMAAABsABMABQAFAAAAAwAHAAAAAAByAAAARAAbAAUABQAAAAMABwAAAAAAIQAAAAIAAQABAAcAAgABAAUAAAAAACUAAAAUAAEABQAHAAAAAQAHAAAAAABAAAAAHAAJAAUABwAAAAEABwAAAAAAXgAAAFEAEQAFAAMAAAABAAcAAAAAAG0AAAAmABsABQAFAAAAAwAHAAAAAAAkAAAADgABAAUABwAAAAEABwAAAAAATAAAAGQACQAFAAcAAAABAAcAAAAAAF0AAABNABEAAwAHAAEAAQAGAAAAAAB3AAAAYQAbAAUABQAAAAMABwAAAAAAKQAAACUAAQAEAAcAAQABAAcAAAAAADkAAAB5AAEABQAHAAAAAQAHAAAAAABEAAAANAAJAAUABwAAAAEABwAAAAAAegAAAHMAGwAFAAUAAAADAAcAAAAAAFUAAAAfABEABQAHAAAAAQAHAAAAAABfAAAAVwAXAAUAAQAAAAcABwAAAAAAXAAAAEcAEQAFAAcAAAABAAcAAAAAAGQAAAByABEABQAHAAAAAQAHAAAAAABzAAAASgAbAAUABQAAAAMABwAAAAAAKgAAACoAAQADAAQAAQABAAYAAAAAAGIAAABmABEABQAHAAAAAQAHAAAAAABpAAAAEwAZAAMABwABAAEABgAAAAAALgAAAD0ABwABAAEAAgAHAAUAAAAAAD8AAAAWAAkABQAHAAAAAQAHAAAAAABCAAAAKAAJAAUABwAAAAEABwAAAAAAUwAAABMAEQAFAAcAAAABAAcAAAAAAFgAAAAxABEABQAHAAAAAQAHAAAAAAAjAAAACAABAAUABwAAAAEABwAAAAAAMwAAAFUAAQAFAAcAAAABAAcAAAAAAGsAAAAcABkABQAHAAAAAQAHAAAAAAB+AAAACQAlAAUAAgAAAAQABwAAAAAAKwAAAC4AAwAFAAUAAAADAAcAAAAAAFYAAAAlABEABQAHAAAAAQAHAAAAAAB9AAAAAwAhAAUACQAAAAAABwAAAAAAAAAAAA"},{ name : "R_crew_palette_png", data : "iVBORw0KGgoAAAANSUhEUgAAABIAAAADCAYAAACeRF9pAAAAAXNSR0IArs4c6QAAAJxJREFUCJlj4GQX/W/T9OW/TODy/+9vLPz/J4vn/5kzV//HxcX9n/TiwH//JTv+P3O1/H9BTOv/bCmu/99+vPqf8vTrf4Gjn/8LBF//v3Dhwv/Gxlr/mRgYGBg275BgqD+ZzMDAwMDw2UmGgRCoP5nMsHmHBIpaJgYGBoaSQmOGKbaeDAwMDAwCy/wJGvT2VwjDzetbGf5KTIWLAQCts0Bh9VX4OwAAAABJRU5ErkJggg"},{ name : "R_png_Corner_150_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQPUFcAZLSRAJGeVwAAhgDjqBQAAAD///8AAAAAAAAAAAAAAAAAAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNYOSeEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzerUAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAAwVJREFUeNrt3EFWgzAARVG3RkNIltH9r0IopSJFj0759w5cQP4rQo/y8QEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJDmdnMG0fP3XopziHG/H+efJgkEzd/7VwK3W2vTgwRi5p+m1tYEnvOPpYwSyJh/+7wvCWyf/uVnHV0FguZf7C7+db4qlNcvAgeVNf98Bei1tucVoHZPhGHzPwrobZ2/CiBv/mm7+NcqgPT5598FArj4/Mtj4I/zCyB8fgFc/eLff59fABcL4DD/WPrv8wvgqgE85h+PAbzNL4CrBvCY/xDA/PRfBZARQC3jMYDT+QVwzQDqK4DXJeF8fgFcMoB6FsBdACkBVAFEB1D/E8AwOLWLBVD/EYD5rxdA/XsA5r9eANv+fwhgGAQQHMAwlFJcA1IDWOevU2v+RygwgG3+9ftBBYQFsJ+/Nd8DhAVwmN8XQVkBvM0vgKQATuYXQFAAZ/PPATi1lADO5q/OLOkewPzRAZhfAOaPDsD82QGYP/4m0PwCMH9eAOsroZ4BOKO4AJ6vhHoE4IQCA3i+EmoOwPlkXgHWV0L1u+MJvQdYXwklgPinAMeTGEAXQHgAva0EEBnANG4mAQQG8LW/ABID2O0vgMAA9vsLICOAtgvg2/4CiAvg+/4CSAtgd/+/EkBEAG17V+zusz8Mw+02CiAigPHdtOxfBBAcwLx/qQKIeAw8C2DZfxRAbgBl3l8AwQGs/xIkgNQAfA8gAAEIQAACIPN7gJWbwIgA+o8B+JMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjzCdZVyom6uoXuAAAAAElFTkSuQmCC"},{ name : "R_png_Wall_240_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQPUFcAZLSRAJGeVwAAhgDjqBQAAAD///8AAAAAAAAAAAAAAAAAAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNYOSeEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzerUAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAA5xJREFUeNrt3EGW2jAQRdFeG0KYZXj/q4jdoQkY2ljD1L93lAGj0oM+tnLq6wsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoJh5NoNg14UEgo//spBA9PFLIP74JRB//BJIM03T5SKB3PNvrUkg+vxPp5MEkr//Ekg//3cJnFs7SyDm/F8SWP/Vz34Fcs5/k8C1Lw+HzR+C2o9/betfAtO19+n+CyCBisffe1/O+7cEput1uh+/X4GSx9/3E3g4fn8Iih7/fgL34/dEUMn8dPx7Cfx8+z0RFAugHUqgz54IqgbQjiTQ58vLE4EEqgTQli/0fgJ97m3zRCCBGgH02xHvJ7AG4I6gdAC7CfTbxyRQOYCdBPr9YxKoHMBvCfTHT0mgcgDvE+jPn5JA5QDeJHB5+ZAEKgewSWB9B9h27wgk8F8XMLe9BNbjX98TnSQQlsD328Gf4/98UyiBigk8HL8EAhOYXq4KJRCVwBrA0ctiCRRMYFpviiSQm0D/e1X46aZQAlUTuL8AlEBmAg9vgCWQmMDTFYAE8hLY3AFJIC2Bvr0okEBWAv31pkgCUQm8uyqUQPKrIQlIQAISkIAEJCABCUhAAhKQgATGE7BiIjsBKybCE7BiIjwBS+fSE7B0zq+ApXPhCVg6F56ApXPRCVg6F56ApXPZCVg6F56ApXPZCVg6F56ApXPZCRxcOmeoVRM4uHTOSIsmcHTpnIGWTOD40jnjLJjAyNI5wyyXwNjSOaMslsDo0jmDLJbA6NI5YyyWwBLA0H8ZMcRiCXzvHBtIwAiLJXB7/3M4AQMslsDg0rmT8RVLYHTpnOEVS2Bw6ZwAqiUwuHROANUSGFw6J4BqCQwunRNAuQTGls4JoPp7gQ8JCCA8AQGEJyCA9ASMKjwBgwpPwJjCEzCk8ASMKDwBAwpPwHjCEzCc8ASMJjwBg8lOwJvA8AQEEJ6AAMITEEB4AgIIT0AA4QkIIDwBAYQnIIDwBASQnoARAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACE+gOVnHx6e/phCgAAAABJRU5ErkJggg"},{ name : "R_png_Panel_000_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQyNkAAZLSRAJGeVwAAhgDjqBQAAAD///9AM0cyNkApQjJFNi4AAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNKNCaEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXGSMuM0dLU2Bpc3qHlJSltK3D1Mfh9eEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdHyE7P0NZX2V3f4eVn6m4v8Xb3+L///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzhAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAAwxJREFUeNrt3Etu4kAYhVFvjdTrX0b2v4rY2BAJhVkm6J4j9aSH9CfXpZL2tgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/6PvJZxH571/rUgrIDGBeSgHhAXgGpAbQW+t7AFMBmQGsNefoewAKyAygRtVsxxNAAZlPgBpjHU+ApYDMDbCq1n0DnN8GXQyEfguY132Ai4HsAMbzLwSQFsA4Axh7A/sfAeQ9AYYAwo+AcR4BRwICiNwAQwBGoCPACBRA8gh0BBiBAkgegY4AI1AAySPQVXD8CBRA+AgUQPQIFED4CBSAESgAI1AARqCPxwjECMQIxAjECMQIxAjECMQIxAjECMQI5OMDePwOqBEYH4ARGHoEnP8PxAgUgBEYfgTYAEagAJKPACPQCBRA9gYwAo1AAcQdAX4cLADvCRTAcwQKIDcA7wlMD8BLooxAR4ARKIDoEegIMAIFkDwCHQFGoACSR6Cr4PgRKIDwESiA6BEogPARKAAjUABGoACMQB+PEYgRiBGIEYgRiBGIEYgRiBGIEYgRiBGIEYgRiBGIEYgRiBGIEYgRiBHIhwTQW+tGYG4Aa805uhEYG0CNqtmMwNwnQI2xuhGYuwFW1fKKGN8CBCAAbwoNDGBd9mNAAIEBzP5wFeAISA3gKkAAsQH0cgRkB3AvQADBARwFOAKSA9gLEEBYAKffAlwFZwXQv75ut9t8WYLHvYAAMgJoRwEvB8HdEkBCAKMdBQggN4B+FPBXAFMAGQHsBTQBxAawXr4FCCD7HkAAAhCAAAQgAAGkjMC3AbgHiAig3gbgKhgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIBt+wEWiqG3KCxHcgAAAABJRU5ErkJggg"},{ name : "R_fonts_code_7x5_regular_6_png", data : "iVBORw0KGgoAAAANSUhEUgAAAIAAAABACAYAAADS1n9/AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAOxAAADsQBlSsOGwAABFpJREFUeJztnOFy4yAMhGnn3v+Vfb+cEnV3JRl8V1f6ZjpxMAhhBJJI0o/jOEZTlz/T9THG+ACv6N4A7WzZIHKGqD+3GaAu6msnSNcByqxOtp5qz64t7J59Pqq+q+dsAIwDvNrO0IRbJdXg7aSiSUf934Xt43xvx8XqsXIFus/asQWU1ufTUWruzL4epgxZ287Jsv3bvlZhuir5bGx3G+g20A7AHjSqhyaarWxv9XgoN7SKmny25c51TpQrRPU9l5OVz9wnHcOqC4jEDLaelREFGZjVEfXJ5MxtM9tvpo4dL3MLSifWJhKPKTljjHcX4G1naAJYXHDXSrV6IRdkdx37N6N0XNH9p6VWVB+UBUSJrGYW3c8GgrYtte157Fq5KgtQETwbk6ePlaH0YERdwEvOR58D1CYSA6yQDWzUqlutz+KBbE6tUq2M/GjKZu979SOB5Ys7DSCrcCaAuVLfls9kHjhDZT9RGR7M2LIB4YvP6eYA1+f7w1wfpHzGe9iozQp3Bpx3y48aBtshaJrnce4AUYuNTCqyRCU3ovhKUOjpospZ37sMV/Wb5ZIRKBdwNVdnForqoT6Z3BW9mB5e+XwvErcgIqlmZkyZ7MVFuQDma5ALmO97kz/LR3VReYQnpzOXt/BVrAtAflxN2Im3hTIjYG2Y/Lm+ypGjq/XKWUBER/vMslt9Rk9GSP8+ByjOuQPsyrXZvdVc+I5ypo/Sb5Yz17PyPSI7wq6UUTIHgXfk5lb26qB2seqS0ELwnoHq/79x90ngv2J+8Fkj86L0iDy7MDI6ZHffaDnr400v+2EQrJQgGzhdRR2G2HMLZRjR1Ro9BWTvPflMp1V3Z+V9e89cQAQ20bty9izsQaxMvidjFyuReDaLeiPqArz8fvfDUSsXBXLZLXjnIdcqbOXuhOrsGcD8oKO+MNQxkG/rswfOzgGyMF2jEfqVPpBcNY7I+cdZFs1u3nToc4Di2G8FoyNedPSrrMazZnX/idb4JJ2/PWPvK2FzWdT/qZSKKaW2sFWyh1ZPQEb2gTav68jvAtTKZLsFq6uUUrLR7oP6QjvYGF8GhmKa8w/pquSrcaN2O8sZVj9W/1saaDuMRNTIoqKrOBJo2f5Z1O9lC1excpW8u3aO7AEXGz9tO38aqFwAi0avknUrrH2UaDSN+mD175h0lvWwuYnKoQYUcQGngCsD9naDu/w+6geNgZVH5DCXpsqyafVcz8pR7iucrmfOAc73EcHIJWTbZlG6ejKR/0YuxfZn+2VlyAjYCmVbN3OHw9S3uio9+xygOsgFPDUfby5gvxN4d07e/DDsDvCUg5BmE9EsoPmlKANAhy/ounkw0R+G2PSjXcUvIfqFkB2nf80PBH0c3BTC/jKot/liqP8S1hSg08DitAEUpw2gOG0AxWkDKE4bQHHaAIrTBlCcNoDitAEUpw2gOG0AxWkDKE4bQHHaAIrTBlCcNoDitAEUpw2gOG0AxWkDKM5fWRbpz5QlL40AAAAASUVORK5CYII"},{ name : "R_fonts_cnc_inet_12_fnt", data : "QkZOVAABFABDJkMgUmVkIEFsZXJ0IFtJTkVUXQwAEQBjbmNfaW5ldF8xMl8wLnBuZwwACQA/AAAAtgAAAGoAAAAIAAcAAAACAAkAAAAAADIAAAAMAQAABQAHAAAAAgAGAAAAAABQAAAArgEAAAUABwAAAAIABgAAAAAAbAAAADcCAAABAAcAAAACAAIAAAAAAKYAAAAGAAAAAQAKAAAAAgACAAAAAABoAAAAPAEAAAUABwAAAAIABgAAAAAAggAAACEDAAACAAMAAAAHAAYAAAAAADEAAAAKAgAAAwAHAAAAAgAEAAAAAAA0AAAAsgAAAAUABwAAAAIABgAAAAAAvAAAAE8AAAAPAAcAAAACABAAAAAAAD4AAADOAQAABAAHAAAAAgAFAAAAAABnAAAABgEAAAUABwAAAAQABgAAAAAAuQAAABYCAAADAAcAAAACAAQAAAAAAL0AAAA/AAAADwAHAAAAAgAQAAAAAABmAAAAxAEAAAQABwAAAAIABQAAAAAAagAAACYAAAADAAgAAAACAAQAAAAAAG8AAACRAgAABQAFAAAABAAGAAAAAACRAAAAFQMAAAIAAwAAAAEABgAAAAAAUgAAALgAAAAFAAcAAAACAAYAAAAAAIUAAABCAwAAAgACAAAABwAGAAAAAABZAAAA4gAAAAUABwAAAAIABgAAAAAAtAAAACcDAAACAAMAAAACAAMAAAAAADgAAAAwAQAABQAHAAAAAgAGAAAAAABPAAAAqAEAAAUABwAAAAIABgAAAAAApAAAANMCAAAFAAUAAAACAAYAAAAAAHkAAABOAQAABQAHAAAABAAGAAAAAADYAAAAqwAAAAYABwAAAAIABgAAAAAAZQAAAJ0CAAAFAAUAAAAEAAYAAAAAAKgAAAAqAwAABQACAAAAAgAGAAAAAABFAAAA7AEAAAQABwAAAAIABQAAAAAAmAAAADwDAAACAAIAAAACAAYAAAAAAPYAAACQAQAABQAHAAAAAgAGAAAAAABgAAAAGwMAAAIAAwAAAAIAAwAAAAAALQAAAFADAAADAAEAAAAFAAQAAAAAADYAAAAkAQAABQAHAAAAAgAGAAAAAABOAAAAogEAAAUABwAAAAIABgAAAAAAfAAAAC8CAAABAAcAAAACAAIAAAAAAHYAAAC1AgAABQAFAAAABAAGAAAAAACMAAAAIAIAAAIABwAAAAIABgAAAAAAUQAAALQBAAAFAAcAAAACAAYAAAAAAIAAAAAmAgAAAgAHAAAAAgAGAAAAAABNAAAAewAAAAcABwAAAAIABwAAAAAARgAAAPEBAAAEAAcAAAACAAUAAAAAAIYAAAApAgAAAgAHAAAAAgAGAAAAAABeAAAA8AIAAAUAAwAAAAIABgAAAAAAbQAAAG4CAAAHAAUAAAAEAAcAAAAAAL4AAAAtAAAAEQAHAAAAAgASAAAAAACnAAAAAAAAAAUACgAAAAEABgAAAAAAJAAAAL4AAAAFAAcAAAACAAYAAAAAAEwAAADiAQAABAAHAAAAAgAFAAAAAACDAAAAKgAAAAIACAAAAAMABgAAAAAAOQAAADYBAAAFAAcAAAACAAYAAAAAAEQAAAByAQAABQAHAAAAAgAGAAAAAACcAAAA3wIAAAIABQAAAAQABgAAAAAAegAAAKkCAAAFAAUAAAAEAAYAAAAAALUAAABQAgAABQAGAAAABAAGAAAAAABVAAAA0AAAAAUABwAAAAIABgAAAAAAZAAAAPoAAAAFAAcAAAACAAYAAAAAAGIAAAD0AAAABQAHAAAAAgAGAAAAAABpAAAAMQIAAAEABwAAAAIAAgAAAAAA1gAAAA4AAAAFAAgAAAABAAYAAAAAAPcAAABfAgAAAgAGAAAAAwADAAAAAACHAAAALAIAAAIABwAAAAIABgAAAAAAPwAAAOcBAAAEAAcAAAACAAUAAAAAANwAAAAgAAAABQAIAAAAAQAGAAAAAACwAAAABQMAAAMAAwAAAAIABAAAAAAAugAAAJcCAAAFAAUAAAAEAAYAAAAAADMAAAASAQAABQAHAAAAAgAGAAAAAABrAAAA2AEAAAQABwAAAAIABQAAAAAAkgAAABIDAAACAAMAAAABAAYAAAAAAH0AAAAGAgAAAwAHAAAAAgAEAAAAAAAgAAAAAAAAAAAAAAAAAAAABgAAAAAAWgAAAOgAAAAFAAcAAAACAAYAAAAAAKwAAAAwAwAABAACAAAABQAFAAAAAADkAAAAhAEAAAUABwAAAAIABgAAAAAAKAAAAPYBAAADAAcAAAACAAQAAAAAAEMAAABsAQAABQAHAAAAAgAGAAAAAAA3AAAAKgEAAAUABwAAAAIABgAAAAAAdQAAAMECAAAFAAUAAAAEAAYAAAAAAIQAAAAeAwAAAgADAAAABwAGAAAAAABuAAAAzQIAAAUABQAAAAQABgAAAAAA0AAAAH4BAAAFAAcAAAACAAYAAAAAADwAAADdAQAABAAHAAAAAgAFAAAAAACWAAAAWwMAAAIAAQAAAAUABgAAAAAAOwAAABoCAAACAAcAAAADAAMAAAAAAKUAAABCAQAABQAHAAAAAgAGAAAAAAC7AAAA9gIAAAUAAwAAAAQABgAAAAAAoQAAADkCAAABAAcAAAACAAIAAAAAAMQAAAAUAAAABQAIAAAAAQAGAAAAAACbAAAAIwIAAAIABwAAAAIABgAAAAAAdAAAABICAAADAAcAAAACAAQAAAAAAIkAAAAdAgAAAgAHAAAAAgAGAAAAAACXAAAAWAMAAAIAAQAAAAUABgAAAAAAJgAAAL8BAAAEAAcAAAACAAUAAAAAAD0AAAD8AgAABAADAAAABAAFAAAAAABXAAAAkwAAAAcABwAAAAIABwAAAAAAcQAAAEgBAAAFAAcAAAAEAAYAAAAAADoAAABcAgAAAgAGAAAAAwADAAAAAABUAAAAygAAAAUABwAAAAIABgAAAAAAqgAAAIsCAAAFAAUAAAAEAAYAAAAAAKsAAADqAgAABQADAAAABAAGAAAAAAAiAAAANQMAAAMAAgAAAAIABAAAAAAASgAAALoBAAAEAAcAAAACAAUAAAAAAHAAAADuAAAABQAHAAAABAAGAAAAAACyAAAAWgEAAAUABwAAAAIABgAAAAAASwAAAJwBAAAFAAcAAAACAAYAAAAAAHsAAAACAgAAAwAHAAAAAgAEAAAAAAAwAAAAAAEAAAUABwAAAAIABgAAAAAAqQAAAKMAAAAHAAcAAAACAAgAAAAAAIsAAAAYAwAAAgADAAAABAAGAAAAAACTAAAADwMAAAIAAwAAAAEABgAAAAAARwAAABgBAAAFAAcAAAACAAYAAAAAANcAAAABAwAAAwADAAAABAAEAAAAAADeAAAAGgAAAAUACAAAAAIABgAAAAAANQAAAB4BAAAFAAcAAAACAAYAAAAAAJQAAAAMAwAAAgADAAAAAQAGAAAAAABBAAAAYAEAAAUABwAAAAIABgAAAAAAvwAAAMkBAAAEAAcAAAACAAUAAAAAAC8AAAA7AgAABgAGAAAAAwAHAAAAAABJAAAANQIAAAEABwAAAAIAAgAAAAAALAAAACQDAAACAAMAAAAHAAMAAAAAAFsAAAD+AQAAAwAHAAAAAgAEAAAAAAB4AAAAxwIAAAUABQAAAAQABgAAAAAAYQAAAK8CAAAFAAUAAAAEAAYAAAAAAP////9UAwAAAwABAP//CwAGAAAAAACiAAAAVAEAAAUABwAAAAMABgAAAAAAowAAANMBAAAEAAcAAAACAAUAAAAAAOYAAABiAgAACwAFAAAABAALAAAAAABIAAAAigEAAAUABwAAAAIABgAAAAAAYwAAAKMCAAAFAAUAAAAEAAYAAAAAAHIAAADZAgAABQAFAAAABAAGAAAAAAAhAAAAMwIAAAEABwAAAAIAAgAAAAAAJQAAAIMAAAAHAAcAAAACAAcAAAAAAEAAAACLAAAABwAHAAAAAgAHAAAAAABdAAAADgIAAAMABwAAAAIABAAAAAAAdwAAAHYCAAAHAAUAAAAEAAcAAAAAAPwAAACWAQAABQAHAAAAAgAGAAAAAAD4AAAASQIAAAYABgAAAAMABgAAAAAAKQAAAPoBAAADAAcAAAACAAQAAAAAAF8AAABIAwAABwABAAAACAAHAAAAAACVAAAAOQMAAAIAAgAAAAQABgAAAAAAxgAAAF8AAAAKAAcAAAACAAoAAAAAAFwAAABCAgAABgAGAAAAAwAHAAAAAABzAAAAhQIAAAUABQAAAAQABgAAAAAAKgAAAH4CAAAGAAUAAAACAAcAAAAAAIgAAAA/AwAAAgACAAAAAgAGAAAAAAD+AAAACAAAAAUACAAAAAIABgAAAAAALgAAAEUDAAACAAIAAAAHAAMAAAAAAJkAAABeAwAAAgABAAAAAgAGAAAAAACxAAAAVgIAAAUABgAAAAIABgAAAAAAJwAAAAkDAAACAAMAAAACAAMAAAAAAEIAAABmAQAABQAHAAAAAgAGAAAAAABTAAAAxAAAAAUABwAAAAIABgAAAAAAWAAAANwAAAAFAAcAAAACAAYAAAAAACMAAABzAAAABwAHAAAAAgAIAAAAAACuAAAAmwAAAAcABwAAAAIACAAAAAAAfgAAAOICAAAHAAMAAAAEAAcAAAAAALMAAAB4AQAABQAHAAAAAgAGAAAAAAArAAAAuwIAAAUABQAAAAIABgAAAAAAVgAAANYAAAAFAAcAAAACAAYAAAAAAAAAAAA"},{ name : "R_fonts_open_sans_30_fnt", data : "QkZOVAABEQBPcGVuIFNhbnMgUmVndWxhch4AEABvcGVuX3NhbnNfMzAucG5nKgAhAD8AAAAgAAAAAAAAAAAAAAD9/wAACAAAAAAAMgAAANgBJAAVABsA/v8JABEAAAAAAFAAAADbACQAFQAbAP//CQASAAAAAABaAAAAtAEkABUAGwD+/wkAEQAAAAAAbAAAAFUBAAAKAB0A//8HAAgAAAAAAGgAAAAjAQAAFAAdAP//BwASAAAAAAAoAAAARAAAAA0AIAD+/wkACQAAAAAAMQAAAMkBJAAPABsA//8JABEAAAAAADQAAAAVAD8AFwAbAP3/CQARAAAAAABDAAAAzgEAABgAGwD+/wkAEwAAAAAANwAAAFYAPwAVABsA/v8JABEAAAAAAHUAAAASAFoAFAAWAP//DgASAAAAAABuAAAAugE/ABQAFgD//w4AEgAAAAAAPgAAAKwAWgAVABQA/v8MABEAAAAAAGcAAAANAQAAFgAdAP3/DgAQAAAAAAA8AAAAlwBaABUAFAD+/wwAEQAAAAAAZgAAAPoAAAATAB0A/f8HAAoAAAAAAGoAAAAAAAAADwAkAPv/BwAIAAAAAAA7AAAAVAE/AAwAGgD9/w4ACAAAAAAAbwAAAM4BPwAWABYA/v8OABIAAAAAAFIAAADwACQAFwAbAP//CQATAAAAAAB0AAAARAE/ABAAGgD9/woACwAAAAAAWQAAAJ0BJAAXABsA/f8JABEAAAAAACYAAAAVAT8AGwAbAP7/CQAWAAAAAAA4AAAAawA/ABUAGwD+/wkAEQAAAAAAPQAAAAYBWgAVAA4A/v8PABEAAAAAAE8AAADAACQAGwAbAP7/CQAXAAAAAABXAAAAYwEkACIAGwD9/wkAHAAAAAAAcQAAAHQBAAAVAB0A/v8OABIAAAAAAHkAAACJAQAAFgAdAP3/DgAPAAAAAAA6AAAA9AE/AAoAFgD//w4ACAAAAAAAVAAAABwBJAAXABsA/f8JABEAAAAAAGUAAACHAT8AFQAWAP7/DgARAAAAAAAiAAAA7ABaABAADgD+/wkADAAAAAAARQAAAAAAJAATABsA//8JABEAAAAAAEoAAAAYAAAAEQAhAPr/CQAIAAAAAABwAAAAXwEAABUAHQD//w4AEgAAAAAASwAAAGEAJAAXABsA//8JABIAAAAAAHsAAAB7AAAAEQAgAP3/CQALAAAAAAAwAAAAlQA/ABUAGwD+/wkAEQAAAAAAYAAAACcBWgANAAsAAgAHABEAAAAAAEcAAAAmACQAGQAbAP7/CQAWAAAAAAAtAAAAPgFaAA4ACQD+/xUACgAAAAAANgAAAEEAPwAVABsA/v8JABEAAAAAAE4AAACoACQAGAAbAP//CQAXAAAAAAB8AAAADwAAAAkAJAAEAAcAEQAAAAAAdgAAACYAWgAWABYA/f8OAA8AAAAAADUAAAAsAD8AFQAbAP7/CQARAAAAAABRAAAAKQAAABsAIAD+/wkAFwAAAAAAQQAAAJ8BAAAZABsA/f8JABMAAAAAAE0AAACLACQAHQAbAP//CQAbAAAAAAAvAAAAvQA/ABEAGwD9/wkACwAAAAAASQAAAFcAJAAKABsA//8JAAgAAAAAACwAAAAbAVoADAANAP3/GwAHAAAAAABGAAAAEwAkABMAGwD//wkADwAAAAAAWwAAAF8AAAAOACAA//8JAAoAAAAAAHgAAABaAFoAFgAWAP3/DgAQAAAAAABhAAAAYAE/ABQAFgD+/w4AEQAAAAAASAAAAD8AJAAYABsA//8JABYAAAAAAGMAAAB0AT8AEwAWAP7/DgAOAAAAAAByAAAA5AE/ABAAFgD//w4ADAAAAAAAIQAAAO0BJAAKABsA//8JAAgAAAAAACUAAADfAD8AHQAbAP7/CQAZAAAAAABAAAAAsQAAAB8AHgD+/wkAGwAAAAAAXgAAAMEAWgAWABQA/f8IABAAAAAAAG0AAACcAT8AHgAWAP//DgAcAAAAAAAkAAAAnAAAABUAHwD+/wcAEQAAAAAATAAAAHgAJAATABsA//8JABAAAAAAAF0AAABtAAAADgAgAP3/CQAKAAAAAAB3AAAAPABaAB4AFgD9/w4AFwAAAAAAKQAAAFEAAAAOACAA/f8JAAkAAAAAADkAAACAAD8AFQAbAP7/CQARAAAAAABEAAAA5gEAABkAGwD//wkAFgAAAAAAegAAAHAAWgASABYA/v8OAA4AAAAAAFUAAAAzASQAGAAbAP//CQAWAAAAAABfAAAAYQFaABUACAD8/yEADQAAAAAAXAAAAM4APwARABsA/f8JAAsAAAAAAGQAAADlAAAAFQAdAP7/BwASAAAAAABzAAAAAABaABIAFgD+/w4ADgAAAAAACgAAAAAAAAAAAAAA/f8AAAAAAAAAACoAAADXAFoAFQATAP7/BwARAAAAAABiAAAA0AAAABUAHQD//wcAEgAAAAAAaQAAADcBAAAKAB0A//8HAAgAAAAAAC4AAAA0AVoACgAKAP//GgAIAAAAAAAnAAAA/ABaAAoADgD+/wkABwAAAAAAPwAAAKoAPwATABsA/f8JAA0AAAAAAEIAAAC4AQAAFgAbAP//CQATAAAAAABTAAAABwEkABUAGwD+/wkAEAAAAAAAWAAAAIUBJAAYABsA/f8JABEAAAAAACMAAAD8AD8AGQAbAP3/CQATAAAAAAAzAAAAAAA/ABUAGwD+/wkAEQAAAAAAawAAAEEBAAAUAB0A//8HABAAAAAAAH4AAABMAVoAFQAJAP7/EgARAAAAAAArAAAAggBaABUAFgD+/wsAEQAAAAAAVgAAAEsBJAAYABsA/f8JABIAAAAAAH0AAACMAAAAEAAgAP7/CQALAAAAAAAAAAAA"},{ name : "R_crew2_0_png", data : ""},{ name : "R_png_Ground_02_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQPUFcAZLSRAJGeVwAAhgDjqBQAAAD///8AAAAAAAAAAAAAAAAAAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNYOSeEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzerUAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAABHZJREFUeNrt1sEJAkEURMGNtTOY/C/uRdAABNlXBSYw63/0dQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8MfO8QZh29nmHbLXf7v/ACoQvv73z3tkr18F8tevAvnrV4H89atA/vpVIH/9KpC/fhXIX78K5K9fBfLXrwL561eB/PWrQP76VSB//SqQv34VyF+/CuSvXwXy168C+etXgfz1q0D++lUgf/0qkL9+Fchfvwrkr18F8tevAvnrV4H89atA/vpVIH/9KpC/fhXIX78K5K9fBfLXrwL561eB/PWrQP76VSB//SqQv34VyF+/CuSvXwXy168C+etXgfz1q0D++lUgf/0qkL9+Fchfvwrkr18F8tevAvnrV4H89atA/vpVIH/9KpC/fhXIX78K5K9fBfLXrwL561eB7z/AmgU4GvDxB0hWwLdXAGwAfwAF8AewARRAAWwAG0ABFMAGsAEUQAFsABtAARTABrABFEABbAAbQAEUwAawARRAAWwAG0ABFMAGsAEUQAFsABtAARTABrABFEABbAAbQAEUwAawARRAAWwAG0ABFMAGsAEUQAFsABtAARTABrABFEABbAAbQAEUwAawARRAAWwAG0ABFMAGsAEUQAFsABtAARTABrABFEABbAAbQAEUwAawARRAAWwAG0ABFMAGsAEUQAFsABtAARTABrABFEABbAAbQAEUwAawARRAAWwAG0ABFMAGsAEUQAFsABtAARTABrABFEABbAAbQAEUwAawARRAAWwAG0ABFMAGsAEUQAFsABtAARTABrABFEABbADfXgGwAfwBFMAGsAEUQAFsABtAARTABrABFEABbAAbQAEUwAawARRAAWwAG0ABFMAGsAEUQAFsABtAARTABrABFEABbAAbQAEUwAawARRAAWwAG0ABFMAGsAEUQAFsABtAARTABrABFEABbAAbQAEUwAawARRAAWwAG0ABFMAGsAEUQAFsABtAARTABrABFEABbAAbQAEUwAawARRAAWwAG0ABFMAGsAEUQAFsABtAARTABrABFEABbAAbQAEUwAawAX6iWQDfPV0B3zxdAd87XQHfOl0B3zldAd84XQHfN10B3zZdAd81XQHfNF0B3zNdAd8yXQHfMV0B3zBdAd8vXQHfLl0B3y1dAd8sXQHfK10B3ypdAd8pXQHfKF0B3yddAd8mXQHfJV0B3yRdAd8jXQHfIl0B3yFdAd8gXQHvn66At09XwLunK+DN0xXw3ukKeOt0BbxzugLeOF0B75uugLdNV8C7pivgTdMV8J7pCnjLdAW8Y7oC3jBdAe+XroC3S1fAu6Ur4M3SFfBe6Qp4q3QFvFO6At4oXQHvk66At0lXwLukK+BN0hXwHukKeIt0BbxDugLeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACeZZtHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgOd4AaKTAT8a/rxXAAAAAElFTkSuQmCC"},{ name : "R_fonts_exo2_30_fnt", data : "QkZOVAABDQBFeG8gMiBSZWd1bGFyHgALAGV4bzJfMzAucG5nJAAeAD8AAADvAAAA0wCWAA8AGwD8/wYABwAoAAAA//9mAAAAAQC/AAAA/v8AAAAAtgAAAGsBAAAUACEA/v8GABIAAAAAADIAAAAlAHsAFQAbAP7/BgARAAAAAABQAAAAYgBgABUAGwD//wYAEgC/AAAA/v8oAAAA//8AAAAAbAAAALwBYAANABsA//8GAAkAtwAAAP7/vwAAAP7/KAAAAP//AAAAAKYAAABzAAAACQAjAP//AwAHAAAAAABoAAAAiwFgABQAGwD//wYAEQAoAAAA//+/AAAA/v8AAAAAMQAAABYAewAPABsA/f8GAAwAwwAAAP//LQAAAP//wgAAAP//LgAAAP//QQAAAP//TAAAAP//wAAAAP//xQAAAP//wQAAAP//LAAAAP//xAAAAP//AAAAADQAAABOAHsAFwAbAP7/BgASAFQAAAD//0sAAAD//90AAAD//0MAAAD//8cAAAD//1oAAAD//yIAAAD//1kAAAD//ycAAAD//0wAAAD//wAAAAC8AAAApQF7AB4AGwD+/wYAGgAAAAAAyAAAAJIAAAAUACIA/////xEAewAAAP//KAAAAP//WwAAAP//vwAAAP7/AAAAANsAAABrACMAFgAhAP//AAAUAFwAAAD//ygAAAD//0wAAAD//78AAAD+/wAAAAD6AAAAEAFEABMAHAD//wUAEQAoAAAA/v97AAAA//8vAAAA//9ZAAAA/v+/AAAA/v9WAAAA//9bAAAA//9UAAAA/f/dAAAA/v8AAAAAPgAAANkAsQATABQA//8LABAAAAAAAGcAAAB1AWAAFgAbAP7/DAARAFcAAAD//1YAAAD//y8AAAD//1QAAAD9/90AAAD+/1kAAAD+/wAAAAC5AAAAggGxAA0AEgD9/wQACQAAAAAAvQAAAMMBewAfABsA/v8GABsAAAAAAGYAAACZASMAEgAcAP3/BQALAHsAAAD//1wAAAD//ygAAAD//1sAAAD//1QAAAD//78AAAD//wAAAABqAAAAXwEAAAwAIQD9/wYACAAoAAAA//+/AAAA/v8AAAAAzgAAABQAIwAQACEA/P8AAAgAvwAAAP7/KAAAAP//ewAAAAEAWwAAAAEAAAAAAG8AAADcAZYAFQAVAP7/DAARAFsAAAD//90AAAD+/1wAAAD//ykAAAD//1YAAAD//6sAAAD//18AAAD//z8AAAD//yIAAAD//3sAAAD//1QAAAD9/7sAAAD//yMAAAD//1kAAAD+/y8AAAD//30AAAD//ygAAAD+/10AAAD//1cAAAD//78AAAD+/yoAAAD//yEAAAD//ycAAAD//wAAAABSAAAAdwBgABYAGwD//wYAEwC/AAAA/v8oAAAA//8AAAAAWQAAACEBYAAXABsA/f8GABEAQQAAAP7/LgAAAP7/bAAAAP//OgAAAP//vwAAAP7/LQAAAP7/8wAAAP7/oQAAAP//QAAAAP//6gAAAP7/8AAAAP//YQAAAP7/3wAAAP//5QAAAP7/ZgAAAAEAdwAAAP//3gAAAP//XAAAAP7/4gAAAP7/wAAAAP7/wwAAAP7/cQAAAP7/YwAAAP//oAAAAP//xQAAAP7/bQAAAP7/8QAAAP7/cAAAAP7/9gAAAP7/5gAAAP7/dQAAAP7/9QAAAP7/ZwAAAP//5wAAAP//wQAAAP7/4AAAAP7/4QAAAP7/dAAAAP//OwAAAP//+wAAAP7/JgAAAP//8gAAAP7/IAAAAP//6wAAAP7/9AAAAP7/5AAAAP7/bwAAAP7//gAAAP7/ZQAAAP7/+gAAAP7/TAAAAP3/6AAAAP7/+AAAAP7/6QAAAP7/aAAAAP7/eAAAAP///AAAAP7/wgAAAP7/YgAAAP7/awAAAP//egAAAP//4wAAAP7/LAAAAP7/bgAAAP7/cwAAAP//+QAAAP7/xAAAAP7/AAAAAN0AAACBACMAFwAhAP3/AAARAGcAAAD//3UAAAD+//UAAAD+/8QAAAD+/ywAAAD+/8EAAAD+/0AAAAD//2UAAAD+/+AAAAD+/6AAAAD//8UAAAD+/yAAAAD///AAAAD//2EAAAD+/98AAAD//8AAAAD+/+YAAAD+//YAAAD+/3MAAAD//+oAAAD+/20AAAD+//EAAAD+/3AAAAD+/+IAAAD+/+cAAAD//0EAAAD+/y4AAAD+/zsAAAD//+UAAAD+/78AAAD+/94AAAD//3cAAAD//6EAAAD//2sAAAD//2IAAAD+/8IAAAD+//kAAAD+//MAAAD+/3EAAAD+/3gAAAD//2gAAAD+//gAAAD+/yYAAAD//2wAAAD//2YAAAABAG4AAAD+/1wAAAD+/0wAAAD9//oAAAD+/3oAAAD//y0AAAD+//sAAAD+/+MAAAD+/+sAAAD+//QAAAD+/+kAAAD+/8MAAAD+//IAAAD+//wAAAD+/2MAAAD//zoAAAD//+gAAAD+/+EAAAD+/3QAAAD//+QAAAD+//4AAAD+/28AAAD+/wAAAAC0AAAAVQDGAA4ADAD+/wUACQAAAAAAOAAAAKIAewAVABsA//8GABIAAAAAAE8AAABKAGAAGAAbAP7/BgAUAL8AAAD+/ygAAAD//3sAAAD//1gAAAD//1sAAAD//1wAAAD//0sAAAD//wAAAADZAAAABQEAABYAIgD/////FABMAAAA//9cAAAA//8oAAAA//+/AAAA/v8AAAAApAAAAJMAsQAVABUA/v8IABIAAAAAAHkAAAAAAHsAFgAbAP3/DAAQAFQAAAD+/1gAAAD//8EAAAD//ywAAAD//8QAAAD//98AAAD//8AAAAD//1wAAAD//0sAAAD//6AAAAD//1sAAAD//8IAAAD//ygAAAD//y4AAAD//0EAAAD//2wAAAD//8UAAAD//yAAAAD//0wAAAD+/8MAAAD//wAAAADYAAAARAEjABgAHwD+/wQAFABYAAAA//9bAAAA//9cAAAA//9LAAAA//+/AAAA/v8oAAAA//97AAAA//8AAAAAZQAAAJcBlgAUABUA/v8MABAAWwAAAP//LwAAAP//3QAAAP7/IwAAAP//uwAAAP//KgAAAP//VAAAAP3/XAAAAP//KQAAAP//WQAAAP7/JwAAAP//KAAAAP7/IQAAAP//vwAAAP7/fQAAAP//XwAAAP//IgAAAP//XQAAAP//VwAAAP//VgAAAP//PwAAAP//qwAAAP//ewAAAP//AAAAAKgAAACrAMYADgAJAP//BgAMAAAAAADRAAAAJAAjABcAIQD//wAAFQAoAAAA//+/AAAA/v8AAAAARQAAAH4BRAAUABsA//8GABEAvwAAAP7/KAAAAP//WwAAAP//ewAAAP//AAAAAM0AAADHAAAADgAiAP7///8IAL8AAAD+/ygAAAD//wAAAACgAAAAAAAAAAAAAAD9/wAABwDFAAAA//9sAAAA///CAAAA///dAAAA//93AAAA///BAAAA//9BAAAA///9AAAA//9ZAAAA///DAAAA//9MAAAA///EAAAA//9yAAAA//95AAAA///AAAAA////AAAA//9UAAAA//8AAAAAyQAAAKYAAAAUACIA/////xEAWwAAAP//ewAAAP//KAAAAP//vwAAAP7/AAAAAMwAAAC6AAAADQAiAPz///8IACgAAAD//78AAAD+/wAAAADrAAAArACWABQAGwD+/wYAEABZAAAA/v8pAAAA//8nAAAA//8qAAAA//+rAAAA//9cAAAA///dAAAA/v9UAAAA/f+7AAAA//9fAAAA//9bAAAA//8jAAAA//8vAAAA//8iAAAA//97AAAA//9WAAAA//8/AAAA//9XAAAA//9dAAAA//99AAAA//+/AAAA/v8oAAAA/v8hAAAA//8AAAAA9gAAAPcAlgAVABsA/v8GABEAKgAAAP//VgAAAP//VAAAAP3/XAAAAP//qwAAAP//XwAAAP//KQAAAP//3QAAAP7/JwAAAP//uwAAAP//VwAAAP//KAAAAP7/IwAAAP//WQAAAP7/LwAAAP//vwAAAP7/fQAAAP//WwAAAP//PwAAAP//ewAAAP//IgAAAP//IQAAAP//XQAAAP//AAAAAMsAAAAAACMAFAAhAP//AAARAL8AAAD+/1sAAAD//ygAAAD//3sAAAD//wAAAABgAAAAPwDGAA0ADAD+/wUACQAAAAAAwwAAALEBAAAZACEA/f8AABMAvwAAAP//fQAAAP//RgAAAP7/JwAAAP//IQAAAP//XQAAAP///QAAAP//KgAAAP//NwAAAP//ZgAAAP//KQAAAP//3QAAAP7/cgAAAP//uwAAAP//WwAAAP//eQAAAP//VgAAAP//IwAAAP//oAAAAP//VAAAAP7//wAAAP//XwAAAP//IAAAAP//VwAAAP//PwAAAP//KAAAAP//qwAAAP//WQAAAP7/LwAAAP7/dgAAAP//UAAAAP//IgAAAP//AAAAAC0AAACHAMYAEAAJAP//EQANAFQAAAD+/1gAAAD//+cAAAD//3IAAAD//2MAAAD//1YAAAD//0sAAAD//90AAAD+/2YAAAD//2wAAAD//zcAAAD//yIAAAD+/2sAAAD//3gAAAD//3oAAAD//ycAAAD+/0wAAAD//1kAAAD+/wAAAAA2AAAAeQB7ABUAGwD+/wYAEQAAAAAATgAAADMAYAAXABsA//8GABUAvwAAAP7/KAAAAP//AAAAAHwAAABVAAAACQAjAP//AwAHAAAAAAB2AAAANgCxABYAFQD9/wwAEAB7AAAA///EAAAA//8gAAAA//9MAAAA/v/DAAAA///CAAAA//+/AAAA//8oAAAA/v9BAAAA//8uAAAA//8sAAAA//9sAAAA///FAAAA///AAAAA///fAAAA//9YAAAA//9cAAAA/v9LAAAA//9bAAAA///BAAAA//9UAAAA/v8AAAAAUQAAAEcBAAAYACEA/v8GABQAvwAAAP7/ewAAAP//KAAAAP//XAAAAP//WAAAAP//WwAAAP//SwAAAP//AAAAAOwAAAB4AEQADwAcAPv/BQAHAL8AAAD+/1oAAAABAFQAAAABAEUAAAABAFcAAAABACIAAAABAEMAAAABAFYAAAABAFsAAAABAEYAAAABAEsAAAABAGYAAAACACgAAAD//ycAAAABAC8AAAABAFkAAAABAFgAAAABAAAAAABNAAAAFgBgAB0AGwD//wYAGgAoAAAA//9bAAAA//+/AAAA/v8AAAAA8gAAAL4ARAAVABwA/v8FABEAVwAAAP//uwAAAP//qwAAAP//IQAAAP//JwAAAP//XwAAAP//fQAAAP//vwAAAP7/VgAAAP//XQAAAP//XAAAAP//3QAAAP7/KgAAAP//KQAAAP//PwAAAP//IgAAAP//ewAAAP//IwAAAP//VAAAAP3/LwAAAP//KAAAAP7/WwAAAP//WQAAAP7/AAAAAEYAAACSAUQAFAAbAP//BgAQAL8AAAD+/ygAAAD//1sAAAD//wAAAABeAAAAAADGABIADQD9/wkADQAAAAAAbQAAAKsBlgAdABUA//8MABoAVAAAAP3/LwAAAP//3QAAAP7/WwAAAP//KAAAAP//vwAAAP7/VgAAAP//ewAAAP//WQAAAP7/RgAAAP//AAAAAL4AAAAAAJYAIQAbAP7/BgAdAAAAAACnAAAAwgAjABQAIAD+/wYAEAAoAAAA//9bAAAA//+/AAAA/v8AAAAAJAAAAF4AAAAVACMA/v8CABEAKAAAAP//vwAAAP7/WwAAAP//AAAAAEwAAADqAUQAEwAbAP//BgAPAL8AAAD+/ygAAAD//wAAAADFAAAAygEAABkAIQD9/wAAEwDdAAAA/v9mAAAA//83AAAA//+rAAAA//+/AAAA//8qAAAA//99AAAA//8vAAAA/v9GAAAA/v8nAAAA//8hAAAA//9ZAAAA/v92AAAA//9QAAAA//8gAAAA//9dAAAA///9AAAA//9XAAAA//8/AAAA//9UAAAA/v9fAAAA//8iAAAA//+7AAAA//8oAAAA//8jAAAA////AAAA//9yAAAA//+gAAAA//9bAAAA//9WAAAA//95AAAA//8pAAAA//8AAAAA5wAAAIYBIwATAB0A/v8MAA8AWQAAAP7/JwAAAP//IQAAAP//KAAAAP7/LwAAAP//fQAAAP//vwAAAP7/ewAAAP//IgAAAP//qwAAAP//XwAAAP//VwAAAP//PwAAAP//XQAAAP//WwAAAP//uwAAAP//VAAAAP3/IwAAAP//KgAAAP//XAAAAP//3QAAAP7/VgAAAP//KQAAAP//AAAAAPUAAADoAEQAFQAcAP7/BQARALsAAAD//z8AAAD//1cAAAD//78AAAD+/10AAAD//ygAAAD+/3sAAAD//ycAAAD//1wAAAD//1sAAAD//yMAAAD//1QAAAD9/yIAAAD//18AAAD//yoAAAD//6sAAAD//yEAAAD//90AAAD+/ykAAAD//y8AAAD//1YAAAD//1kAAAD+/30AAAD//wAAAAA5AAAAtwB7ABUAGwD+/wYAEQAAAAAARAAAAGcBRAAXABsA//8GABQAvwAAAP7/KAAAAP//AAAAANUAAABTACMAGAAhAP7/AAAUAFsAAAD//1gAAAD//3sAAAD//ygAAAD//78AAAD+/0sAAAD//1wAAAD//wAAAAB6AAAAgACxABMAFQD+/wwADwB7AAAA//8vAAAA//9ZAAAA//8oAAAA///dAAAA//+/AAAA/v8tAAAA//9UAAAA/f9bAAAA//8AAAAAtQAAAJABewAVABsA//8MABEAAAAAAO0AAACHAEQADwAcAP7/BQAHAL8AAAD+/ygAAAD//wAAAABVAAAAuQBgABYAGwD//wYAFABMAAAA//8oAAAA//9cAAAA//+/AAAA/v8AAAAAZAAAAGEBYAAUABsA/v8GABEAWwAAAP//uwAAAP//XAAAAP//VAAAAP3/ewAAAP//IgAAAP//XQAAAP//IwAAAP//KAAAAP7/WQAAAP7/fQAAAP//vwAAAP7/IQAAAP//JwAAAP//qwAAAP//KQAAAP//3QAAAP7/LwAAAP//KgAAAP//VgAAAP//PwAAAP//XwAAAP//AAAAAGIAAABNAWAAFAAbAP//BgARACgAAAD//78AAAD+/wAAAABpAAAAnwFgAAoAGwD//wYABwAoAAAA//+/AAAA/v8AAAAA1gAAABYBIwAYACAA/v8BABQAvwAAAP7/ewAAAP//XAAAAP//WwAAAP//WAAAAP//KAAAAP//SwAAAP//AAAAAMoAAADjAQAAFAAhAP//AAARACgAAAD//78AAAD+/1sAAAD//3sAAAD//wAAAADhAAAAFABEABQAHAD+/wUAEAB7AAAA//+/AAAA/v9UAAAA/f8oAAAA/v9ZAAAA/v9GAAAA//9WAAAA//9bAAAA//8vAAAA///dAAAA/v8AAAAA9wAAAAABsQAVABQA/v8LABEAAAAAAD8AAADiAHsAEwAbAP7/BgAPAO0AAAABAPsAAAD//+EAAAD//8QAAAD//+cAAAD//8EAAAD///UAAAD//3UAAAD//2EAAAD//+AAAAD//2UAAAD//2IAAAD///MAAAD//0wAAAD//8MAAAD///gAAAD///IAAAD///4AAAD///QAAAD//+sAAAD//+kAAAD//+QAAAD//2wAAAD///wAAAD//0EAAAD///kAAAD///oAAAD//24AAAD//8UAAAD//2gAAAD//8IAAAD//+gAAAD//+MAAAD//3MAAAD//20AAAD//28AAAD//2MAAAD///YAAAD//+YAAAD//3AAAAD///EAAAD//3EAAAD//+UAAAD//+oAAAD//8AAAAD//+IAAAD//94AAAD//wAAAADcAAAALgEjABYAIAD//wEAFAAoAAAA//+/AAAA/v9cAAAA//9MAAAA//8AAAAAsAAAAOkBsQAPAA4A/v8GAAsAAAAAALoAAADEAbEAEQAQAP7/CQANAEwAAAD+/8MAAAD//2wAAAD//8UAAAD//8IAAAD//0sAAAD//8cAAAD//1gAAAD//8EAAAD//8QAAAD//0EAAAD//0MAAAD//8AAAAD//wAAAAAzAAAAOgB7ABQAGwD+/wYAEQAAAAAAawAAAKkBYAATABsA//8GAA8AvwAAAP7/KAAAAP//AAAAAMAAAAB/AQAAGQAhAP3/AAATAN0AAAD+/zcAAAD//yoAAAD//yEAAAD//ycAAAD//0YAAAD+/78AAAD//30AAAD//y8AAAD+/1AAAAD//3YAAAD//1kAAAD+/2YAAAD//yMAAAD//ygAAAD//1cAAAD///0AAAD//10AAAD//yAAAAD//yIAAAD//18AAAD//z8AAAD///8AAAD//1YAAAD//6sAAAD//7sAAAD//1QAAAD+/1sAAAD//3kAAAD//ykAAAD//6AAAAD//3IAAAD//wAAAADTAAAA7QAAABgAIgD+////FABbAAAA//9cAAAA//9LAAAA//9YAAAA//97AAAA//+/AAAA/v8oAAAA//8AAAAAfQAAAEcAAAAOACMA/v8DAAoA5wAAAP//YwAAAP//0AAAAP//0wAAAP//dQAAAP//9QAAAP//+wAAAP//4QAAAP///gAAAP//bwAAAP//5AAAAP///QAAAP//UQAAAP//RAAAAP//1gAAAP//+AAAAP//6QAAAP//KQAAAP//6wAAAP//9AAAAP//dgAAAP//UAAAAP//4AAAAP//6AAAAP//+gAAAP//QgAAAP//UgAAAP//4wAAAP//8gAAAP//egAAAP//aAAAAP//+QAAAP//cQAAAP//8wAAAP//YQAAAP//YgAAAP//1QAAAP//bgAAAP//zgAAAAEA4gAAAP//TwAAAP//3gAAAP//dwAAAP//5QAAAP//0gAAAP//6gAAAP//2AAAAP//cwAAAP//9gAAAP//5gAAAP//8AAAAP//1AAAAP//3wAAAP///AAAAP//cAAAAP//8QAAAP//eQAAAP//bQAAAP//cgAAAP//ZQAAAP///wAAAP//AAAAAPkAAAD9AEQAEwAcAP//BQARAL8AAAD+/1kAAAD+/ygAAAD+/3sAAAD//1QAAAD9/1sAAAD//1YAAAD//y8AAAD//90AAAD+/wAAAAAgAAAAAAAAAAAAAAD9/wAABwBZAAAA//9UAAAA//9MAAAA//9GAAAA///DAAAA//9QAAAA//92AAAA//9sAAAA//9BAAAA///dAAAA///CAAAA///FAAAA//95AAAA//9yAAAA////AAAA///AAAAA//9WAAAA//93AAAA///9AAAA///BAAAA///EAAAA//9mAAAA//8AAAAA4wAAACgARAAUABwA/v8FABAAvwAAAP7/RgAAAP//KAAAAP7/LwAAAP//VgAAAP//WwAAAP//ewAAAP//3QAAAP7/WQAAAP7/VAAAAP3/AAAAAFoAAAA4AWAAFQAbAP7/BgARAL8AAAD+/wAAAACsAAAAEgDGABQADQD//xAAEgAAAAAA5AAAAIQAlgAUABsA/v8GABAAVgAAAP//WwAAAP//3QAAAP7/ewAAAP//vwAAAP7/VAAAAP3/WQAAAP7/KAAAAP7/LwAAAP//RgAAAP//AAAAAOIAAABwAJYAFAAbAP7/BgAQAFQAAAD9/1YAAAD//1sAAAD//90AAAD+/78AAAD+/ygAAAD+/y8AAAD//1kAAAD+/3sAAAD//0YAAAD//wAAAAAoAAAAAAAAAA8AIwD+/wMACwBbAAAA//8oAAAA//97AAAA//8AAAAAxwAAAHwAAAAWACMA/v8GABEAKAAAAP//vwAAAP7/ewAAAP//WwAAAP//SwAAAP//XAAAAP//WAAAAP//AAAAANIAAADVAAAAGAAiAP7///8UAHsAAAD//78AAAD+/1sAAAD//1wAAAD//1gAAAD//ygAAAD//0sAAAD//wAAAABDAAAAUQFEABYAGwD+/wYAEQBYAAAA//9bAAAA//9cAAAA//9LAAAA//8oAAAA//+/AAAA/v97AAAA//8AAAAANwAAAI4AewAUABsA/v8GAA8AQQAAAP//LgAAAP//LQAAAP//xQAAAP//wgAAAP//TAAAAP//wwAAAP//xAAAAP//wQAAAP//LAAAAP//wAAAAP//AAAAAHUAAAAjALEAEwAVAP//DAARAFYAAAD//1sAAAD//78AAAD+/1QAAAD9/90AAAD+/y8AAAD//1kAAAD+/ygAAAD+/3sAAAD//wAAAABuAAAAyAGWABQAFQD//wwAEQDdAAAA/v+/AAAA/v9GAAAA//9ZAAAA/v8vAAAA//8oAAAA//97AAAA//9UAAAA/f9bAAAA//9WAAAA//8AAAAAwQAAAJgBAAAZACEA/f8AABMAPwAAAP//VwAAAP//IAAAAP//JwAAAP//UAAAAP//dgAAAP//LwAAAP7/WQAAAP7/cgAAAP//vwAAAP///wAAAP//VAAAAP7/IwAAAP//uwAAAP//IgAAAP//XwAAAP//XQAAAP///QAAAP//KQAAAP//3QAAAP7/VgAAAP//eQAAAP//WwAAAP//oAAAAP//KAAAAP//IQAAAP//RgAAAP7/fQAAAP//ZgAAAP//NwAAAP//KgAAAP//qwAAAP//AAAAANAAAABCAJYAGQAbAP3/BgAUACgAAAD//78AAAD+/wAAAAA8AAAAxgCxABMAFAD+/wsAEAAAAAAAOwAAAPUBewAJABgA//8NAAcAWQAAAP//VAAAAP7/3QAAAP//AAAAAKUAAAB5AXsAFwAbAP7/BgATADoAAAD//+gAAAD+/8MAAAD+//gAAAD+/+kAAAD+//QAAAD+/+sAAAD+/yAAAAD///IAAAD+/+QAAAD+//4AAAD+/28AAAD+/8UAAAD+/3AAAAD+/3EAAAD+/+EAAAD+/3QAAAD//yYAAAD///sAAAD+/2EAAAD+/8QAAAD+//UAAAD+/3UAAAD+/+YAAAD+/ywAAAD+/8EAAAD+/2cAAAD//+cAAAD//78AAAD+/2UAAAD+/2MAAAD//1wAAAD+/20AAAD+//wAAAD+/6AAAAD//6EAAAD///YAAAD+//EAAAD+/98AAAD//2YAAAABAPAAAAD//8AAAAD+/94AAAD//0AAAAD//+oAAAD+/zsAAAD//+UAAAD+/3cAAAD//+IAAAD+/y4AAAD+/2gAAAD+/0EAAAD+/2wAAAD//3MAAAD//y0AAAD+/24AAAD+//MAAAD+//kAAAD+/2sAAAD//2IAAAD+/3gAAAD//+MAAAD+/3oAAAD//8IAAAD+//oAAAD+/0wAAAD9/+AAAAD+/wAAAAC7AAAATwGxABMAEwD+/w0ADwAAAAAA9AAAAOIAlgAVABsA/v8GABEAIgAAAP//ewAAAP//VwAAAP//IwAAAP//uwAAAP//VAAAAP3/LwAAAP//WQAAAP7/KAAAAP7/XwAAAP//IQAAAP//JwAAAP//XQAAAP//KgAAAP//qwAAAP//XAAAAP//fQAAAP//vwAAAP7/VgAAAP//WwAAAP//3QAAAP7/KQAAAP//PwAAAP//AAAAAKEAAABHAXsACgAbAP//DAAIAAAAAADEAAAA7wAjABkAIAD9/wEAEwCgAAAA//9bAAAA//95AAAA//+7AAAA//+/AAAA//8pAAAA///dAAAA/v9fAAAA//8iAAAA//9UAAAA/v8jAAAA////AAAA//9ZAAAA/v9WAAAA//92AAAA//9QAAAA//8gAAAA//8vAAAA/v9dAAAA///9AAAA//9XAAAA//8/AAAA//+rAAAA//9yAAAA//8qAAAA//83AAAA//9mAAAA//99AAAA//9GAAAA/v8nAAAA//8hAAAA//8oAAAA//8AAAAA3wAAANwBIwAaABwA/f8FABQAewAAAP//VAAAAP//vwAAAP//XAAAAP//KAAAAP//WwAAAP//AAAAAHQAAABKAZYAEQAZAP3/CAALAEwAAAD//ygAAAD//1wAAAD//1QAAAD//78AAAD//6AAAAD//1sAAAD//yAAAAD//3sAAAD//wAAAADzAAAA0wBEABUAHAD+/wUAEQBdAAAA//9XAAAA//97AAAA//9fAAAA//8iAAAA//9UAAAA/f/dAAAA/v+7AAAA//8jAAAA//8qAAAA//9bAAAA//9WAAAA//8pAAAA//9cAAAA//+rAAAA//8hAAAA//8/AAAA//+/AAAA/v99AAAA//8nAAAA//8oAAAA/v9ZAAAA/v8vAAAA//8AAAAAwgAAANYAIwAZACAA/f8BABMALwAAAP7/dgAAAP//XwAAAP//PwAAAP//VwAAAP//XQAAAP///QAAAP//IgAAAP//KgAAAP//UAAAAP//WQAAAP7/KAAAAP//IAAAAP//JwAAAP//RgAAAP7/fQAAAP//vwAAAP//NwAAAP//ZgAAAP//qwAAAP//3QAAAP7/KQAAAP//VgAAAP//WwAAAP//eQAAAP//IQAAAP//oAAAAP//cgAAAP///wAAAP//IwAAAP//uwAAAP//VAAAAP7/AAAAACYAAAAtAXsAGgAbAP//BgAXAAAAAAA9AAAA1QGxABQADwD//w0AEgAAAAAA1AAAADsAIwAYACEA/v8AABQASwAAAP//ewAAAP//vwAAAP7/WAAAAP//WwAAAP//XAAAAP//KAAAAP//AAAAAFcAAADnAGAAIgAbAP3/BgAcAPIAAAD//1wAAAD//28AAAD///QAAAD///4AAAD///UAAAD//0EAAAD//0wAAAD//2IAAAD///MAAAD//8MAAAD//8QAAAD///gAAAD//78AAAD+/y4AAAD//8UAAAD//8IAAAD//8EAAAD//2wAAAD//ywAAAD///YAAAD//8AAAAD//3AAAAD//wAAAABxAAAA3QFgABQAGwD+/wwAEQBbAAAA//9WAAAA///dAAAA/v9cAAAA//+/AAAA/v8nAAAA//8oAAAA/v9ZAAAA/v8vAAAA//9XAAAA//97AAAA//8iAAAA//9UAAAA/f8AAAAAOgAAAPEBlgAJABQA//8NAAcAVAAAAP7/WQAAAP//3QAAAP//AAAAAFQAAACiAGAAFwAbAP3/BgARAL8AAAD9/2IAAAD9/2sAAAD+/8UAAAD+//MAAAD9/3EAAAD9//kAAAD9/y4AAAD+/24AAAD9/y0AAAD+/0EAAAD+/zoAAAD+/2wAAAD//+IAAAD9/1wAAAD+/94AAAD//3cAAAD+/zsAAAD+/0AAAAD//+oAAAD9/8EAAAD+//8AAAD+/yAAAAD//+sAAAD9//QAAAD9/+kAAAD9//gAAAD9/8MAAAD+/+gAAAD9/3YAAAD+//oAAAD9/+MAAAD9/3oAAAD9/0wAAAD9/3gAAAD+/3UAAAD9//UAAAD9/8QAAAD+//sAAAD9/yYAAAD+/+EAAAD9/3QAAAD+/8IAAAD+/2gAAAD9/3IAAAD+/+QAAAD9/28AAAD9//4AAAD9//0AAAD+/+UAAAD9//IAAAD9/98AAAD//8AAAAD+/2EAAAD9//AAAAD///YAAAD9/3MAAAD9/+YAAAD9/20AAAD9/3kAAAD+/3AAAAD9//wAAAD9/2MAAAD9/6AAAAD//+cAAAD9/+AAAAD9/2UAAAD9/6EAAAD+/2cAAAD+//EAAAD9/ywAAAD+/wAAAACqAAAAswGxABEAEAD+/wkADQDBAAAA//9LAAAA//9BAAAA///AAAAA//9sAAAA///FAAAA///CAAAA//9MAAAA/v/DAAAA///EAAAA//8AAAAAtwAAAH4AxgAJAAoA//8RAAcAbAAAAP3/TAAAAPz/AAAAAKsAAAApAbEAEgATAP7/DQAPAAAAAAAiAAAAMgDGAA0ADAD//wYACwDzAAAA//9iAAAA///CAAAA//9MAAAA/f/2AAAA///AAAAA///FAAAA//9cAAAA/v8uAAAA/f9sAAAA//8tAAAA/v/BAAAA///EAAAA///1AAAA//8sAAAA/f/DAAAA///4AAAA///0AAAA///yAAAA//9vAAAA//8mAAAA//9BAAAA//8AAAAASgAAANwBRAAOABsA/f8GAAoARgAAAP//JwAAAP//1QAAAP//VQAAAP//vwAAAP//2gAAAP//2wAAAP//ZgAAAP//KgAAAP//LQAAAP///QAAAP//VwAAAP//1gAAAP//RAAAAP//IAAAAP//WQAAAP//3AAAAP//UAAAAP//dgAAAP//KAAAAP//2QAAAP//eQAAAP//VAAAAP//0AAAAP///wAAAP//UQAAAP//0wAAAP//LwAAAP//IgAAAP//TwAAAP//0gAAAP//3QAAAP//3gAAAP//dwAAAP//2AAAAP//8AAAAP//1AAAAP//WwAAAP//VgAAAP//cgAAAP//AAAAAHAAAADJAWAAFAAbAP//DAARAHsAAAD//1sAAAD//1QAAAD9/78AAAD+/90AAAD+/1kAAAD+/y8AAAD//0YAAAD//ygAAAD//1YAAAD//wAAAACyAAAAYgGxABAAEgD+/wQADAAAAAAA/wAAAKwAIwAWACEA/f8GABAAwwAAAP//wQAAAP//VAAAAP7/WAAAAP//LgAAAP//xAAAAP//IAAAAP//XAAAAP//3wAAAP//TAAAAP7/oAAAAP//KAAAAP//wgAAAP//LAAAAP//xQAAAP//SwAAAP//WwAAAP//QQAAAP//wAAAAP//bAAAAP//AAAAAEsAAAAAAGAAFgAbAP//BgASACgAAAD//78AAAD+/wAAAAB7AAAAOQAAAA4AIwD+/wMACgAoAAAA//8AAAAAMAAAAMwAewAWABsA/v8GABIAAAAAAPEAAACqAEQAFAAcAP//BQARAEYAAAD//ygAAAD//1kAAAD+/78AAAD+/3sAAAD//y8AAAD//1QAAAD9/90AAAD+/1YAAAD//1sAAAD//wAAAAD7AAAADAGWABMAGwD//wYAEQBUAAAA/f9bAAAA//9WAAAA//8vAAAA//97AAAA//9ZAAAA/v/dAAAA/v8oAAAA/v+/AAAA/v8AAAAAqQAAAL8BIwAdABwA/v8GABkASwAAAP//TAAAAP//bAAAAP//3QAAAP//xwAAAP//QwAAAP//VAAAAP//WAAAAP//WQAAAP//WgAAAP//AAAAAEcAAACmAUQAFgAbAP7/BgATAFgAAAD//3sAAAD//1sAAAD//78AAAD+/1wAAAD//0sAAAD//ygAAAD//wAAAADqAAAAmACWABQAGwD+/wYAEAAjAAAA//9fAAAA//9bAAAA//+rAAAA//9WAAAA//9cAAAA//8iAAAA///dAAAA/v99AAAA//8pAAAA//8qAAAA//8hAAAA//8vAAAA//9ZAAAA/v97AAAA//8/AAAA//+/AAAA/v9XAAAA//9dAAAA//8nAAAA//+7AAAA//9UAAAA/f8oAAAA/v8AAAAA1wAAAI8BsQATABIA/v8MAA8AAAAAAN4AAABbAJYAFQAbAP//BgASAL8AAAD+/ygAAAD//wAAAAA1AAAAZQB7ABQAGwD+/wYAEAAAAAAA8AAAAJYARAAUABwA/v8FABEAKAAAAP//RgAAAP//VAAAAP//WQAAAP//ewAAAP//cgAAAP//WwAAAP//XAAAAP//3QAAAP//VgAAAP//vwAAAP7/awAAAP//KgAAAP//ZgAAAP//AAAAAEEAAAAjAUQAGQAbAP3/BgATACkAAAD//90AAAD+/6sAAAD//yoAAAD//zcAAAD//2YAAAD//78AAAD///8AAAD//0YAAAD+/yEAAAD//30AAAD//ygAAAD//y8AAAD+/3YAAAD//1AAAAD//1kAAAD+/yAAAAD//ycAAAD///0AAAD//10AAAD//1cAAAD//z8AAAD//yIAAAD//18AAAD//yMAAAD//1QAAAD+/7sAAAD//6AAAAD//3IAAAD//1YAAAD//1sAAAD//3kAAAD//wAAAAC/AAAA4gF7ABMAGwD+/wwADwAAAAAA2gAAABsBAAAWACIA/////xQAvwAAAP7/XAAAAP//KAAAAP//TAAAAP//AAAAAC8AAABcASMAFQAdAP3/BgAQAPMAAAD//1UAAAD//2IAAAD//0YAAAD+/ycAAAD+/9sAAAD//2YAAAD//9IAAAD//9gAAAD///YAAAD//9QAAAD///AAAAD//90AAAD+/08AAAD//94AAAD//3cAAAD//9UAAAD//3IAAAD+/9oAAAD//3kAAAD//1YAAAD+/3AAAAD//1EAAAD//9kAAAD//9MAAAD///QAAAD//1kAAAD+//UAAAD//9AAAAD//1QAAAD+//8AAAD//yIAAAD+/9wAAAD//9YAAAD///gAAAD//0QAAAD///IAAAD///0AAAD//1cAAAD///4AAAD//28AAAD//1AAAAD+/3YAAAD+/y8AAAD9/wAAAABJAAAA0gFEAAoAGwD//wYACAC/AAAA/v8oAAAA//8AAAAALAAAAPYBIwAJAA4A//8XAAcAZgAAAP//dwAAAP//WQAAAP7/3QAAAP7/VgAAAP//VAAAAP7/eQAAAP//RgAAAP7/JwAAAP3/NwAAAP//VwAAAP///QAAAP//dgAAAP//UAAAAP7/cgAAAP7//wAAAP//IgAAAP3/AAAAAFsAAAAfAAAADQAjAP//AwAKAAAAAAB4AAAAagCxABYAFQD9/wwAEAAtAAAA///dAAAA//9bAAAA//9UAAAA/v8vAAAA//9ZAAAA//8oAAAA//+/AAAA//8AAAAAuAAAACYAxgAMAA0A/v8cAAcAAAAAAGEAAABwAZYAFAAVAP7/DAAQAFYAAAD//90AAAD+/78AAAD+/ygAAAD+/1kAAAD+/0YAAAD//3sAAAD//y8AAAD//1QAAAD9/1sAAAD//wAAAACiAAAAUQF7ABMAGwD+/wYADwBdAAAA//9XAAAA//8/AAAA//97AAAA//9bAAAA//8vAAAA//9fAAAA//8oAAAA/v9ZAAAA/v+/AAAA/v99AAAA//8nAAAA///dAAAA/v9cAAAA//+rAAAA//9WAAAA//8pAAAA//8jAAAA//8hAAAA//8iAAAA//8qAAAA//9UAAAA/f+7AAAA//8AAAAAowAAAGQBewAVABsA/v8GABEAvwAAAP7/KAAAAP//AAAAAOYAAACoALEAHgAVAP7/DAAaAFsAAAD//1QAAAD9/90AAAD+/ygAAAD+/1kAAAD+/y8AAAD//78AAAD+/0YAAAD//3sAAAD//1YAAAD//wAAAABIAAAAvAFEABYAGwD//wYAFAC/AAAA/v8oAAAA//8AAAAAYwAAAIQBlgATABUA/v8MAA8AewAAAP//VwAAAP//PwAAAP//IgAAAP//XwAAAP//XQAAAP//IwAAAP//VgAAAP//WwAAAP//VAAAAP3/vwAAAP7/uwAAAP//qwAAAP//KgAAAP//KQAAAP//3QAAAP7/XAAAAP//KAAAAP7/LwAAAP//WQAAAP7/IQAAAP//JwAAAP//fQAAAP//AAAAAHIAAAAAALEAEAAVAP//DAAMAFkAAAD+/y8AAAD//ygAAAD//0YAAAD//3sAAAD//78AAAD+/1sAAAD//90AAAD+/1QAAAD9/1YAAAD//wAAAAAhAAAA8QFgAAoAGwD//wYACAAAAAAAJQAAAPUAewAfABsA/v8GABsAAAAAAEAAAAAyAZYAGAAaAP//CQAWAN0AAAD//1kAAAD//1QAAAD//wAAAABdAAAALAAAAA0AIwD+/wMACgD2AAAA///YAAAA///mAAAA///AAAAA///UAAAA//9hAAAA///wAAAA///fAAAA//8pAAAA//9tAAAA//95AAAA///xAAAA///8AAAA//9wAAAA///QAAAA//93AAAA//9PAAAA///eAAAA//96AAAA///qAAAA//9jAAAA//9uAAAA//9zAAAA///lAAAA///TAAAA//9RAAAA///EAAAA///1AAAA//91AAAA//9BAAAA///7AAAA///hAAAA//90AAAA///+AAAA//9lAAAA///gAAAA//9yAAAA///BAAAA//9SAAAA///nAAAA///4AAAA///WAAAA///pAAAA///DAAAA//9EAAAA///rAAAA///0AAAA///iAAAA///oAAAA//9CAAAA//9MAAAA///6AAAA//92AAAA//9QAAAA//9vAAAA///kAAAA///yAAAA///9AAAA//9xAAAA///zAAAA///5AAAA///CAAAA///VAAAA//9iAAAA//9rAAAA////AAAA//9sAAAA///OAAAAAQDFAAAA//9NAAAA///jAAAA///SAAAA//9oAAAA//94AAAA//8AAAAAdwAAAEwAsQAeABUA/f8MABkATAAAAP//WAAAAP//IAAAAP//SwAAAP//vwAAAP//VAAAAP7/LAAAAP//oAAAAP//ewAAAP//WQAAAP//KAAAAP7/3wAAAP//WwAAAP//LgAAAP//3QAAAP//XAAAAP//AAAAAK8AAAC5AMYAEAAJAP7/BgAMAAAAAAD8AAAAHwGWABMAGwD//wYAEQDdAAAA/v9bAAAA//9WAAAA//8oAAAA/v9ZAAAA/v+/AAAA/v8vAAAA//9UAAAA/f97AAAA//8AAAAA+AAAAFsBlgAVABkA/v8KABEAVwAAAP//XQAAAP//PwAAAP//WQAAAP7/LwAAAP//vwAAAP7/fQAAAP//IQAAAP//JwAAAP//3QAAAP7/qwAAAP//KgAAAP//KQAAAP//WwAAAP//VgAAAP//uwAAAP//VAAAAP3/ewAAAP//XwAAAP//KAAAAP7/IwAAAP//IgAAAP//XAAAAP//AAAAACkAAAAPAAAAEAAjAP3/AwALADwAAAD//z8AAAD//0kAAAD//1IAAAD//+QAAAD///QAAAD+/28AAAD+//0AAAD+/10AAAD///IAAAD+/zYAAAD//7EAAAD//0QAAAD//+sAAAD//8QAAAD//9MAAAD//9kAAAD//6QAAAD//zAAAAD///4AAAD+/z0AAAD///sAAAD//+EAAAD//3QAAAD//7wAAAD//74AAAD//+wAAAD//3IAAAD+/+AAAAD//2UAAAD//0oAAAD///8AAAD+/7kAAAD//+cAAAD//7oAAAD//34AAAD//yMAAAD//9AAAAD//00AAAD//24AAAD///UAAAD+/3UAAAD//+0AAAD//+gAAAD//+YAAAD//9gAAAD//3MAAAD///YAAAD+/z4AAAD///wAAAD//3AAAAD+//EAAAD//6MAAAD//20AAAD//3kAAAD+/zUAAAD//9oAAAD//80AAAD//2MAAAD//zMAAAD//yUAAAD//7MAAAD//+IAAAD//94AAAD+/08AAAD//9YAAAD//7UAAAD//3cAAAD+/14AAAD//+UAAAD///cAAAD//04AAAD//1EAAAD//7IAAAD//+oAAAD//9IAAAD//+4AAAD//8wAAAD//9QAAAD//8AAAAD//98AAAD///AAAAD//ykAAAD//3EAAAD///MAAAD+//kAAAD//70AAAD//6UAAAD//8UAAAD//84AAAD//2wAAAD//9sAAAD//6oAAAD//8EAAAD//ysAAAD//0EAAAD//yQAAAD//2QAAAD//+MAAAD//2oAAAD//zEAAAD//yEAAAD//+8AAAD//3oAAAD//9EAAAD//2gAAAD//3gAAAD//30AAAD//18AAAD//2EAAAD//9UAAAD//8IAAAD//2sAAAD//1UAAAD//2IAAAD+/0cAAAD//8MAAAD//2kAAAD//+kAAAD//1MAAAD///gAAAD+/88AAAD//9wAAAD//1AAAAD//3YAAAD+/6wAAAD//6IAAAD//9cAAAD//0gAAAD//0IAAAD//0wAAAD///oAAAD//wAAAADpAAAAZABEABQAHAD+/wUAEABbAAAA//9dAAAA//9XAAAA//9ZAAAA/v8vAAAA//9UAAAA/f99AAAA//8nAAAA//8hAAAA//8oAAAA/v+rAAAA//8qAAAA//+/AAAA/v/dAAAA/v9cAAAA//9WAAAA//9fAAAA//8pAAAA//+7AAAA//8/AAAA//8jAAAA//97AAAA//8iAAAA//8AAAAAXwAAAJcAxgAUAAkA/f8aAA0AAAAAAMYAAAAhAJYAIQAbAPz/BgAbAHkAAAD//1QAAAD+/3IAAAD+//8AAAD//0YAAAD9/1YAAAD+/90AAAD9/94AAAD//3cAAAD//yoAAAD+/2YAAAD+/78AAAD//1sAAAD//ygAAAD//ycAAAD+/y8AAAD9/1kAAAD9/yAAAAD//3YAAAD//1AAAAD+//0AAAD//1cAAAD//yIAAAD+/wAAAADoAAAAUABEABQAHAD+/wUAEAAjAAAA//9UAAAA/f9fAAAA//8iAAAA//+7AAAA//9dAAAA//9XAAAA//8/AAAA//9ZAAAA/v97AAAA//8hAAAA//8nAAAA//8oAAAA/v8qAAAA//+/AAAA/v/dAAAA/v9cAAAA//+rAAAA//8vAAAA//9bAAAA//9WAAAA//8pAAAA//99AAAA//8AAAAAXAAAAHEBIwAVAB0A/f8GABAAaAAAAP//ZQAAAP//4AAAAP//wQAAAP7/5wAAAP///AAAAP//cAAAAP//8QAAAP//5gAAAP//cwAAAP//wAAAAP7/YQAAAP//QQAAAP7/YwAAAP//6AAAAP//bQAAAP//3gAAAP//4gAAAP//6gAAAP//5QAAAP//bgAAAP//xQAAAP7/8wAAAP//+QAAAP//cQAAAP//awAAAP//wgAAAP7/YgAAAP//ZgAAAAEAbAAAAP//4wAAAP//eAAAAP//9gAAAP//egAAAP//6QAAAP//+AAAAP//wwAAAP7/9AAAAP//6wAAAP//+gAAAP//TAAAAP3//gAAAP//bwAAAP//5AAAAP//4QAAAP//8gAAAP//xAAAAP7/9QAAAP//7QAAAAEAdQAAAP//+wAAAP//AAAAAHMAAAAQALEAEwAVAP7/DAAPAL8AAAD+/1kAAAD+/y8AAAD//ygAAAD//3sAAAD//1sAAAD//1YAAAD//90AAAD+/1QAAAD9/wAAAAAKAAAAAAAAAAAAAAD9/wAAAAAAAAAAKgAAAKIBsQARABAA/v8GAA4A7gAAAAEAQQAAAP//xQAAAP//YgAAAP//wgAAAP//TAAAAP3/wwAAAP//bAAAAP//xAAAAP//wQAAAP//wAAAAP//AAAAAP0AAAAxAQAAFgAiAP3/BQAQACgAAAD//0wAAAD+/y4AAAD//yAAAAD//8MAAAD//0sAAAD//0EAAAD//1wAAAD//8IAAAD//2wAAAD//8UAAAD//8AAAAD//1sAAAD//6AAAAD//98AAAD//1QAAAD+/1gAAAD//ywAAAD//8EAAAD//8QAAAD//wAAAADgAAAAAABEABQAHAD+/wUAEADdAAAA/v9WAAAA//9ZAAAA/v8oAAAA/v9GAAAA//+/AAAA/v97AAAA//8vAAAA//9bAAAA//9UAAAA/f8AAAAA5QAAADwARAAUABwA/v8FABAA3QAAAP7/RgAAAP//KAAAAP7/vwAAAP7/LwAAAP//WQAAAP7/ewAAAP//VAAAAP3/VgAAAP//WwAAAP//AAAAAP4AAACYACMAFAAhAP//BgARAL8AAAD//1IAAAD//ygAAAD//1sAAAD//90AAAD//1wAAAD//1QAAAD//0YAAAD//3sAAAD//wAAAAAuAAAAYwDGAAkACgD//xcABwBGAAAA/v9XAAAA//9WAAAA///9AAAA////AAAA//9yAAAA/v95AAAA//93AAAA///dAAAA/v9UAAAA/v83AAAA//9mAAAA//8nAAAA/f8iAAAA/f9ZAAAA/v9QAAAA/v92AAAA//8AAAAAsQAAAOwAsQAUABQA//8LABIAAAAAACcAAABMAMYACQAMAP//BgAGAPUAAAD//ywAAAD9/8QAAAD//yYAAAD//y4AAAD9/28AAAD///QAAAD///IAAAD///gAAAD//8MAAAD//0wAAAD9/2IAAAD//8IAAAD//8UAAAD//y0AAAD+//YAAAD///MAAAD//0EAAAD//2wAAAD//1wAAAD+/8AAAAD//8EAAAD//wAAAABCAAAAPAFEABUAGwD//wYAEwAoAAAA//+/AAAA/v8AAAAAUwAAAI0AYAAVABsA/v8GABEAKAAAAP//vwAAAP7/WwAAAP//AAAAAM8AAAAIASMADgAgAP3/AQAIAL8AAAD+/ygAAAD//wAAAABYAAAACQFgABgAGwD9/wYAEgDWAAAA//92AAAA//9EAAAA///QAAAA////AAAA//9RAAAA//9PAAAA///eAAAA//93AAAA///SAAAA///9AAAA///wAAAA///YAAAA///TAAAA///UAAAA//95AAAA//9yAAAA//+/AAAA///VAAAA//8tAAAA//8AAAAAIwAAABQBewAZABsA/v8GABUAAAAAAK4AAAA7AbEAFAATAP7/BgARAEEAAAD//2wAAAD//8UAAAD//8AAAAD//8IAAAD//0wAAAD9/8EAAAD//8MAAAD//8QAAAD//wAAAADuAAAAwACWABMAGwD7/wYABwAqAAAAAQBmAAAAAQAoAAAA//+/AAAA/v9UAAAAAQAAAAAAfgAAAGwAxgASAAoA//8QABAAAAAAALMAAAByAbEAEAASAP7/BAAMAAAAAAArAAAAFQGxABQAEwD+/wsAEQAAAAAAVgAAAM8AYAAYABsA/f8GABIAYQAAAP//3wAAAP//6gAAAP//5QAAAP//4gAAAP//bQAAAP//ZQAAAP//8QAAAP///AAAAP//cAAAAP//cwAAAP//9gAAAP//5gAAAP//wgAAAP//YgAAAP//vwAAAP7/wQAAAP//aAAAAP//4wAAAP//QQAAAP//LgAAAP//bAAAAP//ZgAAAAEAbgAAAP//xQAAAP//LQAAAP//cQAAAP//8wAAAP//6wAAAP//IAAAAP//8gAAAP///gAAAP//bwAAAP//5AAAAP//TAAAAP7/6QAAAP//6AAAAP//+AAAAP//XAAAAP7/9AAAAP//wAAAAP//wwAAAP//dQAAAP//9QAAAP//+gAAAP//4AAAAP//4QAAAP//JgAAAP//+wAAAP//LAAAAP//xAAAAP//+QAAAP//AAAAAAAAAAA"},{ name : "R_fonts_digitaldisco_thin_fnt", data : "QkZOVAABEQBEaWdpdGFsRGlzY28tVGhpbhAAFQBkaWdpdGFsZGlzY28tdGhpbi5wbmcSAAwAPwAAACAAAAAAAAAAAAAAAP//AAAFAAAAAAAyAAAAmQEAAAkADAD//wEACAAAAAAAUAAAAOQAAAAKAAwA//8BAAkAAAAAAFoAAAA/AQAACQAMAP//AQAIAAAAAABsAAAAeAEAAAQADAD//wEAAwAAAAAAaAAAAGEBAAAKAAwA//8BAAkAAAAAACgAAAAPAAAABAAOAP//AQADAAAAAAAxAAAAlQEAAAQADAD//wEAAwAAAAAANAAAAKwBAAAKAAwA//8BAAkAAAAAAEMAAAB3AAAACgAMAP//AQAJAAAAAAA3AAAAyQEAAAgADAD//wEABwAAAAAAdQAAAHkADgAKAAoA//8DAAkAAAAAAG4AAABVAA4ACgAKAP//AwAJAAAAAAA+AAAAuAAOAAgACAD//wQABwAAAAAAZwAAAD0AAAAKAA0A//8DAAkAAAAAADwAAACwAA4ACAAIAP//BAAHAAAAAABmAAAAXAEAAAUADAD//wEABAAAAAAAagAAAAsAAAAEAA4A//8BAAMAAAAAADsAAACsAA4ABAAJAP//BAADAAAAAABvAAAAXwAOAAoACgD//wMACQAAAAAAUgAAAO4AAAAKAAwA//8BAAkAAAAAAHQAAACQAQAABQAMAP//AQAEAAAAAABZAAAANQEAAAoADAD//wEACQAAAAAAJgAAAFEAAAALAA0A//8AAAoAAAAAADgAAADRAQAACgAMAP//AQAJAAAAAAA9AAAAxwAOAAgABgD//wUABwAAAAAATwAAANkAAAALAAwA//8BAAoAAAAAAFcAAAAfAQAADQAMAP//AQAMAAAAAABxAAAAhgEAAAoADAD//wMACQAAAAAAeQAAAEcAAAAKAA0A//8DAAkAAAAAADoAAAD8AQAAAwAIAP//BAACAAAAAABUAAAAAgEAAAkADAD//wEACAAAAAAAZQAAAD4ADgAKAAoA//8DAAkAAAAAACIAAADVAA4ABQAFAP//AQAEAAAAAABFAAAAiwAAAAgADAD//wEABwAAAAAASgAAADgAAAAFAA0A//8BAAQAAAAAAHAAAAB8AQAACgAMAP//AwAJAAAAAABLAAAAswAAAAkADAD//wEACAAAAAAAewAAAB8AAAAIAA4A/v8BAAUAAAAAADAAAADlAQAACgAMAP//AQAJAAAAAABgAAAA2gAOAAQABQD//wEAAwAAAAAARwAAAJsAAAALAAwA//8BAAoAAAAAAC0AAAD3AA4ABgADAP//BwAFAAAAAAA2AAAAvwEAAAoADAD//wEACQAAAAAATgAAAM8AAAAKAAwA//8BAAkAAAAAAHwAAAAtAAAAAwAOAP//AQACAAAAAAB2AAAAgwAOAAoACgD//wMACQAAAAAANQAAALYBAAAJAAwA//8BAAgAAAAAAFEAAAAAAAAACwAOAP//AQAKAAAAAABBAAAAYwAAAAoADAD//wEACQAAAAAATQAAAMIAAAANAAwA//8BAAwAAAAAAC8AAAAAAA4ABQAMAP//AQAEAAAAAABJAAAAsAAAAAMADAD//wEAAgAAAAAALAAAAOEADgAEAAUA//8JAAMAAAAAAEYAAACTAAAACAAMAP//AQAHAAAAAABbAAAAFwAAAAQADgD//wEAAwAAAAAAeAAAAJoADgAJAAoA//8DAAgAAAAAAGEAAAArAA4ACgAKAP//AwAJAAAAAABIAAAApgAAAAoADAD//wEACQAAAAAAYwAAADUADgAJAAoA//8DAAgAAAAAAHIAAABpAA4ABwAKAP//AwAGAAAAAAAhAAAA7wEAAAMADAD//wEAAgAAAAAAJQAAABUADgALAAwA//8BAAoAAAAAAEAAAAAFAA4ACwAMAP//AQAKAAAAAABeAAAA5QAOAAcABQD//wIABgAAAAAAbQAAAEgADgANAAoA//8DAAwAAAAAACQAAAAwAAAACAAOAP//AQAHAAAAAABMAAAAvAAAAAYADAD//wEABQAAAAAAXQAAABsAAAAEAA4A//8BAAMAAAAAAHcAAACNAA4ADQAKAP//AwAMAAAAAAApAAAAEwAAAAQADgD//wEAAwAAAAAAOQAAANsBAAAKAAwA//8BAAkAAAAAAEQAAACBAAAACgAMAP//AQAJAAAAAAB6AAAAowAOAAkACgD//wMACAAAAAAAVQAAAAsBAAAKAAwA//8BAAkAAAAAAF8AAAD9AA4ACgADAP//CwAJAAAAAABcAAAAEAAOAAUADAD//wEABAAAAAAAZAAAAFIBAAAKAAwA//8BAAkAAAAAAHMAAABwAA4ACQAKAP//AwAIAAAAAAAKAAAAAAAAAAAAAAD//wAAAAAAAAAAKgAAAM8ADgAGAAYA//8DAAUAAAAAAGIAAABIAQAACgAMAP//AQAJAAAAAABpAAAAawEAAAQADAD//wEAAwAAAAAALgAAAPQADgADAAMA//8KAAIAAAAAACcAAADeAA4AAwAFAP//AQACAAAAAAA/AAAA8gEAAAoADAD//wEACQAAAAAAQgAAAG0AAAAKAAwA//8BAAkAAAAAAFMAAAD4AAAACgAMAP//AQAJAAAAAABYAAAALAEAAAkADAD//wEACAAAAAAAIwAAACAADgALAAwA//8BAAoAAAAAADMAAACiAQAACgAMAP//AQAJAAAAAABrAAAAbwEAAAkADAD//wEACAAAAAAAfgAAAOwADgAIAAQA//8GAAcAAAAAACsAAADAAA4ABwAHAP//BQAGAAAAAABWAAAAFQEAAAoADAD//wEACQAAAAAAfQAAACcAAAAGAA4A//8BAAUAAAAAAAAAAAA"},{ name : "R_png_BattleZone_01_Ground_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQPUFcAZLSRAJGeVwAAhgDjqBQAAAD///8AAAAAAAAAAAAAAAAAAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNYOSeEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzerUAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAABV1JREFUeNrt1zEOwjAAxdCcNTfg/gt0AVUoLF1I/SxV3QPfdcYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEGTOx5zTOZT/AC+cAwOgxvHDH+v/vJ1J7w9wepxJ6w9wWv/xdiap7/7qcT6R8v9uADcCBmCAWvmv3s4qUv6rx1lFyn/1dlap774eiJe/GwEDMIDydyOIl78bQbz83Qh89/WA8ncjYAAGUP5uBPHydyOIl78bge++HlD+bgQMwADK340gXv5uBPHydyPw3dcDyt+NgAEYQPm7EcTL340gXv5uBL77ekD5uxEwAAMofzeCePm7EcTL343Ad18PKH83AgZgAOXvRhAvfzeCePm7Efju6wHl70bAAAyg/N0I4uXvRhAvfzcC3309oPzdCBiAAZS/G0G8/N0I4uXvRuC7rweUvxsBAzCA8ncjiJe/G0G8/N0IfPf1gPJ3I2AABrD6+I3A4uM3AmvP3gisPN4DVh6/EVh31gDWHb8RWHb8RmDV2RuBNcd7wJrjNwIrLhvAiq+/N/8DWPHVZ/P4t+KrbwZgAA2gARiAATSABmAABtAAGoABGEADaAAGYAANoAEYgAE0gAZgAAbQABqAARhAA2gABmAADaABGIABNIAGYAAG0AAagAEYQANoAAZgAA2gARiAATSABmAABtAAGoABGEADaAAGYAANoAEYgAE0gAZgAAbQABqAARhAA2gABmAADaABGIABNIAGYAAG0AAagAEYQANoAAZgAA2gARiAATSABmAABtAAGoABGEADaAAGYAANoAEYgAE0gAZgAAbQABqAARjAijWAFWsAK9YAHg3grQE8GsBbA3g0gLcG8GgAbw3g0QDeGsCjAbw1gEcDeGsAjwbw1gAeDeCtATwawJsBGEADaAAGYAANoAEYgAE0gAZgAAbQABqAARhAA2gABmAADaABGIABNIAGYAAG0AAagAEYQANoAAZgAA2gARiAATSABmAABtAAGoABGEADaAAGYAANoAEYgAE0gAZgAAbQABqAARhAA2gABmAADaABGIABNIAGYAAG0AAagAEYQANoAAZgAA2gATb7BDBA/BOgAXwCGKAegRpAAzCABtAAGoABNIAG0AAMoAE0gAZgAA2gATQAA2gADaABGEADaAANwAAaQANoAAbQABpAAzCABtAAGoABNIAG0AAMoAE0gAZgAA2gATQAA2gADaABGEADaAANwAAaQANoAAbQABrgjxvgXhZhgLhFNEDcAgwQt4AG0AAMoAE0gAZgAA2gATQAA2gADaABGEADaAANwAAaQANoAAa4swXG0ADWv/M/wPqz639LgAWi62eB/Po3t4D1xy1g/Sxg/Sxg/VkLWH/cAtbPAtbPAtaftYD1xy1g/Sxg/Sxg/VkLWH/cAtbPAtbPAtaftYD1xy1g/Sxg/Sxg/VkLWH/cAtbPAtbPAtaftYD1xy1g/Sxg/Sxg/VkLWH/cAtbPAtbPAtaftYD1xy1g/Sxg/Sxg/VkLWH/cAtbPAtbPAtaftYD1xy1g/Sxg/Sxg/VkLWH/cAtbPAtbPAtaftYD1xy1g/Sxg/Sxg/VkLWH/cAtbPAtbPAtaftYD1xy1g/Sxg/XULOMawBaw/bgHHl7aAo0tbwLGlLeDI0hZwXGkLOKq0BRxT2gKOKG0Bx5O2gKNJW8CxpC3gSNIWcBxpCziKtAUcQ/ov4AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL95AjK0acLUaQYvAAAAAElFTkSuQmCC"},{ name : "R_fonts_exo2_light_302_png", data : ""},{ name : "R_png_Panel_240_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQyNkAAZLSRAJGeVwAAhgDjqBQAAAD///9AM0cyNkApQjJFNi4AAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNKNCaEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXGSMuM0dLU2Bpc3qHlJSltK3D1Mfh9eEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdHyE7P0NZX2V3f4eVn6m4v8Xb3+L///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzhAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAAqtJREFUeNrt3NFxwjAURFFqk5DkMui/iuAAARM+DH9ozynBe/NgyIwPBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACACZxOnkH0/Msigej5e5dA9PwrCeTOf6z1KIHcv/4xem9HVyBu/3X439nbOYTqgyAugF4vCYyltXHsXQJZ+7dayiWBsSyj30kgJYBzAdcEnkggY/8qgfgAJJC+vwQEIIH0/SUQt/+pliqB3PnHaK1IIHn+lQSi55dA5P6P80sgMoCnAiQQFkCtEggPoNbeJRD+A5AEwgOQQHwAEogPQALxAUggPgAJxAcggawATrVKQAISkIAEJCABCUhAAhKQgAQkcF320wS8YmKKBG5Lv52AV0zMkcC680dX4OkVE57qlyZwD+DNBO6vmFiWIoCvTeAWwPtX4PqKifP8pQwBfGsC2wDe/yBY5xdA6hW4zi+AzCvwN38pXQCBV6AXAURfAQHMegX2JfCwf2kCmOkK7EtAANNegV0JPO4vgLmuwK4ENgH4DjDVFdiTwGZ/AeQlsA3AD0FpCWz3F0BYAmMUAeQm8G/+4t/BQQm8mP8cgEcWksDL+YvHFZPAMH92AsP82Qk082cn0MyfnUAzf3YCzfzZCTTzZyfQzJ+dQDN/dgLN/OEJeAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHP7Ac+m4pRxEGWFAAAAAElFTkSuQmCC"},{ name : "R_png_Panel_120_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQyNkAAZLSRAJGeVwAAhgDjqBQAAAD///9AM0cyNkApQjJFNi4AAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNKNCaEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXGSMuM0dLU2Bpc3qHlJSltK3D1Mfh9eEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdHyE7P0NZX2V3f4eVn6m4v8Xb3+L///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzhAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAAzlJREFUeNrt3FFu4jAYhdFujTi2s4zufxWN4xBCoVWRRiPh/xxpXkaal3w3pjANHx8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALyTaXINQudflpRchzA+P7/nL8UEAuVfltsEpqnWsjGBMPlzrrVPYM8/pzSbQIz8LXjOpbQJXO/+7e9mp0CI/C1+k/Pp8M/rTwHpeCFwoUa/+5tb/vUEaC8K+wmQF+8IB87/ePfvC1hqz58NYPj893f/zZbfAILnX18LDCByfgMInt8Aguc3gLD559kAIt/9czaAyId/yQYQ+vA3gOCHvwEEP/wNIOwbPwMI/r7/OoDSB3C5uIqR8h8DKPKPkT/v/+H/x/znw1/+Ee7+PoA/5787/A1ggLu//Xkh/+nwTyk5A4Ld/Yeef/3Xi2eEIt393/P7pdDQd//2C+I+Bwh897dfGjeAyHe/TwLf82Off3b3bwPwM8Cb5f/1Y5/5xfzrAFzbgfLPr+bPrq38vEX+vbr8UfO3h/zX/Mvp+X75I+XPt0c8b8/3yx8qf/tun8fn++UPkr+UlPYT4Px8v/yj9t/u9yN/zmnT//Z4vl/+cQdQ0vUEaB3T4XghkH/0AfQj/z7/dQLyDz+AXr3lSw/kDzOAH9SfP/WXP+4ASpF/nAHMvw9AfgOQ3wDkNwD5ow9A/pDvAuQ3APnjDaDcDUD+kQdQng0g7x8MV/mH93wAl8s2gSp/AE8GME/TNoEqf8wJrAPYJlDljzmBPE19AvLHnEA5/Tgof8AJ1LmTP+oEap+A/JEn0L8fQP7IE7j7JgDXJtwE5I8+gUX+2BOo8seeQJU/9gSq/LEn4KudAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOB/+gLr2Ey7l8vRhgAAAABJRU5ErkJggg"},{ name : "R_png_Wall_300_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQPUFcAZLSRAJGeVwAAhgDjqBQAAAD///8AAAAAAAAAAAAAAAAAAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNYOSeEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzerUAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAABA5JREFUeNrt3UFym0AURVGvzU3TLIP9ryKNJCNAYMmz1P/njFKpZOL7wFiy219fAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEMfsQpM4/T52PQ+L8Y2cCqfObQPr8JpA+vwmkz98HMFpA5vzTMFhA5vylFAvInX+wgBz5h+Vaf80/WECOq7+1cazrAlpb81tAjpv/VPufyll+Cwidf70DTLW24TT/jRcEgl796wTaNLX95/6N7+/Ba0Jhb/7T9s/n+Wv1smDgJ/+fCVznfwzABKI++d8ncJ2/br8+nH0EAz75967DZf7nAPp/aAYQI//2yX95zX8eLvM/PwGMpRpAkPyHJ/+hzlf5HwO4fX04GECY/PsXfct+ANv89Zl/MIBg+deXfXa3gF3+ZQA/+Q0gaP5lAesADvnrJn9nACHzP28Bx/x1l98Agua/3d3n9/kNIGz+2wLGd/kNIG7+5SlgHsff8xtA3PxledzfTOD+XsHRrH/Y/PfqjwnInzH/OoEmf9L896/7595f/qT5+6PfMgD5k+ZfPve/DkD+RPlLGQ8DkD9T/v73+wHInyv/YQDyZ8t/e0Wwyp82/2YA8mfMvw5A/pz5HwOQP2v++7uC8qfN3/+V/Jnzu/nLj/zIj/zIz3+b/3Cwm/zJrv7fDnaTP8HN//xgtyJ/9PxvDnYr8ge/+o8Hux2u/iJ//Jv/1cFu6wLkD/7k/3qwm6s/2ZP/y8Furv5sT/59AuMmrKs/fv7DwW7j/ge4XP3h8x8Pdht3twD54+c/HOy2vwXInyT/5mC35RYgf9L8u5/gkT+gTw52uy9A/pA+eb//9hQgf44BnL7hO8qfZABX7/fPc2vyhx/A9bd7tLaZgPwxB/D7d/usE5A/5gDef7PXfQLyhxzA+a9yOj769Qk0+QMO4LP8yy906AOQP9oAPs6/HOxWi/yx/CF/WY50KPLHUoc/HOy2H4D8MQbwh4PdtgOQP+YA3h3sVuSPPID3B7sV+eMO4JOD3Yr8UQfw2cFujnYKOgAHu6UegIPdUg/At3ukHoD8uQcgf/IByG8A8huA/OkHIH/qAcifegCnv8Bd/iwDkD/1AOTPTf70A5A/96cA+Q1AfgOQ3wDkzz0A+VMPQP7UA5A/9QDkTz0A+XOTHwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgqX8TRIdtGDkKvAAAAABJRU5ErkJggg"},{ name : "R_fonts_pixeled_6_fnt", data : "QkZOVAABBwBQaXhlbGVkDQAPAHBpeGVsZWQtNl8wLnBuZw0ACgA/AAAAIAAAAIUABwADAAEA//8MAAIAAAAAADIAAABUAAAABAAGAAAABAAFAAAAAABQAAAAuAAAAAQABgAAAAQABQAAAAAAWgAAAKkAAAAEAAYAAAAEAAUAAAAAAGwAAABaAAcAAQAFAAAABQACAAAAAABoAAAACgAHAAQABQAAAAUABQAAAAAAKAAAAM0AAAACAAYAAAAEAAMAAAAAADEAAADXAAAAAQAGAAAABAACAAAAAAA0AAAAXgAAAAQABgAAAAQABQAAAAAAQwAAADYAAAAEAAYAAAAEAAUAAAAAADcAAAB8AAAABAAGAAAABAAFAAAAAAB1AAAANwAHAAQABQAAAAUABQAAAAAAbgAAABkABwAEAAUAAAAFAAUAAAAAAGcAAAAFAAgABAAFAAAABQAFAAAAAABmAAAAAAAIAAQABQAAAAUABQAAAAAAOwAAAFwABwABAAQAAAAGAAIAAAAAAG8AAAAeAAcABAAFAAAABQAFAAAAAABSAAAAOwAAAAQABgAAAAQABQAAAAAAdAAAADIABwAEAAUAAAAFAAUAAAAAAFkAAAAeAAAABQAGAAAABAAGAAAAAAA4AAAAcgAAAAQABgAAAAQABQAAAAAAPQAAAGIABwADAAMAAAAFAAQAAAAAAE8AAACzAAAABAAGAAAABAAFAAAAAABXAAAAGAAAAAUABgAAAAQABgAAAAAAcQAAACgABwAEAAUAAAAFAAUAAAAAAHkAAABLAAcABAAFAAAABQAFAAAAAAA6AAAAZgAHAAEAAwAAAAYAAgAAAAAAVAAAACQAAAAFAAYAAAAEAAYAAAAAAGUAAAD5AAAABAAFAAAABQAFAAAAAAAiAAAAcQAHAAMAAgAAAAQABAAAAAAARQAAAIYAAAAEAAYAAAAEAAUAAAAAAEoAAACaAAAABAAGAAAABAAFAAAAAABwAAAAIwAHAAQABQAAAAUABQAAAAAASwAAAJ8AAAAEAAYAAAAEAAUAAAAAADAAAABPAAAABAAGAAAABAAFAAAAAABgAAAAdQAHAAIAAgABAAQABAAAAAAARwAAAEUAAAAEAAYAAAAEAAUAAAAAAC0AAACBAAcAAwABAAAABgAEAAAAAAA2AAAAaAAAAAQABgAAAAQABQAAAAAATgAAAK4AAAAEAAYAAAAEAAUAAAAAAHwAAADZAAAAAQAGAAAABAACAAAAAAB2AAAA5wAAAAUABQAAAAUABgAAAAAANQAAAGMAAAAEAAYAAAAEAAUAAAAAAFEAAAAqAAAABQAGAAAABAAGAAAAAABBAAAASgAAAAQABgAAAAQABQAAAAAATQAAADAAAAAFAAYAAAAEAAYAAAAAAC8AAAC9AAAAAwAGAAAABAAEAAAAAABJAAAA0wAAAAEABgAAAAQAAgAAAAAALAAAAHgABwABAAIAAAAJAAIAAAAAAEYAAACLAAAABAAGAAAABAAFAAAAAABbAAAAwQAAAAMABgAAAAQABAAAAAAAeAAAAPMAAAAFAAUAAAAFAAYAAAAAAGEAAAA8AAcABAAFAAAABQAFAAAAAABIAAAAlQAAAAQABgAAAAQABQAAAAAAYwAAAEYABwAEAAUAAAAFAAUAAAAAAHIAAAAUAAcABAAFAAAABQAFAAAAAAAhAAAA1QAAAAEABgAAAAQAAgAAAAAAXgAAAG0ABwADAAIAAAAEAAQAAAAAAG0AAADhAAAABQAFAAAABQAGAAAAAAAkAAAAAAAAAAUABwAAAAMABgAAAAAATAAAAKQAAAAEAAYAAAAEAAUAAAAAAF0AAADJAAAAAwAGAAAABAAEAAAAAAB3AAAA7QAAAAUABQAAAAUABgAAAAAAKQAAANAAAAACAAYAAQAEAAQAAAAAADkAAAB3AAAABAAGAAAABAAFAAAAAABEAAAAkAAAAAQABgAAAAQABQAAAAAAegAAAFAABwAEAAUAAAAFAAUAAAAAAFUAAABtAAAABAAGAAAABAAFAAAAAABfAAAAfAAHAAQAAQAAAAkABQAAAAAAXAAAAMUAAAADAAYAAAAEAAQAAAAAAGQAAABVAAcABAAFAAAABQAFAAAAAABzAAAALQAHAAQABQAAAAUABQAAAAAAYgAAAEEABwAEAAUAAAAFAAUAAAAAAGkAAAD+AAAAAQAFAAAABQACAAAAAAAuAAAAiQAHAAEAAQAAAAkAAgAAAAAAJwAAAHoABwABAAIAAAAEAAIAAAAAAD8AAAAGAAAABQAGAAAABAAGAAAAAABCAAAAQAAAAAQABgAAAAQABQAAAAAAUwAAAIEAAAAEAAYAAAAEAAUAAAAAAFgAAAASAAAABQAGAAAABAAGAAAAAAAjAAAA2wAAAAUABQAAAAUABgAAAAAAMwAAAFkAAAAEAAYAAAAEAAUAAAAAAGsAAAAPAAcABAAFAAAABQAFAAAAAAB+AAAAaAAHAAQAAgAAAAUABQAAAAAAKwAAAF4ABwADAAMAAAAFAAQAAAAAAFYAAAAMAAAABQAGAAAABAAGAAAAAAAAAAAA"},{ name : "R_fonts_open_sans_30_png", data : ""},{ name : "R_fonts_m5x7_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAIjElEQVR4Xu3cQY4cxxEFUB3B5/J5BHhpeKWj+JitKVBhhv5EZmW1bNKi3gMGk/F/ZDZ30wtBP/0EAPz1vF6vv3/8/Ovj55+//fycO5eP/LWapy77d3Z6nl3PsytTP2Vd73PntMt8Nfc75bSrc87Zpf5WP2efeVn1Pc8u+1We3a7P/NK7Ouf8pCu7nSddmvbuTLv5Xs+mvM+p96vdzL9+0he9u+tznrKcV9nl66d87nddya7fKat+lZdV3/NdN80ne1P25G6ZunxjtZNZqW7aqbefdLs8+7ud3vU8u5pXXdfz3JvOOWdXdjvb+eP8j4+fv7X5l/+UC/lgZnf9NE/Zbt5101yevNE96Z5+xpSl0zez61Z7J+e7+Vt0k2kns92bu67sdk67tLu3k7s5T9l/67NK5rt5103zlE1zZpWv5l3Xs8xz7nZdOv23nHane1OW/a4rV95l3uc69znzylLulN6t9jLPOzVnPu1MXZ1zzns9z6xkl++ddKtznzP/5HXwBeB6ZPdhmd310zxlu/k6d6u9lF2f+3vT3q7rc5f3LtNOZqnvrM7T3K3urc45f+9uMu1ktntz1a3OfV7lq7lkfs1d73b9Lq9zzr+/8XmvZyfnu/mu66adaV5labeTXc1T3p12qfe5+27X7fZW8/W7TH3Omaepv7u766+s63nfK7l/6d2Tc85Puu7qSuar+bRbnXfZJ6+DLwCXJx920q92ci/76Zxzdl12797rqrt+l+xW8ypL+WbpO9VlVvKNu3PO37qrufS8THlmfT7tVudddqn8rt9lu8++m6fs3ffqvNu5m3fdNE9ZzqusW/VXnl2fs0u73ZzLlH/5V3yR+WrOrmR+Oufv7DMr2V12+aq7VJc7uzm7ssovq/urc85PupXVneucb9S8ynfnPmf+KXt9hy8A0zxl15x2u9M5ZffuvS673Zs5r7K0ejPv5tyt7q3OOd913bSXv+vcVT6Z+pOsz6fd6tznzMsfzU8+ezWXK+96nnurOe/2POeud3d9zmV3p/rMyq4rfad/Tum7Xe9yL+eS+W5+0p1mq/n6XaY+9XtTnjKf5rTrV91p/uS8mkvmfS59f9rp+arP7JL3cm83Z3cF/9dfAFbzk67L7t17XXa7N3NeZV32uzm7brW3Ouf8pOt2e3dzN3Un2Wpe5afnaX6SleyefF7Ok3ffq/NuZ5p3cjfnybQzZZfTPOeyykvvczfn0+zpm3d2762ylG90d3tTN809mzq+gdef+AtA1/d2/Sq/66fdbrpT+Wrud8rUVda7u7lb7ZXdzjSXzPuc+p2+m/ey6/pe2eV/5F6ee7+bd1ladf3eXZ9zOd3fzatzztntTLtXlnllu7ycdNn3vMuu38ku++wuu3x1b9XlfJJN/eXrJ3wx9U+z6a3KKs+e7+z1xheAnKcu+3d2AID/kdfNFwB/mAHgB3T3BQAA+AH99gXgl9fX/xPgv3MHAAAAAAD4U6r/0K+bdqZzmronWZddn0vlvd9lJ3OeU3UA8MOY/sCdZpdV3tXOye4l9/Peal7luzMA/OVMfwinrOQf0dR3S+Z9/v3tZ/czBwAO7P6ATt2UXaZ8ygCA7+z6A52mnemcdhzQfgVvoaC7GGjfZgAAAABJRU5ErkJggg"},{ name : "R_fonts_cnc_inet_12_0_png", data : ""},{ name : "R_png_Wall_000_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQPUFcAZLSRAJGeVwAAhgDjqBQAAAD///8AAAAAAAAAAAAAAAAAAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNYOSeEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzerUAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAA3FJREFUeNrt3EFOwzAURVH25tj+y2D/q6A4blKQGKPqnTOiDJMr5zuW8vEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvLlRrkHy7R+jpgSCb/8jgDHn6/9mfboyObf/DOBK4PFbAFG3/xnASmD9FkCEz/odQN+/BRAewBCAABAAAkAACAABIAAEgAAQAAJAAAgAASAABIAAEAACQAAIgLcJ4GjtEEBuAHOO0Q8BxAZQvWo0AeSuANX7tAIEzwCzapoB7AIEIAABBAYwt+9ngQDyAriVFSB7Bdh/CiB1BtgFCCA1gL0GCCAugOssYBUggLQArrOAswABpAVwnwWsAgQQtwLcZwHj2gusbYHLkzED/DgLqJc3Ay5P1C5gvwq2AoQHYAYQgAAEIAABCEAACAABIAAEgAAQAAJAAAgAASAABIAAEAACQAAIAAEgAASAABAAAkAACAABIAAEgAAQAAJAAAgAASAABIAAEAACQAAIAAEgAASAABAAAkAACAABIAAEgAAQAAJAAAgAASAABIAAEAACQAAIAAEgAASAABAAAuDPALoAwleALoDwR0AXQPgM0AVgCBRAWABHa4chMDeAOcfohyEwNoDqVaMZAnNXgOp9HobA3BlgVk1DoF2AIdA20BAYGMDcHo8BQ2BgALddgABSV4CzAAHEzgC7AAGkBrDWAAEEBnCdBawCBJAWwHUWcBYggLQA7rOAVYAA4laA+yxgPwWe2wKXJ2MG+HEWUC9vBlyeqF3AeL4RtAJEB2AGEIAABCAAAQhAAAgAASAABIAAEAACQAAIAAEgAASAABAAAkAACIB3C6AEEB1AazsBAaQGsBMQQG4AKwEBJAfwncAcAggO4JHAWYAAUgNoZQXIDuAsQAC5ATQfiQoPoPlIVHgAzUeiwgNoPhIVHkC7DwcEkKC1vxIQQHgCAghPQADpCQggO4EpgOwEBBCegADCExBAeAICCE9AAOEJCCA8AQGEJyCAcAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4P98AeuS5lHCrR9EAAAAAElFTkSuQmCC"},{ name : "R_png_Corner_270_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQPUFcAZLSRAJGeVwAAhgDjqBQAAAD///8AAAAAAAAAAAAAAAAAAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNYOSeEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzerUAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAAwxJREFUeNrt3E1u4kAURtGszfXnZbD/VbQN6WAg2OVBS/2oc4ZRKQO+i0WMla8vAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+J9dLv/uNAHmn+f+Uc+dJsT8tfaOeu40QeZf9Yx67jRR5s8p5Y5Rz50mzLu/tVpLPnpfnztNgP3XKa9DlmXatH9p31z8H097HeMGUNMtgTaX0nKt7xO4z789Pc85CyDu/iVN0y2BNs+t3j0nsJ3/fnqZf/kwUBQQOIClgO8EnmwTeJr/58Qyf8pJAJH3T8cJ/D5/a9f5c3YJiB7AfgIH868FCCD4/rsJHM3vEvARAbxP4Gj+lQDi79+dwOv8Coi5/yVN6XQCv86/fgpQQLT5WytlOpnAm/lTKbVKINz8qzMJvJ9/JYGA859JYH9+CQTafzt/bwLfd/125r8m0BQQIYBay7kE+uYvrQkgRAApnUqgc/71MREBhPn7vzuBE/Mvv1UAcW4A9SUwldw7//JzAQQKoDOBknvnF0C0AHoSeAng/fy+F4wXwHECTwHszS+AiAEcJfAQwP78AogZwH4CmwCO5hdA1AD2EvgJ4Hh+AQQJ4JJSfwLfAfTMv5zyZcDHJXANoG/+bP4PTOB6I8j8AydQzD92AuaXgPklYH4JmH/oBMw/dALXJ0LNP2oC5h86AfOPnYD5x05gatn8Iyfw+kyg+YdK4DkA8w+WwGMA5h8ugW0A5h8wgXsA5h8ygb8BmH/QBG4BmH/YBNYAzD9wApP//zR6Al4DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAx/QHjdINE4y/iugAAAABJRU5ErkJggg"},{ name : "R_fx_0_png", data : "iVBORw0KGgoAAAANSUhEUgAAAAMAAAAFCAMAAAC3r6aQAAAABlBMVEVMaXHCo6PCgv5LAAAAAXRSTlMAQObYZgAAAAlwSFlzAAAOxAAADsQBlSsOGwAAABJJREFUCNdjYGRkZGAAYkYEBgAAmwAPpnXf/gAAAABJRU5ErkJggg"},{ name : "R_png_WallBase_03_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQyNkAAZLSRAJGeVwAAhgDjqBQAAAD///9AM0cyNkApQjJFNi4AAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNKNCaEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdHyE7P0NZX2V3f4eVn6m4v8Xb3+L///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzpmnIAAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAADcdJREFUeNrtnY2yoygQRvdRE6HV93+CFRFFBfXeSUxu9zm1VTNTOz8J30kDLdH//gMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACrPB6Mgen42xYFTMcvggKm4w+ggOH4vUcB0/EHUMBq8W8nmAhMfvql9c2Ib4UqYO7TP+bfdW3bdbMBKGAn/mHmb5uuaUSa4YdWpqUACliJ37m1AM6hgKn4YwWIfYBYAVDAVPx7AVDAVPyjAKkTOAmAAobiLwuAAmbirwmAAkbirwuAAibiPxIABQzEfywACqiP/0wAFFAef6kPgAKG4r8iAAoojr9wMQgFLMV/VQAUUBq/354H8ChgKv7JgPlE0DEooC/+0YB0JvD896KAuvhTpj/87SigK/7wp1DAbPwyLAFbQQG78fePR48CluMPfx4FDMcf/w4UMBw/CpiPHwVUxd80P4//qgL5350p0KHAV8Xf/CL+Swo0FQW6RlDgiz797lfxX1DAlatAuKrERPBFxV/c7+I/U8BJcSKQtvEda4HPL/1SLLIR4AfxHyvg0i1FVpPMoEXDLSZujL+rrfybFL/7h/gPFXBJgVwAkSf3F7gvfokH+YqTtJNXxH+uwKrCDL9+xpqDAncU/3R8p7hGe1H8pwq4TQEYfht9gZvm/i5MuLWN+sviP1FgVwBoDd239BuW3OMn8Kxf94/xX20N5QUABW5Y+Q+b7vET5+KufL7X3+vjv6TAVACmV4MCN2z80kcuzMQiUjTgRfFfUGB4NTK+mtR9QoF37/vTpBsWY8NPnyJvjP9MAYk6rhafKPDmts9UAmL83g+/eGf8xwpML2JTh1DgrV2/WALmkR9+8d74DxUQFLg5/lQC0qjHX7w3fhT4pvijASl+7+d9+Dvjv6oAR0ZuiD9+mUPS0mtsxb8//gMFxuVonJc4NXRD/GlQp923jBfjboi/pkB6Fc/9FIACb4nf+6UnEG/56nu5I/6yAlNH4ukzAdwICrwn/v2BHNfLPfEXFXD7AhD+h6M19Ob45xm4H/67K/5yFdgVgNVFIxR4Z/zD0Pbi+r6/c2g3CqQLFBUBUOCd8Ydv+A4l4O5hXSkwXqLcLgHL16ZR4PXx31j8ywpI73c3m02LQBR4c/zyofhzBYZFiC/ebJZvE2mOf1EgrEGEL5R9oPh3ff/pYRwU6MddyMGHntaQ2vjj65exD1F4+dlSgNbQq4u/fEf8qQpI7fjoLACtIUVz/3lraFP0aQ1pjr+mQF0AFFAWf0WByhSAAgrjLypQXASigNL4KwrQGrITf305SGvISPwXFLDeGtIe/4kC1ltDFuI/VMB2a8hK/LSGzMdPa6ge/4Wnc2iI/zetoeXEuz4FHj49pbO9pICC+H/TGorjM46T12XAo51u7/B8XlBASfw/bQ2F+IfxiXccaxUKMOT/kO5UAUXx/6Q1FOPv5BENUChAOD796KQ7VkBZ/FcVmOIfhicI4HUKMObfNEcKKIz/igJz/GF0YgnQLIDUFFAa/5kCc/yiW4BhBTg9rrusgOL4jxTI4p+G5tmKfgEmBUSMxF9VIAxLHr9iAUL+4wSQKdDec3eP71VgHJY8/jAJhGExIMD0Vu3EX1KgNipap4CC65bi3ytQq4sqBSjPdt5U/BsFfGVlpFSA0nrXXPwbBYp7I7WdwM2OdywA9uJfKZCtjeb4tXYCx7tp5T2vqdjZiz9XIAmwxO8UC5BXgSl/m/EnBZIB2adfuQCLAhJXu73R+Mdh6ePuSLL49QswKxALIAKkUxKy3HpSuQCTAnEJZF6AdA4of0CpegGmw28IMO2D1lfFTAgQn/CJAPHxN9tHFJsQIG4LEaAwLAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAACoEcAhQEsAZEcC5+R4JCLAIkA+LZgGy+2MgwCLAelgUC+DymQ4BkgCbYUEABEAABEAABEAABEAABEAABNAhQN7soA9Q6QOkp+IpFMDRCawKsPlwqBRgVeYQYCvAah5QKgAXgy4J4BAAARAAARAAARAAAdgFsAtQ2AdAgJIA2vsAq2YHAhQE0N4JXDe9EaB4KthxLNy2AHwvAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAG+SwDJQIAFKwIs4bdt39sWoO+HQdgYoF0AEfdMOOeelgUYB2AejMkA/QI8PRVgXwH8044ArAFKawBTArAL2O4CEAABEAABEAABEAABFArQSXG5iwBrARY6bQJ03dzx8ghQFsDPHdJhuJQJkHe8spYXAmQC5CPknOIKkDW9EWC5Gpg1xxRWgNUaQLgcXBBgdZFU3RqA8wDnAnAgBAEQwKYALgcBDAqwGhQEMChA9sQwBKACIAACIAACIAACIAACIAACIAACIAACIACNIASgAiCASgG4GGRbAC4HIwACIAACIAACIAACIAACIAACIAACIIBGAVx8u+MPCGBPgLHXmX5AAARAAKYABGARiAAIgAAIgACsARCAXQACIAACMAUgAItABEAABEAAGwJM58HT0ggBzAmQvhHiEcC0AA4BEAABEAABWAMgABUAAagACGBGAEcFoAJQAcxXAASgAiAAFQABEAABEAABWAMggBkBOA9gWwBOBCEAAiAAAiAAAiAAAiAAAiCAAQFEECAKEMbGnAASQIB2HARZKWBBgOEdty0CJAHCWIghAcb4n8/wrhEgjMEwFpkC2gWY4u9kNAABhvylyxXQLUCKvxve9Kh/1z+MKvB49F0sAMNgZApoFmCJv2mSAa1NBUL8bco/jMasgF4BlvhlFsDbVCDF72cBJK8CKgXI448EA6ZZwZYCc/zDmw/5zwOSFFAqwDp+mUqAOQWy+KcCIGsFtArQruOfJoF4vyg7CmTxD+98mQAyBVqdAmzfahLAW1JgHb/3tVGxIMDk+nLXOP0KbOOfpoBCXdQ6Bexnu7n/qV+BffyTAYWVkXoB0no3vwaiW4Fi/NGA/d5IZx9geFObHe/2QrheBWrxbxQIE8AwVl63AJX4FStwFP9KAd0CRAMO4leqwFn8KwXG/JV2AoMAchy/QgWuxJ8pILEA6OwE+nTlu5B4/lNFClyNf1Eg5q9OAB873FKKf3qGQP5TJQr8JP6kwDROXt0qOL21UsXPHiKQBkqBAj+Nfz4qOWigcCM8K1At+tlPFSiwi/9EgvR2lcZfVaAuwJ9WYP/pnyc6q/HXFKhMAX9agVLxPxLASPxlBYqLwD+tQKX4V/M3FH9NgdKO8K8qQPH/7XJQRWvooPgX36rB+K8o8FdbQ0fFv1QHjMZ/psBfbQ0dF/99HTAc/7ECf7M1dFr8N3XAePzaWkOVrt+u+G8LmuH4NbWGjpu+pTpA/P/aGpL+axQY4u8PNzUU/7e0hnon3zB8j4e4/sKeluL/2taQ9MO4f74KhE//YGIvR/FT/N/QGpJx2D+8Fohzf1BRDl42xf+1raF43bz1Y+H9pALzF7x751uh+N/TGpoFaHwvn9wRLCt/6X3Tnp5yJP7XtIbSwZkw5h/cFK42fsHGw3OuxP+y1tAswHOsuh9SYLPvH+aj56WDzsT/z62huQA8P/e10tJXPJ8HJYD4X9kaygf8I5eJSlf8MiGJ/82toawAuHCz2ZsVKFzxi7e8rZQA4n99a2gpAMutJ29SoHjFL979rFgCiP8tm0KJAojsrru9V4HqFb/xdT6l+I0n4n+9AuNwRwVuPDhWveIny+sh/nsUkPsVuBK/EL9WBYj/qxV49wni+nEP4v9kd7Cy9Hq1Asc3d9kvR4n/ntaQH3ffUuy/vFCBk2/4ji8gdCQ8F3xv7gvE3XetA/siBU6/4J1aUlNHgvjvU+CkAfsKBa7d22dpShP/zVVgVwBe+s3iavzb69KThMR/twK7AuBEXqbAQfzpCsS+BBD/rQrsC0C4vdJLFDiM38u+BBD//QrsTmE06XGU/6rAcfzLP7U6m0L8tysQzmG5nQDxiaT/oEB96bc84bNZ152mJf77FejGk5h5Rs2Ui7jf7wiOVv5O1v9OOg0ymNgR/+0KdI1vtznFaH5/l5GTjZ8rxD+eCGw64r9dAWm6wjWCEE/zy77A6b6/KcUfbn7eCPF/QIGueJmoaX7XGrrS9inGP/yFxP8lraHf32vop3f1ZN+vSgHiN60A8ZtWgPiNK0D8thUgftsKTA+wIH67ChC/WQWGJCNC/BYVCD38EX9qAPErVGC8htO1wzLwzADiV6mAtE0XnmPbDD8c3+KJ+FUqcE0A4lerQBBgelx3VQDiV6zAuQDEr1qBQYD0lM6iAMSvXIFjAYhfvQJHAhC/AQXqAhC/CQVqAhC/EQXKAhC/GQVKAhC/IQX2fQDiN6XAVgDiN6bA+loA8ZtTYHcxiPhtKbA5D0D81hRYnwgifotVYD4TSPxWq8B811niN6sA8VufCIjftgLEb1wB4jeuAGMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYJP/Ae7J/EdcXmjRAAAAAElFTkSuQmCC"},{ name : "R_png_Corner_330_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQPUFcAZLSRAJGeVwAAhgDjqBQAAAD///8AAAAAAAAAAAAAAAAAAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNYOSeEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzerUAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAAvRJREFUeNrt3Ul22zAURUGvjWiXkf2vIqQIsZPOSabGrxp66HcJixrAPz8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/jz8HvIuT+vQ1dATEDqENXQPAAnAFRA8gp5TWAqoCYAbRWa8lrAAqIGUAvvde0nQAKiHkC9FLadgI0BcT8DNB6b6/PAPvboC8Ggr4F1PF9gC8GYgdQjh8IQAAIAAEgAASAABAAAkAACAABIAAEgAAQAAJAAAgAASAAfsn+Agg+/7G/AGLPL4Dg8wsg+PwCCD7/dkFEFUDc+dcDYBQggIjzt5Zz7U6AuPOn7ZqYLoDA8+dRgAAmn3+/Eupj/vwuQABzP/3jSqjP+d8FCGDO/d+H/7gS6jF/OgsQwJwB1GWcAPuVUM+n/zgFLi+GApgrgGVPYL8S6vn0jwCWJQtg3gBGAq+Lgb89/ctSihNg6gD2BM75709/KQKYPoAtgefTn475r/sLYNIAlnq++B0f/1MptwDWg6IJYNYAzr/6ewHH/OWcPxUBzBrA7Qi4zj8CeL0gZAFMHMDlCLjOX875swAmDmA9Ar7NvwXwnl8Acwfwdf5ymX8lgHkDeBXwnL/c5hfA5AH8a34BTB3A8py/PucXwNwBLK3dPvx9zC+AyQO4JPB1/uxfxszlM4CRgPmjWL4mYP7YCTTzx06gJfOHTqAk84dO4B6A+cMlcA3A/AETOAMwf8gE3gGYP2gCewDmD5vAFoD5AydQkvlDMz8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/3F/ymbW2L5S5YQAAAABJRU5ErkJggg"},{ name : "R_fonts_exo2_black_30_fnt", data : "QkZOVAABCwBFeG8gMiBCbGFjax4AEQBleG8yX2JsYWNrXzMwLnBuZyQAHgA/AAAAIAAAAAAAAAAAAAAA/f8AAAYAWQAAAP//VAAAAP//TAAAAP//RgAAAP//UAAAAP//dgAAAP//bAAAAP//eQAAAP//cgAAAP//QQAAAP//VgAAAP//dwAAAP//ZgAAAP//AAAAADIAAACPAEAAGAAbAP3/BgASAAAAAABQAAAAcAEkABgAGwD+/wYAEwAAAAAAWgAAAHcAQAAYABsA/f8GABIAAAAAAGwAAACUAQAAEAAcAP7/BQALAFwAAAD//wAAAABoAAAAWAEAABcAHAD+/wUAEwAAAAAAKAAAAGcAAAARACMA/f8DAAsAWwAAAP//KAAAAP//AAAAADEAAADrASQAEgAbAP3/BgAOAEwAAAD+/y0AAAD//y4AAAD//0EAAAD//ywAAAD//wAAAAA0AAAAvgBAABoAGwD9/wYAFABUAAAA//8iAAAA//9ZAAAA//8nAAAA//8AAAAAQwAAAEgAJAAYABsA/f8GABIAewAAAP//WAAAAP//WwAAAP//XAAAAP//SwAAAP//LwAAAP//WQAAAP//KAAAAP//AAAAADcAAAAGAUAAFwAbAP3/BgAQAEEAAAD//y4AAAD//y0AAAD//0wAAAD//1kAAAABACwAAAD//wAAAAB1AAAAyQBbABcAFgD+/wsAEgBWAAAA//9bAAAA//9cAAAA//8vAAAA//9ZAAAA/v8oAAAA//97AAAA//9UAAAA/v8AAAAAbgAAAHEAWwAXABYA/v8LABMAVAAAAP7/WwAAAP//WQAAAP7/KAAAAP//ewAAAP//LwAAAP//VgAAAP//AAAAAD4AAABfAVsAFAAWAP7/CgAPAAAAAABnAAAAPwEAABkAHAD9/wsAEgBWAAAA//8vAAAA//9UAAAA/f9ZAAAA/v8AAAAAPAAAAEsBWwAUABYA/f8KAA8AAAAAAGYAAADiAAAAFAAdAP3/BAANAEsAAAD//1kAAAD//0wAAAD//1gAAAD//ygAAAD//1QAAAD//1wAAAD//wAAAABqAAAAWAAAAA8AIwD8/wQACQAoAAAAAQBbAAAAAQAAAAAAOwAAAAAAWwANABoA/v8NAAgAWQAAAP//VAAAAP//AAAAAG8AAACIAFsAGAAWAP3/CwASAFsAAAD//1YAAAD//1wAAAD//yIAAAD//3sAAAD//1QAAAD9/1gAAAD//1kAAAD+/y8AAAD+/ygAAAD//ycAAAD//2sAAAD//0sAAAD//wAAAABSAAAAiAEkABkAGwD+/wYAFAAAAAAAdAAAAOIBQAATABoA/f8HAA0ATAAAAP//KAAAAP//bAAAAP//WQAAAP//XAAAAP//SwAAAP//VAAAAP//WAAAAP//IAAAAP//WwAAAP//AAAAAFkAAABcAEAAGwAbAPz/BgAUAEEAAAD+/y4AAAD+/2wAAAD//zoAAAD//y0AAAD//0AAAAD//2EAAAD+/2YAAAACAFwAAAD+/3cAAAD//3EAAAD+/3AAAAD+/20AAAD+/3kAAAD//3MAAAD+/ywAAAD+/3UAAAD+/2cAAAD//3IAAAD//3QAAAD//08AAAD//zsAAAD//yYAAAD//1EAAAD//0QAAAD//yAAAAD//28AAAD+/2UAAAD+/0IAAAD//0wAAAD9/3YAAAD//2gAAAD+/3gAAAD//zQAAAD//2IAAAD+/2sAAAD//3oAAAD//2MAAAD+/24AAAD+/1IAAAD//wAAAAAmAAAAxgFAABwAGwD+/wYAFwAAAAAAOAAAAB0BQAAYABsA/v8GABMAAAAAAD0AAAChAVsAFQASAP7/CwARAAAAAABPAAAAVQEkABsAGwD9/wYAFQBZAAAA//8vAAAA//8oAAAA//97AAAA//9YAAAA//9bAAAA//9cAAAA//9LAAAA//8AAAAAVwAAABwAQAAkABsA/f8GAB4AXAAAAP//TAAAAP//QQAAAP//bAAAAP//ZgAAAAEAAAAAAHEAAAC7AQAAGAAcAP3/CwATAEYAAAD//1sAAAD//0sAAAD//1YAAAD//1wAAAD//2sAAAD//ygAAAD//1kAAAD+/y8AAAD+/ycAAAD//3sAAAD//yIAAAD//1QAAAD9/wAAAAB5AAAA9gAAABoAHQD8/wsAEgBYAAAA//8sAAAA//9cAAAA//9LAAAA//8gAAAA//8oAAAA//8uAAAA//9BAAAA//9sAAAA//9UAAAA//9MAAAA//9ZAAAA//8AAAAAOgAAAIgBWwAMABQA/v8NAAgAVAAAAP//WQAAAP//AAAAAFQAAAC5ASQAGQAbAP3/BgATADQAAAD//2IAAAD9/2sAAAD//3EAAAD//y4AAAD+/2YAAAABAC0AAAD+/0EAAAD+/2wAAAD//1wAAAD+/3cAAAD//zsAAAD//yAAAAD//2cAAAD//zoAAAD//3YAAAD//0wAAAD9/3oAAAD+/3gAAAD//3UAAAD//yYAAAD//ywAAAD+/3QAAAD//2gAAAD+/28AAAD9/2EAAAD+/3MAAAD+/20AAAD+/3kAAAD//3AAAAD+/2MAAAD+/2UAAAD9/24AAAD+/wAAAABlAAAAOgBbABgAFgD9/wsAEgBbAAAA//8vAAAA/v9WAAAA//9YAAAA//9UAAAA/f9LAAAA//9cAAAA//9ZAAAA/v8nAAAA//9rAAAA//8iAAAA//97AAAA//8oAAAA//8AAAAAIgAAAO4BWwAQAA0A/v8GAAwATAAAAP3/XAAAAP7/QQAAAP//LgAAAP3/ZgAAAAEALQAAAP7/bwAAAP//LAAAAP3/AAAAAEUAAAB6ACQAFwAbAP7/BgASACgAAAD//1wAAAD//wAAAABKAAAA2QAkABEAGwD9/wYADABGAAAA//8nAAAA//9mAAAA//8qAAAA//8tAAAA//9UAAAA//9XAAAA//8gAAAA//9ZAAAA/v9QAAAA//92AAAA//8oAAAA//95AAAA//8vAAAA//8iAAAA//93AAAA//9WAAAA//9yAAAA/v8AAAAAcAAAAKQBAAAXABwA/v8LABMAewAAAP//WwAAAP//VgAAAP//VAAAAP7/LwAAAP//WQAAAP7/KAAAAP//AAAAAEsAAADqACQAGgAbAP7/BgAUAAAAAAB7AAAAiQAAABEAIwD9/wQACwAAAAAAMAAAAE0BQAAYABsA/v8GABQAAAAAAGAAAADJAVsAEAAPAP7/AwAMAAAAAABHAAAApwAkABkAGwD9/wYAFABYAAAA//97AAAA//9bAAAA//9cAAAA//9ZAAAA//9LAAAA//8vAAAA//8oAAAA//8AAAAALQAAACoAdQAQAAoA/v8RAAsAJwAAAP7/VAAAAP7/VgAAAP//SwAAAP//ZgAAAP//NwAAAP//IgAAAP7/awAAAP//WQAAAP//AAAAADYAAADvAEAAFwAbAP7/BgASAAAAAABOAAAAOwEkABoAGwD+/wYAFgAAAAAAfAAAAEwAAAAMACQA/v8DAAgAAAAAAHYAAADgAFsAGgAWAPz/CwASAHsAAAD//yAAAAD//0wAAAD//1kAAAD//ygAAAD//0EAAAD//y4AAAD//2wAAAD//1gAAAD//1wAAAD+/0sAAAD//1sAAAD//1QAAAD//ywAAAD//wAAAAA1AAAA2ABAABcAGwD9/wYAEQAAAAAAUQAAAAAAAAAbACQA/f8GABUAKAAAAP//XAAAAP//WQAAAP//LwAAAP//WAAAAP//SwAAAP//WwAAAP//ewAAAP//AAAAAEEAAAAUACQAHAAbAPz/BgAUACkAAAD//1YAAAD//yoAAAD//zcAAAD//2YAAAD//0YAAAD//yEAAAD//ycAAAD//30AAAD//y8AAAD+/3YAAAD//1AAAAD//1kAAAD+/yAAAAD//yMAAAD//10AAAD//1cAAAD//z8AAAD//yIAAAD//18AAAD//1QAAAD+/3IAAAD//3kAAAD//wAAAABNAAAAGgEkACEAGwD+/wYAHQAAAAAALwAAALIAAAAYAB4A/f8GABIAVQAAAP//YgAAAP//RgAAAP7/bwAAAP//UAAAAP7/IgAAAP7/JwAAAP7/ZgAAAP//TwAAAP//cgAAAP7/VgAAAP7/cAAAAP//UQAAAP//VAAAAP7/dwAAAP//VwAAAP//SgAAAP//eQAAAP//QgAAAP//UwAAAP//RAAAAP//WQAAAP7/dgAAAP7/LwAAAP3/AAAAAEkAAADvAQAADgAbAP7/BgAKAAAAAAAsAAAAlAFbAA0AEgD9/xUACABmAAAA//9WAAAA//95AAAA//9GAAAA/v8nAAAA/f83AAAA//92AAAA//9QAAAA/v9ZAAAA/v9yAAAA/v9UAAAA/v8iAAAA/f8AAAAARgAAAJEAJAAWABsA/v8GABEAKAAAAP//AAAAAFsAAAAbAAAAEAAkAP7/AwALAAAAAAB4AAAAGwFbABoAFgD8/wsAEgBUAAAA//8vAAAA//9ZAAAA//8AAAAAYQAAAA0AWwAXABYA/f8LABIAVgAAAP//ewAAAP//KAAAAP//WQAAAP7/RgAAAP//LwAAAP//VAAAAP7/WwAAAP//AAAAAEgAAADAACQAGQAbAP7/BgAVAAAAAABjAAAAJABbABYAFgD9/wsAEAB7AAAA//8iAAAA//8nAAAA//9WAAAA//9cAAAA//9bAAAA//9UAAAA/f9LAAAA//8vAAAA/v8oAAAA//9YAAAA//9ZAAAA/v9rAAAA//8AAAAAcgAAAKAAWwATABYA/v8LAA4ALwAAAP//WQAAAP7/KAAAAP//ewAAAP//WwAAAP//VAAAAP7/VgAAAP//AAAAACEAAABlAUAADgAbAP7/BgAKAAAAAAAlAAAAiQFAACEAGwD9/wYAHAAAAAAAQAAAANMBAAAcABwA/v8HABgAWQAAAP//AAAAAF4AAADZAVsAFQAPAP3/BwAPAAAAAABtAAAAUgBbAB8AFgD+/wsAGwBUAAAA/v9WAAAA//8oAAAA//97AAAA//9ZAAAA/v8vAAAA//9bAAAA//8AAAAAJAAAAJoAAAAYACIA/f8CABIAKAAAAP//AAAAAEwAAAAEASQAFgAbAP7/BgARAFwAAAD//wAAAABdAAAAKwAAABAAJAD9/wMACwBzAAAA//9vAAAA//9hAAAA//8pAAAA//9tAAAA//9wAAAA//93AAAA//9PAAAA//96AAAA//9jAAAA//9uAAAA//9RAAAA//91AAAA//95AAAA//9yAAAA//9EAAAA//9MAAAA//92AAAA//9xAAAA//9iAAAA//9mAAAAAQBoAAAA//9lAAAA//8AAAAAdwAAAPoAWwAhABYA/f8LABoATAAAAP//WAAAAP//LwAAAP//bAAAAP//IAAAAP//SwAAAP//VAAAAP//XAAAAP//ewAAAP//WQAAAP//KAAAAP//WwAAAP//AAAAACkAAAB4AAAAEQAjAP3/AwALAG8AAAD//0QAAAD//3IAAAD//2gAAAD//3QAAAD//2UAAAD//3MAAAD//3AAAAD//20AAAD//3kAAAD//2MAAAD//08AAAD//3cAAAD//1EAAAD//ykAAAD//3UAAAD//3EAAAD//24AAAD//2YAAAACAHoAAAD//2EAAAD//2IAAAD//1AAAAD//3YAAAD//0IAAAD//0wAAAD//wAAAAA5AAAANQFAABgAGwD9/wYAEgAAAAAARAAAAGAAJAAaABsA/v8GABUAAAAAAHoAAAA1AVsAFgAWAP3/CwAQAC8AAAD//1kAAAD//ygAAAD//1QAAAD+/1sAAAD//wAAAABVAAAA0gEkABkAGwD+/wYAFQBcAAAA//8AAAAAXwAAADoAdQAUAAoA/f8bAA4AAAAAAFwAAADKAAAAGAAeAP3/BgASAGUAAAD//3AAAAD+/2EAAAD+/0EAAAD+/2MAAAD//3MAAAD//20AAAD//3cAAAD//24AAAD//3EAAAD//2sAAAD//2IAAAD+/2YAAAABAGwAAAD//2gAAAD//3gAAAD//3oAAAD//0QAAAD//0wAAAD9/28AAAD+/3UAAAD//3QAAAD//wAAAABkAAAAJwEAABgAHAD9/wUAEwBbAAAA//9UAAAA/v97AAAA//8oAAAA//9ZAAAA/v9rAAAA//9LAAAA//9cAAAA//8vAAAA/v9WAAAA//8AAAAAcwAAALMAWwAWABYA/f8LABEAWQAAAP7/KAAAAP//VgAAAP//VAAAAP3/ewAAAP//WwAAAP//LwAAAP//AAAAAAoAAAAAAAAAAAAAAP3/AAAAAAAAAAAqAAAAtgFbABMAEgD9/wYADgBBAAAA//9MAAAA/f9yAAAAAQAAAAAAYgAAABABAAAXABwA/v8FABMAAAAAAGkAAABvAQAADQAcAP7/BQAJAAAAAAAuAAAACwB1AAwADAD+/xUACABUAAAA/v9yAAAA/v95AAAA//9ZAAAA/v9WAAAA//83AAAA//9mAAAA//9GAAAA/v8nAAAA/f8iAAAA/f9QAAAA/v92AAAA//8AAAAAJwAAAAAAdQALAA0A/v8GAAYAZgAAAAEALAAAAP3/bwAAAP//TAAAAP3/LQAAAP7/LgAAAP3/QQAAAP//XAAAAP7/AAAAAD8AAABzAUAAFgAbAP3/BgAQAGUAAAD//2IAAAD//0wAAAD//28AAAD//2YAAAABAGwAAAD//0EAAAD//24AAAD//2gAAAD//20AAAD//3AAAAD//2EAAAD//wAAAABCAAAAMAAkABgAGwD+/wYAFAAAAAAAUwAAAKEBJAAYABsA/f8GABIAKAAAAP//AAAAAFgAAABAAEAAHAAbAPz/BgAUAG8AAAD//3YAAAD//1AAAAD//0QAAAD//1EAAAD//08AAAD//3cAAAD//3kAAAD//3IAAAD//2IAAAD//2YAAAABAAAAAAAjAAAAqgFAABwAGwD9/wYAFgAAAAAAMwAAAKcAQAAXABsA/f8GABEAAAAAAGsAAAB8AQAAGAAcAP7/BQASAAAAAAB+AAAAFwB1ABMACwD+/xAADwAAAAAAKwAAAHMBWwAVABUA/f8KABAAAAAAAFYAAAAAAEAAHAAbAPz/BgAUAGEAAAD//1wAAAD+/3EAAAD//3AAAAD//20AAAD//2UAAAD//3MAAAD//2IAAAD//0EAAAD//y4AAAD//2wAAAD//2YAAAACAG4AAAD//y0AAAD//yAAAAD//28AAAD//2gAAAD//0wAAAD+/3UAAAD//yYAAAD//ywAAAD//wAAAAB9AAAAOwAAABEAJAD9/wMACwBjAAAA//91AAAA//9vAAAA//9RAAAA//9EAAAA//92AAAA//9xAAAA//9oAAAA//9iAAAA//9uAAAA//9mAAAAAQBPAAAA//93AAAA//9zAAAA//9hAAAA//9wAAAA//9tAAAA//9yAAAA//9lAAAA//8AAAAAAAAAAA"},{ name : "R_fonts_pixellari_fnt", data : "QkZOVAABCQBQaXhlbGxhcmkQAA0AcGl4ZWxsYXJpLnBuZxIADAA/AAAAIAAAAAAAAAAAAAAA//8AAAUAAAAAADIAAADIAQAACAANAAAAAAAIAAAAAABQAAAA8wAAAAkADQAAAAAACQAAAAAAWgAAAFkBAAAMAA0A//8AAAsAAAAAAGwAAACcAQAABAANAAAAAAAEAAAAAABoAAAAhgEAAAkADQAAAAAACQAAAAAAKAAAABkAAAAFAA4AAAAAAAUAAAAAADEAAADAAQAACAANAAEAAAAJAAAAAAA0AAAA2AEAAAkADQAAAAAACQAAAAAAQwAAAHsAAAAJAA0AAQAAAAoAAAAAADcAAADxAQAACQANAAAAAAAJAAAAAAB1AAAAfwAQAAgACgAAAAMACAAAAAAAbgAAAF8AEAAIAAoAAAADAAgAAAAAAD4AAAC7ABAADAAKAP//AgALAAAAAABnAAAAfQEAAAkADQAAAAMACQAAAAAAPAAAAK8AEAAMAAoA//8CAAsAAAAAAGYAAAB3AQAABgANAAAAAAAGAAAAAABqAAAAAAAAAAcAEAD+/wAABAAAAAAAOwAAADcAEAAEAAwAAAADAAQAAAAAAG8AAABnABAACAAKAAAAAwAIAAAAAABSAAAABwEAAAoADQAAAAAACgAAAAAAdAAAALIBAAAGAA0A//8AAAUAAAAAAFkAAABPAQAACgANAAAAAAAKAAAAAAAmAAAAXQAAAAoADgAAAP//CgAAAAAAOAAAAAAAEAAIAA0AAAAAAAgAAAAAAD0AAADPABAACAAIAAAAAwAIAAAAAABPAAAA6QAAAAoADQABAAAACwAAAAAAVwAAADkBAAAMAA0AAAAAAAwAAAAAAHEAAACpAQAACQANAAAAAwAJAAAAAAB5AAAAuAEAAAgADQAAAAMACAAAAAAAOgAAAKsAEAAEAAoAAAADAAQAAAAAAFQAAAAbAQAACgANAAAAAAAKAAAAAABlAAAASwAQAAgACgAAAAMACAAAAAAAIgAAAOgAEAAHAAYAAAAAAAcAAAAAAEUAAACOAAAACAANAAEAAAAJAAAAAABKAAAAtwAAAAkADQD//wAACAAAAAAAcAAAAKABAAAJAA0AAAADAAkAAAAAAEsAAADAAAAACgANAAAAAAAKAAAAAAB7AAAALQAAAAcADgD//wAABgAAAAAAMAAAABAAEAAJAA0AAAAAAAkAAAAAAGAAAAD3ABAABQAFAAAAAAAFAAAAAABHAAAAngAAAAkADQABAAAACgAAAAAALQAAAAoBEAAIAAQAAAAFAAgAAAAAADYAAADpAQAACAANAAAAAAAIAAAAAABOAAAA3gAAAAsADQAAAAAACwAAAAAAfAAAABUAAAAEAA8AAAAAAAQAAAAAAHYAAACHABAACAAKAAAAAwAIAAAAAAA1AAAA4QEAAAgADQAAAAAACAAAAAAAUQAAAPwAAAALAA0AAQAAAAwAAAAAAEEAAABnAAAACgANAAAAAAAKAAAAAABNAAAA0gAAAAwADQAAAAAADAAAAAAALwAAADsAAAAIAA4A/////wcAAAAAAEkAAACxAAAABgANAAAAAAAGAAAAAAAsAAAA8wAQAAQABgAAAAkABAAAAAAARgAAAJYAAAAIAA0AAQAAAAkAAAAAAFsAAAAjAAAABQAOAAAAAAAFAAAAAAB4AAAAmwAQAAgACgAAAAMACAAAAAAAYQAAADsAEAAIAAoAAAADAAgAAAAAAEgAAACnAAAACgANAAAAAAAKAAAAAABjAAAAQwAQAAgACgAAAAMACAAAAAAAcgAAAG8AEAAIAAoAAAADAAgAAAAAACEAAAD6AQAABAANAAAAAAAEAAAAAAAlAAAAIQAQAA8ADQD//wAADgAAAAAAQAAAAAcAAAAOABAAAAAAAA4AAAAAAF4AAADfABAACQAHAP//AQAIAAAAAABtAAAAUwAQAAwACgAAAAMADAAAAAAAJAAAAEsAAAAIAA4AAQAAAAkAAAAAAEwAAADKAAAACAANAAAAAAAIAAAAAABdAAAAKAAAAAUADgABAAAABgAAAAAAdwAAAI8AEAAMAAoAAAADAAwAAAAAACkAAAAeAAAABQAOAAEAAAAGAAAAAAA5AAAACAAQAAgADQAAAAAACAAAAAAARAAAAIQAAAAKAA0AAQAAAAsAAAAAAHoAAACjABAACAAKAAAAAwAIAAAAAABVAAAAJQEAAAoADQABAAAACwAAAAAAXwAAABIBEAAKAAQA//8MAAkAAAAAAFwAAABDAAAACAAOAP////8HAAAAAABkAAAAbgEAAAkADQAAAAAACQAAAAAAcwAAAHcAEAAIAAoAAAADAAgAAAAAAAoAAAAAAAAAAAAAAP//AAAAAAAAAAAqAAAA1wAQAAgACAD/////BwAAAAAAYgAAAGUBAAAJAA0AAAAAAAkAAAAAAGkAAACPAQAABAANAAAAAAAEAAAAAAAuAAAABgEQAAQABAAAAAkABAAAAAAAJwAAAO8AEAAEAAYAAAAAAAQAAAAAAD8AAAAZABAACAANAAAAAAAIAAAAAABCAAAAcQAAAAoADQAAAAAACgAAAAAAUwAAABEBAAAKAA0AAAAAAAoAAAAAAFgAAABFAQAACgANAAAAAAAKAAAAAAAjAAAAUwAAAAoADgD/////CQAAAAAAMwAAANABAAAIAA0AAAAAAAgAAAAAAGsAAACTAQAACQANAP//AAAIAAAAAAB+AAAA/AAQAAoABQAAAAQACgAAAAAAKwAAAMcAEAAIAAgAAAADAAgAAAAAAFYAAAAvAQAACgANAAEAAAALAAAAAAB9AAAANAAAAAcADgD//wAABgAAAAAAAAAAAA"},{ name : "R_fonts_m3x6_fnt", data : "QkZOVAABBABtM3g2EAAIAG0zeDYucG5nDwALAD8AAAAgAAAAAAAAAAAAAAD//wAABQAAAAAAMgAAAPEAAAAFAAgA//8EAAQAAAAAAFAAAACTAAAABQAIAP//BAAEAAAAAABaAAAAwgAAAAUACAD//wQABAAAAAAAbAAAAOMAAAAEAAgA//8EAAMAAAAAAGgAAADWAAAABQAIAP//BAAEAAAAAAAoAAAAJAAAAAQACQD//wQAAwAAAAAAMQAAAOwAAAAFAAgA//8EAAQAAAAAADQAAAD7AAAABQAIAP//BAAEAAAAAABDAAAAUAAAAAUACAD//wQABAAAAAAANwAAAAoBAAAFAAgA//8EAAQAAAAAAHUAAABvAQAABQAHAP//BQAEAAAAAABuAAAAWwEAAAUABwD//wUABAAAAAAAPgAAAJIBAAAFAAcA//8FAAQAAAAAAGcAAAAQAAAABQAJAP//BQAEAAAAAAA8AAAAjQEAAAUABwD//wUABAAAAAAAZgAAANEAAAAFAAgA//8EAAQAAAAAAGoAAAAHAAAABAAKAP//BAADAAAAAAA7AAAAigEAAAMABwD//wYAAgAAAAAAbwAAAGABAAAFAAcA//8FAAQAAAAAAFIAAACYAAAABQAIAP//BAAEAAAAAAB0AAAA5wAAAAUACAD//wQABAAAAAAAWQAAAL0AAAAFAAgA//8EAAQAAAAAACYAAAA+AQAABwAIAP//BAAGAAAAAAA4AAAADwEAAAUACAD//wQABAAAAAAAPQAAAKQBAAAFAAUA//8GAAQAAAAAAE8AAACOAAAABQAIAP//BAAEAAAAAABXAAAAsQAAAAcACAD//wQABgAAAAAAcQAAABoAAAAFAAkA//8FAAQAAAAAAHkAAAAfAAAABQAJAP//BQAEAAAAAAA6AAAAnAEAAAMABgD//wYAAgAAAAAAVAAAAKIAAAAFAAgA//8EAAQAAAAAAGUAAABPAQAABQAHAP//BQAEAAAAAAAiAAAArgEAAAUABAD//wQABAAAAAAARQAAAFoAAAAFAAgA//8EAAQAAAAAAEoAAABzAAAABQAIAP//BAAEAAAAAABwAAAAFQAAAAUACQD//wUABAAAAAAASwAAAHgAAAAFAAgA//8EAAQAAAAAAHsAAAA0AAAABQAJAP//BAAEAAAAAAAwAAAAGQEAAAUACAD//wQABAAAAAAAYAAAALMBAAADAAQA//8EAAIAAAAAAEcAAABkAAAABQAIAP//BAAEAAAAAAAtAAAAwwEAAAUAAwD//wcABAAAAAAANgAAAAUBAAAFAAgA//8EAAQAAAAAAE4AAACJAAAABQAIAP//BAAEAAAAAAB8AAAAPgAAAAMACQD//wQAAgAAAAAAdgAAAHQBAAAFAAcA//8FAAQAAAAAADUAAAAAAQAABQAIAP//BAAEAAAAAABRAAAACwAAAAUACQD//wQABAAAAAAAQQAAAEYAAAAFAAgA//8EAAQAAAAAAE0AAACCAAAABwAIAP//BAAGAAAAAAAvAAAAJgEAAAUACAD//wQABAAAAAAASQAAAG4AAAAFAAgA//8EAAQAAAAAACwAAACzAQAAAwAEAP//CQACAAAAAABGAAAAXwAAAAUACAD//wQABAAAAAAAWwAAACwAAAAEAAkA//8EAAMAAAAAAHgAAACAAQAABQAHAP//BQAEAAAAAABhAAAARQEAAAUABwD//wUABAAAAAAASAAAAGkAAAAFAAgA//8EAAQAAAAAAGMAAABKAQAABQAHAP//BQAEAAAAAAByAAAAZQEAAAUABwD//wUABAAAAAAAIQAAAB4BAAADAAgA//8EAAIAAAAAACUAAACXAQAABQAHAP//BQAEAAAAAABAAAAAKwEAAAcACAD//wQABgAAAAAAXgAAALYBAAAFAAQA//8FAAQAAAAAAG0AAABUAQAABwAHAP//BQAGAAAAAAAkAAAAQQAAAAUACQD//wQABAAAAAAATAAAAH0AAAAFAAgA//8EAAQAAAAAAF0AAAAwAAAABAAJAP//BAADAAAAAAB3AAAAeQEAAAcABwD//wUABgAAAAAAKQAAACgAAAAEAAkA//8EAAMAAAAAADkAAAAUAQAABQAIAP//BAAEAAAAAABEAAAAVQAAAAUACAD//wQABAAAAAAAegAAAIUBAAAFAAcA//8FAAQAAAAAAFUAAACnAAAABQAIAP//BAAEAAAAAABfAAAAwwEAAAUAAwD//wkABAAAAAAAXAAAADIBAAAFAAgA//8EAAQAAAAAAGQAAADMAAAABQAIAP//BAAEAAAAAABzAAAAagEAAAUABwD//wUABAAAAAAACgAAAAAAAAAAAAAA//8AAAAAAAAAACoAAACpAQAABQAFAP//BAAEAAAAAABiAAAAxwAAAAUACAD//wQABAAAAAAAaQAAANsAAAADAAgA//8EAAIAAAAAAC4AAADAAQAAAwADAP//CQACAAAAAAAnAAAAswEAAAMABAD//wQAAgAAAAAAPwAAACEBAAAFAAgA//8EAAQAAAAAAEIAAABLAAAABQAIAP//BAAEAAAAAABTAAAAnQAAAAUACAD//wQABAAAAAAAWAAAALgAAAAFAAgA//8EAAQAAAAAACMAAAA3AQAABwAIAP//BAAGAAAAAAAzAAAA9gAAAAUACAD//wQABAAAAAAAawAAAN4AAAAFAAgA//8EAAQAAAAAAH4AAAC7AQAABQAEAP//BgAEAAAAAAArAAAAnwEAAAUABQD//wYABAAAAAAAVgAAAKwAAAAFAAgA//8EAAQAAAAAAH0AAAA5AAAABQAJAP//BAAEAAAAAAAAAAAA"},{ name : "R_main_palette_png", data : "iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsEAAA7BAbiRa+0AAAF4SURBVDhPzZJPKMNhGMc/PyZmBwoZW5tmP4f5NRfsIDUpLpSLnBykcJxycHLWHCY5+DkrF04oIRyUi5W0sEKJaAk7+bPwen8vBzdrFz5vz/O8PU/Pt573ebWeSI/Ym9/AaG7G4/FgGAbBYBOtrWG87WOU62FpbYRCDrrqYLVFo/8tQEP7McyArYY0G8Xw8PpAmTz3r/dcp885SOYxcrWFfr2Mvpumcq8cZ6CCwU448p7i9xbgT+RjQyL7KRZg/xDY3wVFbx8UZt6Za7zA5XPiqg1Kc+KurWKgzkd1vR+XZYaOFomExVls19LJCSXwNC2Hy5G875gzfy+gtmDemTAlL1G5ZxlWrCTDyv/EZB5NbstyQmhoiK9HHI3tMCvzU5ubYFk8ztC2XzX9hhrBwynRVC/icgKRXOQkva2K2aAEbg/2WV/TmUy46Xt20p0qU8VsUAIlgT6KfB28lNaTyji4eXxWxWz4Jx8pdthCdMHG0PiSSmaLKUw+AdLcdFaSCo5eAAAAAElFTkSuQmCC"},{ name : "R_fonts_pixellari_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAMt0lEQVR4Xu3cUY4d2XEEUC3B6/J6DPjT8JeW4mXSU+NJMRnKrFvVTXJG5jkAgZcRcR/0w2ZDH/O3vwEAv7Yvf8j8Ut1m299lefds2vXsrpuyTe7y3tztssu7q+5uczntsu+ebE99ebJ72m+bqe/ZlNedebdt8t7yvNPbPu9u6ipLbzffY3d5un2yKbnrb6c87y3PO2Wf95bnveV1n+S+7qe2d1NeWeW5yXuSm7wnuel3fe597qqbdk+yvE/5pbptc+q7adPfdnebu67LTX/3jW1Q+cn05i7Lu2fTrmd33ZRtcpf35m6XXd6Zp4/ssktPdk82l9Pus/0lN3Vved2Zd9sm79xm1nfd9Oaum7Ls8t482T3ZXGr3Zpt5+uiu7i3Pe8vzTtnX/SOyO7mv+6npXWU971nKTd2T3OQ9yU3dkzebvrvL8u5Z5tl1T/tu63vefba/5KbuR6YvStPmdG953nf5lHVP+76ZstQ3Zeq3u2ef2U1Z3Vue95TlveV5p4/0meV9l09ZmjaZ1X3apf6u797mvdvuLc97yvK+y6dsyvM+5ZePdJnnveV5p6nPLO8tz/tObXM/ZU9M755kdU9Z3U88eZObuqfsdPds2k3Zdmee/UfvzKd+yrrs857kJu9/Mg0yq3vLn95bnvddPmXdR/stv1SXTn3JXd49m3ZbnveW5z3ZNpnnnT7bX7bNlE9ZmjY9q8+5yd2kv71zt89uu7c87ynL+y6fsinP+4m7N1uXed5b/vbuWeqbN7t0t+35k111uev9lNc9Zf2uz73PzXRP2emesrynrO4tP92Zb067qa+sm/qedac+1b6/yfufTIOe1eeUuyf3lud9l09Zd9dXN/VPuyd9mnb9/vpN3+5Oed2b3NU92TaZ153e9nVP+rvJtO1ZmjaVdb0vd92l9/V5ynKf7rZ1b3neU5b3XV7Z5smuf193129d5nlv+ds7860vT3fltO19+swm87qnrO5Jbk73lG33lOU9ZXVv+Xaf8nS3q673mWWfm/Km77bNlH1jGvQs+6fddG953lue92bbbXnZ+sq7bbPdmW/9JTfpyW76vp6lbZN53eltn/eWTWrXtz1L06ayqeve9m/u+pz3tO0yr3uSm7rv8somffd2e/lIl3neW/727u667unuctpW3zdP755Nuymr+2n25K7Pvc/Ntnt692zaTVnep7yrzbabuszy7ll62k+7rcv8H6ZBz7J/2k33lue95Xlvtt2Wl7u+um7qtzvzrb/kJuWuv53yvCfbJvO809u+7imr+y6fsjRtKut6X+66y9u+3/U5Tdsu87rT3Zu7fMru8nS3+0iXed5b/vbOfOu7J5vLk++b+szy/kg2yc307nR31eUm78mbTd9NWeqbvsu83L0t06Znqb/tsj/dp/xy1/1uGvQs+6fddG953nf5lHVbX/nUldOm932TeXqyq03f9WzK897yvCfbJvO800f6zPK+y6csTZue1efc5G7ytt/uLru6tzzvybaZ8im7y9Pd7iNd5nU/zZ7ePUt90536y5PvuUybzPJ+k/W8utzlPWXb3VWXm+muz73PXXXTbsp6vvWXJ93Wd7nrb1N/12V/uk/55a773TToWfZPu+ne8rzv8inrtn7L07SrLJ36kru8ezbttjzvLc97yvLe8rzTR/rM8r7Ln2R5T1ndp1162+fds+zy3vK8J9Omsi3v2ZTnfcovH+mmvLL0ZJOmN9udnvZ3mzJtn949m3ab3OU9ZXd3fe59bqb7qendlJXqTv2Wn/rtTlOf2dv7lD8yPe5Zfb4zvZvuLc/7Lp+ybuory3wybXtW+pu+2e7PZlNe9+bJ7snmctplX3fqb1Ju+rspr/uUl+r7Zsp63rMu+7pT9nlnPm03uat70t9Npm3PprzuTX9bnnSb0z77S27Str3LuifdyZP9m03fTdkkN9O7t/eUbfdT07vKet6znm99+V59mvr+rnva5y7zy133u2mQWd2Tu3dTlnfPpl3P7ropyy7zzbbf8kt2efdsk7v+dsrrnvR32/bUlye77Pub1N+Vqe/ZlNed+anr/SmvO2Vfd8o+727qKkvTpmeT/n6Su/52yytLfdM97VPuyqm/5Cbvj+aXJ91J7vPt12/8dlfdtLvL0rS5y073lJ3up7Z3mdc9bS+9757206Z3adv09x/pLx/tfjcNKsv8ZHqTWd49m3Y9u+umLLvMN9t+yy/Z5Z35JLcA8N2d/vHJfjO96RkA8Bey/SPe9c0m3wAAAAAAAH+60/+d/7a/nDbZX952v53//tuf//7tz3/98ec/op/efKN3n+2zm5z2vZ82d92l96fNX/VO2de96W/7fstPtn3/rm7bZd5tfX+b3/P2zvxuu93p1JfaAX8h+Re1fLa/nDbVT5uti/w/f/vzb+3+e/TfvPnHl4Qf3afT/mf3P/tOb/u6U3/TPe03265/R/e0n3Zbl5/f3Fs2yV3e6dSX2gF/IfkX9DN3fe5Zbt7e9bn3bXf7C0DK7/nV7pT9j757NnXdqe/693W5K7krH91t8l05baY+P093ZXnfvam7Z8AvIv/yf+auzz2bZH93Z9d9+cG/AKTqU/Z/1p2q76b+Z92nvJz6UrsuNyf5/nLXXfr7k7u3mefds/y83fUZ4JH6QZI/UKauZD9tv37LV1O/3T3vn9vuT/kFIPOS/c++J7XpsvtZ9ykvp77UrsvNSb6/bJstT2/7urcM4IeoHzjptMmuPmfWVX7qTtqbH/oLwL/afZL7p3fK/unds6nrfeZ3+vd1uSu5K7krW9/fdtlvN8CfKn8o5Z2yr7vn/XO35aX39blnw+b2F4Dtbfre/fe+U/Z1p/6me9pPm7tuc9q/7etO/U33tAf4peQPwbxT9nX3vH/utjz1Xb6J7tUvAD3r7vrenfrMPnv37K7rWdfflc9sMr/0d5vcnu6Ufd2b/rbvtxzgl5Q/DD9697x/fuv0XdHd/gLwR/ah/x0A8P9a/YOaPttfapPbzMv2tue9+3L4BaBvAYDwzb+uwz+ab/tLbi533eWun7ov//cLwN+/fP0vAf5P7wfzv/uloutBZoS1AAAAAElFTkSuQmCC"},{ name : "R_png_Wall_120_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQPUFcAZLSRAJGeVwAAhgDjqBQAAAD///8AAAAAAAAAAAAAAAAAAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNYOSeEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzerUAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAABCZJREFUeNrt3U2CmkoAhdHeGvJTLKP3v4qIQoM02piZdc+ZvJcM+S6KJl35+gIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeOr72zWIzl+KqxCdfxhch+j8BhCe3wDC8xtAeH4DCM/f965IcP7LxcfA8PzeAsLzG0B4fgMIz28A4fkNIDy/AYTnN4Dw/AYQnt8AwvOPo+sUnd+fBYTnN4Dw/AYQnt8Aqs8/jtf/dG3bHeY3gIT8w/R7fXeU3wAC8l+T99f/a4/yG0DV+dt2fgW4Ri/dUX4DqCj/cr+vd//PBMo4lsP8BlBr/rK84C+vAsf5DaCa/OsbwPzBb37yXyZwnN8Aqrn7S7lPYPncvz753yfQ9wZQ+aPfNIH1a5/HJ/+2GEDEk//6q4cn//FiAFn5d0/+TwfQNK5infkfv/V7MoCmaVvXsf781/eCowFM+dvOlaw//+EAbvk9A0TkPxjAnN9PB0fk/zWAJb+/FJqRfzeAbX4/Hp6Q/2EAj/m9BSTk3wxgn98AEvL/DOB3fgNIyD8P4Ci/ASTkvw3gOL8BJOSfBiB/cP7e3S+//PLLH5n/OoB+kD/57m+a0Y+DRb/47/5SqGsb994/jq2fBo5+9Pv5swDXNvPJfx6Aa5v6we82ANc293N/aeWP/trH3/uJzu/ulx/5+Zz8f53sJX/9+V+e7CV/9flfn+wlf8X5z5zsJX/Fd/+Zk73kryT/48le5fTJXvJXl//6cv/GyV7yV5F/ncCc//TJXvJXcfcvZ/st+c+f7CV/JY9+08Fua/7zJ3vJX82T/zb/+ZO95K8z/+mTveSvP/+rk73kr+OD3/ZXb53sJX8Nd/8f+V+c7CV/FfnLZT+B8yd7yf95AyjrAKb3/nKZbCfwzsle8n/eAPrlu/41/3YC753sJf9HDuA+gW3+ZQLvnuwl/+cNoLvn3ue/T+Ddk73k/9gBHHnynf+Lk73kDxmA/PUMoP2PAcifPAB3f84ABvkNQH4DcLJX6qeAwcleBuBkr8AB9PsBONmr3gH0BwMoXbcdgJO90gZwS758D+Bkr8odvwU0Tde1xclemRO4vSo0TT862StzAvPbgpO9UiewfArwrV/oBMqcv5U/dAKl3P8Fb/mDJ+Duj5+A/OET8J1/+AT8M67hExgG+aMncB+AaxE7gWkArkOw4ktfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPgU/wAhqfEmDppODQAAAABJRU5ErkJggg"},{ name : "R_png_Panel_300_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQyNkAAZLSRAJGeVwAAhgDjqBQAAAD///9AM0cyNkApQjJFNi4AAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNKNCaEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXGSMuM0dLU2Bpc3qHlJSltK3D1Mfh9eEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdHyE7P0NZX2V3f4eVn6m4v8Xb3+L///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzhAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAAsJJREFUeNrt3EtSwkAARVHWlv6xDPa/ChOSQCjCWOWdM1LLkfd1469yuQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Ifcbr4G0fmvVxOIzt+7CUTnX5hAbv5aSjWB3NM/Ru+tugVyL/82v1UeLwS+NFn55xvg2trYboBaDSAs/30B17Hmn78ZaBYQlr/vl/+cv9RiAJH5x7jnr9UVEJ1/WYABpOZv6wBcAaH51/4zAwjNX0qzgOj87fFdgAVk5l/eW97q3QSC8y9MIOUHv9P8JpD0c/9p/vsEhgV8ff79DnjP38YwgID89UP+5d9EDCAh//4y8Ja/lG4AwfnnjxtAcn4DCM/v74Lh+Q0gPL8BhOc3gPD8BhCef/4sfwxIzl/llx/5kZ9/nL/IH376i/zfnn97vMOH01/k//LT/3y8w/npL/J/Z/+zxzs4/UED6NN2Azwe7+D0hw1gWiewPd7B6Q8cwDaB5+MdnP60AawTeOZ3+uMGsEzA6Y8ewNQPYZ3+xAEcf+Pr9OcN4OUKkD9xAIcrQP7AAcxXgPzZA5A/ewD3BcgfPQD5owcwyR8+gGkM+aMHcJiA/AneB7BNQP4U0+kE5M+ewJA/ewKjyB89gVbkj57A6wDkj5vAcQDyB07gOQD5IyewD0D+0AmsA5A/dgLLAOQPnkDzaKds8gMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/LYfPsHoe/Y7AdgAAAAASUVORK5CYII"},{ name : "R_fonts_m6x11_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAK+klEQVR4Xu3cUYplx7EFUA3B4/J4DP40/tJQPEy5D1Sg0FZk5jm6t4pu9VrQcPbekYW/SgUP3i+/AAA/t98+TF3vpy77vq36ad91ud3tL7VNN7ld+n66yf7S3965ye1yd7+b09P9bk61T053fZ9udtul79PNab88ucm+5P6uvOozT93dnHKvfLK6r37a72y963LPnKa9uml7smd/yS3zqb/UtrrZ7dmtcqp9utltZXfTt1f3XTdtaXXT35fVTfZdv9nd17a6+Vb989u//37795+Pf/+KfXz3J3lY+bP63bbq+9a7O336u+2nnJ7ud3OqfeV091X7nZvsy9P9XXnVZ566uznlXvlkuq+u222X3Cun3DOn3Cunu3u/6V3JbZWzX+3l6X7K6UfbM6fa07T3d2m6613qN6v76lPc/Pvbv3+0/Gvsf3pzy+lh7pnTtE9dN+27rsvtXTnlfsrp3XvmU5/y7mlOfV99fw956k55ZXWX/at51WeeulPuart7P5nup67kdsonp/vcX82rruS2ytnn/lU55Z455f695a626b53q37qUt9Xt9ln/ui2fwDclj88c8o9c5r2qeumPbvKKfd35ZT7Kad375lPfcq7nut7tU/6vvr+HvLUnfLK6i77V/Oqr1xd5t2byt20Vdf1/XST/WV6e8pdbe+8fzWn3Ff51KfTXe5PczrtKe+/OqfdPm3ZVe52911/k6a7Vf7o/AGQN13uq5xyr5xyX+Wutid73uaefv8Jf7zLPuVd5W53n/q++v4ecu/Sbu/vy2rL/pW8+s7b7rRf+k3erfrulb22vp9yyj1zyv3dOeW+yqc+re6qzy27Ve5qu7N3q5ver7Z35a62aV9tves33XSffW7pzl3c/Jh/AFS+86bfrHJX22q/7Pbpfe+63Fe5q+3Jnre5p99/wh/vsk95Vzn73LMvfV99vzOn3Fe5d13fn96c+lfy6rurftoufT/dnPqnedWV3H60vOpKbplPfVc3013f+p59edfeTVt/0z3d7+bsp+2y2no/fVfuVv2lb9NddSnvf/vR/wDoN5O8y9y7brddcr+bU+6nnJ7uT/OpT3lXudvdp76vvt+Zu9p296ub+s6bbrXf7V/Jq++87fpe7mzTnv3TvOpKbSn3pznlnjnd3ftN70p/063usi+7t91009+Wvne5n3L2uWWXuXddbnfzqb/UNu2973fd6k1uvU95s7v/2LZ/APTbrTzMnHLPnKZ96rppn7ou93fnlPspp6f703zqU971XN+rfdL31fdn5JR75qnLnFb73f6VvPruOffK3aq/PNme5lXX1d7l9jR3tf2V+zs3U9f1d2V1k/1l9y6d7p7up/y0z5xyf5pP/eXJVjn7NO39XcqbzEP/c/8BUDnl/q6ccj/l9HR/mp/2r+bU99X3Z+TU9/rO++wyp9V+t1/llPvue8qr7k4/bZfcnuZVt5K3r+T6Xu1TPpnup25ldXvqp+2SW+b0dD/lp/2781P1fvUzTvvK6l3vTnvPw932D4CP7vy/OX945pR75jTtU9dNe3aVuzv3mdNX75VTf9Plfsrp6X7KKffKq/5uTrlXTv1NyptTTrXn3apPu5vdlvJuetu7O316195velf6my73r8on03113W67fNWecu9vurt73q369O698l/tu7pZyfsy7b3b7Tsfd8c/AG7pP3TKKffMadqnrpv2qXvSr3JX252b7C/97ekm86S/y9vsVjnVPt1M2yr3rsut30/9Kfdut/Uu5dt8czd3tXV3tjs32V/62266OXV3+rTb+/s7N1NX+psy7V+VT1b31eee/WX3rtzdp5u+pbzp70q/n25yv9zZVjev7FP3V/pUd5O8LdPeu2nvfd+HfP0B8Otvv/9/AvzfH3/KTf2H9vxZ/W5b9X3r3a4HAAb1H87pP6BTP3XZ923VT/uuyy17AOCB3X9sAQAAAACAH1b/PwGUpzdPtu501/fpZtrybrrpcntXXvWZp65yyr1yl1vmbrd1q7vqU+753a36lHc977ZdTrUD/BTyl2D57L2c7r56f0deffece+XsutwrZz/d9i63Vb7bp92+e9+3ab/klt9Pcqod4KeUvwwzp9x3efX9zty7brddcn8lr77ztut7d+fmsrvbbWW66V3X352s3vW+2+39fd1M31MGYNB/yZbc+n3X33S5774/I6fau2l/R159d9VPW7lzc7lzt7tZbb3v+s1OvrvkdjcD8Gb1izbl3t90/U2X++77M/Kkbrrc3pFX313103Y57d2d29XNqu9We3/b5Z7fAHwH8hfzKacn++r7M/JJ3t/NKffdd952q733O7s3q23Vp9VNf9/lHQDfofzlXd69776f5JR75dTfdHf36Wa3peluytl1uVfOfrrtXW6rDMDfXP3i796197z6vpN7t9t61/V35XST++XOlqabXVc55V65yy3zzpNbzP8BvYeLvJn4ggMAAAAASUVORK5CYII"},{ name : "R_fonts_pixeled_6_0_png", data : "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAF70lEQVR4nO3Z0ZKbNgBAUTaT///l7UO7HaJBQjjONM095yVZLED24ovs/fj8/Dz+8Xkcx8fxo8/T/z8m475+fuf20fncu/M5j7/bf9x2N/Zq36/tu+cY53n13Gf7X+37yvzeve3pc5uNW12Hq33PY1evwfm4V8/h6poa97+a77htZ8w4/9mYn91+9u/Y78ODn+OAi4P9ajtv7PHnqyc6e4F3ts0uwrt9zz+fxz15HVfnXXl1frPzvrJtNdfZee/2W+27c02M89s5x+yxz9O/52M/+R3NjrO6Ae6aRec4JtfB94sdxx3Gib5y8neMf3Ksq8e/rN4IszvPK3O7uivNznt3zp15fEzG7V5QT1Yu47a7492dd/f1vbpGd84ze51XsfoVN7y7N+jTCFzNcXcV9e8K4Pzg6i62Y/XCPZnsymz8kzmOx5ndwa5WFa/McWdVMBu3mt/snKtzrI4/jnvX63w3bucaWP3ed87xO1itAK68cpO8WwH84Nvx44Wy8ws/v+C7nzne6dVovOvcr16ov5P/Yo53y+/V4++e75MV6ivuPgat3m+zeaxWC7Ob2njz+hy2HbPvAI5h286de/a56F1L/XGJu1vP42bccTHulX1n28ZfxO6yeTWX3W27v8/Zhf503u/+fZzH7szlyTlm55ytXq/Os1pu70bgatvV++3JcVZjfnjs4+avAMAf7Nvp/z97pztvG5cbs1XGuCSZ7bu7bTW/q31Xz2M2v9XxVnPYfS1W43bmsvPY6vW88is/0vEfGj8CHMf1Z5+nK4OdLwFXn12+to3H212S7s5tteqZzW92vN0V1Phczh+VVse9ms/snHeP7Wx78jj/U+c/A47uPgs9+dzzNX7nTvJkpTHOZScQr3zeHaNxte/dmHHs1Zv6fL4xDDufGZ98roRj/DPgcVxfyKu785MvXXYisPPmm73Zdi/y3VXG+RzjXXq8g++cYzZm/P/Vz/B2qxXA1/bdN+zTLxHf8Y3tavv5LjueY2eVsfut+tV5V2O9sfltfHz+/WeAuz8LuWjhD/T9eO1LIeAP8O1+CPCnEgAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAIEwAI+wvp+nAknz/LaQAAAABJRU5ErkJggg"},{ name : "R_fonts_digitaldisco_thin_0_png", data : "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAKvUlEQVR4nO3da4/brBoFULfq///Lcz5UecVh4AGczK17LWmUCcaAb9s4Tdtfb29vV+Ptuq5f3fuHtrxfNlo+a3O0bFanWr5ad2cMq+1b9X0ynmfb2dmPJ2N/ZjzPHJc7Y23fP1TrtHVGfYxe2/pXV7azLbO2Zvuvr9OPuS8fLdvZX7Nj97fBJgBWJ9y0kaLsuzsJET7f6oRenYcnx/Xk/F+1veq3CtNRkOz0vQq5Yf+/m8LVjhrt1LeurE+sa1L2E5a/NT+zum8b5f3P3XZO2p+N/7T8VeM/bX/U1qy8X291R6/aqrTtVjOTqo+d/nYCa1Tn1+J1uP6f6yzZWtVFP6pzOsX/jOXXNd6G2T5ZJeus/Y/0zDR7VT5rf9THo+6ozdP22zZWdVd30u+uCpaZKuCqsnfH5PfNAfR+wo7mZ2lD9/F+NnsZWd2cqvqfHR5twI0u5FZ/Mzope+f3bMGk49XyKuWru+x3XD5zenc5PXFPfVX7pxfYafvt8kd/bSDM3B3X3fPhWZ/Vz9CfYlm/E2ZTtcdrtXzmuy9/ha94BPis9kcXymlAzqb1/fT/GvTVlrX1/vVHgJd5BMBsh/Uf9lV1ZweiXz5q/7su52vNZpTVjWn0ec0rjGYIr2r79DOl/lq7U3ZdVz0D2B1EW/Zw8gHRd1y+M/sZrTuqP9pPs/qn5V/Vfv++rVPt2zvttz7i2b9qd/d8mbVVXdT9stlMaLSsqntU9vgewGqgs8aA15h9hlaV91bl767h302FmdUHL1V6rsreBuWrD4PutPfMerP1Rz9V2zvt9stH+2K0r0Z1d47Lzlhn7Vfrzdatxr4ax6ztqs+Tca763j0OO2MZlc8+C6jKR7+37/vyd/3+7hb2g+ztps5sajTamLbu4/edaeVOe6PxzdabbUtvdBBmIVml9cpo+jfbV+3P7gW+OmY77bf1+vLRvhlNZft2T8Y1qjfra3Y+9/2fXoj9fuov6tH2VfvzI73r9xEAs508OqizEKjet2Wz16rNZ9sbtXXyfHWiOqirsOlPrP51FjLPBEzV9rN97LbfOhnXqs+Tdl71iHvazuhmNTonT/bFzqztuq7//1OA0aBWF9NOQJyUtUYXw6jvvs5OvWo2UW37KChbrzqJ7rS1OnFGob7TR3XijQKtOo5tWft6GsKz9dr+doKzWl7Vn61XjWvHbBZ7anvd/qvA1bT88XvbQXWh3S2rLtjV+HbrPeP0AqqMLtBZn9V2PDOVXAXD6Jj066/a7u2c5DvHfVavGmM/7d8d38559NlT+lPvjvHJHwOuQmHW0WnZbGq8s+4rzR6LPqv/Ub/V49edMNq5g6/anu2TZ6fv1TY/+l09Uo3G96pHir7tu2azz1eN9dFe+/qf0+8B7D6z3i2bOT0pP0u1o08urt2D3d+NVyd81f4s0Po75Kz91SNH2+ZsfKNZx+jOO9vm0aPN7sXZ16/GsDu+vt9R+az+6jGomnXcqfe38O3vFwF2ps7VM0/byTNlbZs7J0rfXjVDqQ7u6XbDR5mdgyPVtdAvH86E2i8CrRqdlaWqnkuvQdnsrrgKqt32+/J+nFUfvd16VR+P9atwnbXRj+O6xifwqt9rULa6KE7LR3VWr6M2dra3+n2n7ru2Z38KcFLWdjyruzPNOtlJo7arOrP2q9nGqmxn6jY6GKN2q3o7U9HdMK7uJtWYd1X79u4No9re3RP9ZJtn/c+WV485p9v8zIzzbfJ72Xb7PYDHT99oXz6q03by+OlP7r78rtEFNupv96DPxroq6/dN/3p1dXfueKMxPru/+vba15V+X8+2baffk3WrNlcn+ql+n4zOndH76iJf7ef+vHl2O0Y3jepm85/qXwTamfLsuJv8M3cScvfEvzMTWs1uXnU3re5moxnKqr2Z9gIYzXiqmdROv6v9cvcOOOt75Zm77l2758TJuGYBVl7Ld/824GoQj45nAzxppyqfnaz9Brc7YfeOtbpjj8ayaza+Ub1eNdV9lbuh9ewM7264zfqt7s7f2ej8qH6vHkPL98/+deDq+XS23m77D/1U/OqWze4uo0R85uD3IdJv6zN3kdnd9BXtfdW6d/b16EI+PWfuzPJm45gFyN39MxpjH3Czi/1DPDMDqNJ+tANfuTG7U6fVVGin7epEaI1mI7MZSm+1blu+O5PaHUvfx6rebHyzPnb3Qd/GrO6zs4yv1D+rf7nZ9wD639v3o5QvnzMm79v1r2vdb99f38bqGbV6bp3dPU4vOvhRRt8DuK71RfJRH9r8FKOZRf++ukNWgblaty9r190d2zPvR/2NHrmq12uwbrXto7H05bszvEe/d9f9p1TfA5iVz577H6o7/erO3be7e/L1689mAKN6s7FUz39VW7PfTy+Q1b7vP3tYfQbSj2m2vGrrut4fp358O8t3pvl3yncv4NHxibv4r2vvHwSZvc7WmwVCe3KMyn41P317oxO2elyZafvt1x31MVp39v7V3rqf03Xb36uLeHWcq+M7CsBf1/uLanXBRV+EX+nOh4CzFJ9Nz2bL+jqreivV9LHta/d5fmfqujuu2ThHd91+llGNr3pd1euX776v2uKHeXwR6OGZD7uqdaplu2HyKruzhmpa/Fh+XeM2qot490KFD/fnOp9Gr1TPm4/3szvxzoVfTf2rZ9e+/dnz8qjdtt7sMaV6D99S9d+Dt2XVMuCHagMACHPyn4MC/xgBAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDBBAAEEwAQTABAMAEAwQQABBMAEEwAQDABAMEEAAQTABBMAEAwAQDB/gerxmswGjknzwAAAABJRU5ErkJggg"},{ name : "R_fonts_exo2_light_30_fnt", data : ""},{ name : "R_damage_palette_png", data : "iVBORw0KGgoAAAANSUhEUgAAAAIAAAAFCAYAAABvsz2cAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAA2SURBVBhXY/hf9v///9f//zMyMPz/X7yTgYHhxAyR//9fhPxnfGco9Z/dXp6BYTNQ6v////8BTWUZfwc89VUAAAAASUVORK5CYII"},{ name : "R_png_BattleZone_01_Foreground_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQPUFcAZLSRAJGeVwAAhgDjqBQAAAD///8AAAAAAAAAAAAAAAAAAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNYOSeEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzerUAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAABmZJREFUeNrt3WuOo7oChdEeW4yhhsH8R3GAvICEYKoiHWyv9evqKqelZH/1CKTd//4BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwP/mp++9CO/1/U/xz7Ft2x8JbM3/M7w8pc/fSuDT/G3JCbRPEticv9gE2iUJbM5fZAKha1sJpM4/vDhdUc+xaZrutQAJbM3f/gwFdCXN33QhSCB5/p+mGQvoipl/2P9yuUggdf4QwrWA/BOI4fb1HyRwZP7mVkDM+9fBGKcApv0lcGD+5l5AzPkdQYzXAO77S2Bn/q57zH8vIOb7pjDGWwCz/SWQPP+tgJjrdYE23gNY7r+RwDh/LQlcn+k6gZf5J7NXKLMn+QggxmHvnQTuL0gNCTyf6TyB2c/+mcvlWcBPXq9M38WYmsD8xSg9geUzff7v9/PH2JYRwKcEXr8Wyk3g9ZlevxtszZ91AKsCNhN4/WlYagLvn+mn+ePioZkFEJISiH0t7wi23vf3zeb8zwCG/7TLLoCQkkDs2yreFG5f8++bzfnjc/4QcwwghLb9nEDsY6jgusCHq35N7LfmvwUwvT9ssgsg3ib+nMAYQPGXhj5e9A3LAObzx+f8Tb4BfEwg3h5WcgI7V/0W3wIW848B3OfPOoAPCcTHw0pNYP+i7/NbwGr+OJt/vKGWcQBbCcT5o0pMIO2Wz7WA9fxxMX/uAbxPIC4fVVoCibd8pgD25s8/gDcJtC8PKimB1PmnAtq9+UsIYJXAeA0wXEKhCRyYf/wtoF+9NG8uDmUWwPAKhE8JjPOP14kuRSZwaP4w/ro/S6Bt38zfZPhT8H0C09XB+/xpN4tzS+Do/NfVbwkUM/+nBGbzl5fAb+Z/JNCVNP9mAt3LrcJyEvjt/Nf3/f2wf0nzbyQwBpB6szivBP4yfxy/M7alzf82ga7vQigwgT/NP/7sfw2gkPthqwTi9Vbh3p3CzBL48/zDK7IKoKA74osEHhcAC0rg7/MP//8ygMI+EzNLYHYFuJAEvjH/KoACPxX3SGBxC6CABL4z/3RFMJY7/yyB1T2gzBP41vyzAAr+ZPyUQFzfKMg4ge/N/wig8L8bMyQQX+8UZZrAN+e/BVDB347r+3e3CjNM4LvzX+8Klj//5gXi3BL49vzDoyr6G/LZJ/D9+ZvKzsjIOgHzV52A+atOwPxVJ2D+qhMwf9UJmL/qBMxfdQLmrzoB81edgPmrTsD8VSdg/qoTMH/VCZi/6gTMX3UCe/MH8+eUwNHD6BMOdA/mzyaBo4fRvz/QffXVH8yfSQJHD6NPOND9UYD5T5/A0cPo9w5099WfWQLHDqNPONDdV39OCcTx0JXkdwSbB7q3s2F99eeUwJHD6DePdG6XB7f46s8ngQOH0X860L1dfAswfz4JJB9G//lA9+W3APNnk0DqYfS7B7qP3wLMn18CaYfRJxzo/ji5w/w5JZB4GH3Sv+E7FWD+vBJIPIw+5Y7f9FuA+fNKIP0w+oQbvq35M0vg2GH0+/f7l6cbm//kCRw/jH7v4x6LA67Nf+4EfncY/d6nfR5/qvnPncBvD6Pf/7DX9U82/8kT+N1h9O//Cef1r37ddM61+U+dwLDR4U8Npc0//kOOQwDmP3cC01nkhxJInn880D0G8587gdv1n+QEDsx//cPNf+4EDh5Gf4nNgQPdlwGY/4wJHD2MPjYHDnSfB2D+cyZw8DD6lwD2DnQP5j93AgcPo18FsH+gezD/uRM4eBj9IoCUA92D+c+dwMHD6GcBpB3oHsx/8gSOHUb/CMCB7gVfHfyQwC0AB7rXmsAUgI971JvAdCHI/BUnEM1fdwLml4D5JWB+CZi/6gTMX3UC0ydCzV9rAuavOgHz152A+etO4NI15q85gdfPBJq/qgTWAZi/sgSWAZi/ugTmAZi/wgSeAZi/ygTuAZi/0gSuAZi/2gTGAMxfcQKXaP7KE/AaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABf9x/cEpqERTlvhQAAAABJRU5ErkJggg"},{ name : "R_png_WallBase_02_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQPUFcAZLSRAJGeVwAAhgDjqBQAAAD///8AAAAAAAAAAAAAAAAAAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNYOSeEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzerUAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAADcdJREFUeNrtnY2yoygQRvdRE6HV93+CFRFFBfXeSUxu9zm1VTNTOz8J30kDLdH//gMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACrPB6Mgen42xYFTMcvggKm4w+ggOH4vUcB0/EHUMBq8W8nmAhMfvql9c2Ib4UqYO7TP+bfdW3bdbMBKGAn/mHmb5uuaUSa4YdWpqUACliJ37m1AM6hgKn4YwWIfYBYAVDAVPx7AVDAVPyjAKkTOAmAAobiLwuAAmbirwmAAkbirwuAAibiPxIABQzEfywACqiP/0wAFFAef6kPgAKG4r8iAAoojr9wMQgFLMV/VQAUUBq/354H8ChgKv7JgPlE0DEooC/+0YB0JvD896KAuvhTpj/87SigK/7wp1DAbPwyLAFbQQG78fePR48CluMPfx4FDMcf/w4UMBw/CpiPHwVUxd80P4//qgL5350p0KHAV8Xf/CL+Swo0FQW6RlDgiz797lfxX1DAlatAuKrERPBFxV/c7+I/U8BJcSKQtvEda4HPL/1SLLIR4AfxHyvg0i1FVpPMoEXDLSZujL+rrfybFL/7h/gPFXBJgVwAkSf3F7gvfokH+YqTtJNXxH+uwKrCDL9+xpqDAncU/3R8p7hGe1H8pwq4TQEYfht9gZvm/i5MuLWN+sviP1FgVwBoDd239BuW3OMn8Kxf94/xX20N5QUABW5Y+Q+b7vET5+KufL7X3+vjv6TAVACmV4MCN2z80kcuzMQiUjTgRfFfUGB4NTK+mtR9QoF37/vTpBsWY8NPnyJvjP9MAYk6rhafKPDmts9UAmL83g+/eGf8xwpML2JTh1DgrV2/WALmkR9+8d74DxUQFLg5/lQC0qjHX7w3fhT4pvijASl+7+d9+Dvjv6oAR0ZuiD9+mUPS0mtsxb8//gMFxuVonJc4NXRD/GlQp923jBfjboi/pkB6Fc/9FIACb4nf+6UnEG/56nu5I/6yAlNH4ukzAdwICrwn/v2BHNfLPfEXFXD7AhD+h6M19Ob45xm4H/67K/5yFdgVgNVFIxR4Z/zD0Pbi+r6/c2g3CqQLFBUBUOCd8Ydv+A4l4O5hXSkwXqLcLgHL16ZR4PXx31j8ywpI73c3m02LQBR4c/zyofhzBYZFiC/ebJZvE2mOf1EgrEGEL5R9oPh3ff/pYRwU6MddyMGHntaQ2vjj65exD1F4+dlSgNbQq4u/fEf8qQpI7fjoLACtIUVz/3lraFP0aQ1pjr+mQF0AFFAWf0WByhSAAgrjLypQXASigNL4KwrQGrITf305SGvISPwXFLDeGtIe/4kC1ltDFuI/VMB2a8hK/LSGzMdPa6ge/4Wnc2iI/zetoeXEuz4FHj49pbO9pICC+H/TGorjM46T12XAo51u7/B8XlBASfw/bQ2F+IfxiXccaxUKMOT/kO5UAUXx/6Q1FOPv5BENUChAOD796KQ7VkBZ/FcVmOIfhicI4HUKMObfNEcKKIz/igJz/GF0YgnQLIDUFFAa/5kCc/yiW4BhBTg9rrusgOL4jxTI4p+G5tmKfgEmBUSMxF9VIAxLHr9iAUL+4wSQKdDec3eP71VgHJY8/jAJhGExIMD0Vu3EX1KgNipap4CC65bi3ytQq4sqBSjPdt5U/BsFfGVlpFSA0nrXXPwbBYp7I7WdwM2OdywA9uJfKZCtjeb4tXYCx7tp5T2vqdjZiz9XIAmwxO8UC5BXgSl/m/EnBZIB2adfuQCLAhJXu73R+Mdh6ePuSLL49QswKxALIAKkUxKy3HpSuQCTAnEJZF6AdA4of0CpegGmw28IMO2D1lfFTAgQn/CJAPHxN9tHFJsQIG4LEaAwLAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAAAiAACoEcAhQEsAZEcC5+R4JCLAIkA+LZgGy+2MgwCLAelgUC+DymQ4BkgCbYUEABEAABEAABEAABEAABEAABNAhQN7soA9Q6QOkp+IpFMDRCawKsPlwqBRgVeYQYCvAah5QKgAXgy4J4BAAARAAARAAARAAAdgFsAtQ2AdAgJIA2vsAq2YHAhQE0N4JXDe9EaB4KthxLNy2AHwvAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAEQAAG+SwDJQIAFKwIs4bdt39sWoO+HQdgYoF0AEfdMOOeelgUYB2AejMkA/QI8PRVgXwH8044ArAFKawBTArAL2O4CEAABEAABEAABEAABFArQSXG5iwBrARY6bQJ03dzx8ghQFsDPHdJhuJQJkHe8spYXAmQC5CPknOIKkDW9EWC5Gpg1xxRWgNUaQLgcXBBgdZFU3RqA8wDnAnAgBAEQwKYALgcBDAqwGhQEMChA9sQwBKACIAACIAACIAACIAACIAACIAACIAACIACNIASgAiCASgG4GGRbAC4HIwACIAACIAACIAACIAACIAACIAACIIBGAVx8u+MPCGBPgLHXmX5AAARAAKYABGARiAAIgAAIgACsARCAXQACIAACMAUgAItABEAABEAAGwJM58HT0ggBzAmQvhHiEcC0AA4BEAABEAABWAMgABUAAagACGBGAEcFoAJQAcxXAASgAiAAFQABEAABEAABWAMggBkBOA9gWwBOBCEAAiAAAiAAAiAAAiAAAiCAAQFEECAKEMbGnAASQIB2HARZKWBBgOEdty0CJAHCWIghAcb4n8/wrhEgjMEwFpkC2gWY4u9kNAABhvylyxXQLUCKvxve9Kh/1z+MKvB49F0sAMNgZApoFmCJv2mSAa1NBUL8bco/jMasgF4BlvhlFsDbVCDF72cBJK8CKgXI448EA6ZZwZYCc/zDmw/5zwOSFFAqwDp+mUqAOQWy+KcCIGsFtArQruOfJoF4vyg7CmTxD+98mQAyBVqdAmzfahLAW1JgHb/3tVGxIMDk+nLXOP0KbOOfpoBCXdQ6Bexnu7n/qV+BffyTAYWVkXoB0no3vwaiW4Fi/NGA/d5IZx9geFObHe/2QrheBWrxbxQIE8AwVl63AJX4FStwFP9KAd0CRAMO4leqwFn8KwXG/JV2AoMAchy/QgWuxJ8pILEA6OwE+nTlu5B4/lNFClyNf1Eg5q9OAB873FKKf3qGQP5TJQr8JP6kwDROXt0qOL21UsXPHiKQBkqBAj+Nfz4qOWigcCM8K1At+tlPFSiwi/9EgvR2lcZfVaAuwJ9WYP/pnyc6q/HXFKhMAX9agVLxPxLASPxlBYqLwD+tQKX4V/M3FH9NgdKO8K8qQPH/7XJQRWvooPgX36rB+K8o8FdbQ0fFv1QHjMZ/psBfbQ0dF/99HTAc/7ECf7M1dFr8N3XAePzaWkOVrt+u+G8LmuH4NbWGjpu+pTpA/P/aGpL+axQY4u8PNzUU/7e0hnon3zB8j4e4/sKeluL/2taQ9MO4f74KhE//YGIvR/FT/N/QGpJx2D+8Fohzf1BRDl42xf+1raF43bz1Y+H9pALzF7x751uh+N/TGpoFaHwvn9wRLCt/6X3Tnp5yJP7XtIbSwZkw5h/cFK42fsHGw3OuxP+y1tAswHOsuh9SYLPvH+aj56WDzsT/z62huQA8P/e10tJXPJ8HJYD4X9kaygf8I5eJSlf8MiGJ/82toawAuHCz2ZsVKFzxi7e8rZQA4n99a2gpAMutJ29SoHjFL979rFgCiP8tm0KJAojsrru9V4HqFb/xdT6l+I0n4n+9AuNwRwVuPDhWveIny+sh/nsUkPsVuBK/EL9WBYj/qxV49wni+nEP4v9kd7Cy9Hq1Asc3d9kvR4n/ntaQH3ffUuy/vFCBk2/4ji8gdCQ8F3xv7gvE3XetA/siBU6/4J1aUlNHgvjvU+CkAfsKBa7d22dpShP/zVVgVwBe+s3iavzb69KThMR/twK7AuBEXqbAQfzpCsS+BBD/rQrsC0C4vdJLFDiM38u+BBD//QrsTmE06XGU/6rAcfzLP7U6m0L8tysQzmG5nQDxiaT/oEB96bc84bNZ152mJf77FejGk5h5Rs2Ui7jf7wiOVv5O1v9OOg0ymNgR/+0KdI1vtznFaH5/l5GTjZ8rxD+eCGw64r9dAWm6wjWCEE/zy77A6b6/KcUfbn7eCPF/QIGueJmoaX7XGrrS9inGP/yFxP8lraHf32vop3f1ZN+vSgHiN60A8ZtWgPiNK0D8thUgftsKTA+wIH67ChC/WQWGJCNC/BYVCD38EX9qAPErVGC8htO1wzLwzADiV6mAtE0XnmPbDD8c3+KJ+FUqcE0A4lerQBBgelx3VQDiV6zAuQDEr1qBQYD0lM6iAMSvXIFjAYhfvQJHAhC/AQXqAhC/CQVqAhC/EQXKAhC/GQVKAhC/IQX2fQDiN6XAVgDiN6bA+loA8ZtTYHcxiPhtKbA5D0D81hRYnwgifotVYD4TSPxWq8B811niN6sA8VufCIjftgLEb1wB4jeuAGMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYJP/Ae7J/EdcXmjRAAAAAElFTkSuQmCC"},{ name : "R_png_Panel_180_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQyNkAAZLSRAJGeVwAAhgDjqBQAAAD///9AM0cyNkApQjJFNi4AAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNKNCaEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXGSMuM0dLU2Bpc3qHlJSltK3D1Mfh9eEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdHyE7P0NZX2V3f4eVn6m4v8Xb3+L///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzhAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAAqhJREFUeNrt2tFRwzAURUFaSyRZrwz6rwLLTkIykC/4u7slcE9sycPHBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPyTzwd/i8j9q+apFJC4/1bbjQAi929TAMn79xVAb60LIHP/FcDcGxhdAJH7rwBqVG1NAJH7H0+AGmN6AsRd+4/9jzPA3K+CzgAh+68b/3nq748A3AKSAhg3TQCpAbQ1vwBST34CCA/gnN8rQAAC8AoQgAAE4BUgAAEIwCtAAALw58kIwKdgAQhAAAIQgAAEIAABCEAAAhCAAAQgAAEgAASAABAAAkAACAABIAAEgAAQAAJAAAgAASAABIAAEAACQAAIAAEgAASAABAAAkAACAABIAAEgAAQAAJAAAgAASAABIAAEAACQAAIAAEgAASAABAAAkAACAABIAAEgAAQAH8OoLfWBZAbwNwbGF0AsQHUqNqaAHKfADXG9AQIPgPMqukM4BYggMgASgDhAdQ8CSAygK3fbQIIDOB7fwEkBvC0vwBSAjjnPgJ43l8AGQHM0dfv/wjgZX8BxARwfwK87i+AlADuZ4Cn8/9JABEBzHn79vf0279cLtdrF0BEAP2nbe3fBBAcwL5/GwKIuAb+FsDavwsgN4C27y+A4AAOUwCpAfgOIAABCEAAAiDzO8DJITAigHobgH8JAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgDe+AIKolanh0X2CAAAAAElFTkSuQmCC"},{ name : "R_png_Corner_090_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQPUFcAZLSRAJGeVwAAhgDjqBQAAAD///8AAAAAAAAAAAAAAAAAAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNYOSeEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzerUAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAA7VJREFUeNrt3FFy2jAARdFsLbZksYzsfxWVbQzIyIR8FUvn/KRDoumM3w0USPr1BQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABw6CdzFTqeP6XLRQIdzz9lEuh6fgl0P/8sJQl0PL8Eup9fAp3OHzMJdDv/MMxPAyXQ8fzrcwAJdDy/BLqfXwLdzy+B7ueXQPfzrwmEIIFu53cv0P38Euh+fgl0Nv8lk0DH88cwjBLoeP4Qh0ECHc8f4zCOEuh3/iUACbQ8/zJsGMdQnT/GcbVP4HpCAi3MP823xVCb/xbALoH7iTIBPz56wvnzbDH/aazN/xBAkcDuhATOOf94HTTlCVOozV8E8JBAcSIWCfhVko8N4OFFnXX+2XJbHi1V598FcE/gfiLGUCaQ/xoBfGQA0/YdP8+fbpve7tYr8z8FUD4QXNavycduPzuYPyYBfGwA89zl/FsC9fkrAdwS2Oa/J3C9TQAfGkDc5k5Pmx7NXw3gmkD5ddu9QP44CeCjA6hKsb7/0Zkh/xswPiWwViSAZgLIT/bfDyBudyIC+NAAwssAqvN/Z+8HsJ0TQAsBLPPPn6omMITjAKIAzh/ANn8I9QSGMAmg3QC2+ZfH9WoCAmg4gPv8UzxKQADNPQuozL/9gnglAQE0GsBu/uVt31oCAmgkgKkI4Gn++YWgagLD+vAggDMFMFUC2F7rS/X518/WEtgCSAI4dwDf38vIqT7/9lLwcwLr8ikJ4EQqAYRhWBJI9fnv7wXsEghzAPmrxtojgSt9ngRyAEsCqT7/45tBuwTmb/75VvOfOoH5Fz+WBOrzlyeKBC5rG5P5T53A9PDPwer8xwmMlQBc3bMlkMLqxfwHCVwl8587gbQm8HL+4wReneA0Caz/HehvY+4TWJ4FmL+RBIof8fz9xJyA+RtK4J35ixNhupi/pQQu7455e9KQzN9SAun9McsAXME2Ekh/GfP+ZpCr10oC6W9jrgG4cu0kkP56Ik6uGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/9U/21xIH0TGhZ4AAAAASUVORK5CYII"},{ name : "R_fonts_exo2_light_30_png", data : ""},{ name : "R_png_Wall_180_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQPUFcAZLSRAJGeVwAAhgDjqBQAAAD///8AAAAAAAAAAAAAAAAAAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNYOSeEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzerUAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAA3tJREFUeNrt29tR40AURVFy68e9YSj/KJBlwDYzUzW/cNYKoc8uIdHw9gYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/UG9nEGyO3lsCOY56mXveA5BAVABfc8/5FYAEogK45p7zJQAJRAWw1vgIoD7373I8MQGsvwVwOJ6UAJYAogNYAogOYAkgOoAlgOQAPvcXgAAEIAABCEAAAhCAAAQgAAEIAAEgAASAABAAAkAACAAB8IsDmGNMAeQGULe/E5wCiA2gV/ceAsh9AvRa5QkQ/A5Q3eUdwFeAACIDaAGEB9B1J4DIAPbx4HjyAtiHJ0ByAPvY3gGCAzj39xUQFkA9BXDu7y4gOIDb/u4CcgO49ncXEBdA1cdP/Wt/dwFpATxsdwHZTwB3AfFfAQIQgADSAnAdLAABCEAAAhCAAAQgAAEIQAACEIAABCAAAQgAASAABIAAEAACQAAIAAEgAASAABAAAkAACAABIAAEgAAQAAJAAAgAASAABIAAEAACQAAIAAEgAASAABAAAkAACAABIAAEgAAQAAJAAAgAASAABIAAEAACQAAIAAEgAASAABAAAkAACAABIAAEgAD47wDmGFMAuQHU2cCaAogNoFf3HgLIfQL0WuUJEPwOUN3lHcBXgAAiA2gBhAfQdSeAyAD28eB48gLYhydAcgD72N4BggM49/cVEBZAPQVw7u8uIDiA2/7uAnIDuPZ3FxAXQNXHT/1rf3cBaQE8bHcB2U8AdwHxXwECEIAA0gJwHSwAAQhAAAIQgAAEIAABCEAAAhCAAAQgAAEIAAEgAASAABAAAkAACAAB8MsD8O/h0QFUjRJAbADn/GNsAYQGcM0vgNgA7vOPsQSQGMAaQwDBAewhgOQAnvYXQGAAz/sLIC+Al/0FEBfA6/4CSAvg2/4CyAqgvu/vF0FJAew/5j8DcDoJAdQ/5h/OJiUA82cHYP7wdwDzC8D8wQEs8wvA/AIwf3wAziI6ACcRHYBziP4MdArRATgDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPgp3gE41c/OWwQgLQAAAABJRU5ErkJggg"},{ name : "R_fonts_kreon_30_fnt", data : ""},{ name : "R_fonts_digitaldisco_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAMU0lEQVR4Xu3cUY5kVxEEUJbAulgPEp+ILy+FZQ5+aBLnBJnv3aouWxifI42oiIxbf9PTkiX+9CcA4I/r23db3+XmkrfMvZt2vcvbU/dOf6nbdO+3u/ur/c39Lz//+cfPf/7+/c9fc3NpX/Fveb+cbEpuL7m55OaSm/K0e/V+2TZP/at561Jt+m7qUt+8srvkpvzWu7yXvPc3U5956zOfdpm3PvPWV57kpvKrtvfV91vmzbSbunS3qdvd5vK0e7W/1O3k3k2b3m36d5TcXF65d0+7vJenXfaZfzAdq5tMu95Nfea7furKdJu6u/5St7z3vps2vdv66rp+/775289//tzyT/3+vRu9uim56d7Zbduv3su0693Uv5q3rqv7k9N3p7vL6fbX3OWt5L2/mfrMW5/5tKt82lXe+sqT3FR+1fS+urxl3ky7qUvbpvr0zm7qep+33pd+3zaXadO7Tf+O8rTJ+yU35dXN6S67zLdqnA+mPvPWZ77rp65Mt7uu6/e+yXzaVb7rq8u++/bwC8D0HXfdlrPP29Rnftr1rnv3PvWZt/7VvHWlbnXveeq2d690W//prve922zb0z7z1md+p0vTpnd3fZnuvavPuelyk/u8d72/201ym/mp6/2nut73W+bqMk+2+9RP3V1f6n63mUxvssvcu2k3dZVv5Thzl7fMW5/5rp+6Mt2yq5z6m77b8tZnPu37PT4f/QLQu6mvnPqbvsv+kv22zT5z+so9b5U3uZtyfe733KTpdtJl3vrMXd4yb33mu766rt+77f5Kn13mr3a9f7qf9pe65b33qe9Ot5m7vk/Tbuvq893mrpv6zFtfOfu77d2mq9u0Oe16f3ovuevuNr2fNtvb7DPfynHmLm+Ztz7zXT91ZbplV5+zT3nPvPWZ7/rqNt83R78AbE520/f1brNts6/cTftuuvdu079jkrvMXd1yk/1lup10mbc+c5e3zFuf+bTvcnPZbq/02WX+aldObv0+dd12m959qut93k66yrkr/d43T93UZ976zN3d7VL3bdPvJW/Tvne9757upe/K3b3fum1z0m35B3nM3OUt89Zn3vrMk9xsuatbl7dp/xt1H/0FYHubXd9ttm32lbtp3033qctb5q3fcqr79Kabbidd5q3P3OWt8qe6yd3uE312mb/albvbpe4pd5d3btln3vrK2U/brc/cuzRtpq73n+gqdye37Z5yO73PPLl799Tlbev7beqyT7nZ8g/ymLnLW+atz3zXT12Zbndd1+99M3WTV3eZt/7b4S8AvZv6zFufuct+22afOX3lnrfMW3+ap65yN91Ousxbn7nLW+XJ9G4y7Xr3W/ZP93e63m/3crI7vT/1mbc+c7fdss88dZWnrnLuUt+dbjN32636u9tJX92k71JuMv/Wfcp7z/X5v0zj7LY+89Znvuunrky3qcv+6T71dXt3l3nrv/2KvwBUN+16t/WZn3a96+5ul+391Gfe+qc8dZVz12+vdpm3vnJup77n6Z67yba76/K29f02ddPt6Z556ra3Xd90n7r3zSe6yt12yz7zaZc5u/qcmy43uc/cTbfqsi/TfeqmW5f3zO90edv6fpu6yeluNT3uX5qmXe+mPvNdP3VlumVXOU1vsk9f2b3QffQXgEl/98o2b13fbdu89X3q79K0693UP+WnLm+ZT7vMd311k2nXu8m0q+6u7/qmnNxS7srp/cn25q7rTm6Tk13fnO6mrmy37CtPXeWpqzx1lV+V7ytnf7LtpnepbybTrr/v+uaV3eXklnJX7nZTt9rG1Xfb5qnPfNdPXZlu2VXupn32Xd98ZZf39H3zq/4C0N90ubucbC65K9su86a/LdvmqX/KW9f7fst82mU+7bttk33adk/9di+n96fd5ZVN301d3k77y8lt8rTNe3nabf1lu019dplPu8yvmt5Xt/WZJ/3dtM37ZNv275nu5dVd9qV/x93ucrfb+tHJuDa5m7qpz3zXT12ZblP3Tt/V5hO7vqldfL5+Afjp2y//T4D//PEbAODD6h+iS97Stss+c++mXe/y9tS90wPAH55/JAEAAAAA4P9a/aeAp/8k8Opu67ttk/1luk1dl/fM2W/3crI72VymzdSlvvn0buvLdO/d1Gfe+synXeapqzzp7ya5y7zZdk992nbZl+3e+9xknrrMU3ean/pUO+CD8i9aeXd3mW79TZp2vat+umdOec/cu9Q3p7u8lb6526XTd5/abX2Z3vZu6jNvfebTrnJ1mbNLtUnbbuvTdn/q0+l92ky3/Nzz1D3lSW4yP/WpdsCHTH/BvtLlLXNupz5z7/O+bS9120y7d7vM1WU+2U3d9u7X6KZb2TYnfXaZP9V1/d49bfp921xOdyX3JXd3nt7e3Xv3dN9yfd7uuQH+R+Vf2MpbXzm3U//Ulek2dVOfuavbJnf97dRnnvRNfZ7eTP1Jl3nrM2995lT3brr3buuzy/zVrvfTrds2/f1035y+y13J3SbflbxvGeA/+g+I+tzlvtxtpj67yt3dfvLOJvPWTX3mSW263uful5dnXeatz7z1me/U9uT9U/90f6fr/XQrd5t+m+6b7V3m0z5tu+wBjvUfMqX3ub/kNk237Cp3d/vJO5vMvZt2p13m3mee3p12mbe+8mlX+c7d+6duuj3dM0/d9rb0e27y1vXd3fZp926fcgfwZdsPmszd3e0y3bOrnLtyd7vkPXPvNqfbk927m1e7zHd9dWna9K70N927u3J6f7K9mXJ26Zdv+tG223qA343ph9jUndrevfOdd/t+6//b95U3tXvaP+3yfnnaTP1Jl/m0f7pnf+nvSm7K6e7yyqbvpi5vd13lSX83yV1mgN+l+mGWclfu7ie3lLuy3bOvz1N/lwHgD6/+cTz5R/Juc3e71L3LTdnufn38BjJEQOKA5dt0AAAAASUVORK5CYII"},{ name : "R_ui_atlas2", data : ""},{ name : "R_png_Ground_03_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQyNkAAZLSRAJGeVwAAhgDjqBQAAAD///9AM0cyNkApQjJFNi4AAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNKNCaEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApKSk/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzfXAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAB+VJREFUeNrt3c1y4jgUgNEuLyn8kOYNeP9NpzKTTgj+kYywdK1zFl01KQ8L3y8GDFL+/AEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoGG3yTnoefy323S7OQ/9jv8zAAn0O/7/A5BAr+P/F4AE+hz/jwAk0OP4HwKQQH/j/xWABHob//0jgLsEeh3/zBVAAn2N/zZNMwVIoJ/xf/0jgV7Hf5dAz+Of/Q8J9DZ+CZzZlDJ+CZz4tz/tl33xsuAcxr/4bz/dr74wcB7jP/evv+DffGvgXMZ/6bf8lj/p5oDzGf+V/5Q0/sUjndPgb/xmb/vfco50XkOPf+aDv1vukc5t2PGXuAJIIPT4ywQggbDjLxWABIKOv1wAEgg5/pIBSCDg+MsGIIFw4y8dgASCjb98ABJoQvmx5hzp/Ff/7a8bwCSB2hf/2gG4ClR+7q8fgASqvvRrIQAJVHzl30YAEqj2xq+VACRQ6X1/OwFIoMptn5YCkECFu35tBSCBw2/6thaABA4df4lv+pU/0qwOGn+bVwAJHDj+V7/t/74jzeyY8b+03uflI6/XqwQqj3//ir+Xj/wY/10Cdce/f83vy0dev0ngbfLW8h945PXR8pFm+OJv//TaFh/v+eH12fL/bo4vXvxr/7KnjH82gcmHxYWe+2s/3aeM/ymBySeFBV/61X7B/+/I67rlxzTTV+/5V37LnzL+fwnYcewtN31r3/S7pll+TLN95X1/9dv+11STdQTvGH/1D/4+b/ttu19XH9OM943/JFcACewf/2kCkMC+8Z8oAAnsGf+pApBA/vhPFoAEcsd/ugAkIAAEgAAEIAABCEAAAhCAAAQgAAEIQAACEIAABCAAAQiggwDa2+Ljjd8J/PmYZu8KQPqG7/HXBQhg/gpQe71P+pEvrQx6fkyz/3oKqL3iL/3I3WsD5x7T7L9fA9Re85t+5K7VwfOPafY/XwQ2uxnI0w+y9wdYekyzf3wX0ORmILM/zNohZPmHZv/7bWBzv+yLRybvEbT2mGb/fB+gqaf71SOTdglbf0yzn7sR1MwL/s0jN/cJ3HpMs5+/E9jEW/6kI1PGv/KYZr90K7jZHYDLHmn2i58FtLkHeOkjzX4hgDb/CkD5I83eFQABCEAAAhCAAAQgAAEIQAACEIAABCAAAQhAAAIQgAAEIAABCEAAAhCAAAQgAAEIQABnD8B3Al0BXAG6DsC6gK4DyFmbM45jnA1GBJASQM7qvI/x31MSaHS9odk/B5CzPnf8FmeDEQGsBZCzQn98FGeDEQEsBZCzycb4LM4GIwKYCyDnl2icF2eDEQH8DiDnaXRcFmeDEQH8DCDnhfS4Ls4GIwL4CiDnrfS4Lc4GI2b/KeNm2pgmyu1Bs1/8LGD+zI6pgnxAYPb/BZD8gdrnbb9t9zHIR4Rm7wqAAAQgAAEIQAACEIAABCAAAQhAAAIQgAAEIAABCEAAAhCAAAQgAAEIQAACEIAABCCAkwXgO4GuAK4AHbMuoPcrwMlWBg3DYGVQ5lPAidYGfoz/npKAtYGPrwFOsjp4+GZ1cOaLwBPsDzA8sj9A5ruA4DuEDM/sEJL5NjDwHkHDPHsEZd4HCLpL2LDMLmGZN4IC7hM4rLNPYOadwGA7hQ7b7BSaeSs40A7AQxp7Bed9FhBmD/Ahld3CMwII9FcAPm/7bbsP/l6AK4AABCAAAQhAAAIQgAAEIAABIAAEIAABCEAAAhCAAAQgAAEIQAACEIAABCAAAQhAAD0G4DuBrgCuAF0HYF1A1wHkrM25XC5WBp0rgJzVeR/jv6ckYG1gmABy1udevlkdfI4AclboXx7ZHyB+ADnbcVye2SEkdgA5v26XefYIihtAzhPuZZldwmIGkPOS+7LOPoHxAsh5033ZZqfQYDJuu13S2Cs4/GcB82f2kspu4aECSP7o7fO237b7xd8LcAVwBRCAAAQgAAEIQAACEIAABCAAAQhAAAIQgAAEIAABCEAAAhCAAAQgAAEIQAACEIAAGk/gZAGYe14CJ/tOoJnnJ3CiK4B570jgPOsCzHpHAnFWBm0dac47EoizNnDrSDPekUCc1cFbR5rvjgTi7A+w9QOz3ZFAnB1Ctn5orjsSiLNH0NaRZrojgTi7hG0daZ47xNkncOtIs3zX3cEmdgp1169uAo1vBmKG775B3PRtf/N7cwJt/2UBszviM4JmrwDmdkgCrQZgZkd9TNRkAOZ1WAItBmBWBybQXgDmdGgCrQVgRgcn0FYA5nN4Ai0FYDYVEmgnAHOpkkArAZhJpQTaCMA8qiXQQgBmUTGB+gGYQ9UEagdgBpXVDcD5b/QG8TEBOPehEigdgPMeLIGyATjn4RIoGYDzHS6Bkt8JdK5DJlDqCuA8x0yg0Lf9neOYCRRa7+P8xkyg0Io/5zZmAoXW/DqvMRMotOrfOY2ZQKEtPpzPmAkU2uLDuQyqzBYfzuNJbw2lvTVwDs+egPH3nYDx952Am75dJ7DywZ9z1kcC7vl3nsBk/H0n4COfzhOYjL/vBHzi13kCk/H3nYAPfDtPYDL+vhPweX/nCUzG33cCvu7ReQL+mgcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALTrLwYOX6ClM0SuAAAAAElFTkSuQmCC"},{ name : "R_fonts_m3x6_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAHVUlEQVR4Xu3cQWokRxAF0DmCz+XzGLw0Xs1RfMy2GiZw8InMrJJkD269B6Ly/4isZmTM9Gq+fQMAvp7H4/Hr28+fbz9//Pj5bdh5ZD51la/s9Wf2ea6c89ypfjqvuszV5Xveu1fdqt91dc5u2pu6/sxz77pp1rupr3zqep85u/48dVPe7WdXcm8yzU5378zvdM98tevPOq92P7LXd6Y+z9Odp+xrd+p7LtVP86l7mt6/6rPr+bS76690db7aTXm1X3KvuzNfdVMuuXO1W+XqVndq1ruX9vbn/P3t55eWv/d5ql9M/wX9W113Zz7lqZvy9DlXu+7u3tUuZ5nL9LlT1+XetP/ZXcp+d3fX7WarLmd1Xu1kP+Xsuml2pdu9d+p7V+ep66auTHc/0nWnLs+Z69y71Gf9OZn2u+kd2e1mp67bddPdXbebdVNXptnUPe36krOUO5V7P52zy/d8aY8LXwDyF/hfdd2d+ZSn7so7y6mrc3a5l7urrufqru4+9f7qveryebfr+dRN/ZR7f6VbvSfzqs/c+6nb5enulXnlkn3PJd817WWfedWV7Fe597uuy26V85nzqdvNJs9Zn0+7tTPt5fM9XffsSu/682rXZ1NedeXOLHPK+TOX3MldPujxgl8ApnlZ7T3PJedXu+7u3tRNd3M/czndne7l3rR/teumvZyd8vQZu271nrvd9L5VV057/dxzzj+je5r6U1fn3FvlqT+9b7rT89T195RpPnU5y77Pd1236/L5nm4y7d3tdrM8r7rMU5d51fGTPD7pC0DJrvJqr/c993l2p/mUpy5zdnW+2nV396Zuupv7mcvp7nQv96b9q1037eXslKfP2HW7Wfar3LuPvG+6e2V+p8vcTbNTV+fcW+Xss9vtrUy7U5fyc9Nqr86Vp/3set/z9Nx1Pee8d9lXN/U99y5nU1/vzK7OUzfNy27GT/R4xxeA1X/M3Ouzbpqd7t6ZT3nq8p2r+bR3tau82+s71a32spv2eq6uP+ucu6t7/Zzd7k52p7vVZ552M/cuZ6e+53K3q37KeTfPq3u7XK50lbsre1M/5Y90d3Kpd5VpPuXsq9vN4aU9bn4BmLr+P9E0T6e71U/nyjnPneqn86rLDAAv63H4AuAvRQB4QacvAADAC/IFAAC+oB9fAL4//vmXAP/KHQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4P/sbwJechzpUIpwAAAAASUVORK5CYII"},{ name : "R_fonts_exo2_light_301_png", data : ""},{ name : "R_fx_atlas2", data : "ZngtMC5wbmcNCnNpemU6IDMsIDUNCmZvcm1hdDogUkdCQTg4ODgNCmZpbHRlcjogTGluZWFyLExpbmVhcg0KcmVwZWF0OiBub25lDQptaXNzaWxlL3BhcnRpY2xlDQogIHJvdGF0ZTogZmFsc2UNCiAgeHk6IDAsIDINCiAgc2l6ZTogMywgMw0KICBvcmlnOiAzLCAzDQogIG9mZnNldDogMCwgMA0KICBpbmRleDogMQ0KbWlzc2lsZS9wYXJ0aWNsZQ0KICByb3RhdGU6IGZhbHNlDQogIHh5OiAxLCAwDQogIHNpemU6IDIsIDINCiAgb3JpZzogMiwgMg0KICBvZmZzZXQ6IDAsIDANCiAgaW5kZXg6IDINCm1pc3NpbGUvcGFydGljbGUNCiAgcm90YXRlOiBmYWxzZQ0KICB4eTogMCwgMA0KICBzaXplOiAxLCAxDQogIG9yaWc6IDEsIDENCiAgb2Zmc2V0OiAwLCAwDQogIGluZGV4OiAzDQo"},{ name : "R_crew2_atlas2", data : ""},{ name : "R_fonts_digitaldisco_0_png", data : "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAOJElEQVR4nO3d627bvLqFUbn47v+Ws39sOIth3iNJ2W7nM4CisUhR1GmKVNL08fX1dQ2eHx7XT+PyrM6VlD+MZd461TrPel7ZXCeqm7Uz98frl3ec5rJqvawNr060n1bb0TZX2z/Zv0qdzvFdab9SVj2u1ftibHP+utLu2OZ33T/Xb5UTP7NuCu9G2VlnpR9zWTUouu1bVo5lpQ3vYpjrjH9X2u0Yw9Qrm7+urt/p3+p+ZMcnaz8Lrk4fVn0lX1s3/w+PaQSw24kwbTbXeTfrQGVPmL9R9+lZCVRvOyvrR0/MTz0H1VHs6e2l99Z/RuW5geoBn7+eT2x1ndmpacLJ6Uamu61XllfP5/xEmbdRmUpF/ZvrrKwfrbd6Pa8cn2h5ZySctb8afmM/fpwzawpwyomUqwTCK+tUrGzr1Z+ronlpNIT+lP7fpTtF9B56p6aaGbe9OwPg5PzmcdkH7pV1Kla29eryqsf09yi6QT+l/3fxznH1Gsquuaidbv9mv9o6GQDZTlbXmXnp+eo6nZPR2da7yjPeOazeoHf3v3qN3anyBK9cNydHAtG2frX331QYzVm88nl+UenMyjqfojKvq+iE4x3lFdE8fLxBT02VKuXetfOp180njFzcc/TnyodZlWGYdfCzE1JdpzJKeGWdiurIJno63F2ePUGzUczuE3in/+Nyr07Wv93y57Y7y72ylXa6zLb+GIVZBytDts5Qufpm1Sp7ZZ2KU+3cqXK8x2Xek39e/1Nk+3e6/KuwPLunKu3scNsZ3wE8O5o9sVaGbtk6nQSMLsi761ScaudOlX3vrP9psv07/Tlb7rnryf9cPw2P+QeBsidCpTxa79MvHECK912Alfl7ttwb2ljDky9n+SyqU10/WzfbxkrfTm4/60O2fe/YV7Zz6vx4bVf3L+pv1Pfq+dtpv3ptz8u69Vba+hUA2fw9e6k0H5Sso147HavDqMpLnp31795+dzur62ftrrQ/jhStUaN1QUfbPzVVG9uO+pep9N8r927oVWFbj6//zQGslx/WXOIRlK98zraF16pcD6/Y/nN7f9v1kN0r12Vf/xZr/7N7y2vf7Mt/Q8GYdPMyryPVdOy+SZ/TPdpJr/13lXdOyEr5bv+q5ZnV/a9uf74Wq9v/lHLruwYR74auvHivMNvY+UnAbLpgdWBlCpCd/E/8fLdX9D8a4u/u/93bf/fncVn1un+l7/7sBMDOjnnhEaVqNkWwLpjdcsu7T2anfyv77z2lq+1n7t7+yfN7x/F7F+tF/K3/GCiShUdl+JTV2S2f/W3BsLP/D+frTvuZu7e/e35PHb9OHzrme6gacD/MAfDui/ipsjNZnd3yXe/u32771rufk+1n3r39E8dv/Hteb1X23Quv3hwYj+uyvw34TtHwKRtiWQd8t9zqW6f83f2zLrbOELXTv6z9Uy8ad/fv7vM3s57SUf2KeYTUHXF8l79rChCp7ExWh8+x7sW32/7ug+X0/r3yeFemOJUbOlv2SOqZ5c8fBY6ero/C56xuVN+qC+Cnr8ufTqxOC378PoAdzxt57qTV6bkjnRvfe1Fzdx0vqE5sKyqvBPPcRmVfquWdIH9VeWZl/U89fh2V6/PX/fin2InKi4txeGENN6zhydfwZ142qyy7q85d/am2G+n2fWVfd939wnXH33D8rqv+lO+89/j+hSAr8wtrvbETlRu7mnJzwlphdVedy/hcaWdeLxs5ZG1YsidPVm714eRUrDNKyXgPhqwsqrN7/KpP/rn+ytM927+V6+fHS8D5pv1KlkWdW72IsgNkTR2iFzKddqw6Wbp3pzJZnU6gWutl+5s9RbpPr8oFHp2fqugJlz39KnV2j19Uvrv/1dF3te0f7f2xFgYbPX1j7w6Xdp5W2U21sp3xCVqZ1nyC0+ck2kYUcNm2u6O1yvrV7e9MYeZ1o2lfZYQSjWS6x+/HfwzyrNQ5qKtDmqhT3Rc+J4esc9tXsf1TIyDP0vCusE40VD35pPLafVz2xes9Na1R2Ylyb/te/6J1V1XaqPahfO7mXwl2BZ+7nk/D1Rt7/Hte3q1jtf8w/nj9rN5AI+t9SWWe+grdp350E2TXTWUa9TC+rm6/Up6pTlmqU8ruveNto/oOpdJHc/3514KnKwxf79zY3nqV+bj3tN2pUxkedrfltWHVedUIYn4SZ8ej84S2Rg3e6LI6wjjVv4ponRPvdzrre6OkaDudaeq3Uz8JmCVwdQ4YLVt9wbI6ssnW6wRYp85dUxqv7e5+7txcJ27MO/p3p8oIp9qGta9ZcIXbtn4jUDVJxxR/fj0nuzVKiJ4U1vJPO6HAJ/Du28r9970s+0nA6jDZW+bVsV4GWVamF6050KFyb7SSjYjGOtkyS7Tuc7k3b8/m89m595YtXYjDsvmhsrLNnc/VfbmMspU62cNwd2oTOvmjwNeV73hnChCd/Mr6Ubk3UlktXzW/sFwJvGzZiuxl2ytZx2i+Jp7LrPN28qbxRq+VEW507Vv3j3d+T75r+P6dgG6FSiPFde9Ksu6Tex6F7JZfU7n3OUr2sU51ejRvwzsOXpB6AVcZ9d1x/uY5avTeIFvmjXC89Sv7441Ixqlvpc5YNrcf9bf7ArXS/sP6hSBR+lfKrXasJ+iPjly1KUG1j5bogsq2WVn/uf0u8+VMIjq2qzdn9abIAiqb/mSsc2hdT9Hn7jY662dP6axOFMTPz9UgfLZnbc+7x8Y/7ncBujdwpPJEidZZESVsFD7RUy4LwGjbVpvedq22ulOD1fNTaafbfmYlALE+2v5x/uZ/C5BtwBtiV1IxG5ZZ7XZVXzx12qnWj4bU1bCrpvy8bXyWaDQ7h/5OmHoPFG/bvzxfAmbzUWsufIo1B6zMkTpzoWoIRO1lc+bqFGKUHdPo5VC1r6sqUwCvL696KXc3671C9IJvrBPtd/dhWO2j9TmsP/4+gGjlOa2yF05WW9mFWxmiWzovqjrlXVbb1kjA28/Veaw30jk5TN8VBXA01ciWdaemK/Xn8/o1/YnCz6sz13/+XXmiVwN0vtasr81/C+DduHOZdSFnUwEr+ao3cPSicCsFN7WHXTf65Kfr6kvGyrrd871znH69SNusM6vcuHPARA+XMOTGnwR8dmrn86/2g05Ug2a28mIMOKF67Y9l47TAG63N94n12fra23bZ+H8DjhscG8rKL6NeVOZ1cmU+b4le/kV9rK4/L7P6Fo1y5vIoJJ/l0YVR6WN3WXbheRdhp83qRZ0d82y70XKvj1afHsayVfO0IJsmjH0Y/972nAJ0h1grHciGRBFrnjgPe0602Vl3pcwqX5n3d7c51psvdmuZt+4JlZvYqp+tNx+bbBgcPXmzPs3z9up1nYVS9B7glhHv+KPAq/PmaC4eqQz5vZNu3UTdEYR1AzzLx5c30VPCajdanj1h5nrWKGyuXxlNdI7P3Jf5iZ1dkN62o304oTLK3OVdM9Y2u1+/xfz/AlzX3jC2Wr7zTqD6TqIzLJy30xned9avvL+I6nT2Las/Lq9MAUY7UwCrjRNTgMoxz6ZSlWPzT5l/JdhlfB6XV58wUXl3iFwZhkVDvMoowhr6eeWVeWC2r93RxVyWPdGj4589uTyn5r+V8IjW7ZZFT9zKkP+fvPGfHj+/CRCm9B2ff/XH6Ut3GN15gmc3UmX0Ut12VN59us1lK9uIlv3TFz7+nzUCGFVu1izRV58c43rjRW4tj9Yd+2L174TOk2lnrlodRVWeht1l+AfNvxGoM4/KPnfmg3P9WecpB6Ao+qWg3nLvCdx9knXW5SkF3OD5X4ONHsaya1pWeXmSeVz+tgC8wPwSEICQ6CWgNff33hpn/unvpQJ/q5VfCro63AfwYZgCAMJO/c9AAP5CBAAgjAAAhBEAgDACABBGAADCCABAGAEACCMAAGEEACCMAACEEQCAMAIAEEYAAMIIAEAYAQAIIwAAYQQAIIwAAIQRAIAwAgAQRgAAwggAQBgBAAgjAABhBAAgjAAAhBEAgDACABBGAADCCABAGAEACCMAAGEEACCMAACEEQCAMAIAEEYAAMIIAEAYAQAIIwAAYQQAIIwAAIQRAIAwAgAQRgAAwggAQBgBAAgjAABhBAAgjAAAhBEAgDACABBGAADCCABAGAEACCMAAGEEACCMAACEEQCAMAIAEEYAAMIIAEAYAQAIIwAAYQQAIIwAAIQRAIAwAgAQRgAAwggAQBgBAAgjAABhBAAgjAAAhBEAgDACABBGAADCCABAGAEACCMAAGEEACCMAACEEQCAMAIAEEYAAMIIAEAYAQAIIwAAYQQAIIwAAIQRAIAwAgAQRgAAwggAQBgBAAgjAABhBAAgjAAAhBEAgDACABBGAADCCABAGAEACCMAAGEEACCMAACEEQCAMAIAEEYAAMIIAEAYAQAIIwAAYQQAIIwAAIQRAIAwAgAQRgAAwggAQBgBAAgjAABhBAAgjAAAhBEAgDACABBGAADCCABAGAEACCMAAGEEACCMAACEEQCAMAIAEEYAAMIIAEAYAQAIIwAAYQQAIIwAAIQRAIAwAgAQRgAAwggAQBgBAAgjAABhBAAgjAAAhBEAgDACABBGAADCCABAGAEACCMAAGEEACCMAACEEQCAMAIAEEYAAMIIAEAYAQAIIwAAYQQAIIwAAIQRAIAwAgAQRgAAwggAQBgBAAgjAABhBAAgjAAAhBEAgDACABBGAADCCABAGAEACCMAAGEEACCMAACEEQCAMAIAEEYAAMIIAEAYAQAIIwAAYQQAIIwAAIQRAIAwAgAQRgAAwggAQBgBAAgjAABhBAAgjAAAhBEAgDACABBGAADCCABA2P8BeaqPD6XNbdEAAAAASUVORK5CYII"},{ name : "R_fonts_digitaldisco_thin_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAALxklEQVR4Xu3cTY5kx5EE4D6CzjXnGUDLwax0FB2zp2MoB53WHvEis5LUD78PIJhuZu9lbVQqaKFv3wCAP7fvg9wsmfd76rLPTZm6vMuUT9lS75363u36zMque3jff/34539//PM///jnv3OztFf8v+yXm03J7fLOpjztXu2XaZNZ6d3u8y7LO/3y0/z8TGZd9a/ultyUP3qXfdc3/ZnuU7unbOqXm82Su51p/658x7vfkbu8J7tN/Qwl+/K0u82W03uW3ne56fdJvmfJzXLqlv5897TLvnxqt8tefWYOv+3zMvU9e+pPWZm626zLPu8py7ubuinrftR//fHPX9r9t97/I/vpHZnlvcuWm/xmc8q6d/vM8+52P/v0TGZ5d9O7pqz7SrZM+T8rK7tuly+9+8ruJnv17k7dkn3e7+jvmN43ZTdunps2n8zyLpk/3Tu5y/vkZnuzmeRzef8R2dO9y37jaZB9v7PL7Kk/ZWXqMlt317vS891meWd3yrrvD38AnJ5/+rlus8lp9/S93Vf77rTd/UzTM5nlXab8KZv6crtbbrfv7Kb7yW6/y5d3frZp92p26ianbsm+f0/XN9206/v+ObP+3Gm3u6fs6e5698qunDa9K7u8TP2ULVM+ZelmM8nn8p6yvLve7XYr3+12zyyn7lx++7l/+tJX+lNWpm76jmnXTc9M3tn1bMrL9w/+ATDp+9plNjntenfaLV/tu9N29zPlM3nvsmXKn7KpL7e75Xb7zm66n+z2u3zJLu8py/ud7NRNXu1Wtstvs57fbHr+lXvK8u5699XdLu92m5V32fW7TPlv3zL3N7u02zy9Z8pK76ZdZbvd9Ew5defy28/905e+0p+yMnXTd0y7bnpm8s4u7133/eIPgJO+68+VzPPeOe3ye1NuU/b9Psn3pL47PVNd32S2TPlTNvXldrfcbt/Z9azLvtv1u3zJLu8py/uVbHk1X3bdq/nSu1d2ZerTadffVXpfm9Pd9e6ru11envruE9+35GbdmVWeWTf1N1neXe9yt+tyN3ncPA2yf/oBXu2nTcpdPlN97rqe7zbLp3aVxe7xD4B+d0/fV2533Wn3yvve6VfW9bzvut1ueiazvMuUP2VTX253y+32nd3OabPrdvmSXd5Tlvcr2bLLl6mbsrLrdvnSu6/spqycns17yp7u7vRd3c1uly+nbvLV7+tu3rXsuimfspJd3pX1fPc57+zS1P+U/RSE7J9+gFf6U1am7il76qe7sszzrqzn02bJ/Ls/AK7703a32z3z6uY2m/pyu1tyO+0zu92d7Lav5svU9eypfzeburK6Lvvyie4ruykrp2fzLk/PZFb5bdbzabN8Kl+yy3uXTW5+9mXXTfmUlalbWZe7KcsuP6dT9xtPw+yffoBX+lNWpu4pe+p71r27659T7PwBcHD7Xbvd7plXN7fZ1Jfb3TJt17+7X9fn3TLtJrvu1XyZup499e9mU5dOm1O3nPrefWU3ZeX0bN7l5pn1765vumnX9/1zN+VTVl7tfvlpfpa71Den/dRN2bLLl1NXcrPuzErPd5vl1P1kN57ypx/glf6Ulal7yp76k3d2p2di97v+ATDlU7Z8+n3LqSu7TeZ5d7ufffdM5nm/m019yS7vknneO6dddnnvsvJqN2VldU99fp6yLrO806k/dWXavJvlvctK73KXd3nnmVec3l8yz3sybaZskru8v5otu3yZuimbTLvb7GPWy1Nulp5Pm1f6U1amLr8j9W1tMpt8ZbfLev79g38ATPq+y93y1C990+12p2e6fH6ZNpmV3u0+d1Oe37vbnLKpL1NX39lNm8wmp93U9e+c+u6mf+Vd72ymrPLMll2+7Lr6jsnTNvvytLvNSnb9zq5kfvPMK/Id656y7Cf9mWmb/c60vX3XK7vMutv3lKddf9e0m7Jy6q7sXtDzafNKf8rK1N1myy4vqy/ZdTe7vum7+vz9lz8A/vb91/8nwL//+jQA/IvY/RdZd+qn53NTpi7vMuVTBgAAAAAAjP8Tev3P8t20yWyZ9nmn7PMu9e6SfbnZ3WyWqZ+yrvrfY7fLS/b97nr3ld1TNvVLbnZ2z6Tc570zberZNG0y6//Ozzf3Llt++cb53fm52+WpdsCfRP4HP++Sed6Z7T5Pss/701neN1l9nrLuj8iWXd6dNr37yu4me7onN5tl7U7bmz6zJ/XOfHd97lnep67fu7w+Zw/wsvzF0rv0tJ36aZdy83R303eeTJtPZVNffs/dzmmTXd5Tlvc72dSl283NruS+7q7vn0zP1L3LT59vboCPyV8w0/3KL6zKTs90td3pu/5cd7srucm7TPlTNvXl07tl9Sn7fnfZ5T1leb+SLbu8u9ksa3e7XXb7XTbp/fQZ4N9G/vLa/WKrz6f95KlfcpP3LivTz3ly2p+6m2zqy6d3O7fPT93Ts1/Jll1e3ulXNuXlps8M4D9e/vLr9/T5tJ889Utu8t5lZfo5T2ozbZ/e9ZRNffn0buf2+al7evYT2dQtu7w7bVbX+7wBaPIX5HR3vas+s9K76fnKdvq29pktmec9ZXlPWd432dSX7PKesrxv5DN577Kyuqc+P09Zl9nTPbnZAHBh+oU6ZU92z1Te+9w+3Wn1k6dd9svT5p1s6svU1XeXqc+s5LMld8vNpry7mbLKM1t6Xs9O+jMAfMDul+su35n2Pdt9vrkBgA87/Zft6lJuytRltntHZnkf2P8BEReIUqDFts4AAAAASUVORK5CYII"},{ name : "R_png_Corner_210_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQPUFcAZLSRAJGeVwAAhgDjqBQAAAD///8AAAAAAAAAAAAAAAAAAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNYOSeEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzerUAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAAshJREFUeNrt3NmRwjAQRdGJTbIshUH+UYwNZjGLh9/pPicEvVtgQZV/fgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAv5xunEXK/cfoF0MBGfefx7wRQMr9axdA5v2nNYCp1kkAOfdfA+hLA20SQMr91wBGG2OuAki5//kTYLTWfQKku/af9z8/A/TlKugZIMn+643/8tQ/3QJwC8gUQNtUAQhAAAmf/AQgAAEIQAACEIAABCAAAQhAAAIQgAAEIADHIwAEgAAQAAJAAAgAASAAMgSggNQBzEMCuQOQQPoAJJA+AAmkC2DMswRSB/BagAQyBVBr7xJIG0CtpRQJpA2griSQNoC6eUng8tooCQQPoN7tE9heGyWB2AHUnccEttdGXb8IHFvEAFp9dk9ge23Uef4igKABtGXvTwlcXhu1zl9KF0CkAHprXyVwnV8AkQM4SmCbXwDRAngq4EMCt/lLmQUQKoD6VQJzEUDUAOo3CQggcgDLvvNxAg/7lyaASAFcr//HCQggfACHCTzuL4CoARwksAvAM0DYAD4lsNtfAJEDeJ/APgA/BIUO4E0C+/0FED2ApwR6LwKIXMCpHiXwMn/xd3CiBN7MvwTgyJIk8Hb+4rjSJNDNnzuBbv7cCTTz506gmT93As38uRNo5s+dQDN/7gSa+XMn0MyfO4Fm/uQJOAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4p34BeIauu0gyRpsAAAAASUVORK5CYII"},{ name : "R_ui_0_png", data : "iVBORw0KGgoAAAANSUhEUgAABSIAAAA8CAMAAABFEjRZAAAAQlBMVEUAAAAASn8Afw4UCgoUOHMoXbM8gvRAQEBQcFBeXl5zGgBzuf+Kioq2/wC4uL+/3//QFir19f//AAD/AG7/WQD/6wAT2VsYAAAAAXRSTlMAQObYZgAAAAlwSFlzAAALEwAACxMBAJqcGAAAFwdJREFUeNrtnYt6qzgOgL2LrUzrbGh30/d/1cV3A5J8S5rS4u8k04kxECJ+ZOsmhJjIJsTZu+mVeJ+ciJEitN/XC5ppIN6YJt6uTHsTimlCAdPU0HF/pNTRMjdJok2Tcpu4/0l/LR8rfIhKP+zBm55902qRQy8Vi7jaf3YDL7/xfbb/Mqm2XWD2Yf+aPt4/Pt6x14f5fYi+5WV67x/3+wf2uttevG95md6v+9fXHXt92V68b3mZXvoeMb2KunGVG4vfe2Esvl87lkfkjBwxCt5kfrNNm+t7NdO7XJVt+0q9d3PF1+1eO/YLabFXT0zTb1zv25XrvSrk5o5/KZBMg+W4F9PsiO1fb9cL064luSIfCq53JpqTK7LZXhL5E4dIEncOkfuLyCLS3jbr543YfamFGWqzmSVQgEoATGh+Y5V/BnFXcRON7a+vxXtl1lEqlmOC+WflVjtG2v+1b/Ns/vnO5foos4We3T4sIcn2MRV6dzdffhsWepGbM92khV6QuAQsf8FEUs5yboKJH0tJsuOrwsXV9uk9eyEycpqx83lIL3KdE+emuz1B+4vFvz4qx37dGYI+E5E0IcuIpAlZQmRBroCWK9tLq9QkmALQOKmzMoeckyohsnGM0Pbruy3dw2ihx0amYUGJ3vwCyqFHzW7j5UKoDJDKbZK4t2xn7hRYtD33mVbo/voR6ZXIGRIi3e/kCekYCZaaDpGmOR3SDVh+aU/aBeTTO9NKiPxgWhGgTCshUpGSbMRD009s7RGJj126NC3KuohIRPoiyVDM1fZqtve+/5ES56aPPSHfp4+6sV93hpFPRCRDyCIiGUIWEVmQK3r+sVwLTQNUT5TceGwBSVAFdgPsnEqIbB0j9JqQy2kt9Nh+14Ukux/Az0shKQYQCKnSF1FBhYz3p3aKpEb391BEQkSkf2o5REKOyNnRelFxYdEjky5a0iJ5gPIQ5AHKQ5AHqCIl2YgHcw/B0NgORC4XewqYw26uR/QimEucs4jcEnIKjCyM/bozjHwyIillvwaRBCGrEMnIBlBPXoBp0vQkvYzIgsSi51RAZPMYARtCyhZEKrul3ZNVfh0hw5EtptxnlqR+O7B6JFhVImjcYX/r2bdarTJ6BuKf8VqkwWNSI51imbTI5YTNn4s+9AsQSSkaNYjsHduDyMBIQreFh/Rihw3HJfWJirGa0sWfj0hyOaQCkRQhaxDJyYai8OIRyeiYQ4jEzqmEyPYxBpErQtYhUmuLNJ1dHSOalkEqHHjBrZ8/Gx0yk7PZITJbpQB7XLVRaQ0j9XrWD7NGP0MRGdciLR3jaqTTV9NaJI7IY060yamYKq779I/tQqRnJIUbeESvpDlHfl9VMVYrhpFPRSS9YFxGJEnISxmRnGzw02FN65hFRBYkFqVdBSLbxiyIXBOyCpHaIRIc+cxldPJjMAd2R5fr9SKtcmjNP3a72+fnzW5nptpg9xKbPS466UfWRWcIQIyf4YgMFm29N2pnFm18on1IRDIGzyqB6xvbh0jHSBI38IBeSXOO/r6qPJa2IkzPReTELAqWEEkTsoxIVjZeicg97cqIbBxj0bdW3cqIjEizSqS7jkGNdErk1RFycmYYp0R+2hbUSBSR6UTcLlfnAsZHC8y5zCpMseP5EYisari55pATbcbg2fNMrhzbiUhrs6Fx84BeSXOO/r7mCxXGasbu9VynH2ZRsOj0QxKyDpGkbLwQkQjtiohsHSNgQ8gKRFqiWaQlQjpGauH253XIS5i4m4t4c4i8mQtHIBJWhFx2uToX58dKIjLof/FEdb1TZbvTz89F5NTq+UU/X2vH9iJSWosniRuYB3rtniXNOeb7Wgs+O5b1DXi2RZvEUYVFm2g1iKRl43WIxGhXsGi3jxHQbNF2hGQR6Ql5TWubQYl0aiSJyHAizYjMXMeDR0GDoyXiOn7UiTZp8Gx/JleP7UZkETeDvdxx6e/rHKS6z/nZWiRFFOB6YeS4Bdl4GSLbI2W6omsaLNoOjZ6QPCIdIZsRGU/E7XKqR6QMdjOpc9t3WnBMK5DxXUWrudr7rh8UkbTBs/mZXD/2oIikvu+JyD0iOdl4KSLbImW6omvqLdqOZIGQ/ETbEbJ5oh1PpBmRkfQqOhvPudU6s2P7N2GimCbruQnm/BSsFi8P6xc5tXp+8c/XmrEHRiT1fU9ErhDJysYrEfkd0TX1Fu1Es4hIylzjCHmdGs01adLvzDVTvblGhW+QIzILoMm8IYX7zImU1T79IgIsFDbb2PfjIpKMguh6JteMPS4imUikE5EbRJLX6oWI/JbomgaL9oqQnNNP1CGnNqef3aRfVzv9qDAkQ2SKn8FiakAFz00ITj8GwoaQ18NOtNkoiK5ncs3YwyKS/r4nIreIZKJrXobIb4quabBo54TkXMch+o43uo5vVFpd7zquwkBUi0yR2SIplo6QJn4quI6DcJN5cWBE4tEDdYjsHXtURDIRIyciN4hko2te6Dr+HdE1LRbtjJA+YBAJQARIAYiyMQBxHeXeEICowjdA1yJTfh/hp9nOw8h++RyRIhDyqBNtinK90TVVY49q0WYiRk5ErhH5t6NrBmK0l6l2SmMR8pypdMmUJtNYwGPTWKiYqShHZLBow96oHbXdfKKda5GHdR1v9fzin69PjK75CYikIkZORG6cfv5ydI1aE1IR63/b66B0SHzmkqGFJGdOF3QaY54gbZsMjdhfNyJRizY7Atx6wNpcc/C1SJJy3c/kZ0bXvB6RpJfcicgdIv9sdI3a5nCjUuoi2yW365QqN3kcbpy3tyl1qf11I9KvE9Qicu/0o0Ru0T4qInHKdT+Tnxpd82pE0hEjJyK3iPy70TW/pMmQYGntOl7SIxnX8YNOtLuja+Bp0TV8Siu+l4WR5G5OWZEfk745n4RIxSLywqLqwiJSsoiUMHLcZ0bXyJ8fXXPA9t9tS+VqIFQz8fl99DbNT4q1AST6UKcKEwdFZH+EDFOZQYWsD32IHNEUWBgBNxYKx5UMUJ6FSCU5RF5Ybe7CapGS1SIlq0UWj/u86BrBMLIkdd8WXWO9sFelnkR1PRu2Tk1Wz6Zpf+X2n6X9K7V//zv5akZDk7b5IVOeSJ8sMpqzY1Eb4TyObA4Lt1qqxZGdfgYjZIixgpHWIiIHmgQaRiB5MRk8Lo1IyZ+VZgjJIfLCTngv7ERbshNtyU60y8d9XnSNYBhZkrpvi66ZYZt8RVTXs6Hr1Kzr2TTsrwuR4NyHzH8SImMthizl+DraxmuO9iliEO4HO7L/wto1BUSWssyqTkSqgQZsZ2EdZei4nH7Kn5VmCAk0Ii/shNdyTHGEpBFp+Tly3OdF1wiGkSWp+7bomnn7mRbV9WyoOjXbejb1++tFpA/RyRCpc0T6v7BwG1OGzVRaAx1+S+cB/wtr15QQSeZQzHvbEfnXmmYISWuRF3bCa0hFa5F2MY1EpC2aCiPHfV50jWAYWZK6Ceh6nfQY4lTIGjsmASiCyFpfyXWdmugmvnMntxSyn5n3tL842Qa/P1jP+kGg9WyqEJm0yFT+MAVoZ7URpSXktOwim6SL31i7pohIQazLh14gTB+kmMsTkWtCkoi8sBNeSyoSkd7cAAwhSURWHfd50TWCYWRJ6vxxdzN/oOr4wGMRmRFyodoOkfPskJbq1MRgQyQoEXJCypgqI1uOBOeePqv1qg9ez6YOkXEtMhXRTml+sgLb0hJyj8g/VrvGr9+hq04QeoFCJFUy/g8SkkCkJySBSE8qAlWeVAQiPSEJRHpCwshxB6NrmPJegmGkKkkdWnoR3BMbo521ST4MkStC7hE5O0SGOjUuxbtPWeHCsa+32zWmtlj2lxFSBUTmxhrlMvjs3cm19P48Mk7SKxEZLNpbc/a8smgvRDeEnBon2nxvAYJsLw/B3to1FpGkFwxElk2AzKkg9SpqLK6GiBORK0ISTj+eVMSaoCcV4fQTXFZwRHpCElpk5XGLckUv6ZopGlkjNkkdwkipilJHyxzV8zhEbgi5XTsMSHNKpM/t6NVIp0TebIsJ0iwXAyHj/vaITHB8W5qy66JRP4mT/jpzTX3CcbvSsjXXGEZ+LCBEXqbW8kT0La/JlmG+LyBEXnfbi/ctr8kWaf5aQIi8vmwv3re8JlKX8/oc/mz1z1eR5BF7LsdebuzZKEQGQuKIDKTCURVIhSMyOvWhiAyExBFZe9whuZqUJloudewMBJe6rhXHByJyRcgNIl2exjmkz70kRoY0u1eHyGtKs5sRUk0UItO5vNnmNNqESKeqYogM567bjT+E0w/nNPI7e+mvXd17tuBdSzUQb0wTb1emvbFGekGCyi3hjxz3R0rdixG5JuQakT6TLYfI2y2pkW5/GSFlLyInn/J3h8hUrsaLZ4uXJeE6/vcQ2d/Ly//v6x1B1fXGtOvtk2k3Hr56ZpoeOe4PlboO3D3SXOOUtgCmgLSMkE2INCsLaTVyki2IlFHxDil/d4isCOE2spuvTmaFvOJfxsdTuRAdMPYaci49uaVKot/2knNpNw2n+m0vOZd203Cq30oNdYtARe/Gvz88d7RbAN9EGIRn0UwsgqfZ+YTtdqIn9g1j7/f7fjU3772zvb1jR2Klb1zv7ZPr/dQcmvXMoXm+cVrk7ZPTIj/HJtr0SQWpw5FfktgXI9IhKapuEIohJEI2TbRxi3YzIn3K33ZEWk8jlRu5XVpen6DXrEPOzk3IfmhSYHAGmXfW6Yc31/D2bt5cw9u7v6aJUTOg3EvefJAnUNrdfETka1pt16ipUzA29NqxdzvC/yT+r4/Ui17gyrHIDxvH/jVElmKlNWeuAbpGkJU60phTltiXI3I1ucXqxdSbayot2hox12SIJC3aNZnSjPBmvpIhVNHg0AsRrBH53mvRfi9BkAfovdeifSd/Zi8e3DStlDWHuf9mIqpHlV2FIiI7x37sKfc+Bc6hmIsUHBn79xDJRrvzTj98ZA6f5IKX55ciMjna5PVsVoRscvqptGhvcwdYDE8yGrR9PRsckSG20LmKi+wzFdOvZ4E2luTWN9NfGz3/AkTyycHoJ/YDEInlBih5nAsyMrxu7AdCuSlwDsdc4NzI2BORa0QO1EQaSXb3YkROOSGDuSYnZJPrOG7R3ruOrxmpZryeDYpIA7jZezoCxKQVFpEpFVUKtAkBQHPKL3n8iXZB4HgdcwyRRIYgGnOec98/Vg2PPRHZhki2RhBll/7piLQRg/uY6nneBCACEoC4r2cDMrfXpP3tAxDXpgAQaD2bEUTGlD+/EpFcBprOaUvVWD7/BUiGcy8Yq0bHnohsyurYH5nDy+SLLdp1Mdp4nZpdPZv6/VW1/61bCyJToM2vnGi/DJG0nsCl1IXk3fatY9Xg2BORTbnB++ve/BBEbpOhWTNMXT0bqk7Ntp5Nw/6ei8g8o+VvNNe8FJHEXcBlHYdJvGSsGht7IrIVkWSu7yMgUm0d3ZSormdD16lZ+2837e97EPlLnX5eiEgi6ypbekHBa8YStXpqx56IbETkROb6PgIij1yvJmT6kB2IRFzHT0QOIJLKS60qUHW0sS9DJNerZ653Hjnug+sU1te9ORE5GgwbwyTrEZlFG+5U13Oi3Y9IMnN/BaoON/ZEZBMi2et8IESqbfiZEmhdG7ZezRY6m+3I/fUWhvU+5fWIdHkubM4Kk3lNrcoknojst2iztU166tj95LEnIpss2ux1PhAit2YbV19mX9eGrlfj8uQEEw22HbG/UUTKakSmfGcme68ZOcPtZjY17+dEewiRdG2T8i10rLEnIlsR2Vn35mchcicTINC6NlS9Gp0tGwdCbrfD99ePSNmKSK2cq48yOqTx8lzeboaO9m2VxuJEZCMimdomA9EXP3LsichGRPbWvfn5iMR8Jtf1aiDUq4HkLg6zdyHfuZVr61QULNhxf9vaNPhn+7o2XYj0nvuzdLFCchYuntxrvRCWCs6JdhsiudomA9EXP3Lsicg2RHbXvTkaIrW2SMuCDiX4oMNZ50GHDlVIcKLOCGkZqQNJ84zr+GdIXZuAyGkMkcIT0iQp0jHS+0TkA6Jr6lB1uLEnIv9UdE01IrVDZEpdYQgZ8aV8BjMX1AdxO5POIqa4WPaXe0L6grQ+6hAY7dVG46y3U7rDXINNtJMWuUbkOdF+QHSNrHK+OdrYE5F/KrqmFpGGkDY4MSRAM4T06qFTIn2OR69Guu0cfmKiNBSRYeqMHdcnRbPropvtDCJTCPmIuSasRZ6I7B0r6VtIVqGKjr74iWNPRB41uobJGF/hZMgj0qFJpzS6lpAh3S5EQlpGQki3G1LrhnS7CCIBQSRsU+sCglItZCg/JUecfjKL9jnRfhEimeiLnzj2RORRo2tSZsSdnBpG3u8ivMe5ZfQILCDSkykh0hLyEjOSrxEZM5KHAg3PQSRkppuHuI6fiOwcy7fCDTaYi7B3z/yN3Y1IySJSsoh8Y1F1ZRGpWETCPHLc3xNdw4XXKwPHu38L5Mp8pilEejR6MEVEOkK+GJHrirBzQKRh5DqlbnYRVLKaw9b5/U9PtAWTnM9kjNDMWMW2go45ooE+ac8DMdqS1SIlq0W+sdrc9cIhUkkOkSDnkeOOIFIwvuOu7BGNSMEINIvImcpsqjiZcIy8eyVSxHdPSAKRDkmRS6mArCXk5bUTbe2Ipn3R7DkgcmFkcLjcItLmJVrgKLK/TkS6KQjNSJt4THNjuTYNNMmBTD5vz3yv4tDLIFKyE+03dsJ7vXCIXGSZQeTyZeaR4w4hUtCekS7tnKIRyTCyE5HsbEc4RgbBTVqky8NNI3KFJWeGyQg5aq7hEZnMNSgifVGHqDNmCwcifZYQqSB4Ebm/TAGiz0+znXn/0xNtwTDS5a/VnYhUAw242w+et+fCcTlC0oi0/LwxpLrSqFpIdaMRacpB0Yg03nXzyHHHEFnMXqxoRNKMJAvSmcJfMyqrug2RjpDWbuHrXVET7YxKweknEnIad/qBrdMPptGa09w6/cw7RIqUcjKF7awt2pbb8R6wl/rT0PHzRCTDyNBLPZvFH2uKYSCtRZpeei3SkOpCosqQ6o1EpCEkrUUaQqp55LiDiCRzc4YiGIpGJFMKligwa5VPpKLx8tEkqifaq8QNXuOizDU5IYPreJziyAe4jm8OrBX+GVLXZofIkkR7bBtgQyimA8LVUz8n2jQjY++JSA6Rzo2FQqR0KLsxpCJRZUlFItISkkSkJSSJyKrjjiJSEDabWMNN0YikGGlJiDZ6cYevqbEy16SFyFQskLRoa70JQLR4WQUW4gGIUBmAuMu2i3+2r2sziEh3xmBVyM9zLZJhZOo9EUkj0hOSQKQnJIFITyoCVZ5UBCI9IQlEekLOI8ft9zpYlwLeR9cImpGxXDou1dApdbVOP8lWE1ftqmO08Xo1WBqL3Xb6sWksNuaa4lWRq4m2LzdGapGHnGiTFhezQqNoi0sQVpSRGlIvQkh1IjIjJOH04wlJaJGeVITzjScV4fTjCUk4/XhCEk4/lcdlDMHWrYcuMJTkSskdIWXqBWyxOJM6Riabf7x+1/FtDWst0Lo2VL0aLBnadjtif/2IzJ1+yiKtRG6ucVqvMdeEtchVGgurRn7gL6PjU3221rKh4B1/mV6qb+Hn0rtQ8At/2T1/Uf3WAKiJ5qphUb0Z5bYUtG6k/6Te3QLP3yMkishASByRgZA4IgOpcFQFUuGIDITEERkIiSOy9riCceuyckU9enO5wsdGRrJjcXn+9p8dqS+D1bWh69VgKXXX25H768w6nruOF/VIq0l7Vx+VOf0ki3a1s8rv7KW/9j//cL3i7zXOVC4UV0NGXW9Mu94+mXYjH4D2JtAz0/TIcZ8lVw/qPdujZFqsHcb3ruN5+z/EUM020rvnGwAAAABJRU5ErkJggg"},{ name : "R_png_Wall_060_png", data : "iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAMAAADDpiTIAAADAFBMVEUoVFMJKFQPUFcAZLSRAJGeVwAAhgDjqBQAAAD///8AAAAAAAAAAAAAAAAAAAAAAAD///8A//8AuroAdXUAQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsHBNYOSeEVjuwc0+6iGbFnn7QtJXbyq0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5DQpyGhWrJx/kNCrsYyD0kxb8wwz/8qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIkYYRIwqY8A8gvRXnfmIvPy53P/h9fUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHx8/Pz9fX19/f3+fn5+/v7/f39////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzMzerUAAABAHRSTlMA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////Cpf0PAAAA/NJREFUeNrt3EFyozAURdFsDQMSy/D+V9FgQ2IbkeqqHrXeOZOkPNS/BkQq+voCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPjF/W4Noi2LBKKVIoHwACQQH0AptUogOgAJxAcggVDzLIHwbaAE4reBEojfBkog/CFQAvG7AAnEbwMlEB6ABOIDkEB8ABKID0ACYZZFAtHGUQLhAUggPgAJxAcggfgAPhKYxnGSQFYArwnUWso8uQqEBfCTwDKvv43HjWCaJBASwJFAXb/3dXoOfPvMVSAmgD2Buix1H/92O3hPwP8RdB3Az43gGP/5WUACXQfwTOB7/KcdwTZ+CXQdwJbA7fb89n/uCLZngC0QCXQdwHxr7wjm+X4/bgseB7sOYD7tCLwX6NAwXAfwviOQQKdXgHYCzwD8jaB76yN+M4EjAAn0HsDUTuAnAAl0bZ7bCbwGIIGuA2gn8B6ABLpVSjuBzwAk0O0uoJ3AOQAJdPsiqJVAKwAJdBpAK4F2ABLoNIBzAlcBSKDTAD4TuA5AAhkJ/BKABEKuAqMEJCABCUggN4FhkEBsAqUMg6tAcALDUIobQWwC0+BZIDqBab38SyA4gelx/5dAbALPACQQ6whAArkJeDXkRiABCUhAAhKQgAQk8A8JOHQuOwGHzoUn4NC58AQcOpeegEPnXAUcOheegEPnwhO4jQ6dC07AoXPhCTh0LjyBNYDbzaFzuQlsAYxHAv5GkJfAI4Dx7xLwONhhAvPwCEACqQl8B9BMYBv/WwJVAp0l8BLAKYFt9JvXBJa1ACvbUQJvAbwlcIx/VY8E1p9VAF0l8BHAdwIv498T2D8TQF8JnALYE5g/1f0zAfSVwBrAeW94u9X5igD6SqAZwDheBzALoKsEBCABAbgRnBQBZCcggPAEBJCVwOnQOQHkJNA8dE4AOQk0D50TQEoCF4fO7QFUAfSewMWhc4/J1yqA7hO4OHSubuOfm3cC69ZVAheHzm1f/uajgDXrzMWhc0v7WdB69ZhA89VQKwBrFfFe4JHArhp/cgKvmwBrFJbAYxdg/LkJGH92AovxZydQjT87gWr82QkU489OoBh/dgLFGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAq9kSRLsLQABEF2AJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP4jfwA5tuZNdorFkAAAAABJRU5ErkJggg"},{ name : "R_fonts_m5x7_fnt", data : "QkZOVAABBABtNXg3EAAIAG01eDcucG5nDwALAD8AAAAgAAAAAAAAAAAAAAD//wAABQAAAAAAMgAAADIBAAAHAAkA//8DAAYAAAAAAFAAAACRAAAABwAJAP//AwAGAAAAAABaAAAA2QAAAAcACQD//wMABgAAAAAAbAAAAAwBAAAEAAkA//8DAAMAAAAAAGgAAAD7AAAABwAJAP//AwAGAAAAAAAoAAAADAAAAAQACgD//wMAAwAAAAAAMQAAACsBAAAHAAkA//8DAAYAAAAAADQAAABAAQAABwAJAP//AwAGAAAAAABDAAAANAAAAAcACQD//wMABgAAAAAANwAAAFUBAAAHAAkA//8DAAYAAAAAAHUAAADdAQAABwAHAP//BQAGAAAAAABuAAAAwgEAAAcABwD//wUABgAAAAAAPgAAAAwADQAFAAcA//8EAAQAAAAAAGcAAAD0AAAABwAJAP//BQAGAAAAAAA8AAAABwANAAUABwD//wQABAAAAAAAZgAAAO4AAAAGAAkA//8DAAUAAAAAAGoAAAAHAAAABQALAP//AwAEAAAAAAA7AAAA+wEAAAQABwD//wYAAwAAAAAAbwAAAMkBAAAHAAcA//8FAAYAAAAAAFIAAACfAAAABwAJAP//AwAGAAAAAAB0AAAAHgEAAAYACQD//wMABQAAAAAAWQAAANIAAAAHAAkA//8DAAYAAAAAACYAAACWAQAACAAJAP//AwAHAAAAAAA4AAAAXAEAAAcACQD//wMABgAAAAAAPQAAACIADQAGAAUA//8FAAUAAAAAAE8AAACKAAAABwAJAP//AwAGAAAAAABXAAAAwgAAAAkACQD//wMACAAAAAAAcQAAABcBAAAHAAkA//8FAAYAAAAAAHkAAAAkAQAABwAJAP//BQAGAAAAAAA6AAAAGAANAAMABgD//wYAAgAAAAAAVAAAAK0AAAAHAAkA//8DAAYAAAAAAGUAAACyAQAABwAHAP//BQAGAAAAAAAiAAAANAANAAUABAD//wMABAAAAAAARQAAAEIAAAAHAAkA//8DAAYAAAAAAEoAAABlAAAABwAJAP//AwAGAAAAAABwAAAAEAEAAAcACQD//wUABgAAAAAASwAAAGwAAAAHAAkA//8DAAYAAAAAAHsAAAAcAAAABQAKAP//AwAEAAAAAAAwAAAAYwEAAAcACQD//wMABgAAAAAAYAAAADkADQAEAAQA//8DAAMAAAAAAEcAAABQAAAABwAJAP//AwAGAAAAAAAtAAAARwANAAcAAwD//wYABgAAAAAANgAAAE4BAAAHAAkA//8DAAYAAAAAAE4AAACDAAAABwAJAP//AwAGAAAAAAB8AAAAdAEAAAMACQD//wMAAgAAAAAAdgAAAOQBAAAHAAcA//8FAAYAAAAAADUAAABHAQAABwAJAP//AwAGAAAAAABRAAAAmAAAAAcACQD//wMABgAAAAAAQQAAACYAAAAHAAkA//8DAAYAAAAAAE0AAAB6AAAACQAJAP//AwAIAAAAAAAvAAAAdwEAAAUACQD//wMABAAAAAAASQAAAF4AAAAHAAkA//8DAAYAAAAAACwAAABAAA0ABAAEAP//CQADAAAAAABGAAAASQAAAAcACQD//wMABgAAAAAAWwAAABQAAAAEAAoA//8DAAMAAAAAAHgAAAD0AQAABwAHAP//BQAGAAAAAABhAAAApQEAAAcABwD//wUABgAAAAAASAAAAFcAAAAHAAkA//8DAAYAAAAAAGMAAACsAQAABgAHAP//BQAFAAAAAAByAAAA0AEAAAYABwD//wUABQAAAAAAIQAAAGoBAAADAAkA//8DAAIAAAAAACUAAACPAQAABwAJAP//AwAGAAAAAABAAAAAfAEAAAcACQD//wMABgAAAAAAXgAAABsADQAHAAUA//8DAAYAAAAAAG0AAAC5AQAACQAHAP//BQAIAAAAAAAkAAAAiAEAAAcACQD//wMABgAAAAAATAAAAHMAAAAHAAkA//8DAAYAAAAAAF0AAAAYAAAABAAKAP//AwADAAAAAAB3AAAA6wEAAAkABwD//wUACAAAAAAAKQAAABAAAAAEAAoA//8DAAMAAAAAADkAAAD0AAAABwAJAP//AwAGAAAAAABEAAAAOwAAAAcACQD//wMABgAAAAAAegAAAAAADQAHAAcA//8FAAYAAAAAAFUAAAC0AAAABwAJAP//AwAGAAAAAABfAAAARwANAAcAAwD//wkABgAAAAAAXAAAAIMBAAAFAAkA//8DAAQAAAAAAGQAAADnAAAABwAJAP//AwAGAAAAAABzAAAA1gEAAAcABwD//wUABgAAAAAACgAAAAAAAAAAAAAA//8AAAAAAAAAACoAAAAvAA0ABQAFAP//AwAEAAAAAABiAAAA4AAAAAcACQD//wMABgAAAAAAaQAAAAIBAAAEAAkA//8DAAMAAAAAAC4AAABEAA0AAwADAP//CQACAAAAAAAnAAAAPQANAAMABAD//wMAAgAAAAAAPwAAAG0BAAAHAAkA//8DAAYAAAAAAEIAAAAtAAAABwAJAP//AwAGAAAAAABTAAAApgAAAAcACQD//wMABgAAAAAAWAAAAMsAAAAHAAkA//8DAAYAAAAAACMAAACeAQAABwAIAP//BAAGAAAAAAAzAAAAOQEAAAcACQD//wMABgAAAAAAawAAAAYBAAAGAAkA//8DAAUAAAAAAH4AAAAoAA0ABwAFAP//BQAGAAAAAAArAAAAEQANAAcABwD//wQABgAAAAAAVgAAALsAAAAHAAkA//8DAAYAAAAAAH0AAAAhAAAABQAKAP//AwAEAAAAAAAAAAAA"},{ name : "R_fonts_digitaldisco_fnt", data : "QkZOVAABDABEaWdpdGFsRGlzY28QABAAZGlnaXRhbGRpc2NvLnBuZxIADAA/AAAAIAAAAAAAAAAAAAAA//8AAAUAAAAAADIAAACqAQAACQAMAP//AQAIAAAAAABQAAAA7gAAAAoADAD//wEACQAAAAAAWgAAAEoBAAAJAAwA//8BAAgAAAAAAGwAAACGAQAABQAMAP//AQAEAAAAAABoAAAAbgEAAAoADAD//wEACQAAAAAAKAAAABAAAAAFAA4A//8BAAQAAAAAADEAAAClAQAABQAMAP//AQAEAAAAAAA0AAAAvQEAAAoADAD//wEACQAAAAAAQwAAAH0AAAALAAwA//8BAAoAAAAAADcAAADaAQAACAAMAP//AQAHAAAAAAB1AAAAkAAPAAoACgD//wMACQAAAAAAbgAAAGwADwAKAAoA//8DAAkAAAAAAD4AAADOAA8ACgAKAP//AwAJAAAAAABnAAAAQwAAAAoADQD//wMACQAAAAAAPAAAAMQADwAKAAoA//8DAAkAAAAAAGYAAABnAQAABwAMAP//AQAGAAAAAABqAAAAAAAAAAUADwD//wEABAAAAAAAOwAAAPoBAAAEAAkA//8EAAMAAAAAAG8AAAB2AA8ACgAKAP//AwAJAAAAAABSAAAA+AAAAAoADAD//wEACQAAAAAAdAAAAJ8BAAAGAAwA//8BAAUAAAAAAFkAAABAAQAACgAMAP//AQAJAAAAAAAmAAAAVwAAAAsADQD//wAACgAAAAAAOAAAAOIBAAAKAAwA//8BAAkAAAAAAD0AAADkAA8ACAAIAP//BAAHAAAAAABPAAAA4wAAAAsADAD//wEACgAAAAAAVwAAACgBAAAOAAwA//8BAA0AAAAAAHEAAACVAQAACgAMAP//AwAJAAAAAAB5AAAATQAAAAoADQD//wMACQAAAAAAOgAAANgADwAEAAgA//8EAAMAAAAAAFQAAAAMAQAACAAMAP//AQAHAAAAAABlAAAAVAAPAAoACgD//wMACQAAAAAAIgAAAPwADwAHAAUA//8BAAYAAAAAAEUAAACSAAAACAAMAP//AQAHAAAAAABKAAAAPQAAAAYADQD//wEABQAAAAAAcAAAAIsBAAAKAAwA//8DAAkAAAAAAEsAAAC7AAAACQAMAP//AQAIAAAAAAB7AAAAJAAAAAcADgD+/wEABAAAAAAAMAAAAAAADwAKAAwA//8BAAkAAAAAAGAAAAADAQ8ABQAFAP//AQAEAAAAAABHAAAAogAAAAsADAD//wEACgAAAAAALQAAAB0BDwAGAAQA//8GAAUAAAAAADYAAADQAQAACgAMAP//AQAJAAAAAABOAAAA2QAAAAoADAD//wEACQAAAAAAfAAAADEAAAAEAA4A//8BAAMAAAAAAHYAAACaAA8ACgAKAP//AwAJAAAAAAA1AAAAxwEAAAkADAD//wEACAAAAAAAUQAAAAUAAAALAA4A//8BAAoAAAAAAEEAAABpAAAACgAMAP//AQAJAAAAAABNAAAAywAAAA4ADAD//wEADQAAAAAALwAAABQADwAGAAwA//8BAAUAAAAAAEkAAAC3AAAABAAMAP//AQADAAAAAAAsAAAADAEPAAQABQD//wkAAwAAAAAARgAAAJoAAAAIAAwA//8BAAcAAAAAAFsAAAAaAAAABQAOAP//AQAEAAAAAAB4AAAAsgAPAAkACgD//wMACAAAAAAAYQAAAEEADwAKAAoA//8DAAkAAAAAAEgAAACtAAAACgAMAP//AQAJAAAAAABjAAAASwAPAAkACgD//wMACAAAAAAAcgAAAIAADwAHAAoA//8DAAYAAAAAACEAAAD2AQAABAAMAP//AQADAAAAAAAlAAAAKwAPAAwADAD//wEACwAAAAAAQAAAABoADwALAAwA//8BAAoAAAAAAF4AAAD0AA8ACAAGAP//AQAHAAAAAABtAAAAXgAPAA4ACgD//wMADQAAAAAAJAAAADUAAAAIAA4A//8BAAcAAAAAAEwAAADEAAAABwAMAP//AQAGAAAAAABdAAAAHwAAAAUADgD//wEABAAAAAAAdwAAAKQADwAOAAoA//8DAA0AAAAAACkAAAAVAAAABQAOAP//AQAEAAAAAAA5AAAA7AEAAAoADAD//wEACQAAAAAARAAAAIgAAAAKAAwA//8BAAkAAAAAAHoAAAC7AA8ACQAKAP//AwAIAAAAAABVAAAAFAEAAAoADAD//wEACQAAAAAAXwAAACMBDwAKAAQA//8LAAkAAAAAAFwAAAAlAA8ABgAMAP//AQAFAAAAAABkAAAAXQEAAAoADAD//wEACQAAAAAAcwAAAIcADwAJAAoA//8DAAgAAAAAAAoAAAAAAAAAAAAAAP//AAAAAAAAAAAqAAAA7AAPAAgABwD//wMABwAAAAAAYgAAAFMBAAAKAAwA//8BAAkAAAAAAGkAAAB4AQAABQAMAP//AQAEAAAAAAAuAAAAGQEPAAQABAD//wkAAwAAAAAAJwAAAAgBDwAEAAUA//8BAAMAAAAAAD8AAAAKAA8ACgAMAP//AQAJAAAAAABCAAAAcwAAAAoADAD//wEACQAAAAAAUwAAAAIBAAAKAAwA//8BAAkAAAAAAFgAAAA2AQAACgAMAP//AQAJAAAAAAAjAAAANwAPAAoADAD//wEACQAAAAAAMwAAALMBAAAKAAwA//8BAAkAAAAAAGsAAAB9AQAACQAMAP//AQAIAAAAAAB+AAAAEAEPAAkABQD//wUACAAAAAAAKwAAANwADwAIAAgA//8EAAcAAAAAAFYAAAAeAQAACgAMAP//AQAJAAAAAAB9AAAAKwAAAAYADgD//wEABQAAAAAAAAAAAA"}];
haxe_MainLoop.add(hxd_System.updateCursor,-1);
var hx__registerFont;
hx__registerFont = function(name,data) {
	var s = window.document.createElement("style");
	s.type = "text/css";
	s.innerHTML = "@font-face{ font-family: " + name + "; src: url('data:font/ttf;base64," + data + "') format('truetype'); }";
	window.document.getElementsByTagName("head")[0].appendChild(s);
	var div = window.document.createElement("div");
	div.style.fontFamily = name;
	div.style.opacity = 0;
	div.style.width = "1px";
	div.style.height = "1px";
	div.style.position = "fixed";
	div.style.bottom = "0px";
	div.style.right = "0px";
	div.innerHTML = ".";
	div.className = "hx__loadFont";
	window.document.body.appendChild(div);
};
Main.defaultScreen = "button";
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
hxd_res_Resource.LIVE_UPDATE = false;
bh_base_FontManager.fontRegistry = new haxe_ds_StringMap();
bh_base_HexLayout.pointy = new bh_base_HexOrientationData(Math.sqrt(3.0),Math.sqrt(3.0) / 2.0,0.0,1.5,Math.sqrt(3.0) / 3.0,-0.33333333333333331,0.0,0.66666666666666663,0.5);
bh_base_HexLayout.flat = new bh_base_HexOrientationData(1.5,0.0,Math.sqrt(3.0) / 2.0,Math.sqrt(3.0),0.66666666666666663,0.0,-0.33333333333333331,Math.sqrt(3.0) / 3.0,0.0);
h2d_Object.tmpPoint = new h2d_col_PointImpl(0.,0.);
h2d_filter_Filter.defaultUseScreenResolution = false;
bh_base_filters__$PixelOutline_PixelOutlinePass.__meta__ = { obj : { ignore : ["shader"]}};
h3d_shader_ScreenShader.SRC = "HXSMF2gzZC5zaGFkZXIuU2NyZWVuU2hhZGVyBwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACghfX2luaXRfXw4GAAALBnZlcnRleA4GAAACAgoAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAALAAAFAQYEAgYFDAkDKw4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAA";
h3d_shader_ScreenShader._MODULE = "h3d.shader.ScreenShader";
bh_base_filters__$PixelOutline_PixelOutlineShader.SRC = "HXSMMGJoLmJhc2UuZmlsdGVycy5fUGl4ZWxPdXRsaW5lLlBpeGVsT3V0bGluZVNoYWRlcg0BBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQoCAgAACwlwaXhlbFNpemUFCgIAAAwMb3V0bGluZUNvbG9yBQsCAAANC2lubGluZUNvbG9yBQwCAAAOC2tub2NrT3V0TXVsAwIAAA8IX19pbml0X18OBgAAEAZ2ZXJ0ZXgOBgAAEQhmcmFnbWVudA4GAAADAg8AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAQAAAFAQYEAgYFDAkDKw4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAERAAAFAggSCGN1ckNvbG9yBQwEAAAJAyIOAgIKCgICAwUKBQwACwYFCgISBQwMAAMBAwAAAAAAAAAAAwIFAQsGDwYPBg8GBgoJAyIOAgIKCgIJAykOAgYACgIDBQoAAAMKAgsFCgAAAwMKAgMFCgQAAwUKBQwMAAMBAwAAAAAAAAAAAwIGBgoJAyIOAgIKCgIJAykOAgYDCgIDBQoAAAMKAgsFCgAAAwMKAgMFCgQAAwUKBQwMAAMBAwAAAAAAAAAAAwICBgYKCQMiDgICCgoCCQMpDgIKAgMFCgAAAwYACgIDBQoEAAMKAgsFCgQAAwMFCgUMDAADAQMAAAAAAAAAAAMCAgYGCgkDIg4CAgoKAgkDKQ4CCgIDBQoAAAMGAwoCAwUKBAADCgILBQoEAAMDBQoFDAwAAwEDAAAAAAAAAAADAgIGBAIHBQwJAysOAgIMBQsBAwAAAAAAAPA/AwUMBQwAAAALBgYJAxwOAQINBQwDAQMAAAAAAAAAAAMCBQEGBAIHBQwCDQUMBQwABgQCBwUMBgECEgUMAg4DBQwFDAAAAA";
bh_base_filters__$PixelOutline_PixelOutlineShader._MODULE = "bh.base.filters.PixelOutline";
bh_base_filters_ReplacePaletteShader.SRC = "HXSMJGJoLmJhc2UuZmlsdGVycy5SZXBsYWNlUGFsZXR0ZVNoYWRlcg8BBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoMUEFMRVRURV9TSVpFAQIAAQAAAAAACwtURVNUX0FQUFJPWAICAAEAAAAAAAwKVEVTVF9BTFBIQQICAAEAAAAAAA0HU1JDX0NPTA8FDAoCAAAOB0RTVF9DT0wPBQwKAgAADwd0ZXh0dXJlCgICAAAQCF9faW5pdF9fDgYAABEGdmVydGV4DgYAABIGdGVzdGVxDgYAABMIZnJhZ21lbnQOBgAABAIQAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAAEQAABQEGBAIGBQwJAysOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAADEgIUAWEFDAQAABUBYgUMBAAAAgUBCwILAgUBCwIMAgUBDQYOBg4GDgYOBg4GDgYOBggGAwoCFAUMAAADAQO7vdfZ33zbPQMDCgIVBQwAAAMCBgoGAAoCFAUMAAADAQO7vdfZ33zbPQMDCgIVBQwAAAMCAgYIBgMKAhQFDAQAAwEDu73X2d982z0DAwoCFQUMBAADAgIGCgYACgIUBQwEAAMBA7u919nffNs9AwMKAhUFDAQAAwICBggGAwoCFAUMCAADAQO7vdfZ33zbPQMDCgIVBQwIAAMCAgYKBgAKAhQFDAgAAwEDu73X2d982z0DAwoCFQUMCAADAgIGCAYDCgIUBQwMAAMBA7u919nffNs9AwMKAhUFDAwAAwICBgoGAAoCFAUMDAADAQO7vdfZ33zbPQMDCgIVBQwMAAMCAgAABQENBg4GDgYOBg4GDgYIBgMKAhQFDAAAAwEDu73X2d982z0DAwoCFQUMAAADAgYKBgAKAhQFDAAAAwEDu73X2d982z0DAwoCFQUMAAADAgIGCAYDCgIUBQwEAAMBA7u919nffNs9AwMKAhUFDAQAAwICBgoGAAoCFAUMBAADAQO7vdfZ33zbPQMDCgIVBQwEAAMCAgYIBgMKAhQFDAgAAwEDu73X2d982z0DAwoCFQUMCAADAgIGCgYACgIUBQwIAAMBA7u919nffNs9AwMKAhUFDAgAAwICAAAAAAUBCwIMAgUBDQYOBg4GDgYFCgIUBQwAAAMKAhUFDAAAAwIGBQoCFAUMBAADCgIVBQwEAAMCAgYFCgIUBQwIAAMKAhUFDAgAAwICBgUKAhQFDAwAAwoCFQUMDAADAgIAAAUBDQYOBg4GBQoCFAUMAAADCgIVBQwAAAMCBgUKAhQFDAQAAwoCFQUMBAADAgIGBQoCFAUMCAADCgIVBQwIAAMCAgAAAAAAAAETAAAFAwgWAnRjBQwEAAAJAyIOAgIPCgIKAgkFChEABQoFDAAGBAIIBQwCFgUMBQwOFwFpAQQAAAYVAQIAAAAAAQIKAQ8BAAAFAQsJAhIOAgIWBQwRAg0PBQwKAhcBBQwCBQIGBAIIBQwRAg4PBQwKAhcBBQwFDBAAAAAAAAAA";
bh_base_filters_ReplacePaletteShader._MODULE = "bh.base.filters.ReplacePaletteShader";
hxparse_LexEngine.EMPTY = [];
hxparse_LexEngine.ALL_CHARS = [new hxparse__$LexEngine_CharRange(0,255)];
bh_multianim_MultiAnimLexer.keywords = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["alpha"] = bh_multianim_MPKeywords.MPAlpha;
	_g.h["animatedpath"] = bh_multianim_MPKeywords.MPAnimatedPath;
	_g.h["apply"] = bh_multianim_MPKeywords.MPApply;
	_g.h["array"] = bh_multianim_MPKeywords.MPArray;
	_g.h["bezier"] = bh_multianim_MPKeywords.MPBezier;
	_g.h["bit"] = bh_multianim_MPKeywords.MPBit;
	_g.h["bitmap"] = bh_multianim_MPKeywords.MPBitmap;
	_g.h["blendmode"] = bh_multianim_MPKeywords.MPBlendMode;
	_g.h["bool"] = bh_multianim_MPKeywords.MPBool;
	_g.h["bottom"] = bh_multianim_MPKeywords.MPBottom;
	_g.h["builderparameter"] = bh_multianim_MPKeywords.MPBuilderParameter;
	_g.h["callback"] = bh_multianim_MPKeywords.MPCallback;
	_g.h["center"] = bh_multianim_MPKeywords.MPCenter;
	_g.h["checkpoint"] = bh_multianim_MPKeywords.MPCheckpoint;
	_g.h["color"] = bh_multianim_MPKeywords.MPColor;
	_g.h["construct"] = bh_multianim_MPKeywords.MPConstruct;
	_g.h["debug"] = bh_multianim_MPKeywords.MPDebug;
	_g.h["div"] = bh_multianim_MPKeywords.MPDiv;
	_g.h["error"] = bh_multianim_MPKeywords.MPError;
	_g.h["external"] = bh_multianim_MPKeywords.MPExternal;
	_g.h["file"] = bh_multianim_MPKeywords.MPFile;
	_g.h["filledrect"] = bh_multianim_MPKeywords.MPFilledRect;
	_g.h["filter"] = bh_multianim_MPKeywords.MPFilter;
	_g.h["flags"] = bh_multianim_MPKeywords.MPFlags;
	_g.h["flat"] = bh_multianim_MPKeywords.MPFlat;
	_g.h["float"] = bh_multianim_MPKeywords.MPFloat;
	_g.h["flow"] = bh_multianim_MPKeywords.MPFlow;
	_g.h["forward"] = bh_multianim_MPKeywords.MPForward;
	_g.h["function"] = bh_multianim_MPKeywords.MPFunction;
	_g.h["generated"] = bh_multianim_MPKeywords.MPGenerated;
	_g.h["grid"] = bh_multianim_MPKeywords.MPGrid;
	_g.h["griddirection"] = bh_multianim_MPKeywords.MPGridDirection;
	_g.h["hex"] = bh_multianim_MPKeywords.MPHex;
	_g.h["hexcorner"] = bh_multianim_MPKeywords.MPHexCorner;
	_g.h["hexdirection"] = bh_multianim_MPKeywords.MPHexDirection;
	_g.h["hexedge"] = bh_multianim_MPKeywords.MPHexEdge;
	_g.h["hexgrid"] = bh_multianim_MPKeywords.MPHexGrid;
	_g.h["if"] = bh_multianim_MPKeywords.MPIf;
	_g.h["ifstrict"] = bh_multianim_MPKeywords.MPIfStrict;
	_g.h["import"] = bh_multianim_MPKeywords.MPImport;
	_g.h["int"] = bh_multianim_MPKeywords.MPInt;
	_g.h["interactive"] = bh_multianim_MPKeywords.MPInteractive;
	_g.h["layer"] = bh_multianim_MPKeywords.MPLayer;
	_g.h["layers"] = bh_multianim_MPKeywords.MPLayers;
	_g.h["layout"] = bh_multianim_MPKeywords.MPLayout;
	_g.h["left"] = bh_multianim_MPKeywords.MPLeft;
	_g.h["line"] = bh_multianim_MPKeywords.MPLine;
	_g.h["list"] = bh_multianim_MPKeywords.MPList;
	_g.h["loop"] = bh_multianim_MPKeywords.MPLoop;
	_g.h["ninepatch"] = bh_multianim_MPKeywords.MPNinePatch;
	_g.h["nothing"] = bh_multianim_MPKeywords.MPNothing;
	_g.h["offset"] = bh_multianim_MPKeywords.MPOffset;
	_g.h["palette"] = bh_multianim_MPKeywords.MPPalette;
	_g.h["particles"] = bh_multianim_MPKeywords.MPParticles;
	_g.h["path"] = bh_multianim_MPKeywords.MPPath;
	_g.h["paths"] = bh_multianim_MPKeywords.MPPaths;
	_g.h["pixels"] = bh_multianim_MPKeywords.MPPixels;
	_g.h["placeholder"] = bh_multianim_MPKeywords.MPPlaceholder;
	_g.h["point"] = bh_multianim_MPKeywords.MPPoint;
	_g.h["pointy"] = bh_multianim_MPKeywords.MPPointy;
	_g.h["pos"] = bh_multianim_MPKeywords.MPPos;
	_g.h["position"] = bh_multianim_MPKeywords.MPPosition;
	_g.h["programmable"] = bh_multianim_MPKeywords.MPProgrammable;
	_g.h["rect"] = bh_multianim_MPKeywords.MPRect;
	_g.h["reference"] = bh_multianim_MPKeywords.MPReference;
	_g.h["relativelayouts"] = bh_multianim_MPKeywords.MPRelativeLayouts;
	_g.h["repeatable"] = bh_multianim_MPKeywords.MPRepeatable;
	_g.h["right"] = bh_multianim_MPKeywords.MPRight;
	_g.h["scale"] = bh_multianim_MPKeywords.MPScale;
	_g.h["sequence"] = bh_multianim_MPKeywords.MPSequence;
	_g.h["settings"] = bh_multianim_MPKeywords.MPSettings;
	_g.h["sheet"] = bh_multianim_MPKeywords.MPSheet;
	_g.h["stateanim"] = bh_multianim_MPKeywords.MPStateanim;
	_g.h["text"] = bh_multianim_MPKeywords.MPText;
	_g.h["tile"] = bh_multianim_MPKeywords.MPTile;
	_g.h["tilegroup"] = bh_multianim_MPKeywords.MPTileGroup;
	_g.h["top"] = bh_multianim_MPKeywords.MPTop;
	_g.h["turn"] = bh_multianim_MPKeywords.MPTurn;
	_g.h["uint"] = bh_multianim_MPKeywords.MPUInt;
	_g.h["updatable"] = bh_multianim_MPKeywords.MPUpdatable;
	_g.h["version"] = bh_multianim_MPKeywords.MPVersion;
	$r = _g;
	return $r;
}(this));
bh_multianim_MultiAnimLexer.tok = hxparse_Lexer.buildRuleset([{ rule : "0x([0-9a-fA-F](_?[0-9a-fA-F])*)+", func : function(lexer) {
	return bh_multianim_MPToken.MPNumber(lexer.current.substring(2),bh_multianim_NumberType.NTHexInteger);
}},{ rule : "([1-9](_?[0-9])*)|0", func : function(lexer) {
	return bh_multianim_MPToken.MPNumber(lexer.current,bh_multianim_NumberType.NTInteger);
}},{ rule : "((([1-9](_?[0-9])*)|0)(\\.))(([0-9](_?[0-9])*)+)", func : function(lexer) {
	return bh_multianim_MPToken.MPNumber(lexer.current,bh_multianim_NumberType.NTFloat);
}},{ rule : "(\\.)(([0-9](_?[0-9])*)+)", func : function(lexer) {
	return bh_multianim_MPToken.MPNumber(lexer.current,bh_multianim_NumberType.NTFloat);
}},{ rule : "[a-zA-Z_]+[a-zA-Z0-9_\\-]*", func : function(lexer) {
	var str = lexer.current;
	return bh_multianim_MPToken.MPIdentifier(str,bh_multianim_MultiAnimLexer.keywords.h[str.toLowerCase()],bh_multianim_IdentifierType.ITString);
}},{ rule : "#[a-zA-Z0-9_\\-]+", func : function(lexer) {
	var str = lexer.current;
	str = HxOverrides.substr(str,1,null);
	return bh_multianim_MPToken.MPIdentifier(str,bh_multianim_MultiAnimLexer.keywords.h[str.toLowerCase()],bh_multianim_IdentifierType.ITName);
}},{ rule : "\\!", func : function(lexer) {
	return bh_multianim_MPToken.MPExclamation;
}},{ rule : "$[a-zA-Z0-9_]+", func : function(lexer) {
	var str = lexer.current;
	str = HxOverrides.substr(str,1,null);
	return bh_multianim_MPToken.MPIdentifier(str,bh_multianim_MultiAnimLexer.keywords.h[str.toLowerCase()],bh_multianim_IdentifierType.ITReference);
}},{ rule : "\\*", func : function(lexer) {
	return bh_multianim_MPToken.MPStar;
}},{ rule : "\\/", func : function(lexer) {
	return bh_multianim_MPToken.MPSlash;
}},{ rule : "\\@", func : function(lexer) {
	return bh_multianim_MPToken.MPAt;
}},{ rule : "\\+", func : function(lexer) {
	return bh_multianim_MPToken.MPPlus;
}},{ rule : "\\%", func : function(lexer) {
	return bh_multianim_MPToken.MPPercent;
}},{ rule : "\\-", func : function(lexer) {
	return bh_multianim_MPToken.MPMinus;
}},{ rule : "\\.\\.", func : function(lexer) {
	return bh_multianim_MPToken.MPDoubleDot;
}},{ rule : "\\(", func : function(lexer) {
	return bh_multianim_MPToken.MPOpen;
}},{ rule : "\\)", func : function(lexer) {
	return bh_multianim_MPToken.MPClosed;
}},{ rule : "\\{", func : function(lexer) {
	return bh_multianim_MPToken.MPCurlyOpen;
}},{ rule : "\\}", func : function(lexer) {
	return bh_multianim_MPToken.MPCurlyClosed;
}},{ rule : "\\[", func : function(lexer) {
	return bh_multianim_MPToken.MPBracketOpen;
}},{ rule : "\\]", func : function(lexer) {
	return bh_multianim_MPToken.MPBracketClosed;
}},{ rule : ",", func : function(lexer) {
	return bh_multianim_MPToken.MPComma;
}},{ rule : "=>", func : function(lexer) {
	return bh_multianim_MPToken.MPArrow;
}},{ rule : ":", func : function(lexer) {
	return bh_multianim_MPToken.MPColon;
}},{ rule : "=", func : function(lexer) {
	return bh_multianim_MPToken.MPEquals;
}},{ rule : ";", func : function(lexer) {
	return bh_multianim_MPToken.MPSemiColon;
}},{ rule : "[\n\r]", func : function(lexer) {
	return lexer.token(bh_multianim_MultiAnimLexer.tok);
}},{ rule : "//[^\n\r]*", func : function(lexer) {
	return lexer.token(bh_multianim_MultiAnimLexer.tok);
}},{ rule : "[ \t]", func : function(lexer) {
	return lexer.token(bh_multianim_MultiAnimLexer.tok);
}},{ rule : "\"", func : function(lexer) {
	bh_multianim_MultiAnimLexer.buf = new StringBuf();
	lexer.token(bh_multianim_MultiAnimLexer.string);
	return bh_multianim_MPToken.MPIdentifier(bh_multianim_MultiAnimLexer.buf.b,null,bh_multianim_IdentifierType.ITQuotedString);
}},{ rule : "'", func : function(lexer) {
	bh_multianim_MultiAnimLexer.buf = new StringBuf();
	return bh_multianim_MPToken.MPInterpolation(bh_multianim_MPInterpolationEnum.MPIStart);
}},{ rule : "", func : function(lexer) {
	return bh_multianim_MPToken.MPEof;
}}],"tok");
bh_multianim_MultiAnimLexer.string = hxparse_Lexer.buildRuleset([{ rule : "\\\\\\\\", func : function(lexer) {
	bh_multianim_MultiAnimLexer.buf.b += "\\\\";
	return lexer.token(bh_multianim_MultiAnimLexer.string);
}},{ rule : "\\\\", func : function(lexer) {
	bh_multianim_MultiAnimLexer.buf.b += "\\";
	return lexer.token(bh_multianim_MultiAnimLexer.string);
}},{ rule : "\\\\\"", func : function(lexer) {
	bh_multianim_MultiAnimLexer.buf.b += "\"";
	return lexer.token(bh_multianim_MultiAnimLexer.string);
}},{ rule : "\\\\n", func : function(lexer) {
	bh_multianim_MultiAnimLexer.buf.b += "\n";
	return lexer.token(bh_multianim_MultiAnimLexer.string);
}},{ rule : "\"", func : function(lexer) {
	return new hxparse_Position(lexer.source,lexer.pos - lexer.current.length,lexer.pos).pmin;
}},{ rule : "[^\\\\\"]+", func : function(lexer) {
	bh_multianim_MultiAnimLexer.buf.b += Std.string(lexer.current);
	return lexer.token(bh_multianim_MultiAnimLexer.string);
}}],"string");
bh_multianim_MultiAnimLexer.interpString = hxparse_Lexer.buildRuleset([{ rule : "\\\\\\\\", func : function(lexer) {
	bh_multianim_MultiAnimLexer.buf.b += "\\\\";
	return lexer.token(bh_multianim_MultiAnimLexer.interpString);
}},{ rule : "\\\\n", func : function(lexer) {
	bh_multianim_MultiAnimLexer.buf.b += "\n";
	return lexer.token(bh_multianim_MultiAnimLexer.interpString);
}},{ rule : "\\\\", func : function(lexer) {
	bh_multianim_MultiAnimLexer.buf.b += "\\";
	return lexer.token(bh_multianim_MultiAnimLexer.interpString);
}},{ rule : "\\\\\"", func : function(lexer) {
	bh_multianim_MultiAnimLexer.buf.b += "\"";
	return lexer.token(bh_multianim_MultiAnimLexer.interpString);
}},{ rule : "'", func : function(lexer) {
	var s = bh_multianim_MultiAnimLexer.buf.b;
	bh_multianim_MultiAnimLexer.buf = new StringBuf();
	return bh_multianim_MPToken.MPInterpolation(bh_multianim_MPInterpolationEnum.MPIEnd(s));
}},{ rule : "($$)|(\\$)", func : function(lexer) {
	bh_multianim_MultiAnimLexer.buf.b += "$";
	return lexer.token(bh_multianim_MultiAnimLexer.interpString);
}},{ rule : "\\${", func : function(lexer) {
	var s = bh_multianim_MultiAnimLexer.buf.b;
	bh_multianim_MultiAnimLexer.buf = new StringBuf();
	return bh_multianim_MPToken.MPInterpolation(bh_multianim_MPInterpolationEnum.MPICode(s));
}},{ rule : "[^\\$\\']+", func : function(lexer) {
	bh_multianim_MultiAnimLexer.buf.b += Std.string(lexer.current);
	return lexer.token(bh_multianim_MultiAnimLexer.interpString);
}}],"interpString");
bh_multianim_MultiAnimParser.defaultLayoutNodeName = "#defaultLayout";
bh_multianim_MultiAnimParser.defaultPathNodeName = "#defaultPaths";
bh_stateanim_AnimLexer.keywords = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["allowedextrapoints"] = bh_stateanim_APKeywords.APAllowedExtraPoints;
	_g.h["animation"] = bh_stateanim_APKeywords.APAnimation;
	_g.h["center"] = bh_stateanim_APKeywords.APCenter;
	_g.h["command"] = bh_stateanim_APKeywords.APCommand;
	_g.h["duration"] = bh_stateanim_APKeywords.APDuration;
	_g.h["event"] = bh_stateanim_APKeywords.APEvent;
	_g.h["extrapoints"] = bh_stateanim_APKeywords.APExtrapoints;
	_g.h["file"] = bh_stateanim_APKeywords.APFile;
	_g.h["fps"] = bh_stateanim_APKeywords.APFps;
	_g.h["frames"] = bh_stateanim_APKeywords.APFrames;
	_g.h["goto"] = bh_stateanim_APKeywords.APGoto;
	_g.h["loop"] = bh_stateanim_APKeywords.APLoop;
	_g.h["name"] = bh_stateanim_APKeywords.APName;
	_g.h["playlist"] = bh_stateanim_APKeywords.APPlaylist;
	_g.h["random"] = bh_stateanim_APKeywords.APRandom;
	_g.h["sheet"] = bh_stateanim_APKeywords.APSheet;
	_g.h["states"] = bh_stateanim_APKeywords.APStates;
	_g.h["untilcommand"] = bh_stateanim_APKeywords.APUntilCommand;
	$r = _g;
	return $r;
}(this));
bh_stateanim_AnimLexer.tok = hxparse_Lexer.buildRuleset([{ rule : "([1-9](_?[0-9])*)|0", func : function(lexer) {
	return bh_stateanim_APToken.APNumber(lexer.current);
}},{ rule : "-?[0-9]+", func : function(lexer) {
	return bh_stateanim_APToken.APNumber(lexer.current);
}},{ rule : "[@|#|!]?[a-zA-Z0-9_\\-\\$]+", func : function(lexer) {
	var str = lexer.current;
	var type = bh_stateanim_APIdentifierType.AITString;
	return bh_stateanim_APToken.APIdentifier(str,bh_stateanim_AnimLexer.keywords.h[str.toLowerCase()],type);
}},{ rule : "\\[", func : function(lexer) {
	return bh_stateanim_APToken.APBracketOpen;
}},{ rule : "\\]", func : function(lexer) {
	return bh_stateanim_APToken.APBracketClosed;
}},{ rule : "\\.\\.", func : function(lexer) {
	return bh_stateanim_APToken.APDoubleDot;
}},{ rule : "\\(", func : function(lexer) {
	return bh_stateanim_APToken.APOpen;
}},{ rule : "\\)", func : function(lexer) {
	return bh_stateanim_APToken.APClosed;
}},{ rule : "\\{", func : function(lexer) {
	return bh_stateanim_APToken.APCurlyOpen;
}},{ rule : "\\}", func : function(lexer) {
	return bh_stateanim_APToken.APCurlyClosed;
}},{ rule : ",", func : function(lexer) {
	return bh_stateanim_APToken.APComma;
}},{ rule : "\\@", func : function(lexer) {
	return bh_stateanim_APToken.APAt;
}},{ rule : ":", func : function(lexer) {
	return bh_stateanim_APToken.APColon;
}},{ rule : ";", func : function(lexer) {
	return bh_stateanim_APToken.APSemiColon;
}},{ rule : "=>", func : function(lexer) {
	return bh_stateanim_APToken.APArrow;
}},{ rule : "[\n\r]", func : function(lexer) {
	return bh_stateanim_APToken.APNewLine;
}},{ rule : "//[^\n\r]*", func : function(lexer) {
	return lexer.token(bh_stateanim_AnimLexer.tok);
}},{ rule : "[ \t]", func : function(lexer) {
	return lexer.token(bh_stateanim_AnimLexer.tok);
}},{ rule : "\"", func : function(lexer) {
	bh_stateanim_AnimLexer.buf = new StringBuf();
	lexer.token(bh_stateanim_AnimLexer.string);
	return bh_stateanim_APToken.APIdentifier(bh_stateanim_AnimLexer.buf.b,null,bh_stateanim_APIdentifierType.AITQuotedString);
}},{ rule : "", func : function(lexer) {
	return bh_stateanim_APToken.APEof;
}}],"tok");
bh_stateanim_AnimLexer.string = hxparse_Lexer.buildRuleset([{ rule : "\\\\\"", func : function(lexer) {
	bh_stateanim_AnimLexer.buf.b += String.fromCodePoint(34);
	return lexer.token(bh_stateanim_AnimLexer.string);
}},{ rule : "\\\\u[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]", func : function(lexer) {
	var _this = bh_stateanim_AnimLexer.buf;
	var code = Std.parseInt("0x" + HxOverrides.substr(lexer.current,2,null));
	var x = String.fromCodePoint(code);
	_this.b += Std.string(x);
	return lexer.token(bh_stateanim_AnimLexer.string);
}},{ rule : "\"", func : function(lexer) {
	return new hxparse_Position(lexer.source,lexer.pos - lexer.current.length,lexer.pos).pmax;
}},{ rule : "[^\"]", func : function(lexer) {
	bh_stateanim_AnimLexer.buf.b += Std.string(lexer.current);
	return lexer.token(bh_stateanim_AnimLexer.string);
}}],"string");
h2d_Flow.PADDING_IGNORE_PARENT = -2147483444;
h2d_HtmlText.REG_SPACES = new EReg("[\r\n\t ]+","g");
h3d_impl_RenderContext.STRICT = true;
h3d_Buffer.GUID = 0;
h3d_Engine.SOFTWARE_DRIVER = false;
h3d_Engine.ANTIALIASING = 0;
h3d_MatrixImpl.tmp = new h3d_MatrixImpl();
h3d_impl_GlDriver.ALLOW_WEBGL2 = true;
h3d_impl_GlDriver.BLACK = (function($this) {
	var $r;
	var x = 0;
	var y = 0;
	var z = 0;
	var w = 0;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	$r = new h3d_Vector4Impl(x,y,z,w);
	return $r;
}(this));
h3d_impl_GlDriver.outOfMemoryCheck = false;
h3d_impl_GlDriver.TFILTERS = [[[9728,9728],[9729,9729]],[[9728,9984],[9729,9985]],[[9728,9986],[9729,9987]]];
h3d_impl_GlDriver.TWRAP = [33071,10497];
h3d_impl_GlDriver.FACES = [0,1028,1029,1032];
h3d_impl_GlDriver.BLEND = [1,0,770,768,772,774,771,769,773,775,32769,32771,32770,32772,776];
h3d_impl_GlDriver.COMPARE = [519,512,514,517,516,518,513,515];
h3d_impl_GlDriver.STENCIL_OP = [7680,0,7681,7682,34055,7683,34056,5386];
h3d_impl_GlDriver.OP = [32774,32778,32779,32775,32776];
h3d_impl_GlDriver.CUBE_FACES = [34069,34070,34071,34072,34073,34074];
h3d_impl_GlDriver.CBUFFERS = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 32) {
			var i = _g1++;
			var _g2 = [];
			var _g3 = 0;
			var _g4 = i;
			while(_g3 < _g4) {
				var k = _g3++;
				_g2.push(36064 + k);
			}
			_g.push(_g2);
		}
	}
	$r = _g;
	return $r;
}(this));
h3d_impl_TextureCache.checkFlags = -1;
h3d_mat_Defaults.defaultKillAlphaThreshold = 0.5;
h3d_mat_Defaults.loadingTextureColor = -65281;
h3d_mat_MaterialSetup.current = new h3d_mat_MaterialSetup("Default");
h3d_mat_Texture.UID = 0;
h3d_mat_Texture.PREVENT_AUTO_DISPOSE = 2147483647;
h3d_mat_Texture.nativeFormat = hxd_PixelFormat.RGBA;
h3d_mat_Texture.TRILINEAR_FILTERING_ENABLED = true;
h3d_mat_Texture.DEFAULT_WRAP = h3d_mat_Wrap.Clamp;
h3d_pass_Blur.__meta__ = { obj : { ignore : ["shader"]}};
h3d_pass__$Border_BorderShader.SRC = "HXSMHWgzZC5wYXNzLl9Cb3JkZXIuQm9yZGVyU2hhZGVyCQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgVjb2xvcgUMAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMrDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMAgoFDAUMAA";
h3d_pass__$Border_BorderShader._MODULE = "h3d.pass.Border";
h3d_pass_ColorMatrixShader.SRC = "HXSMGmgzZC5wYXNzLkNvbG9yTWF0cml4U2hhZGVyFQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgd0ZXh0dXJlCgICAAALBm1hdHJpeAcCAAAMCHVzZUFscGhhAgIAAQAAAAAADQd1c2VNYXNrAgIAAQAAAAAADgptYXNrSW52ZXJ0AgIAAQAAAAAADw9oYXNTZWNvbmRNYXRyaXgCAgABAAAAAAAQB21hdHJpeDIHAgAAEQRtYXNrCgICAAASCG1hc2tNYXRBBQsCAAATCG1hc2tNYXRCBQsCAAAUCW1hc2tQb3dlcgMCAAAVC21hc2tDaGFubmVsBQwCAAAWCF9faW5pdF9fDgYAABcGdmVydGV4DgYAABgFYXBwbHkOBgAAGQhmcmFnbWVudA4GAAAEAhYAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAXAAAFAQYEAgYFDAkDKw4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAMYAhoFY29sb3IFDAQAABsDbWF0BwQAAAUMBQENCwIMAgYBAhoFDAIbBwUMBgEJAysOAgoCGgUMkgAFCwEDAAAAAAAA8D8DBQwCGwcFDAUMAAABGQAABQELAg0CBQUIHAVjb2xvcgUMBAAACQMiDgICCgoCAgMFCgUMAAgdAnV2BQsEAAAJAyoOAgIDBQoBAwAAAAAAAPA/AwULAAgeAWsDBAAACQMIDgIJAx4OAgkDIg4CAhEKAgkDKQ4CCQMeDgICHQULAhIFCwMJAx4OAgIdBQsCEwULAwUKBQwCFQUMAwIUAwMACB8GY29sb3IyBQwEAAALAg8CCQIYDgICHAUMAhAHBQwCHAUMBQwABgQCBwUMCwIOAgkDGA4DAh8FDAkCGA4CAhwFDAILBwUMAh4DBQwJAxgOAwkCGA4CAhwFDAILBwUMAh8FDAIeAwUMBQwFDAAGBAIHBQwJAhgOAgkDIg4CAgoKAgIDBQoFDAILBwUMBQwAAA";
h3d_pass_ColorMatrixShader._MODULE = "h3d.pass.ColorMatrix";
h3d_pass__$Copy_ArrayCopyShader.SRC = "HXSMHmgzZC5wYXNzLl9Db3B5LkFycmF5Q29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQoDAgAACwVsYXllcgECAAAMCF9faW5pdF9fDgYAAA0GdmVydGV4DgYAAA4IZnJhZ21lbnQOBgAAAwIMAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADQAABQEGBAIGBQwJAysOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDgAABQEGBAIIBQwJAyIOAgIKCgMJAyoOAgIJBQoJAycOAQILAQMFCwUMBQwA";
h3d_pass__$Copy_ArrayCopyShader._MODULE = "h3d.pass.Copy";
h3d_pass__$Copy_CopyShader.SRC = "HXSMGWgzZC5wYXNzLl9Db3B5LkNvcHlTaGFkZXIJAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKB3RleHR1cmUKAgIAAAsIX19pbml0X18OBgAADAZ2ZXJ0ZXgOBgAADQhmcmFnbWVudA4GAAADAgsAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAMAAAFAQYEAgYFDAkDKw4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAENAAAFAQYEAggFDAkDIg4CAgoKAgIJBQoFDAUMAA";
h3d_pass__$Copy_CopyShader._MODULE = "h3d.pass.Copy";
h3d_pass__$CubeCopy_CubeCopyShader.SRC = "HXSMIWgzZC5wYXNzLl9DdWJlQ29weS5DdWJlQ29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQoGAgAACwNtYXQGAgAADAhfX2luaXRfXw4GAAANBnZlcnRleA4GAAAOCGZyYWdtZW50DgYAAAMCDAAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA0AAAUBBgQCBgUMCQMrDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ4AAAUCCA8CdXYFCgQAAAYDBgECCQUKAQMAAAAAAAAAQAMFCgEDAAAAAAAA8D8DBQoABgQCCAUMCQMiDgICCgoGCQMgDgEGAQkDKg4CAg8FCgEDAAAAAAAA8D8DBQsCCwYFCwULBQwFDAA";
h3d_pass__$CubeCopy_CubeCopyShader._MODULE = "h3d.pass.CubeCopy";
h3d_pass_Outline.__meta__ = { obj : { ignore : ["shader"]}};
h3d_shader_AmbientLight.SRC = "HXSMF2gzZC5zaGFkZXIuQW1iaWVudExpZ2h0CgEGZ2xvYmFsDQECAgxhbWJpZW50TGlnaHQFCwABAAMQcGVyUGl4ZWxMaWdodGluZwIAAQEAAAAAAAAAAAQKcGl4ZWxDb2xvcgUMBAAABQ9saWdodFBpeGVsQ29sb3IFCwQAAAYKbGlnaHRDb2xvcgULBAAABwhhZGRpdGl2ZQICAAEAAAAAAAgIX19pbml0X18OBgAACRBfX2luaXRfX2ZyYWdtZW50DgYAAAoJY2FsY0xpZ2h0DgYAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAABQIIAAAFAQYEAgYFCwsCBwICAgULCQMqDgEBAwAAAAAAAAAAAwULBQsFCwACCQAABQEGBAIFBQsLAgcCAgIFCwkDKg4BAQMAAAAAAAAAAAMFCwULBQsAAwoBDQpsaWdodENvbG9yBQsEAAAFCwUBDQsCBwICDQULBAYAAgIFCwYBCQMWDgIEBgMBAwAAAAAAAPA/AwICBQsFCwULAQMAAAAAAAAAAAMFCwINBQsFCwULBQsFCwAAAAsAAAUBCwcCAgMCAgaBCgIEBQySAAULCQIKDgECBgULBQsFCwAAAAEMAAAFAQsCAwIGgQoCBAUMkgAFCwkCCg4BAgUFCwULBQsAAAA";
h3d_shader_AmbientLight._MODULE = "h3d.shader.AmbientLight";
h3d_shader_Base2d.SRC = "HXSMEWgzZC5zaGFkZXIuQmFzZTJkGwEFaW5wdXQNAQMCCHBvc2l0aW9uBQoBAQADAnV2BQoBAQAEBWNvbG9yBQwBAQABAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgEdGltZQMAAAAJBnpWYWx1ZQMCAAAKB3RleHR1cmUKAgIAAAsOc3ByaXRlUG9zaXRpb24FDAQAAAwQYWJzb2x1dGVQb3NpdGlvbgUMBAAADQpwaXhlbENvbG9yBQwEAAAODHRleHR1cmVDb2xvcgUMBAAADwxjYWxjdWxhdGVkVVYFCgMAABAKaXNSZWxhdGl2ZQICAAEAAAAAABEFY29sb3IFDAIAABIPYWJzb2x1dGVNYXRyaXhBBQsCAAATD2Fic29sdXRlTWF0cml4QgULAgAAFA1maWx0ZXJNYXRyaXhBBQsCAAAVDWZpbHRlck1hdHJpeEIFCwIAABYIaGFzVVZQb3MCAgABAAAAAAAXBXV2UG9zBQwCAAAYCWtpbGxBbHBoYQICAAEAAAAAABkKcGl4ZWxBbGlnbgICAAEAAAAAABoQaGFsZlBpeGVsSW52ZXJzZQUKAgAAGwl2aWV3cG9ydEEFCwIAABwJdmlld3BvcnRCBQsCAAAdDm91dHB1dFBvc2l0aW9uBQwEAAAeCF9faW5pdF9fDgYAAB8GdmVydGV4DgYAACAIZnJhZ21lbnQOBgAAAwIeAAAFBgYEAgsFDAkDKw4DAgIFCgIJAwEDAAAAAAAA8D8DBQwFDAsCEAIFAwYECgIMBQwAAAMJAx4OAgkDKg4CCgILBQwRAAUKAQMAAAAAAADwPwMFCwISBQsDAwYECgIMBQwEAAMJAx4OAgkDKg4CCgILBQwRAAUKAQMAAAAAAADwPwMFCwITBQsDAwYECgIMBQw5AAUKCgILBQw5AAUKBQoABgQCDAUMAgsFDAUMAAYEAg8FCgsCFgIGAAYBAgMFCgoCFwUMOQAFCgUKCgIXBQwRAAUKBQoCAwUKBQoFCgYEAg0FDAsCEAIGAQIRBQwCBAUMBQwCBAUMBQwFDAYEAg4FDAkDIg4CAgoKAgIPBQoFDAUMBoECDQUMAg4FDAUMAAAfAAAFBQghA3RtcAULBAAACQMqDgIKAgwFDBEABQoBAwAAAAAAAPA/AwULAAYEAiEFCwkDKg4DCQMeDgICIQULAhQFCwMJAx4OAgIhBQsCFQULAwEDAAAAAAAA8D8DBQsFCwYEAh0FDAkDKw4DCQMeDgICIQULAhsFCwMJAx4OAgIhBQsCHAULAwoCDAUMOQAFCgUMBQwLAhkCBoMKAh0FDBEABQoCGgUKBQoAAAYEAgYFDAIdBQwFDAABIAAABQILBg4CGAIGCQoCDQUMDAADAQP8qfHSTWJQPwMCAgwAAAAGBAIHBQwCDQUMBQwA";
h3d_shader_Base2d._MODULE = "h3d.shader.Base2d";
h3d_shader_BaseMesh.SRC = "HXSME2gzZC5zaGFkZXIuQmFzZU1lc2gcAQZjYW1lcmENAQwCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAIEHByZXZpb3VzVmlld1Byb2oHAAEACQ9pbnZlcnNlVmlld1Byb2oHAAEACgV6TmVhcgMAAQALBHpGYXIDAAEADANkaXIFCwMBAA0Naml0dGVyT2Zmc2V0cwUMAAEAAAAADgZnbG9iYWwNAgUPBHRpbWUDAA4AEAlwaXhlbFNpemUFCgAOABEJbW9kZWxWaWV3BwAOAQMSEG1vZGVsVmlld0ludmVyc2UHAA4BAxMRcHJldmlvdXNNb2RlbFZpZXcHAA4BAwAAABQFaW5wdXQNAwIVCHBvc2l0aW9uBQsBFAAWBm5vcm1hbAULARQAAQAAFwZvdXRwdXQNBAYYCHBvc2l0aW9uBQwEFwAZBWNvbG9yBQwEFwAaBWRlcHRoAwQXABsGbm9ybWFsBQsEFwAcCXdvcmxkRGlzdAMEFwAdCHZlbG9jaXR5BQoEFwAEAAAeEHJlbGF0aXZlUG9zaXRpb24FCwQAAB8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAIBtwcmV2aW91c1RyYW5zZm9ybWVkUG9zaXRpb24FCwQAACEYcGl4ZWxUcmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAiEXRyYW5zZm9ybWVkTm9ybWFsBQsEAAAjEXByb2plY3RlZFBvc2l0aW9uBQwEAAAkGXByZXZpb3VzUHJvamVjdGVkUG9zaXRpb24FDAQAACUKcGl4ZWxDb2xvcgUMBAAAJgVkZXB0aAMEAAAnC25kY1Bvc2l0aW9uBQoEAAAoE3ByZXZpb3VzTmRjUG9zaXRpb24FCgQAACkIc2NyZWVuVVYFCgQAACoJc3BlY1Bvd2VyAwQAACsJc3BlY0NvbG9yBQsEAAAsCXdvcmxkRGlzdAMEAAAtDXBpeGVsVmVsb2NpdHkFCgQAAC4FY29sb3IFDAIAAC8Nc3BlY3VsYXJQb3dlcgMCAAEHAAAAAAAAAAAAAAAAAABZQDAOc3BlY3VsYXJBbW91bnQDAgABBwAAAAAAAAAAAAAAAAAAJEAxDXNwZWN1bGFyQ29sb3IFCwIAADIIX19pbml0X18OBgAAMxBfX2luaXRfX2ZyYWdtZW50DgYAADQGdmVydGV4DgYAADUIZnJhZ21lbnQOBgAABAIyAAAFDQYEAh4FCwIVBQsFCwYEAh8FCwYBAh4FCwkDNQ4BAhEHCAULBQsGBAIjBQwGAQkDKw4CAh8FCwEDAAAAAAAA8D8DBQwCBwcFDAUMBgQCIAULBgECHgULCQM1DgECEwcIBQsFCwYEAiQFDAYBCQMrDgICIAULAQMAAAAAAADwPwMFDAIIBwUMBQwGBAIiBQsJAyAOAQQGAQIWBQsJAzMOAQIRBwYFCwULBQsFCwYEAgwFCwkDIA4BBAYDAgQFCwIfBQsFCwULBQsFCwYEAiUFDAIuBQwFDAYEAioDAi8DAwYEAisFCwYBAjEFCwIwAwULBQsGBAIpBQoJAzsOAQYCCgIjBQwRAAUKCgIjBQwMAAMFCgUKBQoGBAImAwYCCgIjBQwIAAMKAiMFDAwAAwMDBgQCLAMGAgkDHA4BBgMCHwULAgQFCwULAwILAwMDAAIzAAAFCgYEAiIFCwkDIA4BAiIFCwULBQsGBAInBQoGAgoCIwUMEQAFCgoCIwUMDAADBQoFCgYEAigFCgYCCgIkBQwRAAUKCgIkBQwMAAMFCgUKBgQCKQUKCQM7DgECJwUKBQoFCgYEAiYDBgIKAiMFDAgAAwoCIwUMDAADAwMGBAIqAwIvAwMGBAIrBQsGAQIxBQsCMAMFCwULBoMCJwUKCgINBQwRAAUKBQoGgwIoBQoKAg0FDDkABQoFCgYEAi0FCgYBBAYDAigFCgInBQoFCgUKCQMpDgIBAwAAAAAAAOA/AwEDAAAAAAAA4L8DBQoFCgUKAAA0AAAFAgYEAhgFDAYBAiMFDAkDKw4EAQMAAAAAAADwPwMCBQMBAwAAAAAAAPA/AwEDAAAAAAAA8D8DBQwFDAUMBgQCIQULAh8FCwULAAE1AAAFBQYEAhkFDAIlBQwFDAYEAhoDAiYDAwYEAhsFCwIiBQsFCwYEAhwDAiwDAwYEAh0FCgItBQoFCgA";
h3d_shader_BaseMesh._MODULE = "h3d.shader.BaseMesh";
h3d_shader_Blur.SRC = "HXSMD2gzZC5zaGFkZXIuQmx1chsBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoLaW52ZXJzZVByb2oHAgAACwd0ZXh0dXJlCgICAAAMDGRlcHRoVGV4dHVyZQoCAgAADQdRdWFsaXR5AQIAAQAAAAAADgdpc0RlcHRoAgIAAQAAAAAADwZ2YWx1ZXMPAw0CAAAQB29mZnNldHMPAw0CAAARBXBpeGVsBQoCAAASDWhhc0ZpeGVkQ29sb3ICAgABAAAAAAATEHNtb290aEZpeGVkQ29sb3ICAgABAAAAAAAUCmZpeGVkQ29sb3IFDAIAABUQaXNEZXB0aERlcGVuZGFudAICAAEAAAAAABYOZGVwdGhUaHJlc2hvbGQDAgAAFxVkZXB0aFRocmVzaG9sZE1heERpc3QDAgAAGAZpc0N1YmUCAgABAAAAAAAZC2N1YmVUZXh0dXJlCgYCAAAaB2N1YmVEaXIGAgAAGwhfX2luaXRfXw4GAAAcBnZlcnRleA4GAAAdDnNjYWxlVGhyZXNob2xkDgYAAB4IZnJhZ21lbnQOBgAAHw9nZXRWaWV3UG9zaXRpb24OBgAABQIbAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAAHAAABQEGBAIGBQwJAysOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAADHQEgAXoDBAAAAwUDCCEBdAMEAAACFgMACwYHAhcDAQMAAAAAAAAAAAMCBoECIQMGAAEDAAAAAAAA8D8DCQMWDgIGAwIgAwIXAwMBAwAAAAAAAAAAAwMDAwAADQIhAwAAAR4AAAUCCwIVAgUMCCIKZGltZW5zaW9ucwUKBAAACQMlDgECCwoCBQoACCMNaW52RGltZW5zaW9ucwUKBAAABgIBAwAAAAAAAPA/AwIiBQoFCgAIJAVjb29yZAUKBAAACgNHBQwRAAUKAAglBmZyYWdVVgUKBAAABgEKAiQFChEABQoCIwUKBQoACCYBcAULBAAACQIfDgECJQUKBQsACCcEbWluWgMEAAAKAiYFCwgAAwAIKAFjBQwEAAAJAyIOAgILCgICJQUKBQwACCkFY29sb3IFDAQAAAkDKw4EAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMFDAAIKgZpc0VkZ2UCBAAAAQEAAgAVBnVucm9sbAAOKwFpAQQAAAYVBwMCDQEBBgACDQEBAgEAAAABAQ8BAAAFBQgsCGN1ckNvb3JkBQoEAAAGAAkDEQ4BBgACJAUKBgEGAQQGAQIRBQoCIgUKBQoFCgkDKQ4BAQMAAAAAAADwPwMFCgUKCQMnDgECKwEDBQoFCgUKCQMpDgEBAwAAAAAAAOA/AwUKBQoACC0JbmVhcmVzdFVWBQoEAAAGAQIsBQoCIwUKBQoACC4EcGN1cgULBAAACQIfDgECLQUKBQsACC8BZAMEAAAJAw8OAQYDCgIuBQsIAAMKAiYFCwgAAwMDAAYEAioCBg8CKgIEBgcCLwMJAh0OAQkDFQ4CCgIuBQsIAAMKAiYFCwgAAwMDAgICAgAAABUGdW5yb2xsAA4wAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUICDEIY3VyQ29vcmQFCgQAAAYACQMRDgEGAAIkBQoGAQYBBAYBAhEFCgIiBQoFCgUKEQIQDwMNCwYJAjABAQIAAAAAAQIHAwIwAQECMAEBAwUKCQMnDgECMAEDBQoFCgUKCQMpDgEBAwAAAAAAAOA/AwUKBQoACDIJbmVhcmVzdFVWBQoEAAAGAQIxBQoCIwUKBQoACDMCdXYFCgQAAAYAAiUFCgYBBgECEQUKEQIQDwMNCwYJAjABAQIAAAAAAQIHAwIwAQECMAEBAwUKCQMnDgECMAEDBQoFCgAINARjY3VyBQwEAAAJAyIOAgILCgILBAIqAgICMgUKAjMFCgUKBQwACDUEcGN1cgULBAAACQIfDgECMgUKBQsACDYBZAMEAAAJAw8OAQYDCgI1BQsIAAMKAiYFCwgAAwMDAAYEAigFDAsEBgcCNgMJAh0OAQkDFQ4CCgI1BQsIAAMKAiYFCwgAAwMDAgICKAUMAjQFDAUMBQwGgAIpBQwGAQIoBQwRAg8PAw0LBgkCMAEBAgAAAAABAgcDAjABAQIwAQEDBQwFDAAAAAYEAggFDAIpBQwFDAALAg4CBQMINwN2YWwDBAAAAQMAAAAAAAAAAAMAFQZ1bnJvbGwADjgBaQEEAAAGFQYABwMCDQEBAQIBAAAAAQECDQEPAQAABQELAhgCBoACNwMGAQkDOA4BCQMiDgICGQoGBgEJAyoOAgYDBgEEBgACAwUKBgEGAQIRBQoRAhAPAw0LBgkCOAEBAgAAAAABAgcDAjgBAQI4AQEDBQoJAycOAQI4AQMFCgUKBQoBAwAAAAAAAABAAwUKAQMAAAAAAADwPwMFCgEDAAAAAAAA8D8DBQsCGgYFCwUMAxECDw8DDQsGCQI4AQECAAAAAAECBwMCOAEBAjgBAQMDAwaAAjcDBgEJAzgOAQkDIg4CAgsKAgYAAgMFCgYBBgECEQUKEQIQDwMNCwYJAjgBAQIAAAAAAQIHAwI4AQECOAEBAwUKCQMnDgECOAEDBQoFCgUMAxECDw8DDQsGCQI4AQECAAAAAAECBwMCOAEBAjgBAQMDAwAAAAAGBAIIBQwJAzcOAQkDFQ4CAjcDAQPLGlDK///vPwMDBQwFDAAFAwg5BWNvbG9yBQwEAAAJAysOBAEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQwAFQZ1bnJvbGwADjoBaQEEAAAGFQYABwMCDQEBAQIBAAAAAQECDQEPAQAABQELAhgCBoACOQUMBgEJAyIOAgIZCgYGAQkDKg4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQI6AQECAAAAAAECBwMCOgEBAjoBAQMFCgkDJw4BAjoBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwRAg8PAw0LBgkCOgEBAgAAAAABAgcDAjoBAQI6AQEDBQwFDAaAAjkFDAYBCQMiDgICCwoCBgACAwUKBgEGAQIRBQoRAhAPAw0LBgkCOgEBAgAAAAABAgcDAjoBAQI6AQEDBQoJAycOAQI6AQMFCgUKBQwRAg8PAw0LBgkCOgEBAgAAAAABAgcDAjoBAQI6AQEDBQwFDAAAAAAGBAIIBQwCOQUMBQwAAAALAhICBQILAhMCBoEKAggFDAwAAwoCFAUMDAADAwYECgIIBQwMAAMGAQoCFAUMDAADCQMnDgEGBwoCCAUMDAADAQMAAAAAAAAAAAMCAwMDAAYECgIIBQySAAULBgEKAhQFDJIABQsKAggFDAwAAwULBQsAAAAAAx8BOwJ1dgUKBAAABQsFBAg8BWRlcHRoAwQAAAoJAyIOAgIMCgICOwUKBQwAAAMACD0EdGVtcAUMBAAABgEJAysOAwkDPA4BAjsFCgUKAjwDAQMAAAAAAADwPwMFDAIKBwUMAAg+CG9yaWdpbldTBQsEAAAGAgoCPQUMkgAFCwoCPQUMDAADBQsADQI+BQsAAA";
h3d_shader_Blur._MODULE = "h3d.shader.Blur";
h3d_shader_ColorAdd.SRC = "HXSME2gzZC5zaGFkZXIuQ29sb3JBZGQDAQpwaXhlbENvbG9yBQwEAAACBWNvbG9yBQsCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGgAoCAQUMkgAFCwICBQsFCwA";
h3d_shader_ColorAdd._MODULE = "h3d.shader.ColorAdd";
h3d_shader_ColorKey.SRC = "HXSME2gzZC5zaGFkZXIuQ29sb3JLZXkDAQhjb2xvcktleQUMAgAAAgx0ZXh0dXJlQ29sb3IFDAQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAggEBWNkaWZmBQwEAAAGAwICBQwCAQUMBQwACwYJCQMeDgICBAUMAgQFDAMBA/Fo44i1+OQ+AwIMAAAAAA";
h3d_shader_ColorKey._MODULE = "h3d.shader.ColorKey";
h3d_shader_ColorMatrix.SRC = "HXSMFmgzZC5zaGFkZXIuQ29sb3JNYXRyaXgEAQpwaXhlbENvbG9yBQwEAAACBm1hdHJpeAcCAAADB2VuYWJsZWQCAgABAAAAAAAECGZyYWdtZW50DgYAAAEBBAAABQELAgMCBgQCAQUMCQMrDgIKBAYBCQMrDgIKAgEFDJIABQsBAwAAAAAAAPA/AwUMAgIHBQwFDJIABQsKBAYBAgEFDAICBwUMBQwMAAMFDAUMAAAA";
h3d_shader_ColorMatrix._MODULE = "h3d.shader.ColorMatrix";
h3d_shader_DirShadow.SRC = "HXSMFGgzZC5zaGFkZXIuRGlyU2hhZG93EAEGZW5hYmxlAgIAAQAAAAAAAgdVU0VfRVNNAgIAAQAAAAAAAwtzaGFkb3dQb3dlcgMCAAAEB1VTRV9QQ0YCAgABAAAAAAAFC1BDRl9TQU1QTEVTAQIAAQAAAAAABghwY2ZTY2FsZQMCAAAHCXNoYWRvd1JlcwUKAgAACAlzaGFkb3dNYXARAQIAAAkKc2hhZG93UHJvaggCAAAKCnNoYWRvd0JpYXMDAgAACxN0cmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAMBnNoYWRvdwMEAAANCWRpclNoYWRvdwMEAAAOC3BvaXNzb25EaXNrDwUMBQIAAA8EcmFuZA4GAAAQCGZyYWdtZW50DgYAAAIDDwERAXYDBAAAAwUCCBICZHADBAAACQMeDgIJAysOAQIRAwUMCQMrDgQBA18pyxDH+ilAAwED9P3UeOmOU0ADAQOiRbbz/ZRGQAMBA1CNl24Sq1dAAwUMAwANCQMTDgEGAQkDAg4BAhIDAwEDUPwYc9Fd5UADAwMAAAEQAAAFAgsCAQIFAQsCBAIFCwYEAgwDAQMAAAAAAADwPwMDCBMJdGV4ZWxTaXplBQoEAAAGAgEDAAAAAAAA8D8DAgcFCgUKAAgUCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACBUIc2hhZG93VXYFCgQAAAkDOw4BCgIUBQsRAAUKBQoACBYEek1heAMEAAAJAzYOAQoCFAULCAADAwAIFwNyb3QDBAAABgEGAQkCDw4BBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwEDH4XrUbgeCUADAwEDAAAAAAAAAEADAwAIGARjb3NSAwQAAAkDAw4BAhcDAwAIGQRzaW5SAwQAAAkDAg4BAhcDAwAIGg5zYW1wbGVTdHJlbmd0aAMEAAAGAgEDAAAAAAAA8D8DCQMnDgECBQEDAwAIGwhvZmZTY2FsZQUKBAAABgECEwUKAgYDBQoADhwBaQEEAAAGFQECAAAAAAECBQEPAQAABQQIHQZvZmZzZXQFCgQAAAYBChECDg8FDAUCHAEFDBEABQoCGwUKBQoABgQCHQUKCQMpDgIGAwYBAhgDCgIdBQoAAAMDBgECGQMKAh0FCgQAAwMDBgAGAQIYAwoCHQUKBAADAwYBAhkDCgIdBQoAAAMDAwUKBQoIHgVkZXB0aAMEAAAJA0EOAwIIEQEGAAIVBQoCHQUKBQoBAwAAAAAAAAAAAwMABoMCDAMLBAYHBgMCFgMCCgMDAh4DAgICGgMBAwAAAAAAAAAAAwMDAAAACwICAgUFCB8Jc2hhZG93UG9zBQsEAAAGAQILBQsCCQgFCwAIIAVkZXB0aAMEAAAJA0AOAgIIEQEJAzsOAQoCHwULEQAFCgUKAwAIIQR6TWF4AwQAAAkDNg4BCgIfBQsIAAMDAAgiBWRlbHRhAwQAAAYDCQMVDgIEBgACIAMCCgMDAwIhAwMCIQMDAAYEAgwDCQM2DgEJAwkOAQYBAgMDAiIDAwMDAwAFBAgjCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACCQIc2hhZG93VXYFCgQAAAkDOw4BCgIjBQsRAAUKBQoACCUFZGVwdGgDBAAACQNADgICCBEBCgIkBQoRAAUKAwAGBAIMAwsGBwYDCQM2DgEKAiMFCwgAAwMCCgMDAiUDAgEDAAAAAAAAAAADAQMAAAAAAADwPwMDAwAAAAAAAAYEAg0DAgwDAwA";
h3d_shader_DirShadow._MODULE = "h3d.shader.DirShadow";
h3d_shader_GenTexture.SRC = "HXSMFWgzZC5zaGFkZXIuR2VuVGV4dHVyZQoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEbW9kZQECAAEAAAAAAAsFY29sb3IFDAIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKw4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFARMEAgoBAQEBAQIAAAAAAQUBBgQCCAUMCwYHCQMcDgEKAgYFDBEABQoDAQMAAAAAAADwPwMCCQMrDgEBAwAAAAAAAAAAAwUMAgsFDAUMBQwAAAAA";
h3d_shader_GenTexture._MODULE = "h3d.shader.GenTexture";
h3d_shader_LineShader.SRC = "HXSMFWgzZC5zaGFkZXIuTGluZVNoYWRlcgwBBmNhbWVyYQ0BAwIEdmlldwcAAQADBHByb2oHAAEABAh2aWV3UHJvagcAAQAAAAAFBmdsb2JhbA0CAgYJcGl4ZWxTaXplBQoABQAHCW1vZGVsVmlldwcABQEDAAAACAVpbnB1dA0DAwkIcG9zaXRpb24FCwEIAAoGbm9ybWFsBQsBCAALAnV2BQoBCAABAAAMBm91dHB1dA0EAQ0IcG9zaXRpb24FDAQMAAQAAA4RdHJhbnNmb3JtZWROb3JtYWwFCwQAAA8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAEBFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAEQtsZW5ndGhTY2FsZQMCAAASBXdpZHRoAwIAABMEcGRpcgUMBAAAFAhfX2luaXRfXw4GAAAVBnZlcnRleA4GAAACAhQAAAUBBQUIFgNkaXIFCwQAAAYBAgoFCwkDMw4BAgcHBgULAAYEAhMFDAYBCQMrDgIGAQIWBQsJAzMOAQICBwYFCwEDAAAAAAAA8D8DBQwCAwcFDAUMBoEKAhMFDBEABQoGAgEDAAAAAAAA8D8DCQMNDgEGAAYBCgITBQwAAAMKAhMFDAAAAwMGAQoCEwUMBAADCgITBQwEAAMDAwMDBQoGgAIPBQsGAQYBAhYFCwoCCwUKAAADBQsCEQMFCwULBgQCDgULCQMgDgECFgULBQsFCwAAABUAAAUBBoAKAhAFDBEABQoGAQYBBgEGAQQGAQoCEwUMBQAFCgkDKQ4CAQMAAAAAAADwPwMBAwAAAAAAAPC/AwUKBQoFCgQGAwoCCwUKBAADAQMAAAAAAADgPwMDAwUKCgIQBQwIAAMFCgIGBQoFCgISAwUKBQoA";
h3d_shader_LineShader._MODULE = "h3d.shader.LineShader";
h3d_shader_MinMaxShader.SRC = "HXSMF2gzZC5zaGFkZXIuTWluTWF4U2hhZGVyCwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgR0ZXhBCgICAAALBHRleEIKAgIAAAwFaXNNYXgCAgABAAAAAAANCF9faW5pdF9fDgYAAA4GdmVydGV4DgYAAA8IZnJhZ21lbnQOBgAAAwINAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADgAABQEGBAIGBQwJAysOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDwAABQMIEAFhBQwEAAAJAyIOAgIKCgICCQUKBQwACBEBYgUMBAAACQMiDgICCwoCAgkFCgUMAAYEAggFDAsCDAIJAxYOAgIQBQwCEQUMBQwJAxUOAgIQBQwCEQUMBQwFDAUMAA";
h3d_shader_MinMaxShader._MODULE = "h3d.shader.MinMaxShader";
h3d_shader_CubeMinMaxShader.SRC = "HXSMG2gzZC5zaGFkZXIuQ3ViZU1pbk1heFNoYWRlcgwBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEdGV4QQoGAgAACwR0ZXhCCgYCAAAMBWlzTWF4AgIAAQAAAAAADQNtYXQGAgAADghfX2luaXRfXw4GAAAPBnZlcnRleA4GAAAQCGZyYWdtZW50DgYAAAMCDgAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA8AAAUBBgQCBgUMCQMrDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAARAAAAUFCBECdXYFCgQAAAYDBgECCQUKAQMAAAAAAAAAQAMFCgEDAAAAAAAA8D8DBQoACBIDZGlyBQsEAAAGAQkDKg4CAhEFCgEDAAAAAAAA8D8DBQsCDQYFCwAIEwFhBQwEAAAJAyIOAgIKCgYCEgULBQwACBQBYgUMBAAACQMiDgICCwoGAhIFCwUMAAYEAggFDAsCDAIJAxYOAgITBQwCFAUMBQwJAxUOAgITBQwCFAUMBQwFDAUMAA";
h3d_shader_CubeMinMaxShader._MODULE = "h3d.shader.MinMaxShader";
h3d_shader_NormalMap.SRC = "HXSMFGgzZC5zaGFkZXIuTm9ybWFsTWFwCgEGY2FtZXJhDQECAghwb3NpdGlvbgULAAEAAwNkaXIFCwMBAAAAAAQGZ2xvYmFsDQIBBQltb2RlbFZpZXcHAAQBAwAAAAYFaW5wdXQNAwIHBm5vcm1hbAULAQYACAd0YW5nZW50BQsBBgABAAAJB3RleHR1cmUKAgIAAAoMY2FsY3VsYXRlZFVWBQoEAAALE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAwRdHJhbnNmb3JtZWROb3JtYWwFCwQAAA0SdHJhbnNmb3JtZWRUYW5nZW50BQwDAAAODl9faW5pdF9fdmVydGV4DgYAAA8IZnJhZ21lbnQOBgAAAgIOAAAFAQYEAg0FDAkDKw4CBgECCAULCQMzDgECBQcGBQsLBgcJAx4OAgIIBQsCCAULAwEDAAAAAAAA4D8DAgEDAAAAAAAA8D8DAQMAAAAAAADwvwMDBQwFDAABDwAABQUIEAFuBQsEAAACDAULAAgRAm5mBQsEAAAJAzoOAQkDIg4CAgkKAgIKBQoFDAULAAgSBHRhblgFCwQAAAkDIA4BCgINBQySAAULBQsACBMEdGFuWQULBAAABgEJAx8OAgIQBQsCEgULBQsHAwoCDQUMDAADAwULAAYEAgwFCwkDIA4BBAYABgAGAQoCEQULAAADAhIFCwULBgEKAhEFCwQAAwITBQsFCwULBgEKAhEFCwgAAwIQBQsFCwULBQsFCwULAA";
h3d_shader_NormalMap._MODULE = "h3d.shader.NormalMap";
h3d_shader_Outline2D.SRC = "HXSMFGgzZC5zaGFkZXIuT3V0bGluZTJEDQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgd0ZXh0dXJlCgICAAALBHNpemUFCgIAAAwHc2FtcGxlcwECAAEAAAAAAA0FY29sb3IFDAIAAA4NbXVsdGlwbHlBbHBoYQECAAEAAAAAAA8IX19pbml0X18OBgAAEAZ2ZXJ0ZXgOBgAAEQhmcmFnbWVudA4GAAADAg8AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAQAAAFAQYEAgYFDAkDKw4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAERAAAFDAgSCG93bkNvbG9yBQwEAAAJAyIOAgIKCgICAwUKBQwACBMIbWF4QWxwaGEDBAAAAQMAAAAAAAAAAAMACBQIY3VyQ29sb3IFDAQAAAAACBUJZGlzcGxhY2VkBQoEAAAAAAgWBWFuZ2xlAwQAAAEDAAAAAAAAAAADAAgXCGRvdWJsZVBpAwQAAAEDGC1EVPshGUADAAgYBHN0ZXADBAAABgICFwMJAycOAQIMAQMDABUGdW5yb2xsAA4ZAWkBBAAABhUBAgAAAAABAgwBDwEAAAUFBoACFgMCGAMDBgQKAhUFCgAAAwYACgIDBQoAAAMGAQoCCwUKAAADCQMDDgECFgMDAwMDBgQKAhUFCgQAAwYACgIDBQoEAAMGAQoCCwUKBAADCQMCDgECFgMDAwMDBgQCFAUMCQMiDgICCgoCAhUFCgUMBQwGBAITAwkDFg4CAhMDCgIUBQwMAAMDAwAAAAgaC3Jlc3VsdEFscGhhAwQAAAkDFg4CAhMDCgISBQwMAAMDAAgbC3Jlc3VsdENvbG9yBQsEAAAGAAoCEgUMkgAFCwYBCgINBQySAAULBAYDAQMAAAAAAADwPwMKAhIFDAwAAwMDBQsFCwAIHANvdXQFCwQAAAYBAhsFCwkDFg4CCQMnDgECDgEDAhoDAwULAAYEAgcFDAkDKw4CAhwFCwYBAhoDCQMYDgMKAg0FDAwAAwEDAAAAAAAA8D8DCgISBQwMAAMDAwUMBQwA";
h3d_shader_Outline2D._MODULE = "h3d.shader.Outline2D";
h3d_shader_Shadow.SRC = "HXSMEWgzZC5zaGFkZXIuU2hhZG93BgEGc2hhZG93DQEFAgNtYXARAQABAAMEcHJvaggAAQAEBWNvbG9yBQsAAQAFBXBvd2VyAwABAAYEYmlhcwMAAQAAAAAHCnBpeGVsQ29sb3IFDAQAAAgTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAACRhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAoJc2hhZG93UG9zBQsEAAEBCwhmcmFnbWVudA4GAAABAQsAAAUGCAwJc2hhZG93UG9zBQsEAAAGAQIJBQsCAwgFCwAIDQVkZXB0aAMEAAAJA0AOAgICEQEJAzsOAQoCDAULEQAFCgUKAwAIDgR6TWF4AwQAAAkDNg4BCgIMBQsIAAMDAAgPBWRlbHRhAwQAAAYDCQMVDgIEBgACDQMCBgMDAwIOAwMCDgMDAAgQBXNoYWRlAwQAAAkDNg4BCQMJDgEGAQIFAwIPAwMDAwAGgQoCBwUMkgAFCwYABgEEBgMBAwAAAAAAAPA/AwIQAwMDCgIEBQuSAAULBQsCEAMFCwULAA";
h3d_shader_Shadow._MODULE = "h3d.shader.Shadow";
h3d_shader_SignedDistanceField.SRC = "HXSMHmgzZC5zaGFkZXIuU2lnbmVkRGlzdGFuY2VGaWVsZA8BBWlucHV0DQEDAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEABAVjb2xvcgUMAQEAAQAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAIBHRpbWUDAAAACQ5zcHJpdGVQb3NpdGlvbgUMBAAAChBhYnNvbHV0ZVBvc2l0aW9uBQwEAAALCnBpeGVsQ29sb3IFDAQAAAwMdGV4dHVyZUNvbG9yBQwEAAANDGNhbGN1bGF0ZWRVVgUKAwAADg5vdXRwdXRQb3NpdGlvbgUMBAAADwdjaGFubmVsAQIAAQAAAAAAEA1hdXRvU21vb3RoaW5nAgIAAQAAAAAAEQthbHBoYUN1dG9mZgMCAAASCXNtb290aGluZwMCAAATBm1lZGlhbg4GAAAUCGZyYWdtZW50DgYAAAIDEwMVAXIDBAAAFgFnAwQAABcBYgMEAAADBQENCQMWDgIJAxUOAgIVAwIWAwMJAxUOAgkDFg4CAhUDAhYDAwIXAwMDAAABFAAABQUIGA10ZXh0dXJlU2FtcGxlBQwEAAACDAUMAAgZCGRpc3RhbmNlAwQAAAAABgQCGQMLBgUCDwEBAgAAAAABAgoCGAUMAAADCwYFAg8BAQIBAAAAAQIKAhgFDAQAAwsGBQIPAQECAgAAAAECCgIYBQwIAAMLBgUCDwEBAgMAAAABAgoCGAUMDAADCQITDgMKAhgFDAAAAwoCGAUMBAADCgIYBQwIAAMDAwMDAwMIGglzbW9vdGhWYWwDBAAACwIQAgkDDw4BBgEJAz8OAQIZAwMBAwAAAAAAAOA/AwMDAhIDAwAGBAIMBQwJAysOBAEDAAAAAAAA8D8DAQMAAAAAAADwPwMBAwAAAAAAAPA/AwkDGw4DBgMCEQMCGgMDBgACEQMCGgMDAhkDAwUMBQwA";
h3d_shader_SignedDistanceField._MODULE = "h3d.shader.SignedDistanceField";
h3d_shader_Utils.SRC = "HXSMEGgzZC5zaGFkZXIuVXRpbHMHAQtib25lTWF0cml4WAgEAAACC2JvbmVNYXRyaXhZCAQAAAMLYm9uZU1hdHJpeFoIBAAABAtib25lTWF0cml4VwgEAAAFC3NraW5XZWlnaHRzBQwEAAAGDmFwcGx5U2tpblBvaW50DgYAAAcMYXBwbHlTa2luVmVjDgYAAAIDBgEIAXAFCwQAAAULBQMICQt0cmFuc2Zvcm1lZAULBAAABgAGAAYBBAYBAggFCwIBCAULBQsKAgUFDAAAAwULBgEEBgECCAULAgIIBQsFCwoCBQUMBAADBQsFCwYBBAYBAggFCwIDCAULBQsKAgUFDAgAAwULBQsACwYHCgIFBQwMAAMBAwAAAAAAAAAAAwIFAQaAAgkFCwYBBAYBAggFCwIECAULBQsKAgUFDAwAAwULBQsAAAANAgkFCwAAAwcBCgF2BQsEAAAFCwUDCAsLdHJhbnNmb3JtZWQFCwQAAAYABgAGAQQGAQIKBQsJAzMOAQIBCAYFCwULCgIFBQwAAAMFCwYBBAYBAgoFCwkDMw4BAgIIBgULBQsKAgUFDAQAAwULBQsGAQQGAQIKBQsJAzMOAQIDCAYFCwULCgIFBQwIAAMFCwULAAsGBwoCBQUMDAADAQMAAAAAAAAAAAMCBQEGgAILBQsGAQQGAQIKBQsJAzMOAQIECAYFCwULCgIFBQwMAAMFCwULAAAADQILBQsAAA";
h3d_shader_Utils._MODULE = "h3d.shader.Skin";
h3d_shader_SkinBase.SRC = "HXSME2gzZC5zaGFkZXIuU2tpbkJhc2UIARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFEWZvdXJCb25lc0J5VmVydGV4AgIAAQAAAAAABgtjYWxjUHJldlBvcwICAAEAAAAAAAcNYm9uZXNNYXRyaXhlcw8IBAIAAQgIEXByZXZCb25lc01hdHJpeGVzDwgEAgABCAA";
h3d_shader_SkinBase._MODULE = "h3d.shader.SkinBase";
h3d_shader_Skin.SRC = "HXSMD2gzZC5zaGFkZXIuU2tpbhIBEHJlbGF0aXZlUG9zaXRpb24FCwQAAAITdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAxF0cmFuc2Zvcm1lZE5vcm1hbAULBAAABAhNYXhCb25lcwECAAEAAAAAAAURZm91ckJvbmVzQnlWZXJ0ZXgCAgABAAAAAAAGC2NhbGNQcmV2UG9zAgIAAQAAAAAABw1ib25lc01hdHJpeGVzDwgEAgABCAgRcHJldkJvbmVzTWF0cml4ZXMPCAQCAAEICQtib25lTWF0cml4WAgEAAAKC2JvbmVNYXRyaXhZCAQAAAsLYm9uZU1hdHJpeFoIBAAADAtib25lTWF0cml4VwgEAAANC3NraW5XZWlnaHRzBQwEAAAOBWlucHV0DQEEDwhwb3NpdGlvbgULAQ4AEAZub3JtYWwFCwEOABEHd2VpZ2h0cwULAQ4AEgdpbmRleGVzCQQAAAABDgABAAATG3ByZXZpb3VzVHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAFA5hcHBseVNraW5Qb2ludA4GAAAVDGFwcGx5U2tpblZlYw4GAAAWBnZlcnRleA4GAAADAxQBFwFwBQsEAAAFCwUDCBgLdHJhbnNmb3JtZWQFCwQAAAYABgAGAQQGAQIXBQsCCQgFCwULCgINBQwAAAMFCwYBBAYBAhcFCwIKCAULBQsKAg0FDAQAAwULBQsGAQQGAQIXBQsCCwgFCwULCgINBQwIAAMFCwULAAsGBwoCDQUMDAADAQMAAAAAAAAAAAMCBQEGgAIYBQsGAQQGAQIXBQsCDAgFCwULCgINBQwMAAMFCwULAAAADQIYBQsAAAMVARkBdgULBAAABQsFAwgaC3RyYW5zZm9ybWVkBQsEAAAGAAYABgEEBgECGQULCQMzDgECCQgGBQsFCwoCDQUMAAADBQsGAQQGAQIZBQsJAzMOAQIKCAYFCwULCgINBQwEAAMFCwULBgEEBgECGQULCQMzDgECCwgGBQsFCwoCDQUMCAADBQsFCwALBgcKAg0FDAwAAwEDAAAAAAAAAAADAgUBBoACGgULBgEEBgECGQULCQMzDgECDAgGBQsFCwoCDQUMDAADBQsFCwAAAA0CGgULAAAAFgAABQsLAgYCBQcGBAIJCBECCA8IBAkDJg4BCgISCQQAAAAAAAMBCAgGBAIKCBECCA8IBAkDJg4BCgISCQQAAAAEAAMBCAgGBAILCBECCA8IBAkDJg4BCgISCQQAAAAIAAMBCAgGBAIMCBECCA8IBAkDJg4BCgISCQQAAAAMAAMBCAgGBAINBQwJAysOAgIRBQsBAwAAAAAAAAAAAwUMBQwLAgUCBgQKAg0FDAwAAwYDAQMAAAAAAADwPwMEBgAGAAoCEQULAAADCgIRBQsEAAMDCgIRBQsIAAMDAwMDAAAGBAITBQsJAhQOAQIBBQsFCwULAAAABgQCCQgRAgcPCAQJAyYOAQoCEgkEAAAAAAADAQgIBgQCCggRAgcPCAQJAyYOAQoCEgkEAAAABAADAQgIBgQCCwgRAgcPCAQJAyYOAQoCEgkEAAAACAADAQgIBgQCDAgRAgcPCAQJAyYOAQoCEgkEAAAADAADAQgIBgQCDQUMCQMrDgICEQULAQMAAAAAAAAAAAMFDAUMCwIFAgYECgINBQwMAAMGAwEDAAAAAAAA8D8DBAYABgAKAhEFCwAAAwoCEQULBAADAwoCEQULCAADAwMDAwAABgQCAgULCQIUDgECAQULBQsFCwYEAgMFCwkCFQ4BAhAFCwULBQsGBAIDBQsJAyAOAQIDBQsFCwULCwcCAgYCAgYEAhMFCwICBQsFCwAAAA";
h3d_shader_Skin._MODULE = "h3d.shader.Skin";
h3d_shader_SkinTangent.SRC = "HXSMFmgzZC5zaGFkZXIuU2tpblRhbmdlbnQTARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFEWZvdXJCb25lc0J5VmVydGV4AgIAAQAAAAAABgtjYWxjUHJldlBvcwICAAEAAAAAAAcNYm9uZXNNYXRyaXhlcw8IBAIAAQgIEXByZXZCb25lc01hdHJpeGVzDwgEAgABCAkLYm9uZU1hdHJpeFgIBAAACgtib25lTWF0cml4WQgEAAALC2JvbmVNYXRyaXhaCAQAAAwLYm9uZU1hdHJpeFcIBAAADQtza2luV2VpZ2h0cwUMBAAADgVpbnB1dA0BBQ8IcG9zaXRpb24FCwEOABAGbm9ybWFsBQsBDgARB3RhbmdlbnQFCwEOABIHd2VpZ2h0cwULAQ4AEwdpbmRleGVzCQQAAAABDgABAAAUEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAAFRtwcmV2aW91c1RyYW5zZm9ybWVkUG9zaXRpb24FCwQAABYOYXBwbHlTa2luUG9pbnQOBgAAFwxhcHBseVNraW5WZWMOBgAAGAZ2ZXJ0ZXgOBgAAAwMWARkBcAULBAAABQsFAwgaC3RyYW5zZm9ybWVkBQsEAAAGAAYABgEEBgECGQULAgkIBQsFCwoCDQUMAAADBQsGAQQGAQIZBQsCCggFCwULCgINBQwEAAMFCwULBgEEBgECGQULAgsIBQsFCwoCDQUMCAADBQsFCwALBgcKAg0FDAwAAwEDAAAAAAAAAAADAgUBBoACGgULBgEEBgECGQULAgwIBQsFCwoCDQUMDAADBQsFCwAAAA0CGgULAAADFwEbAXYFCwQAAAULBQMIHAt0cmFuc2Zvcm1lZAULBAAABgAGAAYBBAYBAhsFCwkDMw4BAgkIBgULBQsKAg0FDAAAAwULBgEEBgECGwULCQMzDgECCggGBQsFCwoCDQUMBAADBQsFCwYBBAYBAhsFCwkDMw4BAgsIBgULBQsKAg0FDAgAAwULBQsACwYHCgINBQwMAAMBAwAAAAAAAAAAAwIFAQaAAhwFCwYBBAYBAhsFCwkDMw4BAgwIBgULBQsKAg0FDAwAAwULBQsAAAANAhwFCwAAABgAAAUNCwIGAgUHBgQCCQgRAggPCAQJAyYOAQoCEwkEAAAAAAADAQgIBgQCCggRAggPCAQJAyYOAQoCEwkEAAAABAADAQgIBgQCCwgRAggPCAQJAyYOAQoCEwkEAAAACAADAQgIBgQCDAgRAggPCAQJAyYOAQoCEwkEAAAADAADAQgIBgQCDQUMCQMrDgICEgULAQMAAAAAAAAAAAMFDAUMCwIFAgYECgINBQwMAAMGAwEDAAAAAAAA8D8DBAYABgAKAhIFCwAAAwoCEgULBAADAwoCEgULCAADAwMDAwAABgQCFQULCQIWDgECAQULBQsFCwAAAAYEAgkIEQIHDwgECQMmDgEKAhMJBAAAAAAAAwEICAYEAgoIEQIHDwgECQMmDgEKAhMJBAAAAAQAAwEICAYEAgsIEQIHDwgECQMmDgEKAhMJBAAAAAgAAwEICAYEAgwIEQIHDwgECQMmDgEKAhMJBAAAAAwAAwEICAYEAg0FDAkDKw4CAhIFCwEDAAAAAAAAAAADBQwFDAsCBQIGBAoCDQUMDAADBgMBAwAAAAAAAPA/AwQGAAYACgISBQsAAAMKAhIFCwQAAwMKAhIFCwgAAwMDAwMAAAYEAgIFCwkCFg4BAgEFCwULBQsGBAIDBQsJAhcOAQIQBQsFCwULBgQKAhQFDJIABQsJAhcOAQoCEQULkgAFCwULBQsGBAIDBQsJAyAOAQIDBQsFCwULBgQKAhQFDJIABQsJAyAOAQoCFAUMkgAFCwULBQsLBwICBgICBgQCFQULAgIFCwULAAAA";
h3d_shader_SkinTangent._MODULE = "h3d.shader.SkinTangent";
h3d_shader_SpecularTexture.SRC = "HXSMGmgzZC5zaGFkZXIuU3BlY3VsYXJUZXh0dXJlBAEHdGV4dHVyZQoCAgAAAgxjYWxjdWxhdGVkVVYFCgQAAAMJc3BlY0NvbG9yBQsEAAAECGZyYWdtZW50DgYAAAEBBAAABQEGgQIDBQsKCQMiDgICAQoCAgIFCgUMkgAFCwULAA";
h3d_shader_SpecularTexture._MODULE = "h3d.shader.SpecularTexture";
h3d_shader_Texture.SRC = "HXSMEmgzZC5zaGFkZXIuVGV4dHVyZQsBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwhhZGRpdGl2ZQICAAEAAAAAAAQJa2lsbEFscGhhAgIAAQAAAAAABQ1zcGVjdWxhckFscGhhAgIAAQAAAAAABhJraWxsQWxwaGFUaHJlc2hvbGQDAgABBwAAAAAAAAAAAAAAAAAA8D8HB3RleHR1cmUKAgIAAAgMY2FsY3VsYXRlZFVWBQoEAAAJCnBpeGVsQ29sb3IFDAQAAAoJc3BlY0NvbG9yBQsEAAALBnZlcnRleA4GAAAMCGZyYWdtZW50DgYAAAIACwAABQEGBAIIBQoCAgUKBQoAAQwAAAUECA0BYwUMBAAACQMiDgICBwoCAggFCgUMAAsGDgIEAgYJBgMKAg0FDAwAAwIGAwMBAwAAAAAAAAAAAwICDAAAAAsCAwIGgAIJBQwCDQUMBQwGgQIJBQwCDQUMBQwACwIFAgaBAgoFCwoCDQUM/gAFCwULAAAA";
h3d_shader_Texture._MODULE = "h3d.shader.Texture";
h3d_shader_UVDelta.SRC = "HXSMEmgzZC5zaGFkZXIuVVZEZWx0YQQBB3V2RGVsdGEFCgIAAAIHdXZTY2FsZQUKAgAAAwxjYWxjdWxhdGVkVVYFCgQAAAQGdmVydGV4DgYAAAEABAAABQEGBAIDBQoGAAYBAgMFCgICBQoFCgIBBQoFCgUKAA";
h3d_shader_UVDelta._MODULE = "h3d.shader.UVDelta";
h3d_shader_VertexColorAlpha.SRC = "HXSMG2gzZC5zaGFkZXIuVmVydGV4Q29sb3JBbHBoYQQBBWlucHV0DQEBAgVjb2xvcgUMAQEAAQAAAwpwaXhlbENvbG9yBQwEAAAECGFkZGl0aXZlAgIAAQAAAAAABQhmcmFnbWVudA4GAAABAQUAAAUBCwIEAgaAAgMFDAICBQwFDAaBAgMFDAICBQwFDAAA";
h3d_shader_VertexColorAlpha._MODULE = "h3d.shader.VertexColorAlpha";
h3d_shader_VolumeDecal.SRC = "HXSMFmgzZC5zaGFkZXIuVm9sdW1lRGVjYWwdAQZjYW1lcmENAQwCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAIEHByZXZpb3VzVmlld1Byb2oHAAEACQ9pbnZlcnNlVmlld1Byb2oHAAEACgV6TmVhcgMAAQALBHpGYXIDAAEADANkaXIFCwMBAA0Naml0dGVyT2Zmc2V0cwUMAAEAAAAADgZnbG9iYWwNAgUPBHRpbWUDAA4AEAlwaXhlbFNpemUFCgAOABEJbW9kZWxWaWV3BwAOAQMSEG1vZGVsVmlld0ludmVyc2UHAA4BAxMRcHJldmlvdXNNb2RlbFZpZXcHAA4BAwAAABQFaW5wdXQNAwIVCHBvc2l0aW9uBQsBFAAWBm5vcm1hbAULARQAAQAAFwZvdXRwdXQNBAYYCHBvc2l0aW9uBQwEFwAZBWNvbG9yBQwEFwAaBWRlcHRoAwQXABsGbm9ybWFsBQsEFwAcCXdvcmxkRGlzdAMEFwAdCHZlbG9jaXR5BQoEFwAEAAAeEHJlbGF0aXZlUG9zaXRpb24FCwQAAB8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAIBtwcmV2aW91c1RyYW5zZm9ybWVkUG9zaXRpb24FCwQAACEYcGl4ZWxUcmFuc2Zvcm1lZFBvc2l0aW9uBQsEAAAiEXRyYW5zZm9ybWVkTm9ybWFsBQsEAAAjEXByb2plY3RlZFBvc2l0aW9uBQwEAAAkGXByZXZpb3VzUHJvamVjdGVkUG9zaXRpb24FDAQAACUKcGl4ZWxDb2xvcgUMBAAAJgVkZXB0aAMEAAAnC25kY1Bvc2l0aW9uBQoEAAAoE3ByZXZpb3VzTmRjUG9zaXRpb24FCgQAACkIc2NyZWVuVVYFCgQAACoJc3BlY1Bvd2VyAwQAACsJc3BlY0NvbG9yBQsEAAAsCXdvcmxkRGlzdAMEAAAtDXBpeGVsVmVsb2NpdHkFCgQAAC4IZGVwdGhNYXARAQAAAC8Fc2NhbGUFCgIAADAGbm9ybWFsBQsCAAAxB3RhbmdlbnQFCwIAADIKaXNDZW50ZXJlZAICAAEAAAAAADMMY2FsY3VsYXRlZFVWBQoEAAA0EnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAANQ5fX2luaXRfX3ZlcnRleA4GAAA2CGZyYWdtZW50DgYAAAICNQAABQIGBAIiBQsJAyAOAQQGAQIwBQsJAzMOAQIRBwYFCwULBQsFCwYEAjQFDAkDKw4CCQMgDgEEBgECMQULCQMzDgECEQcGBQsFCwULAQMAAAAAAADwPwMFDAUMAAE2AAAFCQg3Bm1hdHJpeAcEAAAGAQIJBwISBwcACDgJc2NyZWVuUG9zBQoEAAAGAgoCIwUMEQAFCgoCIwUMDAADBQoACDkDcnV2BQwEAAAJAysOAwI4BQoJA0AOAgIuEQEJAzsOAQI4BQoFCgMBAwAAAAAAAPA/AwUMAAg6BHdwb3MFDAQAAAYBAjkFDAI3BwUMAAg7BHBwb3MFDAQAAAYBAjkFDAIJBwUMAAYEAiEFCwYCCgI7BQySAAULCgI7BQwMAAMFCwULBgQCMwUKBgECLwUKBAYCCgI6BQwRAAUKCgI6BQwMAAMFCgUKBQoFCgsCMgIGgAIzBQoBAwAAAAAAAOA/AwUKAAALBgkJAxUOAgkDFQ4CCgIzBQoAAAMKAjMFCgQAAwMJAxUOAgYDAQMAAAAAAADwPwMKAjMFCgAAAwMGAwEDAAAAAAAA8D8DCgIzBQoEAAMDAwMBAwAAAAAAAAAAAwIMAAAAAA";
h3d_shader_VolumeDecal._MODULE = "h3d.shader.VolumeDecal";
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe_Int32._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hxd_Precision.SIZES = [4,2,1,1];
hxd_BufferFormat._UID = 0;
hxd_BufferFormat.ALL_FORMATS = new haxe_ds_StringMap();
hxd_MultiFormat._UID = 0;
hxd_Charset.complementChars = (function($this) {
	var $r;
	var str = "ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻。，";
	var _g = new haxe_ds_IntMap();
	{
		var _g1 = 0;
		var _g2 = str.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.h[HxOverrides.cca(str,i)] = true;
		}
	}
	$r = _g;
	return $r;
}(this));
hxd_Key.initDone = false;
hxd_Key.keyPressed = [];
hxd_Key.ALLOW_KEY_REPEAT = false;
hxd_Timer.wantedFPS = 60.;
hxd_Timer.maxDeltaTime = 0.5;
hxd_Timer.smoothFactor = 0.95;
hxd_Timer.lastTimeStamp = HxOverrides.now() / 1000;
hxd_Timer.elapsedTime = 0.;
hxd_Timer.frameCount = 0;
hxd_Timer.dt = 1 / hxd_Timer.wantedFPS;
hxd_Timer.currentDT = 1 / hxd_Timer.wantedFPS;
hxd_System.setCursor = hxd_System.setNativeCursor;
hxd_System.loopInit = false;
hxd_System.fpsLimit = -1;
hxd_fs_EmbedFileSystem.invalidChars = new EReg("[^A-Za-z0-9_]","g");
hxd_fs_SourceLoader.RELOAD_LFS = [];
hxd_impl_AllocPos.ENABLED = false;
hxd_impl_AllocPos.ENGINE_PACKAGES = ["h3d","hxd","h2d","haxe","sys","hrt"];
hxd_res_Image.DEFAULT_FILTER = h3d_mat_Filter.Linear;
hxd_res_Image.MIPMAP_MAX_SIZE = 0;
hxd_res_Image.ENABLE_AUTO_WATCH = true;
hxd_res_Image.BLACK_1x1 = hxd_Pixels.alloc(1,1,hxd_PixelFormat.RGBA);
hxd_res_Image.LOG_TEXTURE_LOAD = false;
hxsl_Tools.UID = 0;
hxsl_Tools.SWIZ = hxsl_Component.__empty_constructs__.slice();
hxsl_Tools.MAX_CHANNELS_BITS = 3;
hxsl_Tools.MAX_PARTIAL_MAPPINGS_BITS = 7;
hxsl_BatchShader.SRC = "HXSMEGh4c2wuQmF0Y2hTaGFkZXIFAQ9CYXRjaF9IYXNPZmZzZXQCAgABAAAAAAACEEJhdGNoX1VzZVN0b3JhZ2UCAgABAAAAAAADC0JhdGNoX0NvdW50AQIAAQAAEAAABAxCYXRjaF9CdWZmZXIQBQwDAgAABRNCYXRjaF9TdG9yYWdlQnVmZmVyEIIFDAAAAgAAAA";
hxsl_BatchShader._MODULE = "hxsl.BatchShader";
hxsl_Checker.vec2 = hxsl_Type.TVec(2,hxsl_VecType.VFloat);
hxsl_Checker.vec3 = hxsl_Type.TVec(3,hxsl_VecType.VFloat);
hxsl_Checker.vec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
hxsl_Checker.ivec2 = hxsl_Type.TVec(2,hxsl_VecType.VInt);
hxsl_Checker.ivec3 = hxsl_Type.TVec(3,hxsl_VecType.VInt);
hxsl_Checker.ivec4 = hxsl_Type.TVec(4,hxsl_VecType.VInt);
hxsl_Debug.VAR_IDS = false;
hxsl_Debug.TRACE = false;
hxsl_Flatten.SWIZ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_GlslOut.KWD_LIST = "attribute const uniform varying buffer shared\r\n\tcoherent volatile restrict readonly writeonly\r\n\tatomic_uint\r\n\tlayout\r\n\tcentroid flat smooth noperspective\r\n\tpatch sample\r\n\tbreak continue do for while switch case default\r\n\tif else\r\n\tsubroutine\r\n\tin out inout\r\n\tfloat double int void bool true false\r\n\tinvariant precise\r\n\tdiscard return\r\n\tmat2 mat3 mat4 dmat2 dmat3 dmat4\r\n\tmat2x2 mat2x3 mat2x4 dmat2x2 dmat2x3 dmat2x4\r\n\tmat3x2 mat3x3 mat3x4 dmat3x2 dmat3x3 dmat3x4\r\n\tmat4x2 mat4x3 mat4x4 dmat4x2 dmat4x3 dmat4x4\r\n\tvec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 dvec2 dvec3 dvec4\r\n\tuint uvec2 uvec3 uvec4\r\n\tlowp mediump highp precision\r\n\timage1D iimage1D uimage1D\r\n\timage2D iimage2D uimage2D\r\n\timage3D iimage3D uimage3D\r\n\tstruct\r\n\tcommon partition active\r\n\tasm\r\n\tclass union enum typedef template this packed\r\n\tresource\r\n\tgoto\r\n\tinline noinline public static extern external interface\r\n\tlong short half fixed unsigned superp\r\n\tinput output\r\n\thvec2 hvec3 hvec4 fvec2 fvec3 fvec4\r\n\tsampler3DRect\r\n\tfilter\r\n\tsizeof cast\r\n\tnamespace using\r\n\trow_major";
hxsl_GlslOut.KWDS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = 0;
		var _g2 = new EReg("[ \t\r\n]+","g").split(hxsl_GlslOut.KWD_LIST);
		while(_g1 < _g2.length) {
			var k = _g2[_g1];
			++_g1;
			_g.h[k] = true;
		}
	}
	$r = _g;
	return $r;
}(this));
hxsl_GlslOut.GLOBALS = (function($this) {
	var $r;
	var gl = [];
	{
		var _g = 0;
		var _g1 = hxsl_TGlobal.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			var n = "" + Std.string(g);
			n = n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
			gl[g._hx_index] = n;
		}
	}
	gl[hxsl_TGlobal.ToInt._hx_index] = "int";
	gl[hxsl_TGlobal.ToFloat._hx_index] = "float";
	gl[hxsl_TGlobal.ToBool._hx_index] = "bool";
	gl[hxsl_TGlobal.LReflect._hx_index] = "reflect";
	gl[hxsl_TGlobal.Mat3x4._hx_index] = "_mat3x4";
	gl[hxsl_TGlobal.VertexID._hx_index] = "gl_VertexID";
	gl[hxsl_TGlobal.InstanceID._hx_index] = "gl_InstanceID";
	gl[hxsl_TGlobal.IVec2._hx_index] = "ivec2";
	gl[hxsl_TGlobal.IVec3._hx_index] = "ivec3";
	gl[hxsl_TGlobal.IVec4._hx_index] = "ivec4";
	gl[hxsl_TGlobal.BVec2._hx_index] = "bvec2";
	gl[hxsl_TGlobal.BVec3._hx_index] = "bvec3";
	gl[hxsl_TGlobal.BVec4._hx_index] = "bvec4";
	gl[hxsl_TGlobal.FragCoord._hx_index] = "gl_FragCoord";
	gl[hxsl_TGlobal.FrontFacing._hx_index] = "gl_FrontFacing";
	gl[hxsl_TGlobal.FloatBitsToUint._hx_index] = "_floatBitsToUint";
	gl[hxsl_TGlobal.UintBitsToFloat._hx_index] = "_uintBitsToFloat";
	gl[hxsl_TGlobal.ComputeVar_LocalInvocation._hx_index] = "ivec3(gl_LocalInvocationID)";
	gl[hxsl_TGlobal.ComputeVar_GlobalInvocation._hx_index] = "ivec3(gl_GlobalInvocationID)";
	gl[hxsl_TGlobal.ComputeVar_LocalInvocationIndex._hx_index] = "int(gl_LocalInvocationIndex)";
	gl[hxsl_TGlobal.ComputeVar_WorkGroup._hx_index] = "ivec3(gl_WorkGroupID)";
	{
		var _g = 0;
		while(_g < gl.length) {
			var g = gl[_g];
			++_g;
			hxsl_GlslOut.KWDS.h[g] = true;
		}
	}
	$r = gl;
	return $r;
}(this));
hxsl_GlslOut.MAT34 = "struct _mat3x4 { vec4 a; vec4 b; vec4 c; };";
hxsl__$Linker_ShaderInfos.UID = 0;
hxsl_Printer.SWIZ = ["x","y","z","w"];
hxsl_RuntimeShader.UID = 0;
hxsl_Serializer.TVECS = new haxe_ds_IntMap();
hxsl_Serializer.TDIMS = hxsl_TexDimension.__empty_constructs__.slice();
hxsl_Serializer.BOPS = (function($this) {
	var $r;
	var ops = haxe_macro_Binop.__empty_constructs__.slice();
	ops.splice(haxe_macro_Binop.OpAssignOp(null)._hx_index,0,null);
	$r = ops;
	return $r;
}(this));
hxsl_Serializer.UNOPS = haxe_macro_Unop.__empty_constructs__.slice();
hxsl_Serializer.TGLOBALS = hxsl_TGlobal.__empty_constructs__.slice();
hxsl_Serializer.TSWIZ = new haxe_ds_IntMap();
hxsl_Serializer.REGS = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_Serializer.VKINDS = hxsl_VarKind.__empty_constructs__.slice();
hxsl_Serializer.PRECS = hxsl_Prec.__empty_constructs__.slice();
hxsl_Serializer.FKIND = hxsl_FunctionKind.__empty_constructs__.slice();
hxsl_Serializer.SIGN = 9204765;
hxsl_ShaderList.MAX_LIST_SIZE = 0;
hxsl_ShaderList.ALLOW_DUPLICATES = true;
hxsl_ShaderInstance.UID = 0;
hxsl_SharedShader.UNROLL_LOOPS = false;
hxsl_SharedShader.SHADER_RESOLVE = new haxe_ds_StringMap();
{
	Main.main();
	haxe_EntryPoint.run();
}
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=playground.js.map